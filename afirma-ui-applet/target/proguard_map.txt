com.aowagie.text.Anchor -> com.aowagie.text.a:
    java.lang.String name -> c
    java.lang.String reference -> d
    boolean process(com.aowagie.text.ElementListener) -> a
    java.util.ArrayList getChunks() -> a
    int type() -> b
    java.lang.String getReference() -> c
com.aowagie.text.Annotation -> com.aowagie.text.b:
    int annotationtype -> a
    java.util.HashMap annotationAttributes -> b
    float llx -> c
    float lly -> d
    float urx -> e
    float ury -> f
    int type() -> b
    boolean process(com.aowagie.text.ElementListener) -> a
    java.util.ArrayList getChunks() -> a
    void setDimensions(float,float,float,float) -> a
    float llx() -> c
    float lly() -> d
    float urx() -> e
    float ury() -> f
    float llx(float) -> a
    float lly(float) -> b
    float urx(float) -> c
    float ury(float) -> d
    int annotationType() -> g
    java.lang.String title() -> h
    java.lang.String content() -> i
    java.util.HashMap attributes() -> j
    boolean isContent() -> k
    boolean isNestable() -> l
com.aowagie.text.BadElementException -> com.aowagie.text.c:
com.aowagie.text.Cell -> com.aowagie.text.d:
    java.util.ArrayList arrayList -> a
    int horizontalAlignment -> b
    int verticalAlignment -> c
    float width -> d
    boolean percentage -> e
    int colspan -> f
    int rowspan -> g
    float leading -> h
    int maxLines -> i
    java.lang.String showTruncation -> j
    boolean useAscender -> k
    boolean useDescender -> l
    boolean useBorderPadding -> m
    boolean groupChange -> n
    boolean process(com.aowagie.text.ElementListener) -> a
    int type() -> b
    java.util.ArrayList getChunks() -> a
    int getHorizontalAlignment() -> c
    void setHorizontalAlignment(int) -> a
    int getVerticalAlignment() -> d
    void setVerticalAlignment(int) -> b
    float getWidth() -> e
    void setColspan(int) -> c
    int getColspan() -> f
    void setRowspan(int) -> d
    int getRowspan() -> g
    float getLeading() -> h
    int getMaxLines() -> i
    java.lang.String getShowTruncation() -> j
    boolean isUseAscender() -> m
    boolean isUseDescender() -> n
    boolean isUseBorderPadding() -> o
    boolean getGroupChange() -> p
    int size() -> y
    java.util.Iterator getElements() -> q
    void fill() -> r
    boolean isTable() -> s
    com.aowagie.text.pdf.PdfPCell createPdfPCell() -> t
    float getTop() -> u
    float getBottom() -> v
    float getLeft() -> w
    float getRight() -> x
com.aowagie.text.Chapter -> com.aowagie.text.e:
    int type() -> b
    boolean isNestable() -> l
com.aowagie.text.ChapterAutoNumber -> com.aowagie.text.f:
    boolean numberSet -> o
    int setAutomaticNumber(int) -> a
com.aowagie.text.Chunk -> com.aowagie.text.g:
    com.aowagie.text.Chunk NEWLINE -> a
    com.aowagie.text.Chunk NEXTPAGE -> b
    java.lang.StringBuffer content -> c
    com.aowagie.text.Font font -> d
    java.util.HashMap attributes -> e
    boolean process(com.aowagie.text.ElementListener) -> a
    int type() -> b
    java.util.ArrayList getChunks() -> a
    java.lang.StringBuffer append(java.lang.String) -> a
    void setFont(com.aowagie.text.Font) -> a
    com.aowagie.text.Font getFont() -> c
    java.lang.String getContent() -> d
    java.lang.String toString() -> toString
    boolean isEmpty() -> e
    boolean hasAttributes() -> f
    java.util.HashMap getAttributes() -> g
    void setAttributes(java.util.HashMap) -> a
    com.aowagie.text.Chunk setAttribute(java.lang.String,java.lang.Object) -> a
    com.aowagie.text.Chunk setHyphenation(com.aowagie.text.pdf.HyphenationEvent) -> a
    com.aowagie.text.Chunk setLocalGoto(java.lang.String) -> b
    com.aowagie.text.Chunk setLocalDestination(java.lang.String) -> c
    com.aowagie.text.Chunk setAnchor(java.lang.String) -> d
    com.aowagie.text.Chunk setNewPage() -> h
    boolean isContent() -> k
    boolean isNestable() -> l
    com.aowagie.text.pdf.HyphenationEvent getHyphenation() -> i
com.aowagie.text.DocListener -> com.aowagie.text.h:
    void open() -> open
    void close() -> close
    boolean newPage() -> newPage
    boolean setPageSize(com.aowagie.text.Rectangle) -> setPageSize
    boolean setMargins(float,float,float,float) -> setMargins
    boolean setMarginMirroring(boolean) -> setMarginMirroring
    boolean setMarginMirroringTopBottom(boolean) -> setMarginMirroringTopBottom
    void setPageCount(int) -> setPageCount
    void resetPageCount() -> resetPageCount
    void setHeader(com.aowagie.text.HeaderFooter) -> setHeader
    void resetHeader() -> resetHeader
    void setFooter(com.aowagie.text.HeaderFooter) -> setFooter
    void resetFooter() -> resetFooter
com.aowagie.text.DocWriter -> com.aowagie.text.i:
    com.aowagie.text.pdf.OutputStreamCounter os -> a
    boolean open -> b
    boolean pause -> c
    boolean closeStream -> d
    boolean add(com.aowagie.text.Element) -> add
    void open() -> open
    boolean setPageSize(com.aowagie.text.Rectangle) -> setPageSize
    boolean setMargins(float,float,float,float) -> setMargins
    boolean newPage() -> newPage
    void setHeader(com.aowagie.text.HeaderFooter) -> setHeader
    void resetHeader() -> resetHeader
    void setFooter(com.aowagie.text.HeaderFooter) -> setFooter
    void resetFooter() -> resetFooter
    void resetPageCount() -> resetPageCount
    void setPageCount(int) -> setPageCount
    void close() -> close
    byte[] getISOBytes(java.lang.String) -> a
    boolean isPaused() -> a
    boolean isCloseStream() -> b
    boolean setMarginMirroring(boolean) -> setMarginMirroring
    boolean setMarginMirroringTopBottom(boolean) -> setMarginMirroringTopBottom
com.aowagie.text.Document -> com.aowagie.text.Document:
    boolean compress -> a
    boolean plainRandomAccess -> b
    float wmfFontCorrection -> c
    java.util.ArrayList listeners -> p
    boolean open -> d
    boolean close -> e
    com.aowagie.text.Rectangle pageSize -> f
    float marginLeft -> g
    float marginRight -> h
    float marginTop -> i
    float marginBottom -> j
    boolean marginMirroring -> k
    boolean marginMirroringTopBottom -> l
    java.lang.String javaScript_onLoad -> q
    java.lang.String javaScript_onUnLoad -> r
    java.lang.String htmlStyleClass -> s
    int pageN -> m
    com.aowagie.text.HeaderFooter header -> n
    com.aowagie.text.HeaderFooter footer -> o
    int chapternumber -> t
    void addDocListener(com.aowagie.text.DocListener) -> addDocListener
    void removeDocListener(com.aowagie.text.DocListener) -> removeDocListener
    boolean add(com.aowagie.text.Element) -> add
    void open() -> open
    boolean setPageSize(com.aowagie.text.Rectangle) -> setPageSize
    boolean setMargins(float,float,float,float) -> setMargins
    boolean newPage() -> newPage
    void setHeader(com.aowagie.text.HeaderFooter) -> setHeader
    void resetHeader() -> resetHeader
    void setFooter(com.aowagie.text.HeaderFooter) -> setFooter
    void resetFooter() -> resetFooter
    void resetPageCount() -> resetPageCount
    void setPageCount(int) -> setPageCount
    int getPageNumber() -> getPageNumber
    void close() -> close
    boolean addHeader(java.lang.String,java.lang.String) -> addHeader
    boolean addTitle(java.lang.String) -> addTitle
    boolean addSubject(java.lang.String) -> addSubject
    boolean addKeywords(java.lang.String) -> addKeywords
    boolean addAuthor(java.lang.String) -> addAuthor
    boolean addCreator(java.lang.String) -> addCreator
    boolean addProducer() -> addProducer
    boolean addCreationDate() -> addCreationDate
    boolean addCreationDate(java.util.Calendar) -> addCreationDate
    float leftMargin() -> leftMargin
    float rightMargin() -> rightMargin
    float topMargin() -> topMargin
    float bottomMargin() -> bottomMargin
    float left() -> left
    float right() -> right
    float top() -> top
    float bottom() -> bottom
    float left(float) -> left
    float right(float) -> right
    float top(float) -> top
    float bottom(float) -> bottom
    com.aowagie.text.Rectangle getPageSize() -> getPageSize
    boolean isOpen() -> isOpen
    java.lang.String getProduct() -> getProduct
    java.lang.String getRelease() -> getRelease
    java.lang.String getVersion() -> getVersion
    void setJavaScript_onLoad(java.lang.String) -> setJavaScript_onLoad
    java.lang.String getJavaScript_onLoad() -> getJavaScript_onLoad
    void setJavaScript_onUnLoad(java.lang.String) -> setJavaScript_onUnLoad
    java.lang.String getJavaScript_onUnLoad() -> getJavaScript_onUnLoad
    void setHtmlStyleClass(java.lang.String) -> setHtmlStyleClass
    java.lang.String getHtmlStyleClass() -> getHtmlStyleClass
    boolean setMarginMirroring(boolean) -> setMarginMirroring
    boolean setMarginMirroringTopBottom(boolean) -> setMarginMirroringTopBottom
    boolean isMarginMirroring() -> isMarginMirroring
com.aowagie.text.DocumentException -> com.aowagie.text.j:
com.aowagie.text.Element -> com.aowagie.text.k:
    boolean process(com.aowagie.text.ElementListener) -> a
    int type() -> b
    boolean isContent() -> k
    boolean isNestable() -> l
    java.util.ArrayList getChunks() -> a
com.aowagie.text.ElementListener -> com.aowagie.text.l:
    boolean add(com.aowagie.text.Element) -> add
com.aowagie.text.ExceptionConverter -> com.aowagie.text.m:
    java.lang.Exception ex -> a
    java.lang.String prefix -> b
    java.lang.RuntimeException convertException(java.lang.Exception) -> a
    java.lang.String getMessage() -> getMessage
    java.lang.String getLocalizedMessage() -> getLocalizedMessage
    java.lang.String toString() -> toString
    void printStackTrace() -> printStackTrace
    void printStackTrace(java.io.PrintStream) -> printStackTrace
    void printStackTrace(java.io.PrintWriter) -> printStackTrace
    java.lang.Throwable fillInStackTrace() -> fillInStackTrace
com.aowagie.text.Font -> com.aowagie.text.n:
    int family -> a
    float size -> b
    int style -> c
    java.awt.Color color -> d
    com.aowagie.text.pdf.BaseFont baseFont -> e
    int compareTo(java.lang.Object) -> compareTo
    int getFamily() -> a
    java.lang.String getFamilyname() -> b
    float getSize() -> c
    float getCalculatedSize() -> d
    float getCalculatedLeading(float) -> a
    void setSize(float) -> b
    int getStyle() -> e
    boolean isUnderlined() -> f
    boolean isStrikethru() -> g
    void setStyle(int) -> a
    java.awt.Color getColor() -> h
    com.aowagie.text.pdf.BaseFont getBaseFont() -> i
    com.aowagie.text.pdf.BaseFont getCalculatedBaseFont(boolean) -> a
    boolean isStandardFont() -> j
    com.aowagie.text.Font difference(com.aowagie.text.Font) -> a
com.aowagie.text.FontFactory -> com.aowagie.text.o:
    com.aowagie.text.FontFactoryImp fontImp -> a
    java.lang.String defaultEncoding -> b
    boolean defaultEmbedding -> c
    com.aowagie.text.Font getFont(java.lang.String,java.lang.String,boolean,float,int,java.awt.Color) -> a
    com.aowagie.text.Font getFont(java.lang.String,java.lang.String,boolean,float,int) -> a
    com.aowagie.text.Font getFont(java.lang.String,float,int,java.awt.Color) -> a
com.aowagie.text.FontFactoryImp -> com.aowagie.text.p:
    java.util.Properties trueTypeFonts -> c
    java.lang.String[] TTFamilyOrder -> d
    java.util.Hashtable fontFamilies -> e
    java.lang.String defaultEncoding -> a
    boolean defaultEmbedding -> b
    com.aowagie.text.Font getFont(java.lang.String,java.lang.String,boolean,float,int,java.awt.Color) -> a
    com.aowagie.text.Font getFont(java.lang.String,java.lang.String,boolean,float,int,java.awt.Color,boolean) -> a
com.aowagie.text.Header -> com.aowagie.text.q:
    java.lang.StringBuffer name -> a
    java.lang.String getName() -> c
com.aowagie.text.HeaderFooter -> com.aowagie.text.r:
    boolean numbered -> a
    com.aowagie.text.Phrase before -> b
    int pageN -> c
    com.aowagie.text.Phrase after -> d
    int alignment -> e
    void setPageNumber(int) -> a
    com.aowagie.text.Paragraph paragraph() -> c
com.aowagie.text.Image -> com.aowagie.text.s:
    int type -> a
    java.net.URL url -> b
    byte[] rawData -> c
    int bpc -> d
    com.aowagie.text.pdf.PdfTemplate[] template -> v
    int alignment -> w
    java.lang.String alt -> x
    float absoluteX -> y
    float absoluteY -> z
    float plainWidth -> e
    float plainHeight -> f
    float scaledWidth -> g
    float scaledHeight -> h
    int compressionLevel -> A
    java.lang.Long mySerialId -> B
    com.aowagie.text.pdf.PdfIndirectReference directReference -> C
    long serialId -> D
    float rotationRadians -> E
    float initialRotation -> F
    float indentationLeft -> G
    float indentationRight -> H
    float spacingBefore -> I
    float spacingAfter -> J
    float widthPercentage -> K
    com.aowagie.text.Annotation annotation -> L
    com.aowagie.text.pdf.PdfOCG layer -> M
    boolean interpolation -> N
    int originalType -> i
    byte[] originalData -> j
    boolean deflated -> O
    int dpiX -> k
    int dpiY -> l
    float XYRatio -> P
    int colorspace -> m
    boolean invert -> n
    java.awt.color.ICC_Profile profile -> Q
    com.aowagie.text.pdf.PdfDictionary additional -> R
    boolean mask -> S
    com.aowagie.text.Image imageMask -> T
    boolean smask -> U
    int[] transparency -> V
    com.aowagie.text.pdf.PdfIndirectReference getDirectReference() -> c
    com.aowagie.text.Image getInstance(com.aowagie.text.Image) -> a
    int type() -> b
    boolean isNestable() -> l
    boolean isImgRaw() -> d
    boolean isImgTemplate() -> f
    java.net.URL getUrl() -> g
    byte[] getRawData() -> h
    int getBpc() -> i
    com.aowagie.text.pdf.PdfTemplate getTemplateData() -> j
    void setTemplateData(com.aowagie.text.pdf.PdfTemplate) -> a
    int getAlignment() -> m
    void setAbsolutePosition(float,float) -> a
    boolean hasAbsoluteX() -> n
    float getAbsoluteX() -> o
    boolean hasAbsoluteY() -> p
    float getAbsoluteY() -> q
    float getScaledWidth() -> r
    float getScaledHeight() -> s
    void scaleAbsolute(float,float) -> b
    void scalePercent(float) -> a
    void scalePercent(float,float) -> e
    void scaleToFit(float,float) -> c
    float[] matrix() -> t
    java.lang.Long getSerialId() -> T
    java.lang.Long getMySerialId() -> y
    float getImageRotation() -> z
    void setRotation(float) -> b
    float getIndentationLeft() -> A
    float getIndentationRight() -> B
    float getSpacingBefore() -> C
    float getSpacingAfter() -> D
    float getWidthPercentage() -> E
    void setWidthPercentage(float) -> c
    void setAnnotation(com.aowagie.text.Annotation) -> a
    com.aowagie.text.Annotation getAnnotation() -> F
    com.aowagie.text.pdf.PdfOCG getLayer() -> G
    boolean isInterpolation() -> H
    void setOriginalType(int) -> a
    boolean isDeflated() -> I
    void setDpi(int,int) -> a
    int getColorspace() -> J
    boolean isInverted() -> K
    void tagICC(java.awt.color.ICC_Profile) -> a
    boolean hasICCProfile() -> L
    java.awt.color.ICC_Profile getICCProfile() -> M
    com.aowagie.text.pdf.PdfDictionary getAdditional() -> N
    void setAdditional(com.aowagie.text.pdf.PdfDictionary) -> a
    boolean isMask() -> O
    com.aowagie.text.Image getImageMask() -> P
    boolean isSmask() -> Q
    int[] getTransparency() -> R
    int getCompressionLevel() -> S
com.aowagie.text.ImgJBIG2 -> com.aowagie.text.t:
    byte[] global -> v
    byte[] getGlobalBytes() -> T
com.aowagie.text.ImgRaw -> com.aowagie.text.u:
com.aowagie.text.ImgWMF -> com.aowagie.text.v:
    void readWMF(com.aowagie.text.pdf.PdfTemplate) -> b
com.aowagie.text.Jpeg -> com.aowagie.text.w:
    int[] VALID_MARKERS -> v
    int[] UNSUPPORTED_MARKERS -> w
    int[] NOPARAM_MARKERS -> x
    byte[] JFIF_ID -> y
    byte[][] icc -> z
    int getShort(java.io.InputStream) -> a
    int marker(int) -> b
    void processParameters() -> T
com.aowagie.text.LargeElement -> com.aowagie.text.x:
    boolean isComplete() -> c
    void flushContent() -> d
com.aowagie.text.List -> com.aowagie.text.y:
    java.util.ArrayList list -> a
    boolean numbered -> b
    boolean lettered -> c
    boolean lowercase -> d
    boolean autoindent -> e
    boolean alignindent -> f
    int first -> g
    com.aowagie.text.Chunk symbol -> h
    java.lang.String preSymbol -> i
    java.lang.String postSymbol -> j
    float indentationLeft -> k
    float indentationRight -> l
    float symbolIndent -> m
    boolean process(com.aowagie.text.ElementListener) -> a
    int type() -> b
    java.util.ArrayList getChunks() -> a
    void normalizeIndentation() -> c
    void setIndentationLeft(float) -> a
    void setIndentationRight(float) -> b
    java.util.ArrayList getItems() -> d
    boolean isAlignindent() -> e
    float getIndentationLeft() -> f
    float getIndentationRight() -> g
    boolean isContent() -> k
    boolean isNestable() -> l
com.aowagie.text.ListItem -> com.aowagie.text.z:
    com.aowagie.text.Chunk symbol -> c
    int type() -> b
    com.aowagie.text.Chunk getListSymbol() -> c
com.aowagie.text.MarkedObject -> com.aowagie.text.A:
    com.aowagie.text.Element element -> a
    java.util.Properties markupAttributes -> b
    java.util.ArrayList getChunks() -> a
    boolean process(com.aowagie.text.ElementListener) -> a
    int type() -> b
    boolean isContent() -> k
    boolean isNestable() -> l
com.aowagie.text.MarkedSection -> com.aowagie.text.B:
    com.aowagie.text.MarkedObject title -> c
    boolean process(com.aowagie.text.ElementListener) -> a
    com.aowagie.text.MarkedObject getTitle() -> c
com.aowagie.text.Meta -> com.aowagie.text.C:
    int type -> a
    java.lang.StringBuffer content -> b
    boolean process(com.aowagie.text.ElementListener) -> a
    int type() -> b
    java.util.ArrayList getChunks() -> a
    boolean isContent() -> k
    boolean isNestable() -> l
    java.lang.String getContent() -> d
    java.lang.String getName() -> c
com.aowagie.text.PageSize -> com.aowagie.text.D:
    com.aowagie.text.Rectangle LETTER -> a
    com.aowagie.text.Rectangle A4 -> b
com.aowagie.text.Paragraph -> com.aowagie.text.E:
    int alignment -> c
    float multipliedLeading -> d
    float indentationLeft -> e
    float indentationRight -> f
    float firstLineIndent -> g
    float spacingBefore -> h
    float spacingAfter -> i
    float extraParagraphSpace -> j
    boolean keeptogether -> k
    int type() -> b
    boolean add(java.lang.Object) -> add
    void setAlignment(int) -> a
    void setLeading(float) -> a
    void setLeading(float,float) -> a
    void setIndentationLeft(float) -> b
    void setIndentationRight(float) -> c
    void setFirstLineIndent(float) -> d
    void setSpacingBefore(float) -> e
    void setSpacingAfter(float) -> f
    boolean getKeepTogether() -> d
    int getAlignment() -> e
    float getMultipliedLeading() -> f
    float getTotalLeading() -> g
    float getIndentationLeft() -> h
    float getIndentationRight() -> i
    float getFirstLineIndent() -> j
    float getSpacingBefore() -> m
    float getSpacingAfter() -> n
    float getExtraParagraphSpace() -> o
    void setExtraParagraphSpace(float) -> g
    float spacingBefore() -> c
    float spacingAfter() -> t
com.aowagie.text.Phrase -> com.aowagie.text.F:
    float leading -> a
    com.aowagie.text.Font font -> b
    com.aowagie.text.pdf.HyphenationEvent hyphenation -> c
    boolean process(com.aowagie.text.ElementListener) -> a
    int type() -> b
    java.util.ArrayList getChunks() -> a
    boolean isContent() -> k
    boolean isNestable() -> l
    void add(int,java.lang.Object) -> add
    boolean add(java.lang.Object) -> add
    boolean addAll(java.util.Collection) -> addAll
    boolean addChunk(com.aowagie.text.Chunk) -> a
    void addSpecial(java.lang.Object) -> a
    void setLeading(float) -> a
    float getLeading() -> p
    boolean hasLeading() -> q
    com.aowagie.text.Font getFont() -> r
    boolean isEmpty() -> isEmpty
    com.aowagie.text.pdf.HyphenationEvent getHyphenation() -> s
    void setHyphenation(com.aowagie.text.pdf.HyphenationEvent) -> a
com.aowagie.text.Rectangle -> com.aowagie.text.G:
    float llx -> o
    float lly -> p
    float urx -> q
    float ury -> r
    int rotation -> s
    java.awt.Color backgroundColor -> a
    int border -> t
    boolean useVariableBorders -> b
    float borderWidth -> u
    float borderWidthLeft -> c
    float borderWidthRight -> d
    float borderWidthTop -> e
    float borderWidthBottom -> f
    java.awt.Color borderColor -> g
    java.awt.Color borderColorLeft -> h
    java.awt.Color borderColorRight -> i
    java.awt.Color borderColorTop -> j
    java.awt.Color borderColorBottom -> k
    boolean process(com.aowagie.text.ElementListener) -> a
    int type() -> b
    java.util.ArrayList getChunks() -> a
    boolean isContent() -> k
    boolean isNestable() -> l
    void setLeft(float) -> d
    float getLeft() -> w
    float getLeft(float) -> e
    void setRight(float) -> f
    float getRight() -> x
    float getRight(float) -> g
    float getWidth() -> e
    void setTop(float) -> h
    float getTop() -> u
    float getTop(float) -> i
    void setBottom(float) -> j
    float getBottom() -> v
    float getBottom(float) -> k
    float getHeight() -> U
    void normalize() -> V
    int getRotation() -> W
    com.aowagie.text.Rectangle rotate() -> X
    java.awt.Color getBackgroundColor() -> Y
    void setBackgroundColor(java.awt.Color) -> a
    int getBorder() -> Z
    boolean hasBorders() -> aa
    boolean hasBorder(int) -> e
    void setBorder(int) -> f
    boolean isUseVariableBorders() -> ab
    void disableBorderSide(int) -> g
    float getBorderWidth() -> ac
    void setBorderWidth(float) -> l
    float getVariableBorderWidth(float,int) -> a
    float getBorderWidthLeft() -> ad
    float getBorderWidthRight() -> ae
    float getBorderWidthTop() -> af
    float getBorderWidthBottom() -> ag
    java.awt.Color getBorderColor() -> ah
    void setBorderColor(java.awt.Color) -> b
    java.awt.Color getBorderColorLeft() -> ai
    java.awt.Color getBorderColorRight() -> aj
    java.awt.Color getBorderColorTop() -> ak
    java.awt.Color getBorderColorBottom() -> al
    com.aowagie.text.Rectangle rectangle(float,float) -> d
    void cloneNonPositionParameters(com.aowagie.text.Rectangle) -> a
    void softCloneNonPositionParameters(com.aowagie.text.Rectangle) -> b
    java.lang.String toString() -> toString
com.aowagie.text.RectangleReadOnly -> com.aowagie.text.H:
    void throwReadOnlyError() -> c
    void setLeft(float) -> d
    void setRight(float) -> f
    void setTop(float) -> h
    void setBottom(float) -> j
    void normalize() -> V
    void setBackgroundColor(java.awt.Color) -> a
    void setBorder(int) -> f
    void disableBorderSide(int) -> g
    void setBorderWidth(float) -> l
    void setBorderColor(java.awt.Color) -> b
    void cloneNonPositionParameters(com.aowagie.text.Rectangle) -> a
    void softCloneNonPositionParameters(com.aowagie.text.Rectangle) -> b
    java.lang.String toString() -> toString
com.aowagie.text.Row -> com.aowagie.text.I:
    int columns -> a
    int currentColumn -> b
    boolean[] reserved -> c
    java.lang.Object[] cells -> d
    boolean process(com.aowagie.text.ElementListener) -> a
    int type() -> b
    java.util.ArrayList getChunks() -> a
    boolean isContent() -> k
    boolean isNestable() -> l
    int addElement(java.lang.Object,int) -> a
    void setElement(java.lang.Object,int) -> b
    boolean reserve(int,int) -> a
    boolean isReserved(int) -> a
    int getObjectID(java.lang.Object) -> a
    java.lang.Object getCell(int) -> b
    boolean isEmpty() -> c
    int getColumns() -> d
com.aowagie.text.RtfElementInterface -> com.aowagie.text.J:
com.aowagie.text.Section -> com.aowagie.text.K:
    com.aowagie.text.Paragraph title -> a
    java.lang.String bookmarkTitle -> b
    int numberDepth -> c
    int numberStyle -> d
    float indentationLeft -> e
    float indentationRight -> f
    float indentation -> g
    boolean bookmarkOpen -> h
    boolean triggerNewPage -> i
    int subsections -> j
    java.util.ArrayList numbers -> k
    boolean complete -> l
    boolean addedCompletely -> m
    boolean notAddedYet -> n
    boolean process(com.aowagie.text.ElementListener) -> a
    int type() -> b
    java.util.ArrayList getChunks() -> a
    boolean isContent() -> k
    boolean isNestable() -> l
    void add(int,java.lang.Object) -> add
    boolean add(java.lang.Object) -> add
    boolean addAll(java.util.Collection) -> addAll
    com.aowagie.text.Paragraph getTitle() -> e
    com.aowagie.text.Paragraph constructTitle(com.aowagie.text.Paragraph,java.util.ArrayList,int,int) -> a
    float getIndentationLeft() -> f
    float getIndentationRight() -> g
    float getIndentation() -> h
    boolean isBookmarkOpen() -> i
    boolean isTriggerNewPage() -> j
    com.aowagie.text.Paragraph getBookmarkTitle() -> m
    void setChapterNumber(int) -> b
    int getDepth() -> n
    void setNumbers(int,java.util.ArrayList) -> a
    boolean isNotAddedYet() -> o
    void setNotAddedYet(boolean) -> a
    boolean isAddedCompletely() -> p
    void setAddedCompletely(boolean) -> b
    void flushContent() -> d
    boolean isComplete() -> c
com.aowagie.text.SimpleCell -> com.aowagie.text.L:
    java.util.ArrayList content -> a
    float width -> b
    float widthpercentage -> c
    float spacing_left -> d
    float spacing_right -> e
    float spacing_top -> f
    float spacing_bottom -> g
    float padding_left -> h
    float padding_right -> i
    float padding_top -> j
    float padding_bottom -> k
    int colspan -> l
    int horizontalAlignment -> m
    int verticalAlignment -> n
    boolean cellgroup -> v
    boolean useAscender -> w
    boolean useDescender -> x
    boolean useBorderPadding -> y
    com.aowagie.text.pdf.PdfPCell createPdfPCell(com.aowagie.text.SimpleCell) -> a
    void cellLayout(com.aowagie.text.pdf.PdfPCell,com.aowagie.text.Rectangle,com.aowagie.text.pdf.PdfContentByte[]) -> a
    void setPadding(float) -> a
    int getColspan() -> c
    void setPadding_bottom(float) -> b
    void setPadding_left(float) -> c
    void setPadding_right(float) -> m
    void setPadding_top(float) -> n
    float getSpacing_left() -> d
    float getSpacing_right() -> f
    float getSpacing_top() -> g
    float getSpacing_bottom() -> h
    void setSpacing(float) -> o
    void setSpacing_left(float) -> p
    void setSpacing_right(float) -> q
    void setSpacing_top(float) -> r
    void setSpacing_bottom(float) -> s
    float getWidth() -> e
    float getWidthpercentage() -> i
    java.util.ArrayList getContent() -> j
    int type() -> b
com.aowagie.text.SimpleTable -> com.aowagie.text.M:
    java.util.ArrayList content -> a
    float width -> b
    float widthpercentage -> c
    float cellspacing -> d
    float cellpadding -> e
    int alignment -> f
    com.aowagie.text.pdf.PdfPTable createPdfPTable() -> c
    void tableLayout(com.aowagie.text.pdf.PdfPTable,float[][],float[],int,int,com.aowagie.text.pdf.PdfContentByte[]) -> a
    void setCellspacing(float) -> a
    float getWidth() -> e
    int type() -> b
    boolean isNestable() -> l
com.aowagie.text.SplitCharacter -> com.aowagie.text.N:
    boolean isSplitCharacter(int,int,int,char[],com.aowagie.text.pdf.PdfChunk[]) -> a
com.aowagie.text.Table -> com.aowagie.text.O:
    int columns -> a
    java.util.ArrayList rows -> b
    java.awt.Point curPosition -> c
    com.aowagie.text.Cell defaultCell -> d
    int lastHeaderRow -> e
    int alignment -> f
    float cellpadding -> g
    float cellspacing -> h
    float width -> i
    boolean locked -> j
    float[] widths -> k
    boolean mTableInserted -> l
    boolean autoFillEmptyCells -> m
    boolean tableFitsPage -> n
    boolean cellsFitPage -> v
    float offset -> w
    boolean convert2pdfptable -> x
    boolean notAddedYet -> y
    boolean complete -> z
    boolean process(com.aowagie.text.ElementListener) -> a
    int type() -> b
    java.util.ArrayList getChunks() -> a
    boolean isNestable() -> l
    int getColumns() -> f
    int size() -> g
    java.awt.Dimension getDimension() -> h
    int getLastHeaderRow() -> i
    float getPadding() -> j
    float getSpacing() -> m
    void setAutoFillEmptyCells(boolean) -> a
    float getWidth() -> e
    boolean isCellsFitPage() -> n
    float getOffset() -> o
    void addCell(com.aowagie.text.Cell,java.awt.Point) -> a
    void insertTable(com.aowagie.text.Table,java.awt.Point) -> a
    void complete() -> p
    java.lang.Object getElement(int,int) -> a
    void mergeInsertedTables() -> t
    void fillEmptyMatrixCells() -> y
    boolean isValidLocation(com.aowagie.text.Cell,java.awt.Point) -> b
    void assumeTableDefaults(com.aowagie.text.Cell) -> a
    void placeCell(java.util.ArrayList,com.aowagie.text.Cell,java.awt.Point) -> a
    void setCurrentLocationToNextValidPosition(java.awt.Point) -> a
    float[] getWidths(float,float) -> a
    java.util.Iterator iterator() -> q
    com.aowagie.text.pdf.PdfPTable createPdfPTable() -> r
    boolean isNotAddedYet() -> s
    void setNotAddedYet(boolean) -> b
    void flushContent() -> d
    boolean isComplete() -> c
com.aowagie.text.TextElementArray -> com.aowagie.text.P:
com.aowagie.text.Utilities -> com.aowagie.text.Q:
    java.lang.Object[][] addToArray(java.lang.Object[][],java.lang.Object[]) -> a
    void skip(java.io.InputStream,int) -> a
    boolean isSurrogateHigh(char) -> a
    boolean isSurrogateLow(char) -> b
    boolean isSurrogatePair(java.lang.String,int) -> a
    boolean isSurrogatePair(char[],int) -> a
    int convertToUtf32(char,char) -> a
    int convertToUtf32(char[],int) -> b
    int convertToUtf32(java.lang.String,int) -> b
com.aowagie.text.exceptions.BadPasswordException -> com.aowagie.text.a.a:
com.aowagie.text.exceptions.IllegalPdfSyntaxException -> com.aowagie.text.a.b:
com.aowagie.text.exceptions.InvalidPdfException -> com.aowagie.text.a.c:
com.aowagie.text.exceptions.UnsupportedPdfException -> com.aowagie.text.a.d:
com.aowagie.text.pdf.AcroFields -> com.aowagie.text.pdf.a:
    com.aowagie.text.pdf.PdfReader reader -> a
    com.aowagie.text.pdf.PdfWriter writer -> b
    java.util.HashMap fields -> c
    java.util.HashMap sigNames -> d
    boolean append -> e
    java.util.HashMap extensionFonts -> f
    com.aowagie.text.pdf.XfaForm xfa -> g
    boolean generateAppearances -> h
    java.util.HashMap localFonts -> i
    java.util.HashMap stdFieldFontNames -> j
    int totalRevisions -> k
    com.aowagie.text.pdf.PdfName[] buttonRemove -> l
    void fill() -> e
    java.util.HashMap getFields() -> a
    com.aowagie.text.pdf.AcroFields$Item getFieldItem(java.lang.String) -> a
    java.lang.String getTranslatedFieldName(java.lang.String) -> e
    float[] getFieldPositions(java.lang.String) -> b
    java.util.List getSignatureNames() -> b
    java.util.ArrayList getBlankSignatureNames() -> c
    com.aowagie.text.pdf.PdfDictionary getSignatureDictionary(java.lang.String) -> c
    com.aowagie.text.pdf.PdfPKCS7 verifySignature(java.lang.String) -> d
    com.aowagie.text.pdf.PdfPKCS7 verifySignature(java.lang.String,java.lang.String) -> a
    void updateByteRange(com.aowagie.text.pdf.PdfPKCS7,com.aowagie.text.pdf.PdfDictionary) -> a
    com.aowagie.text.pdf.XfaForm getXfa() -> d
com.aowagie.text.pdf.AcroFields$Item -> com.aowagie.text.pdf.b:
    java.util.ArrayList values -> a
    java.util.ArrayList widgets -> b
    java.util.ArrayList widget_refs -> c
    java.util.ArrayList merged -> d
    java.util.ArrayList page -> e
    java.util.ArrayList tabOrder -> f
    int size() -> a
    void addValue(com.aowagie.text.pdf.PdfDictionary) -> a
    com.aowagie.text.pdf.PdfDictionary getWidget(int) -> a
    void addWidget(com.aowagie.text.pdf.PdfDictionary) -> b
    com.aowagie.text.pdf.PdfIndirectReference getWidgetRef(int) -> b
    void addWidgetRef(com.aowagie.text.pdf.PdfIndirectReference) -> a
    com.aowagie.text.pdf.PdfDictionary getMerged(int) -> c
    void addMerged(com.aowagie.text.pdf.PdfDictionary) -> c
    java.lang.Integer getPage(int) -> d
    void addPage(int) -> e
    void forcePage(int,int) -> a
    void addTabOrder(int) -> f
    void access$0(com.aowagie.text.pdf.AcroFields$Item,com.aowagie.text.pdf.PdfIndirectReference) -> a
com.aowagie.text.pdf.AcroFields$SorterComparator -> com.aowagie.text.pdf.c:
    int compare(java.lang.Object,java.lang.Object) -> compare
com.aowagie.text.pdf.ArabicLigaturizer -> com.aowagie.text.pdf.d:
    char[][] chartable -> a
    boolean isVowel(char) -> a
    char charshape(char,int) -> a
    int shapecount(char) -> b
    int ligature(char,com.aowagie.text.pdf.ArabicLigaturizer$charstruct) -> a
    void copycstostring(java.lang.StringBuffer,com.aowagie.text.pdf.ArabicLigaturizer$charstruct,int) -> a
    void doublelig(java.lang.StringBuffer,int) -> a
    boolean connects_to_left(com.aowagie.text.pdf.ArabicLigaturizer$charstruct) -> a
    void shape(char[],java.lang.StringBuffer,int) -> a
    int arabic_shape(char[],int,int,char[],int,int,int) -> a
    void processNumbers(char[],int,int,int) -> a
    void shapeToArabicDigitsWithContext(char[],int,int,char,boolean) -> a
com.aowagie.text.pdf.ArabicLigaturizer$charstruct -> com.aowagie.text.pdf.e:
    char basechar -> a
    char mark1 -> b
    char vowel -> c
    int lignum -> d
    int numshapes -> e
    char access$0(com.aowagie.text.pdf.ArabicLigaturizer$charstruct) -> a
    char access$1(com.aowagie.text.pdf.ArabicLigaturizer$charstruct) -> b
    char access$2(com.aowagie.text.pdf.ArabicLigaturizer$charstruct) -> c
    void access$3(com.aowagie.text.pdf.ArabicLigaturizer$charstruct,char) -> a
    void access$4(com.aowagie.text.pdf.ArabicLigaturizer$charstruct,char) -> b
    void access$5(com.aowagie.text.pdf.ArabicLigaturizer$charstruct,char) -> c
    int access$6(com.aowagie.text.pdf.ArabicLigaturizer$charstruct) -> d
    void access$7(com.aowagie.text.pdf.ArabicLigaturizer$charstruct,int) -> a
    void access$8(com.aowagie.text.pdf.ArabicLigaturizer$charstruct,int) -> b
    int access$9(com.aowagie.text.pdf.ArabicLigaturizer$charstruct) -> e
com.aowagie.text.pdf.BadPdfFormatException -> com.aowagie.text.pdf.f:
com.aowagie.text.pdf.BaseFont -> com.aowagie.text.pdf.g:
    java.util.ArrayList subsetRanges -> a
    int fontType -> b
    int[] widths -> c
    java.lang.String[] differences -> d
    char[] unicodeDifferences -> e
    int[][] charBBoxes -> o
    java.lang.String encoding -> f
    boolean embedded -> g
    int compressionLevel -> h
    boolean fontSpecific -> i
    java.util.HashMap fontCache -> p
    java.util.HashMap BuiltinFonts14 -> j
    boolean forceWidthsOutput -> k
    boolean directTextToByte -> l
    boolean subset -> m
    boolean fastWinansi -> q
    com.aowagie.text.pdf.IntHashtable specialMap -> n
    com.aowagie.text.pdf.BaseFont createFont(java.lang.String,java.lang.String,boolean) -> a
    com.aowagie.text.pdf.BaseFont createFont(java.lang.String,java.lang.String,boolean,boolean,byte[],byte[]) -> a
    com.aowagie.text.pdf.BaseFont createFont(java.lang.String,java.lang.String,boolean,boolean,byte[],byte[],boolean) -> a
    com.aowagie.text.pdf.BaseFont createFont(java.lang.String,java.lang.String,boolean,boolean,byte[],byte[],boolean,boolean) -> a
    java.lang.String getBaseName(java.lang.String) -> a
    java.lang.String normalizeEncoding(java.lang.String) -> e
    void createEncoding() -> a
    int getRawWidth(int,java.lang.String) -> a
    int getWidth(int) -> a
    int getWidth(java.lang.String) -> b
    float getWidthPoint(java.lang.String,float) -> a
    float getWidthPoint(int,float) -> a
    byte[] convertToBytes(java.lang.String) -> c
    byte[] convertToBytes(int) -> b
    void writeFont(com.aowagie.text.pdf.PdfWriter,com.aowagie.text.pdf.PdfIndirectReference,java.lang.Object[]) -> a
    java.lang.String getEncoding() -> b
    float getFontDescriptor(int,float) -> b
    int getFontType() -> c
    boolean isEmbedded() -> d
    boolean isFontSpecific() -> e
    java.lang.String createSubsetPrefix() -> f
    char getUnicodeDifferences(int) -> c
    java.lang.String getPostscriptFontName() -> g
    java.lang.String[][] getFamilyFontName() -> h
    boolean isSubset() -> i
    java.io.InputStream getResourceStream(java.lang.String) -> d
    java.io.InputStream getResourceStream(java.lang.String,java.lang.ClassLoader) -> a
    int getUnicodeEquivalent(int) -> d
    int getCidCode(int) -> e
    int[] getRawCharBBox(int,java.lang.String) -> b
com.aowagie.text.pdf.BaseFont$StreamFont -> com.aowagie.text.pdf.h:
com.aowagie.text.pdf.BidiLine -> com.aowagie.text.pdf.i:
    int runDirection -> a
    int pieceSize -> b
    char[] text -> c
    com.aowagie.text.pdf.PdfChunk[] detailChunks -> d
    int totalTextLength -> e
    byte[] orderLevels -> f
    int[] indexChars -> g
    java.util.ArrayList chunks -> h
    int indexChunk -> i
    int indexChunkChar -> j
    int currentChar -> k
    int storedRunDirection -> l
    char[] storedText -> m
    com.aowagie.text.pdf.PdfChunk[] storedDetailChunks -> n
    int storedTotalTextLength -> o
    byte[] storedOrderLevels -> p
    int[] storedIndexChars -> q
    int storedIndexChunk -> r
    int storedIndexChunkChar -> s
    int storedCurrentChar -> t
    boolean shortStore -> u
    com.aowagie.text.pdf.IntHashtable mirrorChars -> v
    int arabicOptions -> w
    boolean isEmpty() -> a
    boolean getParagraph(int) -> a
    void addChunk(com.aowagie.text.pdf.PdfChunk) -> a
    void addPiece(char,com.aowagie.text.pdf.PdfChunk) -> a
    void save() -> b
    void restore() -> c
    void mirrorGlyphs() -> d
    void doArabicShapping() -> e
    com.aowagie.text.pdf.PdfLine processLine(float,float,int,int,int) -> a
    float getWidth(int,int) -> a
    java.util.ArrayList createArrayOfPdfChunks(int,int) -> b
    java.util.ArrayList createArrayOfPdfChunks(int,int,com.aowagie.text.pdf.PdfChunk) -> a
    int[] getWord(int,int) -> c
    int trimRight(int,int) -> d
    int trimRightEx(int,int) -> e
    int trimLeftEx(int,int) -> f
    void reorder(int,int) -> g
    void flip(int,int) -> h
    boolean isWS(char) -> a
com.aowagie.text.pdf.BidiOrder -> com.aowagie.text.pdf.j:
    byte[] initialTypes -> a
    byte[] embeddings -> b
    byte paragraphEmbeddingLevel -> c
    int textLength -> d
    byte[] resultTypes -> e
    byte[] resultLevels -> f
    byte[] rtypes -> g
    char[] baseTypes -> h
    byte getDirection(char) -> a
    void runAlgorithm() -> b
    void determineParagraphEmbeddingLevel() -> c
    void determineExplicitEmbeddingLevels() -> d
    int removeExplicitCodes() -> e
    int reinsertExplicitCodes(int) -> a
    byte[] processEmbeddings(byte[],byte) -> a
    void resolveWeakTypes(int,int,byte,byte,byte) -> a
    void resolveNeutralTypes(int,int,byte,byte,byte) -> b
    void resolveImplicitLevels(int,int,byte,byte,byte) -> c
    byte[] getLevels() -> a
    byte[] getLevels(int[]) -> a
    boolean isWhitespace(byte) -> a
    byte typeForLevel(int) -> b
    int findRunLimit(int,int,byte[]) -> a
    void setTypes(int,int,byte) -> a
    void setLevels(int,int,byte) -> b
    void validateParagraphEmbeddingLevel(byte) -> b
    void validateLineBreaks(int[],int) -> a
com.aowagie.text.pdf.ByteBuffer -> com.aowagie.text.pdf.k:
    int count -> a
    byte[] buf -> b
    int byteCacheSize -> c
    byte[][] byteCache -> d
    char[] chars -> e
    byte[] bytes -> f
    boolean HIGH_PRECISION -> g
    java.text.DecimalFormatSymbols dfs -> h
    com.aowagie.text.pdf.ByteBuffer append_i(int) -> a
    com.aowagie.text.pdf.ByteBuffer append(byte[],int,int) -> a
    com.aowagie.text.pdf.ByteBuffer append(byte[]) -> a
    com.aowagie.text.pdf.ByteBuffer append(java.lang.String) -> a
    com.aowagie.text.pdf.ByteBuffer append(char) -> a
    com.aowagie.text.pdf.ByteBuffer append(com.aowagie.text.pdf.ByteBuffer) -> a
    com.aowagie.text.pdf.ByteBuffer append(int) -> b
    com.aowagie.text.pdf.ByteBuffer append(byte) -> a
    com.aowagie.text.pdf.ByteBuffer appendHex(byte) -> b
    com.aowagie.text.pdf.ByteBuffer append(float) -> a
    com.aowagie.text.pdf.ByteBuffer append(double) -> b
    java.lang.String formatDouble(double) -> a
    java.lang.String formatDouble(double,com.aowagie.text.pdf.ByteBuffer) -> a
    void reset() -> a
    byte[] toByteArray() -> b
    int size() -> c
    void setSize(int) -> c
    java.lang.String toString() -> toString
    void writeTo(java.io.OutputStream) -> a
    void write(int) -> write
    void write(byte[],int,int) -> write
    byte[] getBuffer() -> d
com.aowagie.text.pdf.CFFFont -> com.aowagie.text.pdf.l:
    java.lang.String[] operatorNames -> l
    java.lang.String[] standardStrings -> a
    java.lang.String key -> b
    java.lang.Object[] args -> c
    int arg_count -> d
    com.aowagie.text.pdf.RandomAccessFileOrArray buf -> e
    int offSize -> m
    int nameIndexOffset -> n
    int topdictIndexOffset -> o
    int stringIndexOffset -> f
    int gsubrIndexOffset -> g
    int[] nameOffsets -> p
    int[] topdictOffsets -> h
    int[] stringOffsets -> i
    int[] gsubrOffsets -> j
    com.aowagie.text.pdf.CFFFont$Font[] fonts -> k
    char getCard8() -> a
    char getCard16() -> b
    int getOffset(int) -> d
    void seek(int) -> a
    short getShort() -> f
    int getInt() -> g
    int getPosition() -> c
    int[] getIndex(int) -> b
    void getDictItem() -> d
    com.aowagie.text.pdf.CFFFont$RangeItem getEntireIndexRange(int) -> c
    java.lang.String[] getNames() -> e
    void ReadEncoding(int) -> e
com.aowagie.text.pdf.CFFFont$DictNumberItem -> com.aowagie.text.pdf.m:
    int value -> b
    int size -> c
    void increment(int[]) -> a
    void emit(byte[]) -> a
com.aowagie.text.pdf.CFFFont$DictOffsetItem -> com.aowagie.text.pdf.n:
    int size -> c
    void increment(int[]) -> a
    void emit(byte[]) -> a
com.aowagie.text.pdf.CFFFont$Font -> com.aowagie.text.pdf.o:
    java.lang.String name -> a
    boolean isCID -> b
    int privateOffset -> c
    int privateLength -> d
    int privateSubrs -> e
    int charstringsOffset -> f
    int encodingOffset -> A
    int charsetOffset -> g
    int fdarrayOffset -> h
    int fdselectOffset -> i
    int[] fdprivateOffsets -> j
    int[] fdprivateLengths -> k
    int nglyphs -> l
    int nstrings -> m
    int CharsetLength -> n
    int[] charstringsOffsets -> o
    int[] FDSelect -> p
    int FDSelectLength -> q
    int FDSelectFormat -> r
    int CharstringType -> s
    int FDArrayCount -> t
    int FDArrayOffsize -> u
    int[] FDArrayOffsets -> v
    int[] PrivateSubrsOffset -> w
    int[][] PrivateSubrsOffsetsArray -> x
    int[] SubrsOffsets -> y
    com.aowagie.text.pdf.CFFFont this$0 -> z
    void access$0(com.aowagie.text.pdf.CFFFont$Font,int) -> a
    int access$1(com.aowagie.text.pdf.CFFFont$Font) -> a
com.aowagie.text.pdf.CFFFont$IndexBaseItem -> com.aowagie.text.pdf.p:
com.aowagie.text.pdf.CFFFont$IndexMarkerItem -> com.aowagie.text.pdf.q:
    com.aowagie.text.pdf.CFFFont$OffsetItem offItem -> b
    com.aowagie.text.pdf.CFFFont$IndexBaseItem indexBase -> c
    void xref() -> a
com.aowagie.text.pdf.CFFFont$IndexOffsetItem -> com.aowagie.text.pdf.r:
    int size -> c
    void increment(int[]) -> a
    void emit(byte[]) -> a
com.aowagie.text.pdf.CFFFont$Item -> com.aowagie.text.pdf.s:
    int myOffset -> a
    void increment(int[]) -> a
    void emit(byte[]) -> a
    void xref() -> a
com.aowagie.text.pdf.CFFFont$MarkerItem -> com.aowagie.text.pdf.t:
    com.aowagie.text.pdf.CFFFont$OffsetItem p -> b
    void xref() -> a
com.aowagie.text.pdf.CFFFont$OffsetItem -> com.aowagie.text.pdf.u:
    int value -> b
    void set(int) -> a
    void access$0(com.aowagie.text.pdf.CFFFont$OffsetItem,int) -> a
com.aowagie.text.pdf.CFFFont$RangeItem -> com.aowagie.text.pdf.v:
    int offset -> b
    int length -> c
    com.aowagie.text.pdf.RandomAccessFileOrArray buf -> d
    void increment(int[]) -> a
    void emit(byte[]) -> a
com.aowagie.text.pdf.CFFFont$StringItem -> com.aowagie.text.pdf.w:
    java.lang.String s -> b
    void increment(int[]) -> a
    void emit(byte[]) -> a
com.aowagie.text.pdf.CFFFont$SubrMarkerItem -> com.aowagie.text.pdf.x:
    com.aowagie.text.pdf.CFFFont$OffsetItem offItem -> b
    com.aowagie.text.pdf.CFFFont$IndexBaseItem indexBase -> c
    void xref() -> a
com.aowagie.text.pdf.CFFFont$UInt16Item -> com.aowagie.text.pdf.y:
    char value -> b
    void increment(int[]) -> a
    void emit(byte[]) -> a
com.aowagie.text.pdf.CFFFont$UInt24Item -> com.aowagie.text.pdf.z:
    int value -> b
    void increment(int[]) -> a
    void emit(byte[]) -> a
com.aowagie.text.pdf.CFFFont$UInt32Item -> com.aowagie.text.pdf.A:
    int value -> b
    void increment(int[]) -> a
    void emit(byte[]) -> a
com.aowagie.text.pdf.CFFFont$UInt8Item -> com.aowagie.text.pdf.B:
    char value -> b
    void increment(int[]) -> a
    void emit(byte[]) -> a
com.aowagie.text.pdf.CFFFontSubset -> com.aowagie.text.pdf.C:
    java.lang.String[] SubrsFunctions -> l
    java.lang.String[] SubrsEscapeFuncs -> m
    java.util.HashMap GlyphsUsed -> n
    java.util.ArrayList glyphsInList -> o
    java.util.HashMap FDArrayUsed -> p
    java.util.HashMap[] hSubrsUsed -> q
    java.util.ArrayList[] lSubrsUsed -> r
    java.util.HashMap hGSubrsUsed -> s
    java.util.ArrayList lGSubrsUsed -> t
    java.util.HashMap hSubrsUsedNonCID -> u
    java.util.ArrayList lSubrsUsedNonCID -> v
    byte[][] NewLSubrsIndex -> w
    byte[] NewSubrsIndexNonCID -> x
    byte[] NewGSubrsIndex -> y
    byte[] NewCharStringsIndex -> z
    int GBias -> A
    java.util.LinkedList OutputList -> B
    int NumOfHints -> C
    int CountCharset(int,int) -> a
    int CountRange(int,int) -> b
    void readFDSelect(int) -> d
    void BuildFDArrayUsed(int) -> e
    void ReadFDArray(int) -> f
    byte[] Process(java.lang.String) -> a
    int CalcBias(int,int) -> c
    void BuildNewCharString(int) -> g
    void BuildNewLGSubrs(int) -> h
    void BuildFDSubrsOffsets(int,int) -> d
    void BuildSubrUsed(int,int,int,int[],java.util.HashMap,java.util.ArrayList) -> a
    void BuildGSubrsUsed(int) -> i
    void ReadASubr(int,int,int,int,java.util.HashMap,java.util.ArrayList,int[]) -> a
    void HandelStack() -> f
    int StackOpp() -> g
    void EmptyStack() -> h
    void PopStack() -> i
    void PushStack() -> j
    void ReadCommand() -> k
    int CalcHints(int,int,int,int,int[]) -> a
    byte[] BuildNewIndex(int[],java.util.HashMap,byte) -> a
    byte[] AssembleIndex(int[],byte[]) -> a
    byte[] BuildNewFile(int) -> j
    void CopyHeader() -> l
    void BuildIndexHeader(int,int,int) -> a
    void CreateKeys(com.aowagie.text.pdf.CFFFont$OffsetItem,com.aowagie.text.pdf.CFFFont$OffsetItem,com.aowagie.text.pdf.CFFFont$OffsetItem,com.aowagie.text.pdf.CFFFont$OffsetItem) -> a
    void CreateNewStringIndex(int) -> k
    void CreateFDSelect(com.aowagie.text.pdf.CFFFont$OffsetItem,int) -> a
    void CreateCharset(com.aowagie.text.pdf.CFFFont$OffsetItem,int) -> b
    void CreateFDArray(com.aowagie.text.pdf.CFFFont$OffsetItem,com.aowagie.text.pdf.CFFFont$OffsetItem,int) -> a
    void Reconstruct(int) -> l
    void ReconstructFDArray(int,com.aowagie.text.pdf.CFFFont$OffsetItem[]) -> a
    void ReconstructPrivateDict(int,com.aowagie.text.pdf.CFFFont$OffsetItem[],com.aowagie.text.pdf.CFFFont$IndexBaseItem[],com.aowagie.text.pdf.CFFFont$OffsetItem[]) -> a
    void ReconstructPrivateSubrs(int,com.aowagie.text.pdf.CFFFont$IndexBaseItem[],com.aowagie.text.pdf.CFFFont$OffsetItem[]) -> a
    int CalcSubrOffsetSize(int,int) -> e
    void CreateNonCIDPrivate(int,com.aowagie.text.pdf.CFFFont$OffsetItem) -> a
    void CreateNonCIDSubrs(int,com.aowagie.text.pdf.CFFFont$IndexBaseItem,com.aowagie.text.pdf.CFFFont$OffsetItem) -> a
com.aowagie.text.pdf.CJKFont -> com.aowagie.text.pdf.D:
    java.util.Properties cjkFonts -> o
    java.util.Properties cjkEncodings -> p
    java.util.Hashtable allCMaps -> q
    java.util.Hashtable allFonts -> r
    boolean propertiesLoaded -> s
    java.lang.String fontName -> t
    java.lang.String style -> u
    java.lang.String CMap -> v
    boolean cidDirect -> w
    char[] translationMap -> x
    com.aowagie.text.pdf.IntHashtable vMetrics -> y
    com.aowagie.text.pdf.IntHashtable hMetrics -> z
    java.util.HashMap fontDesc -> A
    boolean vertical -> B
    void loadProperties() -> k
    boolean isCJKFont(java.lang.String,java.lang.String) -> a
    int getWidth(int) -> a
    int getWidth(java.lang.String) -> b
    int getRawWidth(int,java.lang.String) -> a
    com.aowagie.text.pdf.PdfDictionary getFontDescriptor() -> l
    com.aowagie.text.pdf.PdfDictionary getCIDFont(com.aowagie.text.pdf.PdfIndirectReference,com.aowagie.text.pdf.IntHashtable) -> a
    com.aowagie.text.pdf.PdfDictionary getFontBaseType(com.aowagie.text.pdf.PdfIndirectReference) -> a
    void writeFont(com.aowagie.text.pdf.PdfWriter,com.aowagie.text.pdf.PdfIndirectReference,java.lang.Object[]) -> a
    float getDescNumber(java.lang.String) -> e
    float getBBox(int) -> f
    float getFontDescriptor(int,float) -> b
    java.lang.String getPostscriptFontName() -> g
    java.lang.String[][] getFullFontName() -> j
    java.lang.String[][] getFamilyFontName() -> h
    char[] readCMap(java.lang.String) -> f
    com.aowagie.text.pdf.IntHashtable createMetric(java.lang.String) -> g
    java.lang.String convertToHCIDMetrics(int[],com.aowagie.text.pdf.IntHashtable) -> a
    java.lang.String convertToVCIDMetrics(int[],com.aowagie.text.pdf.IntHashtable,com.aowagie.text.pdf.IntHashtable) -> a
    java.util.HashMap readFontProperties(java.lang.String) -> h
    int getUnicodeEquivalent(int) -> d
    int getCidCode(int) -> e
    int[] getRawCharBBox(int,java.lang.String) -> b
com.aowagie.text.pdf.CMYKColor -> com.aowagie.text.pdf.E:
    float cyan -> b
    float magenta -> c
    float yellow -> d
    float black -> e
    float getCyan() -> a
    float getMagenta() -> b
    float getYellow() -> c
    float getBlack() -> d
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.aowagie.text.pdf.ColorDetails -> com.aowagie.text.pdf.F:
    com.aowagie.text.pdf.PdfIndirectReference indirectReference -> a
    com.aowagie.text.pdf.PdfName colorName -> b
    com.aowagie.text.pdf.PdfSpotColor spotcolor -> c
    com.aowagie.text.pdf.PdfIndirectReference getIndirectReference() -> a
    com.aowagie.text.pdf.PdfName getColorName() -> b
    com.aowagie.text.pdf.PdfObject getSpotColor(com.aowagie.text.pdf.PdfWriter) -> a
com.aowagie.text.pdf.ColumnText -> com.aowagie.text.pdf.G:
    int runDirection -> a
    float maxY -> b
    float minY -> c
    float leftX -> d
    float rightX -> e
    int alignment -> f
    java.util.ArrayList leftWall -> g
    java.util.ArrayList rightWall -> h
    com.aowagie.text.pdf.BidiLine bidiLine -> i
    float yLine -> j
    float currentLeading -> k
    float fixedLeading -> l
    float multipliedLeading -> m
    com.aowagie.text.pdf.PdfContentByte canvas -> n
    com.aowagie.text.pdf.PdfContentByte[] canvases -> o
    int lineStatus -> p
    float indent -> q
    float followingIndent -> r
    float rightIndent -> s
    float extraParagraphSpace -> t
    float rectangularWidth -> u
    boolean rectangularMode -> v
    float spaceCharRatio -> C
    boolean lastWasNewline -> D
    int linesWritten -> E
    float firstLineY -> F
    boolean firstLineYDone -> G
    int arabicOptions -> H
    float descender -> w
    boolean composite -> x
    com.aowagie.text.pdf.ColumnText compositeColumn -> y
    java.util.LinkedList compositeElements -> z
    int listIdx -> A
    boolean splittedRow -> I
    com.aowagie.text.Phrase waitPhrase -> B
    boolean useAscender -> J
    float filledWidth -> K
    boolean adjustFirstLine -> L
    com.aowagie.text.pdf.ColumnText duplicate(com.aowagie.text.pdf.ColumnText) -> a
    com.aowagie.text.pdf.ColumnText setACopy(com.aowagie.text.pdf.ColumnText) -> b
    void setSimpleVars(com.aowagie.text.pdf.ColumnText) -> c
    void addWaitingPhrase() -> l
    void addText(com.aowagie.text.Phrase) -> a
    void setText(com.aowagie.text.Phrase) -> b
    void addElement(com.aowagie.text.Element) -> a
    java.util.ArrayList convertColumn(float[]) -> a
    float findLimitsPoint(java.util.ArrayList) -> a
    float[] findLimitsOneLine() -> a
    float[] findLimitsTwoLines() -> b
    void setColumns(float[],float[]) -> a
    void setSimpleColumn(com.aowagie.text.Phrase,float,float,float,float,float,int) -> a
    void setSimpleColumn(float,float,float,float,float,int) -> a
    void setSimpleColumn(float,float,float,float) -> a
    void setLeading(float) -> a
    void setLeading(float,float) -> a
    void setYLine(float) -> b
    float getYLine() -> c
    void setAlignment(int) -> a
    int getAlignment() -> d
    void setIndent(float) -> c
    float getIndent() -> e
    void setFollowingIndent(float) -> d
    void setRightIndent(float) -> e
    int go() -> f
    int go(boolean) -> a
    void setExtraParagraphSpace(float) -> f
    void setSpaceCharRatio(float) -> g
    void setRunDirection(int) -> b
    int getRunDirection() -> g
    void setArabicOptions(int) -> c
    float getDescender() -> h
    void showTextAligned(com.aowagie.text.pdf.PdfContentByte,int,com.aowagie.text.Phrase,float,float,float,int,int) -> a
    void showTextAligned(com.aowagie.text.pdf.PdfContentByte,int,com.aowagie.text.Phrase,float,float,float) -> a
    int goComposite(boolean) -> b
    void setCanvas(com.aowagie.text.pdf.PdfContentByte) -> a
    void setCanvases(com.aowagie.text.pdf.PdfContentByte[]) -> a
    boolean zeroHeightElement() -> i
    boolean isUseAscender() -> j
    void setUseAscender(boolean) -> c
    float getFilledWidth() -> k
    void setFilledWidth(float) -> h
    void updateFilledWidth(float) -> i
com.aowagie.text.pdf.DefaultSplitCharacter -> com.aowagie.text.pdf.H:
    com.aowagie.text.SplitCharacter DEFAULT -> a
    boolean isSplitCharacter(int,int,int,char[],com.aowagie.text.pdf.PdfChunk[]) -> a
    char getCurrentCharacter(int,char[],com.aowagie.text.pdf.PdfChunk[]) -> a
com.aowagie.text.pdf.DocumentFont -> com.aowagie.text.pdf.I:
    java.util.HashMap metrics -> o
    java.lang.String fontName -> p
    com.aowagie.text.pdf.PRIndirectReference refFont -> q
    com.aowagie.text.pdf.IntHashtable uni2byte -> r
    float Ascender -> s
    float CapHeight -> t
    float Descender -> u
    float ItalicAngle -> v
    float llx -> w
    float lly -> x
    float urx -> y
    float ury -> z
    boolean isType0 -> A
    com.aowagie.text.pdf.BaseFont cjkMirror -> B
    java.lang.String[] cjkNames -> C
    java.lang.String[] cjkEncs -> D
    java.lang.String[] cjkNames2 -> E
    java.lang.String[] cjkEncs2 -> F
    int[] stdEnc -> G
    java.lang.String[][] getFamilyFontName() -> h
    float getFontDescriptor(int,float) -> b
    java.lang.String[][] getFullFontName() -> j
    java.lang.String getPostscriptFontName() -> g
    int getRawWidth(int,java.lang.String) -> a
    void writeFont(com.aowagie.text.pdf.PdfWriter,com.aowagie.text.pdf.PdfIndirectReference,java.lang.Object[]) -> a
    int getWidth(int) -> a
    int getWidth(java.lang.String) -> b
    byte[] convertToBytes(java.lang.String) -> c
    byte[] convertToBytes(int) -> b
    com.aowagie.text.pdf.PdfIndirectReference getIndirectReference() -> k
    int[] getRawCharBBox(int,java.lang.String) -> b
com.aowagie.text.pdf.ExtendedColor -> com.aowagie.text.pdf.J:
    int type -> a
    int getType() -> e
    int getType(java.awt.Color) -> a
    float normalize(float) -> a
com.aowagie.text.pdf.ExtraEncoding -> com.aowagie.text.pdf.K:
    byte[] charToByte(java.lang.String,java.lang.String) -> a
    byte[] charToByte(char,java.lang.String) -> a
    java.lang.String byteToChar(byte[],java.lang.String) -> a
com.aowagie.text.pdf.FontDetails -> com.aowagie.text.pdf.L:
    com.aowagie.text.pdf.PdfIndirectReference indirectReference -> a
    com.aowagie.text.pdf.PdfName fontName -> b
    com.aowagie.text.pdf.BaseFont baseFont -> c
    com.aowagie.text.pdf.TrueTypeFontUnicode ttu -> d
    com.aowagie.text.pdf.CJKFont cjkFont -> e
    byte[] shortTag -> f
    java.util.HashMap longTag -> g
    com.aowagie.text.pdf.IntHashtable cjkTag -> h
    int fontType -> i
    boolean symbolic -> j
    boolean subset -> k
    com.aowagie.text.pdf.PdfIndirectReference getIndirectReference() -> a
    com.aowagie.text.pdf.PdfName getFontName() -> b
    byte[] convertToBytes(java.lang.String) -> a
    void writeFont(com.aowagie.text.pdf.PdfWriter) -> a
    void setSubset(boolean) -> a
com.aowagie.text.pdf.GlyphList -> com.aowagie.text.pdf.M:
    java.util.HashMap unicode2names -> a
    java.util.HashMap names2unicode -> b
    int[] nameToUnicode(java.lang.String) -> a
    java.lang.String unicodeToName(int) -> a
com.aowagie.text.pdf.GrayColor -> com.aowagie.text.pdf.N:
    float gray -> d
    com.aowagie.text.pdf.GrayColor GRAYBLACK -> b
    com.aowagie.text.pdf.GrayColor GRAYWHITE -> c
    float getGray() -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.aowagie.text.pdf.HyphenationEvent -> com.aowagie.text.pdf.O:
    java.lang.String getHyphenatedWordPre(java.lang.String,com.aowagie.text.pdf.BaseFont,float,float) -> a
    java.lang.String getHyphenatedWordPost() -> a
com.aowagie.text.pdf.IntHashtable -> com.aowagie.text.pdf.P:
    com.aowagie.text.pdf.IntHashtable$Entry[] table -> a
    int count -> b
    int threshold -> c
    float loadFactor -> d
    int size() -> a
    boolean containsKey(int) -> a
    int get(int) -> b
    void rehash() -> f
    int put(int,int) -> a
    int remove(int) -> c
    void clear() -> b
    java.util.Iterator getEntryIterator() -> c
    int[] toOrderedKeys() -> d
    int[] getKeys() -> e
    java.lang.Object clone() -> clone
com.aowagie.text.pdf.IntHashtable$Entry -> com.aowagie.text.pdf.Q:
    int hash -> a
    int key -> b
    int value -> c
    com.aowagie.text.pdf.IntHashtable$Entry next -> d
    int getKey() -> a
    int getValue() -> b
    java.lang.Object clone() -> clone
    com.aowagie.text.pdf.IntHashtable$Entry access$0(com.aowagie.text.pdf.IntHashtable$Entry) -> a
    int access$1(com.aowagie.text.pdf.IntHashtable$Entry) -> b
    int access$2(com.aowagie.text.pdf.IntHashtable$Entry) -> c
    int access$3(com.aowagie.text.pdf.IntHashtable$Entry) -> d
    void access$4(com.aowagie.text.pdf.IntHashtable$Entry,com.aowagie.text.pdf.IntHashtable$Entry) -> a
    void access$5(com.aowagie.text.pdf.IntHashtable$Entry,int) -> a
com.aowagie.text.pdf.IntHashtable$IntHashtableIterator -> com.aowagie.text.pdf.R:
    int index -> a
    com.aowagie.text.pdf.IntHashtable$Entry[] table -> b
    com.aowagie.text.pdf.IntHashtable$Entry entry -> c
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
com.aowagie.text.pdf.LZWDecoder -> com.aowagie.text.pdf.S:
    byte[][] stringTable -> a
    byte[] data -> b
    java.io.OutputStream uncompData -> c
    int tableIndex -> d
    int bitsToGet -> e
    int bytePointer -> f
    int bitPointer -> g
    int nextData -> h
    int nextBits -> i
    int[] andTable -> j
    void decode(byte[],java.io.OutputStream) -> a
    void initializeStringTable() -> b
    void writeString(byte[]) -> a
    void addStringToTable(byte[],byte) -> a
    void addStringToTable(byte[]) -> b
    byte[] composeString(byte[],byte) -> b
    int getNextCode() -> a
com.aowagie.text.pdf.MappedRandomAccessFile -> com.aowagie.text.pdf.T:
    java.nio.MappedByteBuffer mappedByteBuffer -> a
    java.nio.channels.FileChannel channel -> b
    void init(java.nio.channels.FileChannel,java.nio.channels.FileChannel$MapMode) -> a
    int read() -> a
    int read(byte[],int,int) -> a
    long getFilePointer() -> b
    void seek(long) -> a
    long length() -> c
    void close() -> d
    void finalize() -> finalize
    boolean clean(java.nio.ByteBuffer) -> a
com.aowagie.text.pdf.MappedRandomAccessFile$1 -> com.aowagie.text.pdf.MappedRandomAccessFile$1:
    java.nio.ByteBuffer val$buffer -> a
    java.lang.Object run() -> run
com.aowagie.text.pdf.MultiColumnText -> com.aowagie.text.pdf.U:
    float desiredHeight -> a
    float totalHeight -> b
    boolean overflow -> c
    float top -> d
    com.aowagie.text.pdf.ColumnText columnText -> e
    java.util.ArrayList columnDefs -> f
    boolean simple -> g
    int currentColumn -> h
    float nextY -> i
    boolean columnsRightToLeft -> j
    com.aowagie.text.pdf.PdfDocument document -> k
    float write(com.aowagie.text.pdf.PdfContentByte,com.aowagie.text.pdf.PdfDocument,float) -> a
    void newPage() -> f
    float getHeight(float[],float[]) -> a
    boolean process(com.aowagie.text.ElementListener) -> a
    int type() -> b
    java.util.ArrayList getChunks() -> a
    boolean isContent() -> k
    boolean isNestable() -> l
    float getColumnBottom() -> g
    int getCurrentColumn() -> c
    void resetCurrentColumn() -> d
    boolean shiftCurrentColumn() -> e
    float access$0(com.aowagie.text.pdf.MultiColumnText) -> a
    float access$2(com.aowagie.text.pdf.MultiColumnText) -> b
com.aowagie.text.pdf.MultiColumnText$ColumnDef -> com.aowagie.text.pdf.V:
    float[] left -> b
    float[] right -> c
    com.aowagie.text.pdf.MultiColumnText this$0 -> a
    float[] resolvePositions(int) -> a
    float[] resolvePositions(float[]) -> a
    boolean isSimple() -> a
    boolean access$0(com.aowagie.text.pdf.MultiColumnText$ColumnDef) -> a
com.aowagie.text.pdf.OutputStreamCounter -> com.aowagie.text.pdf.W:
    java.io.OutputStream out -> a
    int counter -> b
    void close() -> close
    void flush() -> flush
    void write(byte[]) -> write
    void write(int) -> write
    void write(byte[],int,int) -> write
    int getCounter() -> a
com.aowagie.text.pdf.OutputStreamEncryption -> com.aowagie.text.pdf.X:
    java.io.OutputStream out -> a
    com.aowagie.text.pdf.crypto.ARCFOUREncryption arcfour -> b
    com.aowagie.text.pdf.crypto.AESCipher cipher -> c
    byte[] sb -> d
    boolean aes -> e
    boolean finished -> f
    void close() -> close
    void flush() -> flush
    void write(byte[]) -> write
    void write(int) -> write
    void write(byte[],int,int) -> write
    void finish() -> a
com.aowagie.text.pdf.PRAcroForm -> com.aowagie.text.pdf.Y:
    java.util.ArrayList fields -> a
    int size() -> a
com.aowagie.text.pdf.PRIndirectReference -> com.aowagie.text.pdf.Z:
    com.aowagie.text.pdf.PdfReader reader -> c
    void toPdf(com.aowagie.text.pdf.PdfWriter,java.io.OutputStream) -> a
    com.aowagie.text.pdf.PdfReader getReader() -> a
    void setNumber(int,int) -> a
com.aowagie.text.pdf.PRStream -> com.aowagie.text.pdf.aa:
    com.aowagie.text.pdf.PdfReader reader -> a
    int offset -> b
    int length -> c
    int objNum -> d
    int objGen -> e
    void setLength(int) -> a
    int getOffset() -> b
    int getLength() -> c
    com.aowagie.text.pdf.PdfReader getReader() -> d
    byte[] getBytes() -> e
    void setObjNum(int,int) -> a
    int getObjNum() -> f
    int getObjGen() -> g
    void toPdf(com.aowagie.text.pdf.PdfWriter,java.io.OutputStream) -> a
com.aowagie.text.pdf.PRTokeniser -> com.aowagie.text.pdf.ab:
    boolean[] delims -> a
    com.aowagie.text.pdf.RandomAccessFileOrArray file -> b
    int type -> c
    java.lang.String stringValue -> d
    int reference -> e
    int generation -> f
    boolean hexString -> g
    void seek(int) -> a
    int getFilePointer() -> a
    void close() -> b
    int length() -> c
    int read() -> d
    com.aowagie.text.pdf.RandomAccessFileOrArray getSafeFile() -> e
    com.aowagie.text.pdf.RandomAccessFileOrArray getFile() -> f
    java.lang.String readString(int) -> b
    boolean isWhitespace(int) -> c
    int getTokenType() -> g
    java.lang.String getStringValue() -> h
    int getReference() -> i
    int getGeneration() -> j
    void backOnePosition(int) -> d
    void throwError(java.lang.String) -> a
    char checkPdfHeader() -> k
    int getStartxref() -> l
    int getHex(int) -> e
    void nextValidToken() -> m
    boolean nextToken() -> n
    int intValue() -> o
    boolean readLineSegment(byte[]) -> a
    int[] checkObjectStart(byte[]) -> b
    boolean isHexString() -> p
com.aowagie.text.pdf.PageResources -> com.aowagie.text.pdf.ac:
    com.aowagie.text.pdf.PdfDictionary fontDictionary -> a
    com.aowagie.text.pdf.PdfDictionary xObjectDictionary -> b
    com.aowagie.text.pdf.PdfDictionary colorDictionary -> c
    com.aowagie.text.pdf.PdfDictionary patternDictionary -> d
    com.aowagie.text.pdf.PdfDictionary shadingDictionary -> e
    com.aowagie.text.pdf.PdfDictionary extGStateDictionary -> f
    com.aowagie.text.pdf.PdfDictionary propertyDictionary -> g
    java.util.HashMap forbiddenNames -> h
    com.aowagie.text.pdf.PdfDictionary originalResources -> i
    int[] namePtr -> j
    java.util.HashMap usedNames -> k
    void setOriginalResources(com.aowagie.text.pdf.PdfDictionary,int[]) -> a
    com.aowagie.text.pdf.PdfName translateName(com.aowagie.text.pdf.PdfName) -> a
    com.aowagie.text.pdf.PdfName addFont(com.aowagie.text.pdf.PdfName,com.aowagie.text.pdf.PdfIndirectReference) -> a
    com.aowagie.text.pdf.PdfName addXObject(com.aowagie.text.pdf.PdfName,com.aowagie.text.pdf.PdfIndirectReference) -> b
    com.aowagie.text.pdf.PdfName addColor(com.aowagie.text.pdf.PdfName,com.aowagie.text.pdf.PdfIndirectReference) -> c
    void addDefaultColor(com.aowagie.text.pdf.PdfDictionary) -> a
    void addDefaultColorDiff(com.aowagie.text.pdf.PdfDictionary) -> b
    com.aowagie.text.pdf.PdfName addPattern(com.aowagie.text.pdf.PdfName,com.aowagie.text.pdf.PdfIndirectReference) -> d
    com.aowagie.text.pdf.PdfName addProperty(com.aowagie.text.pdf.PdfName,com.aowagie.text.pdf.PdfIndirectReference) -> e
    com.aowagie.text.pdf.PdfDictionary getResources() -> a
com.aowagie.text.pdf.PatternColor -> com.aowagie.text.pdf.ad:
    com.aowagie.text.pdf.PdfPatternPainter painter -> b
    com.aowagie.text.pdf.PdfPatternPainter getPainter() -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.aowagie.text.pdf.PdfAcroForm -> com.aowagie.text.pdf.ae:
    com.aowagie.text.pdf.PdfWriter writer -> a
    java.util.HashMap fieldTemplates -> b
    com.aowagie.text.pdf.PdfArray documentFields -> c
    com.aowagie.text.pdf.PdfArray calculationOrder -> d
    int sigFlags -> e
    void addFieldTemplates(java.util.HashMap) -> a
    void addDocumentField(com.aowagie.text.pdf.PdfIndirectReference) -> a
    boolean isValid() -> b
    void setSigFlags(int) -> a
com.aowagie.text.pdf.PdfAction -> com.aowagie.text.pdf.af:
    com.aowagie.text.pdf.PdfAction rendition(java.lang.String,com.aowagie.text.pdf.PdfFileSpecification,java.lang.String,com.aowagie.text.pdf.PdfIndirectReference) -> a
com.aowagie.text.pdf.PdfAnnotation -> com.aowagie.text.pdf.ag:
    com.aowagie.text.pdf.PdfName HIGHLIGHT_INVERT -> a
    com.aowagie.text.pdf.PdfName HIGHLIGHT_TOGGLE -> b
    com.aowagie.text.pdf.PdfName APPEARANCE_NORMAL -> c
    com.aowagie.text.pdf.PdfWriter writer -> d
    com.aowagie.text.pdf.PdfIndirectReference reference -> m
    java.util.HashMap templates -> e
    boolean form -> f
    boolean annotation -> g
    boolean used -> h
    int placeInPage -> n
    com.aowagie.text.pdf.PdfAnnotation createScreen(com.aowagie.text.pdf.PdfWriter,com.aowagie.text.Rectangle,java.lang.String,com.aowagie.text.pdf.PdfFileSpecification,java.lang.String,boolean) -> a
    com.aowagie.text.pdf.PdfIndirectReference getIndirectReference() -> b
    void setFlags(int) -> a
    void setAppearance(com.aowagie.text.pdf.PdfName,com.aowagie.text.pdf.PdfTemplate) -> a
    boolean isUsed() -> c
    void setUsed() -> d
    java.util.HashMap getTemplates() -> f
    boolean isForm() -> g
    boolean isAnnotation() -> h
    void setPage(int) -> b
    void setPage() -> i
    int getPlaceInPage() -> j
com.aowagie.text.pdf.PdfAppearance -> com.aowagie.text.pdf.ah:
    java.util.HashMap stdFieldFontNames -> m
    void setFontAndSize(com.aowagie.text.pdf.BaseFont,float) -> a
    com.aowagie.text.pdf.PdfContentByte getDuplicate() -> a
com.aowagie.text.pdf.PdfArray -> com.aowagie.text.pdf.ai:
    java.util.ArrayList arrayList -> a
    void toPdf(com.aowagie.text.pdf.PdfWriter,java.io.OutputStream) -> a
    java.lang.String toString() -> toString
    com.aowagie.text.pdf.PdfObject set(int,com.aowagie.text.pdf.PdfObject) -> a
    com.aowagie.text.pdf.PdfObject remove(int) -> a
    java.util.ArrayList getArrayList() -> a
    int size() -> b
    boolean isEmpty() -> c
    boolean add(com.aowagie.text.pdf.PdfObject) -> a
    boolean add(float[]) -> a
    boolean add(int[]) -> a
    void add(int,com.aowagie.text.pdf.PdfObject) -> b
    void addFirst(com.aowagie.text.pdf.PdfObject) -> b
    boolean contains(com.aowagie.text.pdf.PdfObject) -> c
    java.util.ListIterator listIterator() -> d
    com.aowagie.text.pdf.PdfObject getPdfObject(int) -> b
    com.aowagie.text.pdf.PdfObject getDirectObject(int) -> c
    com.aowagie.text.pdf.PdfDictionary getAsDict(int) -> d
    com.aowagie.text.pdf.PdfString getAsString(int) -> e
    com.aowagie.text.pdf.PdfNumber getAsNumber(int) -> f
    com.aowagie.text.pdf.PdfName getAsName(int) -> g
    com.aowagie.text.pdf.PdfIndirectReference getAsIndirectObject(int) -> h
com.aowagie.text.pdf.PdfBoolean -> com.aowagie.text.pdf.aj:
    com.aowagie.text.pdf.PdfBoolean PDFTRUE -> a
    com.aowagie.text.pdf.PdfBoolean PDFFALSE -> b
    boolean value -> c
    boolean booleanValue() -> a
    java.lang.String toString() -> toString
com.aowagie.text.pdf.PdfBorderArray -> com.aowagie.text.pdf.ak:
com.aowagie.text.pdf.PdfCell -> com.aowagie.text.pdf.al:
    java.util.ArrayList lines -> a
    com.aowagie.text.pdf.PdfLine line -> b
    java.util.ArrayList images -> c
    float leading -> d
    int rownumber -> e
    int rowspan -> f
    float cellspacing -> g
    float cellpadding -> h
    boolean header -> i
    float contentHeight -> j
    boolean useAscender -> k
    boolean useDescender -> l
    boolean useBorderPadding -> m
    int verticalAlignment -> n
    com.aowagie.text.pdf.PdfLine firstLine -> v
    com.aowagie.text.pdf.PdfLine lastLine -> w
    int groupNumber -> x
    void addList(com.aowagie.text.List,float,float,int) -> a
    void setBottom(float) -> j
    float getLeft() -> w
    float getRight() -> x
    float getTop() -> u
    float getBottom() -> v
    void addLine(com.aowagie.text.pdf.PdfLine) -> a
    com.aowagie.text.pdf.PdfLine removeLine(int) -> b
    void flushCurrentLine() -> j
    float firstLineRealHeight() -> m
    float getBorderWidthInside(int) -> c
    float addImage(com.aowagie.text.Image,float,float,float,int) -> a
    java.util.ArrayList getLines(float,float) -> a
    java.util.ArrayList getImages(float,float) -> b
    boolean isHeader() -> c
    void setHeader() -> d
    boolean mayBeRemoved() -> f
    float remainingLinesHeight() -> n
    float remainingHeight() -> g
    int rownumber() -> h
    int rowspan() -> i
    float cellspacing() -> o
    float cellpadding() -> p
    void processActions(com.aowagie.text.Element,com.aowagie.text.pdf.PdfAction,java.util.ArrayList) -> a
    void setGroupNumber(int) -> a
    com.aowagie.text.Rectangle rectangle(float,float) -> d
com.aowagie.text.pdf.PdfChunk -> com.aowagie.text.pdf.am:
    char[] singleSpace -> c
    com.aowagie.text.pdf.PdfChunk[] thisChunk -> d
    java.util.HashMap keysAttributes -> e
    java.util.HashMap keysNoStroke -> f
    java.lang.String value -> g
    java.lang.String encoding -> h
    com.aowagie.text.pdf.PdfFont font -> a
    com.aowagie.text.pdf.BaseFont baseFont -> i
    com.aowagie.text.SplitCharacter splitCharacter -> j
    java.util.HashMap attributes -> k
    java.util.HashMap noStroke -> l
    boolean newlineSplit -> m
    com.aowagie.text.Image image -> n
    float offsetX -> o
    float offsetY -> p
    boolean changeLeading -> b
    int getUnicodeEquivalent(int) -> a
    int getWord(java.lang.String,int) -> a
    com.aowagie.text.pdf.PdfChunk split(float) -> a
    com.aowagie.text.pdf.PdfChunk truncate(float) -> b
    com.aowagie.text.pdf.PdfFont font() -> a
    java.awt.Color color() -> b
    float width() -> c
    boolean isNewlineSplit() -> d
    float getWidthCorrected(float,float) -> a
    float getTextRise() -> e
    float trimLastSpace() -> f
    float trimFirstSpace() -> g
    java.lang.Object getAttribute(java.lang.String) -> a
    boolean isAttribute(java.lang.String) -> b
    boolean isStroked() -> h
    boolean isSeparator() -> i
    boolean isHorizontalSeparator() -> j
    boolean isTab() -> k
    void adjustLeft(float) -> c
    boolean isImage() -> l
    com.aowagie.text.Image getImage() -> m
    float getImageOffsetX() -> n
    float getImageOffsetY() -> o
    void setValue(java.lang.String) -> c
    java.lang.String toString() -> toString
    boolean isSpecialEncoding() -> p
    int length() -> q
    int lengthUtf32() -> r
    boolean isExtSplitCharacter(int,int,int,char[],com.aowagie.text.pdf.PdfChunk[]) -> a
    java.lang.String trim(java.lang.String) -> d
    float getCharWidth(int) -> b
    boolean noPrint(int) -> c
com.aowagie.text.pdf.PdfColor -> com.aowagie.text.pdf.an:
com.aowagie.text.pdf.PdfContentByte -> com.aowagie.text.pdf.ao:
    float[] unitRect -> f
    com.aowagie.text.pdf.ByteBuffer content -> a
    com.aowagie.text.pdf.PdfWriter writer -> b
    com.aowagie.text.pdf.PdfDocument pdf -> c
    com.aowagie.text.pdf.PdfContentByte$GraphicState state -> d
    java.util.ArrayList stateList -> g
    java.util.ArrayList layerDepth -> h
    int separator -> e
    int mcDepth -> i
    boolean inText -> j
    java.util.HashMap abrev -> k
    java.lang.String toString() -> toString
    com.aowagie.text.pdf.ByteBuffer getInternalBuffer() -> b
    byte[] toPdf(com.aowagie.text.pdf.PdfWriter) -> a
    void add(com.aowagie.text.pdf.PdfContentByte) -> a
    float getXTLM() -> c
    float getYTLM() -> d
    void setLineCap(int) -> a
    void setLineDash(float) -> a
    void setLineDash(float,float) -> a
    void setLineDash(float,float,float) -> a
    void setLineJoin(int) -> b
    void setLineWidth(float) -> b
    void clip() -> e
    void eoClip() -> f
    void setGrayFill(float) -> c
    void setGrayStroke(float) -> d
    void resetGrayStroke() -> g
    void HelperRGB(float,float,float) -> b
    void resetRGBColorFill() -> h
    void resetRGBColorStroke() -> i
    void HelperCMYK(float,float,float,float) -> d
    void setCMYKColorFillF(float,float,float,float) -> a
    void setCMYKColorStrokeF(float,float,float,float) -> b
    void moveTo(float,float) -> b
    void lineTo(float,float) -> c
    void curveTo(float,float,float,float,float,float) -> a
    void rectangle(float,float,float,float) -> c
    boolean compareColors(java.awt.Color,java.awt.Color) -> a
    void variableRectangle(com.aowagie.text.Rectangle) -> b
    void rectangle(com.aowagie.text.Rectangle) -> a
    void closePath() -> j
    void newPath() -> k
    void stroke() -> l
    void closePathStroke() -> m
    void fill() -> n
    void eoFill() -> o
    void closePathFillStroke() -> p
    void closePathEoFillStroke() -> q
    void addImage(com.aowagie.text.Image) -> a
    void addImage(com.aowagie.text.Image,boolean) -> a
    void addImage(com.aowagie.text.Image,float,float,float,float,float,float) -> a
    void addImage(com.aowagie.text.Image,float,float,float,float,float,float,boolean) -> a
    void reset() -> r
    void reset(boolean) -> a
    void beginText() -> s
    void endText() -> t
    void saveState() -> u
    void restoreState() -> v
    void setCharacterSpacing(float) -> e
    void setWordSpacing(float) -> f
    void setFontAndSize(com.aowagie.text.pdf.BaseFont,float) -> a
    void setTextRenderingMode(int) -> c
    void setTextRise(float) -> g
    void showText2(java.lang.String) -> c
    void showText(java.lang.String) -> a
    void setTextMatrix(float,float,float,float,float,float) -> b
    void setTextMatrix(float,float) -> d
    void moveText(float,float) -> e
    int size() -> w
    byte[] escapeString(byte[]) -> a
    void escapeString(byte[],com.aowagie.text.pdf.ByteBuffer) -> a
    void concatCTM(float,float,float,float,float,float) -> c
    java.util.ArrayList bezierArc(float,float,float,float,float,float) -> d
    void arc(float,float,float,float,float,float) -> e
    void addTemplate(com.aowagie.text.pdf.PdfTemplate,float,float,float,float,float,float) -> a
    void addTemplate(com.aowagie.text.pdf.PdfTemplate,float,float) -> a
    void setRGBColorFill(int,int,int) -> a
    void setRGBColorStroke(int,int,int) -> b
    void setColorStroke(java.awt.Color) -> a
    void setColorFill(java.awt.Color) -> b
    void setColorFill(com.aowagie.text.pdf.PdfSpotColor,float) -> a
    void setColorStroke(com.aowagie.text.pdf.PdfSpotColor,float) -> b
    void setPatternFill(com.aowagie.text.pdf.PdfPatternPainter) -> a
    void outputColorNumbers(java.awt.Color,float) -> a
    void setPatternFill(com.aowagie.text.pdf.PdfPatternPainter,java.awt.Color) -> a
    void setPatternFill(com.aowagie.text.pdf.PdfPatternPainter,java.awt.Color,float) -> a
    void setPatternStroke(com.aowagie.text.pdf.PdfPatternPainter,java.awt.Color) -> b
    void setPatternStroke(com.aowagie.text.pdf.PdfPatternPainter,java.awt.Color,float) -> b
    void setPatternStroke(com.aowagie.text.pdf.PdfPatternPainter) -> b
    void setShadingFill(com.aowagie.text.pdf.PdfShadingPattern) -> a
    void setShadingStroke(com.aowagie.text.pdf.PdfShadingPattern) -> b
    void checkWriter() -> x
    void showText(com.aowagie.text.pdf.PdfTextArray) -> a
    com.aowagie.text.pdf.PdfWriter getPdfWriter() -> y
    com.aowagie.text.pdf.PdfDocument getPdfDocument() -> z
    com.aowagie.text.pdf.PdfContentByte getDuplicate() -> a
    void roundRectangle(float,float,float,float,float) -> a
    void setLiteral(java.lang.String) -> b
    void checkNoPattern(com.aowagie.text.pdf.PdfTemplate) -> a
    com.aowagie.text.pdf.PageResources getPageResources() -> A
    void beginLayer(com.aowagie.text.pdf.PdfOCG) -> a
    void beginLayer2(com.aowagie.text.pdf.PdfOCG) -> b
    void endLayer() -> B
    void addAnnotation(com.aowagie.text.pdf.PdfAnnotation) -> a
    void sanityCheck() -> C
com.aowagie.text.pdf.PdfContentByte$GraphicState -> com.aowagie.text.pdf.ap:
    com.aowagie.text.pdf.FontDetails fontDetails -> a
    com.aowagie.text.pdf.ColorDetails colorDetails -> c
    float size -> b
    float xTLM -> d
    float yTLM -> e
    float leading -> f
    float scale -> g
    float charSpace -> h
    float wordSpace -> i
    float access$0(com.aowagie.text.pdf.PdfContentByte$GraphicState) -> a
    float access$1(com.aowagie.text.pdf.PdfContentByte$GraphicState) -> b
    void access$6(com.aowagie.text.pdf.PdfContentByte$GraphicState,float) -> a
    void access$7(com.aowagie.text.pdf.PdfContentByte$GraphicState,float) -> b
    void access$9(com.aowagie.text.pdf.PdfContentByte$GraphicState,float) -> c
    void access$10(com.aowagie.text.pdf.PdfContentByte$GraphicState,float) -> d
    void access$13(com.aowagie.text.pdf.PdfContentByte$GraphicState,com.aowagie.text.pdf.ColorDetails) -> a
    com.aowagie.text.pdf.ColorDetails access$14(com.aowagie.text.pdf.PdfContentByte$GraphicState) -> c
com.aowagie.text.pdf.PdfContents -> com.aowagie.text.pdf.aq:
    byte[] SAVESTATE -> a
    byte[] RESTORESTATE -> b
    byte[] ROTATE90 -> c
    byte[] ROTATE180 -> d
    byte[] ROTATE270 -> e
    byte[] ROTATEFINAL -> f
com.aowagie.text.pdf.PdfDashPattern -> com.aowagie.text.pdf.ar:
    float dash -> a
    void toPdf(com.aowagie.text.pdf.PdfWriter,java.io.OutputStream) -> a
com.aowagie.text.pdf.PdfDate -> com.aowagie.text.pdf.as:
    int[] DATE_SPACE -> b
    java.lang.String setLength(int,int) -> b
    java.lang.String getW3CDate() -> a
    java.lang.String getW3CDate(java.lang.String) -> a
    java.util.Calendar decode(java.lang.String) -> b
com.aowagie.text.pdf.PdfDestination -> com.aowagie.text.pdf.at:
    boolean status -> a
    boolean hasPage() -> f
    boolean addPage(com.aowagie.text.pdf.PdfIndirectReference) -> a
com.aowagie.text.pdf.PdfDeveloperExtension -> com.aowagie.text.pdf.au:
    com.aowagie.text.pdf.PdfName prefix -> a
    com.aowagie.text.pdf.PdfName baseversion -> b
    int extensionLevel -> c
    com.aowagie.text.pdf.PdfName getPrefix() -> a
    com.aowagie.text.pdf.PdfName getBaseversion() -> b
    int getExtensionLevel() -> c
    com.aowagie.text.pdf.PdfDictionary getDeveloperExtensions() -> d
com.aowagie.text.pdf.PdfDictionary -> com.aowagie.text.pdf.av:
    com.aowagie.text.pdf.PdfName FONT -> a
    com.aowagie.text.pdf.PdfName OUTLINES -> i
    com.aowagie.text.pdf.PdfName PAGE -> j
    com.aowagie.text.pdf.PdfName PAGES -> b
    com.aowagie.text.pdf.PdfName CATALOG -> k
    com.aowagie.text.pdf.PdfName dictionaryType -> c
    java.util.HashMap hashMap -> l
    void toPdf(com.aowagie.text.pdf.PdfWriter,java.io.OutputStream) -> a
    java.lang.String toString() -> toString
    void put(com.aowagie.text.pdf.PdfName,com.aowagie.text.pdf.PdfObject) -> a
    void putAll(com.aowagie.text.pdf.PdfDictionary) -> a
    void remove(com.aowagie.text.pdf.PdfName) -> a
    com.aowagie.text.pdf.PdfObject get(com.aowagie.text.pdf.PdfName) -> b
    com.aowagie.text.pdf.PdfObject getDirectObject(com.aowagie.text.pdf.PdfName) -> c
    java.util.Set getKeys() -> k
    int size() -> a
    boolean contains(com.aowagie.text.pdf.PdfName) -> d
    void merge(com.aowagie.text.pdf.PdfDictionary) -> b
    void mergeDifferent(com.aowagie.text.pdf.PdfDictionary) -> c
    com.aowagie.text.pdf.PdfDictionary getAsDict(com.aowagie.text.pdf.PdfName) -> e
    com.aowagie.text.pdf.PdfArray getAsArray(com.aowagie.text.pdf.PdfName) -> f
    com.aowagie.text.pdf.PdfString getAsString(com.aowagie.text.pdf.PdfName) -> g
    com.aowagie.text.pdf.PdfNumber getAsNumber(com.aowagie.text.pdf.PdfName) -> h
    com.aowagie.text.pdf.PdfName getAsName(com.aowagie.text.pdf.PdfName) -> i
com.aowagie.text.pdf.PdfDocument -> com.aowagie.text.pdf.aw:
    com.aowagie.text.pdf.PdfWriter writer -> t
    com.aowagie.text.pdf.PdfContentByte text -> u
    com.aowagie.text.pdf.PdfContentByte graphics -> v
    float leading -> w
    int alignment -> x
    float currentHeight -> y
    boolean isSectionTitle -> p
    int leadingCount -> q
    com.aowagie.text.pdf.PdfAction anchorAction -> r
    int textEmptySize -> z
    byte[] xmpMetadata -> A
    float nextMarginLeft -> B
    float nextMarginRight -> C
    float nextMarginTop -> D
    float nextMarginBottom -> E
    boolean firstPageEvent -> F
    com.aowagie.text.pdf.PdfLine line -> G
    java.util.ArrayList lines -> H
    int lastElementType -> I
    com.aowagie.text.pdf.PdfDocument$Indentation indentation -> J
    com.aowagie.text.pdf.PdfDocument$PdfInfo info -> K
    com.aowagie.text.pdf.PdfOutline rootOutline -> L
    com.aowagie.text.pdf.PdfOutline currentOutline -> M
    com.aowagie.text.pdf.internal.PdfViewerPreferencesImp viewerPreferences -> N
    com.aowagie.text.pdf.PdfPageLabels pageLabels -> s
    java.util.TreeMap localDestinations -> O
    java.util.HashMap documentLevelJS -> P
    java.text.DecimalFormat SIXTEEN_DIGITS -> Q
    java.util.HashMap documentFileAttachment -> R
    java.lang.String openActionName -> S
    com.aowagie.text.pdf.PdfAction openActionAction -> T
    com.aowagie.text.pdf.PdfDictionary additionalActions -> U
    com.aowagie.text.pdf.collection.PdfCollection collection -> V
    com.aowagie.text.pdf.internal.PdfAnnotationsImp annotationsImp -> W
    int markPoint -> X
    com.aowagie.text.Rectangle nextPageSize -> Y
    java.util.HashMap thisBoxSize -> Z
    java.util.HashMap boxSize -> aa
    boolean pageEmpty -> ab
    int duration -> ac
    com.aowagie.text.pdf.PdfTransition transition -> ad
    com.aowagie.text.pdf.PdfDictionary pageAA -> ae
    com.aowagie.text.pdf.PdfIndirectReference thumb -> af
    com.aowagie.text.pdf.PageResources pageResources -> ag
    boolean strictImageSequence -> ah
    float imageEnd -> ai
    com.aowagie.text.Image imageWait -> aj
    void addWriter(com.aowagie.text.pdf.PdfWriter) -> a
    boolean add(com.aowagie.text.Element) -> add
    void open() -> open
    void close() -> close
    boolean newPage() -> newPage
    boolean setPageSize(com.aowagie.text.Rectangle) -> setPageSize
    boolean setMargins(float,float,float,float) -> setMargins
    boolean setMarginMirroring(boolean) -> setMarginMirroring
    boolean setMarginMirroringTopBottom(boolean) -> setMarginMirroringTopBottom
    void setPageCount(int) -> setPageCount
    void resetPageCount() -> resetPageCount
    void setHeader(com.aowagie.text.HeaderFooter) -> setHeader
    void resetHeader() -> resetHeader
    void setFooter(com.aowagie.text.HeaderFooter) -> setFooter
    void resetFooter() -> resetFooter
    void initPage() -> f
    void newLine() -> g
    void carriageReturn() -> h
    float getVerticalPosition(boolean) -> a
    void ensureNewLine() -> i
    float flushLines() -> j
    void writeLineToContent(com.aowagie.text.pdf.PdfLine,com.aowagie.text.pdf.PdfContentByte,com.aowagie.text.pdf.PdfContentByte,java.lang.Object[],float) -> a
    float indentLeft() -> k
    float indentRight() -> l
    float indentTop() -> m
    float indentBottom() -> a
    void addSpacing(float,float,com.aowagie.text.Font) -> a
    com.aowagie.text.pdf.PdfDocument$PdfInfo getInfo() -> b
    com.aowagie.text.pdf.PdfDocument$PdfCatalog getCatalog(com.aowagie.text.pdf.PdfIndirectReference) -> a
    void calculateOutlineCount() -> n
    void traverseOutlineCount(com.aowagie.text.pdf.PdfOutline) -> a
    void writeOutlines() -> o
    void outlineTree(com.aowagie.text.pdf.PdfOutline) -> b
    void localGoto(java.lang.String,float,float,float,float) -> a
    void remoteGoto(java.lang.String,java.lang.String,float,float,float,float) -> a
    void remoteGoto(java.lang.String,int,float,float,float,float) -> a
    com.aowagie.text.pdf.PdfAction getLocalGotoAction(java.lang.String) -> a
    boolean localDestination(java.lang.String,com.aowagie.text.pdf.PdfDestination) -> a
    java.util.HashMap getDocumentLevelJS() -> c
    void addFileAttachment(java.lang.String,com.aowagie.text.pdf.PdfFileSpecification) -> a
    java.util.HashMap getDocumentFileAttachment() -> d
    void setSigFlags(int) -> a
    void addAnnotation(com.aowagie.text.pdf.PdfAnnotation) -> a
    void setNewPageSizeAndMargins() -> p
    com.aowagie.text.pdf.PageResources getPageResources() -> e
    void add(com.aowagie.text.Image) -> a
    void addPTable(com.aowagie.text.pdf.PdfPTable) -> a
    boolean fitsPage(com.aowagie.text.pdf.PdfPTable,float) -> a
    void addPdfTable(com.aowagie.text.Table) -> a
    void analyzeRow(java.util.ArrayList,com.aowagie.text.pdf.PdfDocument$RenderingContext) -> a
    boolean mayBeRemoved(java.util.ArrayList) -> a
    void consumeRowspan(java.util.ArrayList,com.aowagie.text.pdf.PdfDocument$RenderingContext) -> b
    java.util.ArrayList extractRows(java.util.ArrayList,com.aowagie.text.pdf.PdfDocument$RenderingContext) -> c
    void renderCells(com.aowagie.text.pdf.PdfDocument$RenderingContext,java.util.List,boolean) -> a
    void doFooter() -> q
    void doHeader() -> r
com.aowagie.text.pdf.PdfDocument$Indentation -> com.aowagie.text.pdf.ax:
    float indentLeft -> a
    float sectionIndentLeft -> b
    float listIndentLeft -> c
    float imageIndentLeft -> d
    float indentRight -> e
    float sectionIndentRight -> f
    float imageIndentRight -> g
    float indentTop -> h
    float indentBottom -> i
    float access$1(com.aowagie.text.pdf.PdfDocument$Indentation) -> a
    void access$2(com.aowagie.text.pdf.PdfDocument$Indentation,float) -> a
    float access$3(com.aowagie.text.pdf.PdfDocument$Indentation) -> b
    void access$4(com.aowagie.text.pdf.PdfDocument$Indentation,float) -> b
    float access$5(com.aowagie.text.pdf.PdfDocument$Indentation) -> c
    void access$6(com.aowagie.text.pdf.PdfDocument$Indentation,float) -> c
    float access$7(com.aowagie.text.pdf.PdfDocument$Indentation) -> d
    void access$8(com.aowagie.text.pdf.PdfDocument$Indentation,float) -> d
    float access$9(com.aowagie.text.pdf.PdfDocument$Indentation) -> e
    void access$10(com.aowagie.text.pdf.PdfDocument$Indentation,float) -> e
    void access$11(com.aowagie.text.pdf.PdfDocument$Indentation,float) -> f
    void access$12(com.aowagie.text.pdf.PdfDocument$Indentation,float) -> g
    void access$13(com.aowagie.text.pdf.PdfDocument$Indentation,float) -> h
    void access$14(com.aowagie.text.pdf.PdfDocument$Indentation,float) -> i
    float access$15(com.aowagie.text.pdf.PdfDocument$Indentation) -> f
    float access$16(com.aowagie.text.pdf.PdfDocument$Indentation) -> g
    float access$17(com.aowagie.text.pdf.PdfDocument$Indentation) -> h
    float access$18(com.aowagie.text.pdf.PdfDocument$Indentation) -> i
com.aowagie.text.pdf.PdfDocument$PdfCatalog -> com.aowagie.text.pdf.ay:
    com.aowagie.text.pdf.PdfWriter writer -> a
    void addNames(java.util.TreeMap,java.util.HashMap,java.util.HashMap,com.aowagie.text.pdf.PdfWriter) -> a
    void setOpenAction(com.aowagie.text.pdf.PdfAction) -> a
    void setAdditionalActions(com.aowagie.text.pdf.PdfDictionary) -> d
    void access$1(com.aowagie.text.pdf.PdfDocument$PdfCatalog,java.util.TreeMap,java.util.HashMap,java.util.HashMap,com.aowagie.text.pdf.PdfWriter) -> a
    void access$2(com.aowagie.text.pdf.PdfDocument$PdfCatalog,com.aowagie.text.pdf.PdfAction) -> a
    void access$3(com.aowagie.text.pdf.PdfDocument$PdfCatalog,com.aowagie.text.pdf.PdfDictionary) -> a
com.aowagie.text.pdf.PdfDocument$PdfInfo -> com.aowagie.text.pdf.az:
    void addTitle(java.lang.String) -> f
    void addSubject(java.lang.String) -> a
    void addKeywords(java.lang.String) -> b
    void addAuthor(java.lang.String) -> c
    void addCreator(java.lang.String) -> d
    void addProducer() -> b
    void addCreationDate(java.util.Calendar) -> a
    void addCreationDate() -> c
    void addkey(java.lang.String,java.lang.String) -> a
    void access$1(com.aowagie.text.pdf.PdfDocument$PdfInfo,java.lang.String) -> a
    void access$2(com.aowagie.text.pdf.PdfDocument$PdfInfo) -> a
    void access$3(com.aowagie.text.pdf.PdfDocument$PdfInfo) -> b
com.aowagie.text.pdf.PdfDocument$RenderingContext -> com.aowagie.text.pdf.aA:
    float pagetop -> a
    float oldHeight -> b
    com.aowagie.text.pdf.PdfContentByte cellGraphics -> c
    float lostTableBottom -> d
    float maxCellBottom -> e
    java.util.Map rowspanMap -> f
    java.util.Map pageMap -> g
    com.aowagie.text.pdf.PdfTable table -> h
    int consumeRowspan(com.aowagie.text.pdf.PdfCell) -> a
    int currentRowspan(com.aowagie.text.pdf.PdfCell) -> b
    int cellRendered(com.aowagie.text.pdf.PdfCell,int) -> a
    int numCellRendered(com.aowagie.text.pdf.PdfCell) -> c
    boolean isCellRenderedOnPage(com.aowagie.text.pdf.PdfCell,int) -> b
    void access$1(com.aowagie.text.pdf.PdfDocument$RenderingContext,float) -> a
    void access$2(com.aowagie.text.pdf.PdfDocument$RenderingContext,float) -> b
    void access$3(com.aowagie.text.pdf.PdfDocument$RenderingContext,com.aowagie.text.pdf.PdfContentByte) -> a
    void access$4(com.aowagie.text.pdf.PdfDocument$RenderingContext,java.util.Map) -> a
    void access$5(com.aowagie.text.pdf.PdfDocument$RenderingContext,com.aowagie.text.pdf.PdfTable) -> a
    void access$6(com.aowagie.text.pdf.PdfDocument$RenderingContext,float) -> c
    com.aowagie.text.pdf.PdfContentByte access$7(com.aowagie.text.pdf.PdfDocument$RenderingContext) -> a
    float access$8(com.aowagie.text.pdf.PdfDocument$RenderingContext) -> b
    float access$9(com.aowagie.text.pdf.PdfDocument$RenderingContext) -> c
    float access$10(com.aowagie.text.pdf.PdfDocument$RenderingContext) -> d
    void access$11(com.aowagie.text.pdf.PdfDocument$RenderingContext,float) -> d
    int access$12(com.aowagie.text.pdf.PdfDocument$RenderingContext,com.aowagie.text.pdf.PdfCell) -> a
    float access$13(com.aowagie.text.pdf.PdfDocument$RenderingContext) -> e
    int access$14(com.aowagie.text.pdf.PdfDocument$RenderingContext,com.aowagie.text.pdf.PdfCell) -> b
    boolean access$15(com.aowagie.text.pdf.PdfDocument$RenderingContext,com.aowagie.text.pdf.PdfCell,int) -> a
    int access$16(com.aowagie.text.pdf.PdfDocument$RenderingContext,com.aowagie.text.pdf.PdfCell) -> c
    int access$17(com.aowagie.text.pdf.PdfDocument$RenderingContext,com.aowagie.text.pdf.PdfCell,int) -> b
    com.aowagie.text.pdf.PdfTable access$18(com.aowagie.text.pdf.PdfDocument$RenderingContext) -> f
com.aowagie.text.pdf.PdfEFStream -> com.aowagie.text.pdf.aB:
    void toPdf(com.aowagie.text.pdf.PdfWriter,java.io.OutputStream) -> a
com.aowagie.text.pdf.PdfEncodings -> com.aowagie.text.pdf.aC:
    char[] winansiByteToChar -> b
    char[] pdfEncodingByteToChar -> c
    com.aowagie.text.pdf.IntHashtable winansi -> a
    com.aowagie.text.pdf.IntHashtable pdfEncoding -> d
    java.util.HashMap extraEncodings -> e
    java.util.HashMap cmaps -> f
    byte[] convertToBytes(java.lang.String,java.lang.String) -> a
    byte[] convertToBytes(char,java.lang.String) -> a
    java.lang.String convertToString(byte[],java.lang.String) -> a
    boolean isPdfDocEncoding(java.lang.String) -> a
    void addExtraEncoding(java.lang.String,com.aowagie.text.pdf.ExtraEncoding) -> a
com.aowagie.text.pdf.PdfEncodings$Cp437Conversion -> com.aowagie.text.pdf.aD:
    com.aowagie.text.pdf.IntHashtable c2b -> a
    char[] table -> b
    byte[] charToByte(java.lang.String,java.lang.String) -> a
    byte[] charToByte(char,java.lang.String) -> a
    java.lang.String byteToChar(byte[],java.lang.String) -> a
com.aowagie.text.pdf.PdfEncodings$SymbolConversion -> com.aowagie.text.pdf.aE:
    com.aowagie.text.pdf.IntHashtable t1 -> a
    com.aowagie.text.pdf.IntHashtable t2 -> b
    com.aowagie.text.pdf.IntHashtable translation -> c
    char[] table1 -> d
    char[] table2 -> e
    byte[] charToByte(java.lang.String,java.lang.String) -> a
    byte[] charToByte(char,java.lang.String) -> a
    java.lang.String byteToChar(byte[],java.lang.String) -> a
com.aowagie.text.pdf.PdfEncodings$SymbolTTConversion -> com.aowagie.text.pdf.aF:
    byte[] charToByte(char,java.lang.String) -> a
    byte[] charToByte(java.lang.String,java.lang.String) -> a
    java.lang.String byteToChar(byte[],java.lang.String) -> a
com.aowagie.text.pdf.PdfEncodings$WingdingsConversion -> com.aowagie.text.pdf.aG:
    byte[] table -> a
    byte[] charToByte(char,java.lang.String) -> a
    byte[] charToByte(java.lang.String,java.lang.String) -> a
    java.lang.String byteToChar(byte[],java.lang.String) -> a
com.aowagie.text.pdf.PdfEncryption -> com.aowagie.text.pdf.aH:
    byte[] pad -> b
    byte[] salt -> c
    byte[] metadataPad -> d
    byte[] key -> e
    int keySize -> f
    byte[] mkey -> g
    byte[] extra -> h
    java.security.MessageDigest md5 -> i
    byte[] ownerKey -> j
    byte[] userKey -> a
    com.aowagie.text.pdf.PdfPublicKeySecurityHandler publicKeyHandler -> k
    int permissions -> l
    byte[] documentID -> m
    long seq -> n
    int revision -> o
    com.aowagie.text.pdf.crypto.ARCFOUREncryption arcfour -> p
    int keyLength -> q
    boolean encryptMetadata -> r
    boolean embeddedFilesOnly -> s
    int cryptoMode -> t
    void setCryptoMode(int,int) -> a
    boolean isMetadataEncrypted() -> a
    boolean isEmbeddedFilesOnly() -> b
    byte[] padPassword(byte[]) -> d
    byte[] computeOwnerKey(byte[],byte[]) -> a
    void setupGlobalEncryptionKey(byte[],byte[],byte[],int) -> b
    void setupUserKey() -> g
    byte[] createDocumentId() -> c
    void setupByUserPassword(byte[],byte[],byte[],int) -> a
    void setupByUserPad(byte[],byte[],byte[],int) -> c
    void setupByOwnerPassword(byte[],byte[],byte[],byte[],int) -> a
    void setupByOwnerPad(byte[],byte[],byte[],byte[],int) -> b
    void setupByEncryptionKey(byte[],int) -> a
    void setHashKey(int,int) -> b
    com.aowagie.text.pdf.PdfObject createInfoId(byte[]) -> a
    com.aowagie.text.pdf.PdfDictionary getEncryptionDictionary() -> d
    com.aowagie.text.pdf.PdfObject getFileID() -> e
    com.aowagie.text.pdf.OutputStreamEncryption getEncryptionStream(java.io.OutputStream) -> a
    int calculateStreamSize(int) -> a
    byte[] encryptByteArray(byte[]) -> b
    com.aowagie.text.pdf.StandardDecryption getDecryptor() -> f
    byte[] decryptByteArray(byte[]) -> c
com.aowagie.text.pdf.PdfException -> com.aowagie.text.pdf.aI:
com.aowagie.text.pdf.PdfFileSpecification -> com.aowagie.text.pdf.aJ:
    com.aowagie.text.pdf.PdfWriter writer -> a
    com.aowagie.text.pdf.PdfIndirectReference ref -> b
    com.aowagie.text.pdf.PdfFileSpecification fileEmbedded(com.aowagie.text.pdf.PdfWriter,java.lang.String,java.lang.String,byte[]) -> a
    com.aowagie.text.pdf.PdfFileSpecification fileEmbedded(com.aowagie.text.pdf.PdfWriter,java.lang.String,java.lang.String,byte[],int) -> a
    com.aowagie.text.pdf.PdfFileSpecification fileEmbedded(com.aowagie.text.pdf.PdfWriter,java.lang.String,java.lang.String,byte[],java.lang.String,com.aowagie.text.pdf.PdfDictionary,int) -> a
    com.aowagie.text.pdf.PdfFileSpecification fileExtern(com.aowagie.text.pdf.PdfWriter,java.lang.String) -> a
    com.aowagie.text.pdf.PdfIndirectReference getReference() -> b
    void setUnicodeFileName(java.lang.String,boolean) -> b
    void addDescription(java.lang.String,boolean) -> a
com.aowagie.text.pdf.PdfFont -> com.aowagie.text.pdf.aK:
    com.aowagie.text.pdf.BaseFont font -> a
    float size -> b
    com.aowagie.text.Image image -> c
    float hScale -> d
    int compareTo(java.lang.Object) -> compareTo
    float size() -> a
    float width() -> b
    float width(int) -> a
    float width(java.lang.String) -> a
    com.aowagie.text.pdf.BaseFont getFont() -> c
    void setImage(com.aowagie.text.Image) -> a
    com.aowagie.text.pdf.PdfFont getDefaultFont() -> d
    void setHorizontalScaling(float) -> a
com.aowagie.text.pdf.PdfFormField -> com.aowagie.text.pdf.aL:
    com.aowagie.text.pdf.PdfName[] mergeTarget -> m
    com.aowagie.text.pdf.PdfFormField parent -> n
    java.util.ArrayList kids -> o
    void setWidget(com.aowagie.text.Rectangle,com.aowagie.text.pdf.PdfName) -> a
    com.aowagie.text.pdf.PdfFormField createSignature(com.aowagie.text.pdf.PdfWriter) -> a
    com.aowagie.text.pdf.PdfFormField getParent() -> l
    java.util.ArrayList getKids() -> m
    void setFieldName(java.lang.String) -> a
    void mergeResources(com.aowagie.text.pdf.PdfDictionary,com.aowagie.text.pdf.PdfDictionary,com.aowagie.text.pdf.PdfStamperImp) -> a
    void mergeResources(com.aowagie.text.pdf.PdfDictionary,com.aowagie.text.pdf.PdfDictionary) -> a
    void setUsed() -> d
    com.aowagie.text.pdf.PdfAnnotation shallowDuplicate(com.aowagie.text.pdf.PdfAnnotation) -> a
com.aowagie.text.pdf.PdfFormXObject -> com.aowagie.text.pdf.aM:
    com.aowagie.text.pdf.PdfNumber ONE -> a
    com.aowagie.text.pdf.PdfLiteral MATRIX -> b
com.aowagie.text.pdf.PdfFunction -> com.aowagie.text.pdf.aN:
    com.aowagie.text.pdf.PdfWriter writer -> a
    com.aowagie.text.pdf.PdfIndirectReference reference -> b
    com.aowagie.text.pdf.PdfDictionary dictionary -> c
    com.aowagie.text.pdf.PdfIndirectReference getReference() -> a
    com.aowagie.text.pdf.PdfFunction type2(com.aowagie.text.pdf.PdfWriter,float[],float[],float[],float[],float) -> a
com.aowagie.text.pdf.PdfGState -> com.aowagie.text.pdf.aO:
    com.aowagie.text.pdf.PdfName BM_NORMAL -> a
    com.aowagie.text.pdf.PdfName BM_COMPATIBLE -> b
com.aowagie.text.pdf.PdfICCBased -> com.aowagie.text.pdf.aP:
com.aowagie.text.pdf.PdfImage -> com.aowagie.text.pdf.aQ:
    com.aowagie.text.pdf.PdfName name -> a
    com.aowagie.text.pdf.PdfName name() -> b
    void transferBytes(java.io.InputStream,java.io.OutputStream,int) -> a
com.aowagie.text.pdf.PdfImportedPage -> com.aowagie.text.pdf.aR:
    com.aowagie.text.pdf.PdfReaderInstance readerInstance -> m
    int pageNumber -> n
    void addImage(com.aowagie.text.Image,float,float,float,float,float,float) -> a
    void addTemplate(com.aowagie.text.pdf.PdfTemplate,float,float,float,float,float,float) -> a
    com.aowagie.text.pdf.PdfContentByte getDuplicate() -> a
    com.aowagie.text.pdf.PdfStream getFormXObject(int) -> d
    void setColorFill(com.aowagie.text.pdf.PdfSpotColor,float) -> a
    void setColorStroke(com.aowagie.text.pdf.PdfSpotColor,float) -> b
    com.aowagie.text.pdf.PdfObject getResources() -> B
    void setFontAndSize(com.aowagie.text.pdf.BaseFont,float) -> a
    void throwError() -> D
    com.aowagie.text.pdf.PdfReaderInstance getPdfReaderInstance() -> C
com.aowagie.text.pdf.PdfIndirectObject -> com.aowagie.text.pdf.aS:
    int number -> a
    int generation -> b
    byte[] STARTOBJ -> c
    byte[] ENDOBJ -> d
    com.aowagie.text.pdf.PdfObject object -> e
    com.aowagie.text.pdf.PdfWriter writer -> f
    com.aowagie.text.pdf.PdfIndirectReference getIndirectReference() -> a
    void writeTo(java.io.OutputStream) -> a
com.aowagie.text.pdf.PdfIndirectReference -> com.aowagie.text.pdf.aT:
    int number -> a
    int generation -> b
    int getNumber() -> b
    int getGeneration() -> c
    java.lang.String toString() -> toString
com.aowagie.text.pdf.PdfLayer -> com.aowagie.text.pdf.aU:
    com.aowagie.text.pdf.PdfIndirectReference ref -> a
    java.util.ArrayList children -> b
    com.aowagie.text.pdf.PdfLayer parent -> c
    java.lang.String title -> d
    boolean on -> e
    boolean onPanel -> f
    java.lang.String getTitle() -> b
    com.aowagie.text.pdf.PdfLayer getParent() -> c
    java.util.ArrayList getChildren() -> d
    com.aowagie.text.pdf.PdfIndirectReference getRef() -> f
    com.aowagie.text.pdf.PdfObject getPdfObject() -> g
    boolean isOn() -> h
    boolean isOnPanel() -> i
com.aowagie.text.pdf.PdfLayerMembership -> com.aowagie.text.pdf.aV:
    com.aowagie.text.pdf.PdfIndirectReference ref -> a
    com.aowagie.text.pdf.PdfIndirectReference getRef() -> f
    com.aowagie.text.pdf.PdfObject getPdfObject() -> g
com.aowagie.text.pdf.PdfLine -> com.aowagie.text.pdf.aW:
    java.util.ArrayList line -> a
    float left -> b
    float width -> c
    int alignment -> d
    float height -> e
    com.aowagie.text.Chunk listSymbol -> f
    float symbolIndent -> g
    boolean newlineSplit -> h
    float originalWidth -> i
    boolean isRTL -> j
    com.aowagie.text.pdf.PdfChunk add(com.aowagie.text.pdf.PdfChunk) -> a
    void addToLine(com.aowagie.text.pdf.PdfChunk) -> b
    int size() -> a
    java.util.Iterator iterator() -> b
    float height() -> c
    float indentLeft() -> d
    boolean hasToBeJustified() -> e
    void resetAlignment() -> f
    void setExtraIndent(float) -> a
    float widthLeft() -> g
    int numberOfSpaces() -> h
    void setListItem(com.aowagie.text.ListItem) -> a
    com.aowagie.text.Chunk listSymbol() -> i
    float listIndent() -> j
    java.lang.String toString() -> toString
    int GetLineLengthUtf32() -> k
    boolean isNewlineSplit() -> l
    int getLastStrokeChunk() -> m
    com.aowagie.text.pdf.PdfChunk getChunk(int) -> a
    float getOriginalWidth() -> n
    float[] getMaxSize() -> o
    boolean isRTL() -> p
    int getSeparatorCount() -> q
    float getAscender() -> r
    float getDescender() -> s
com.aowagie.text.pdf.PdfLiteral -> com.aowagie.text.pdf.aX:
    int position -> a
    void toPdf(com.aowagie.text.pdf.PdfWriter,java.io.OutputStream) -> a
    int getPosition() -> a
    int getPosLength() -> b
com.aowagie.text.pdf.PdfMediaClipData -> com.aowagie.text.pdf.aY:
com.aowagie.text.pdf.PdfName -> com.aowagie.text.pdf.aZ:
    com.aowagie.text.pdf.PdfName _3D -> a
    com.aowagie.text.pdf.PdfName A -> b
    com.aowagie.text.pdf.PdfName AA -> c
    com.aowagie.text.pdf.PdfName ABSOLUTECOLORIMETRIC -> d
    com.aowagie.text.pdf.PdfName AC -> e
    com.aowagie.text.pdf.PdfName ACROFORM -> f
    com.aowagie.text.pdf.PdfName ACTION -> g
    com.aowagie.text.pdf.PdfName ACTIVATION -> h
    com.aowagie.text.pdf.PdfName ADBE -> i
    com.aowagie.text.pdf.PdfName ACTUALTEXT -> j
    com.aowagie.text.pdf.PdfName ADBE_PKCS7_DETACHED -> k
    com.aowagie.text.pdf.PdfName ADBE_PKCS7_S4 -> l
    com.aowagie.text.pdf.PdfName ADBE_PKCS7_S5 -> m
    com.aowagie.text.pdf.PdfName ADBE_PKCS7_SHA1 -> n
    com.aowagie.text.pdf.PdfName ADBE_X509_RSA_SHA1 -> o
    com.aowagie.text.pdf.PdfName ADOBE_PPKLITE -> p
    com.aowagie.text.pdf.PdfName ADOBE_PPKMS -> q
    com.aowagie.text.pdf.PdfName AESV2 -> r
    com.aowagie.text.pdf.PdfName AIS -> s
    com.aowagie.text.pdf.PdfName ALLPAGES -> t
    com.aowagie.text.pdf.PdfName ALT -> u
    com.aowagie.text.pdf.PdfName ALTERNATE -> v
    com.aowagie.text.pdf.PdfName ANIMATION -> w
    com.aowagie.text.pdf.PdfName ANNOT -> x
    com.aowagie.text.pdf.PdfName ANNOTS -> y
    com.aowagie.text.pdf.PdfName ANTIALIAS -> z
    com.aowagie.text.pdf.PdfName AP -> A
    com.aowagie.text.pdf.PdfName APPDEFAULT -> B
    com.aowagie.text.pdf.PdfName ART -> C
    com.aowagie.text.pdf.PdfName ARTBOX -> D
    com.aowagie.text.pdf.PdfName ASCENT -> E
    com.aowagie.text.pdf.PdfName AS -> F
    com.aowagie.text.pdf.PdfName ASCII85DECODE -> G
    com.aowagie.text.pdf.PdfName ASCIIHEXDECODE -> H
    com.aowagie.text.pdf.PdfName ASSET -> I
    com.aowagie.text.pdf.PdfName ASSETS -> J
    com.aowagie.text.pdf.PdfName AUTHEVENT -> K
    com.aowagie.text.pdf.PdfName AUTHOR -> L
    com.aowagie.text.pdf.PdfName B -> M
    com.aowagie.text.pdf.PdfName BACKGROUND -> N
    com.aowagie.text.pdf.PdfName BASEENCODING -> O
    com.aowagie.text.pdf.PdfName BASEFONT -> P
    com.aowagie.text.pdf.PdfName BASEVERSION -> Q
    com.aowagie.text.pdf.PdfName BBOX -> R
    com.aowagie.text.pdf.PdfName BC -> S
    com.aowagie.text.pdf.PdfName BG -> T
    com.aowagie.text.pdf.PdfName BIBENTRY -> U
    com.aowagie.text.pdf.PdfName BIGFIVE -> V
    com.aowagie.text.pdf.PdfName BINDING -> W
    com.aowagie.text.pdf.PdfName BINDINGMATERIALNAME -> X
    com.aowagie.text.pdf.PdfName BITSPERCOMPONENT -> Y
    com.aowagie.text.pdf.PdfName BITSPERSAMPLE -> Z
    com.aowagie.text.pdf.PdfName BL -> aa
    com.aowagie.text.pdf.PdfName BLACKIS1 -> ab
    com.aowagie.text.pdf.PdfName BLACKPOINT -> ac
    com.aowagie.text.pdf.PdfName BLOCKQUOTE -> ad
    com.aowagie.text.pdf.PdfName BLEEDBOX -> ae
    com.aowagie.text.pdf.PdfName BLINDS -> af
    com.aowagie.text.pdf.PdfName BM -> ag
    com.aowagie.text.pdf.PdfName BORDER -> ah
    com.aowagie.text.pdf.PdfName BOUNDS -> ai
    com.aowagie.text.pdf.PdfName BOX -> aj
    com.aowagie.text.pdf.PdfName BS -> ak
    com.aowagie.text.pdf.PdfName BTN -> al
    com.aowagie.text.pdf.PdfName BYTERANGE -> am
    com.aowagie.text.pdf.PdfName C -> an
    com.aowagie.text.pdf.PdfName C0 -> ao
    com.aowagie.text.pdf.PdfName C1 -> ap
    com.aowagie.text.pdf.PdfName CA -> aq
    com.aowagie.text.pdf.PdfName ca -> ar
    com.aowagie.text.pdf.PdfName CALGRAY -> as
    com.aowagie.text.pdf.PdfName CALRGB -> at
    com.aowagie.text.pdf.PdfName CAPHEIGHT -> au
    com.aowagie.text.pdf.PdfName CAPTION -> av
    com.aowagie.text.pdf.PdfName CATALOG -> aw
    com.aowagie.text.pdf.PdfName CATEGORY -> ax
    com.aowagie.text.pdf.PdfName CCITTFAXDECODE -> ay
    com.aowagie.text.pdf.PdfName CENTER -> az
    com.aowagie.text.pdf.PdfName CENTERWINDOW -> aA
    com.aowagie.text.pdf.PdfName CERT -> aB
    com.aowagie.text.pdf.PdfName CF -> aC
    com.aowagie.text.pdf.PdfName CFM -> aD
    com.aowagie.text.pdf.PdfName CH -> aE
    com.aowagie.text.pdf.PdfName CHARPROCS -> aF
    com.aowagie.text.pdf.PdfName CI -> aG
    com.aowagie.text.pdf.PdfName CIDFONTTYPE0 -> aH
    com.aowagie.text.pdf.PdfName CIDFONTTYPE2 -> aI
    com.aowagie.text.pdf.PdfName CIDSET -> aJ
    com.aowagie.text.pdf.PdfName CIDSYSTEMINFO -> aK
    com.aowagie.text.pdf.PdfName CIDTOGIDMAP -> aL
    com.aowagie.text.pdf.PdfName CIRCLE -> aM
    com.aowagie.text.pdf.PdfName CMD -> aN
    com.aowagie.text.pdf.PdfName CO -> aO
    com.aowagie.text.pdf.PdfName CODE -> aP
    com.aowagie.text.pdf.PdfName COLORS -> aQ
    com.aowagie.text.pdf.PdfName COLORSPACE -> aR
    com.aowagie.text.pdf.PdfName COLLECTION -> aS
    com.aowagie.text.pdf.PdfName COLLECTIONFIELD -> aT
    com.aowagie.text.pdf.PdfName COLLECTIONITEM -> aU
    com.aowagie.text.pdf.PdfName COLLECTIONSCHEMA -> aV
    com.aowagie.text.pdf.PdfName COLLECTIONSORT -> aW
    com.aowagie.text.pdf.PdfName COLLECTIONSUBITEM -> aX
    com.aowagie.text.pdf.PdfName COLUMNS -> aY
    com.aowagie.text.pdf.PdfName CONDITION -> aZ
    com.aowagie.text.pdf.PdfName CONFIGURATION -> ba
    com.aowagie.text.pdf.PdfName CONFIGURATIONS -> bb
    com.aowagie.text.pdf.PdfName CONTACTINFO -> bc
    com.aowagie.text.pdf.PdfName CONTENT -> bd
    com.aowagie.text.pdf.PdfName CONTENTS -> be
    com.aowagie.text.pdf.PdfName COORDS -> bf
    com.aowagie.text.pdf.PdfName COUNT -> bg
    com.aowagie.text.pdf.PdfName COURIER -> bh
    com.aowagie.text.pdf.PdfName COURIER_BOLD -> bi
    com.aowagie.text.pdf.PdfName COURIER_OBLIQUE -> bj
    com.aowagie.text.pdf.PdfName COURIER_BOLDOBLIQUE -> bk
    com.aowagie.text.pdf.PdfName CREATIONDATE -> bl
    com.aowagie.text.pdf.PdfName CREATOR -> bm
    com.aowagie.text.pdf.PdfName CREATORINFO -> bn
    com.aowagie.text.pdf.PdfName CROPBOX -> bo
    com.aowagie.text.pdf.PdfName CRYPT -> bp
    com.aowagie.text.pdf.PdfName CS -> bq
    com.aowagie.text.pdf.PdfName CUEPOINT -> br
    com.aowagie.text.pdf.PdfName CUEPOINTS -> bs
    com.aowagie.text.pdf.PdfName D -> bt
    com.aowagie.text.pdf.PdfName DA -> bu
    com.aowagie.text.pdf.PdfName DATA -> bv
    com.aowagie.text.pdf.PdfName DC -> bw
    com.aowagie.text.pdf.PdfName DCTDECODE -> bx
    com.aowagie.text.pdf.PdfName DEACTIVATION -> by
    com.aowagie.text.pdf.PdfName DECODE -> bz
    com.aowagie.text.pdf.PdfName DECODEPARMS -> bA
    com.aowagie.text.pdf.PdfName DEFAULT -> bB
    com.aowagie.text.pdf.PdfName DEFAULTCRYPTFILTER -> bC
    com.aowagie.text.pdf.PdfName DEFAULTCMYK -> bD
    com.aowagie.text.pdf.PdfName DEFAULTGRAY -> bE
    com.aowagie.text.pdf.PdfName DEFAULTRGB -> bF
    com.aowagie.text.pdf.PdfName DESC -> bG
    com.aowagie.text.pdf.PdfName DESCENDANTFONTS -> bH
    com.aowagie.text.pdf.PdfName DESCENT -> bI
    com.aowagie.text.pdf.PdfName DEST -> bJ
    com.aowagie.text.pdf.PdfName DESTOUTPUTPROFILE -> bK
    com.aowagie.text.pdf.PdfName DESTS -> bL
    com.aowagie.text.pdf.PdfName DEVICEGRAY -> bM
    com.aowagie.text.pdf.PdfName DEVICERGB -> bN
    com.aowagie.text.pdf.PdfName DEVICECMYK -> bO
    com.aowagie.text.pdf.PdfName DI -> bP
    com.aowagie.text.pdf.PdfName DIFFERENCES -> bQ
    com.aowagie.text.pdf.PdfName DISSOLVE -> bR
    com.aowagie.text.pdf.PdfName DIRECTION -> bS
    com.aowagie.text.pdf.PdfName DISPLAYDOCTITLE -> bT
    com.aowagie.text.pdf.PdfName DIV -> bU
    com.aowagie.text.pdf.PdfName DM -> bV
    com.aowagie.text.pdf.PdfName DOCMDP -> bW
    com.aowagie.text.pdf.PdfName DOCOPEN -> bX
    com.aowagie.text.pdf.PdfName DOCUMENT -> bY
    com.aowagie.text.pdf.PdfName DOMAIN -> bZ
    com.aowagie.text.pdf.PdfName DP -> ca
    com.aowagie.text.pdf.PdfName DR -> cb
    com.aowagie.text.pdf.PdfName DS -> cc
    com.aowagie.text.pdf.PdfName DUR -> cd
    com.aowagie.text.pdf.PdfName DUPLEX -> ce
    com.aowagie.text.pdf.PdfName DUPLEXFLIPSHORTEDGE -> cf
    com.aowagie.text.pdf.PdfName DUPLEXFLIPLONGEDGE -> cg
    com.aowagie.text.pdf.PdfName DV -> ch
    com.aowagie.text.pdf.PdfName DW -> ci
    com.aowagie.text.pdf.PdfName E -> cj
    com.aowagie.text.pdf.PdfName EARLYCHANGE -> ck
    com.aowagie.text.pdf.PdfName EF -> cl
    com.aowagie.text.pdf.PdfName EFF -> cm
    com.aowagie.text.pdf.PdfName EFOPEN -> cn
    com.aowagie.text.pdf.PdfName EMBEDDED -> co
    com.aowagie.text.pdf.PdfName EMBEDDEDFILE -> cp
    com.aowagie.text.pdf.PdfName EMBEDDEDFILES -> cq
    com.aowagie.text.pdf.PdfName ENCODE -> cr
    com.aowagie.text.pdf.PdfName ENCODEDBYTEALIGN -> cs
    com.aowagie.text.pdf.PdfName ENCODING -> ct
    com.aowagie.text.pdf.PdfName ENCRYPT -> cu
    com.aowagie.text.pdf.PdfName ENCRYPTMETADATA -> cv
    com.aowagie.text.pdf.PdfName ENDOFBLOCK -> cw
    com.aowagie.text.pdf.PdfName ENDOFLINE -> cx
    com.aowagie.text.pdf.PdfName EXTEND -> cy
    com.aowagie.text.pdf.PdfName EXTENSIONS -> cz
    com.aowagie.text.pdf.PdfName EXTENSIONLEVEL -> cA
    com.aowagie.text.pdf.PdfName EXTGSTATE -> cB
    com.aowagie.text.pdf.PdfName EXPORT -> cC
    com.aowagie.text.pdf.PdfName EXPORTSTATE -> cD
    com.aowagie.text.pdf.PdfName EVENT -> cE
    com.aowagie.text.pdf.PdfName F -> cF
    com.aowagie.text.pdf.PdfName FAR -> cG
    com.aowagie.text.pdf.PdfName FB -> cH
    com.aowagie.text.pdf.PdfName FDECODEPARMS -> cI
    com.aowagie.text.pdf.PdfName FDF -> cJ
    com.aowagie.text.pdf.PdfName FF -> cK
    com.aowagie.text.pdf.PdfName FFILTER -> cL
    com.aowagie.text.pdf.PdfName FIELDS -> cM
    com.aowagie.text.pdf.PdfName FIGURE -> cN
    com.aowagie.text.pdf.PdfName FILEATTACHMENT -> cO
    com.aowagie.text.pdf.PdfName FILESPEC -> cP
    com.aowagie.text.pdf.PdfName FILTER -> cQ
    com.aowagie.text.pdf.PdfName FIRST -> cR
    com.aowagie.text.pdf.PdfName FIRSTCHAR -> cS
    com.aowagie.text.pdf.PdfName FIRSTPAGE -> cT
    com.aowagie.text.pdf.PdfName FIT -> cU
    com.aowagie.text.pdf.PdfName FITH -> cV
    com.aowagie.text.pdf.PdfName FITV -> cW
    com.aowagie.text.pdf.PdfName FITR -> cX
    com.aowagie.text.pdf.PdfName FITB -> cY
    com.aowagie.text.pdf.PdfName FITBH -> cZ
    com.aowagie.text.pdf.PdfName FITBV -> da
    com.aowagie.text.pdf.PdfName FITWINDOW -> db
    com.aowagie.text.pdf.PdfName FLAGS -> dc
    com.aowagie.text.pdf.PdfName FLASH -> dd
    com.aowagie.text.pdf.PdfName FLASHVARS -> de
    com.aowagie.text.pdf.PdfName FLATEDECODE -> df
    com.aowagie.text.pdf.PdfName FO -> dg
    com.aowagie.text.pdf.PdfName FONT -> dh
    com.aowagie.text.pdf.PdfName FONTBBOX -> di
    com.aowagie.text.pdf.PdfName FONTDESCRIPTOR -> dj
    com.aowagie.text.pdf.PdfName FONTFILE -> dk
    com.aowagie.text.pdf.PdfName FONTFILE2 -> dl
    com.aowagie.text.pdf.PdfName FONTFILE3 -> dm
    com.aowagie.text.pdf.PdfName FONTMATRIX -> dn
    com.aowagie.text.pdf.PdfName FONTNAME -> do
    com.aowagie.text.pdf.PdfName FOREGROUND -> dp
    com.aowagie.text.pdf.PdfName FORM -> dq
    com.aowagie.text.pdf.PdfName FORMTYPE -> dr
    com.aowagie.text.pdf.PdfName FORMULA -> ds
    com.aowagie.text.pdf.PdfName FREETEXT -> dt
    com.aowagie.text.pdf.PdfName FRM -> du
    com.aowagie.text.pdf.PdfName FS -> dv
    com.aowagie.text.pdf.PdfName FT -> dw
    com.aowagie.text.pdf.PdfName FULLSCREEN -> dx
    com.aowagie.text.pdf.PdfName FUNCTION -> dy
    com.aowagie.text.pdf.PdfName FUNCTIONS -> dz
    com.aowagie.text.pdf.PdfName FUNCTIONTYPE -> dA
    com.aowagie.text.pdf.PdfName GAMMA -> dB
    com.aowagie.text.pdf.PdfName GBK -> dC
    com.aowagie.text.pdf.PdfName GLITTER -> dD
    com.aowagie.text.pdf.PdfName GOTO -> dE
    com.aowagie.text.pdf.PdfName GOTOE -> dF
    com.aowagie.text.pdf.PdfName GOTOR -> dG
    com.aowagie.text.pdf.PdfName GROUP -> dH
    com.aowagie.text.pdf.PdfName GTS_PDFA1 -> dI
    com.aowagie.text.pdf.PdfName GTS_PDFX -> dJ
    com.aowagie.text.pdf.PdfName GTS_PDFXVERSION -> dK
    com.aowagie.text.pdf.PdfName H -> dL
    com.aowagie.text.pdf.PdfName H1 -> dM
    com.aowagie.text.pdf.PdfName H2 -> dN
    com.aowagie.text.pdf.PdfName H3 -> dO
    com.aowagie.text.pdf.PdfName H4 -> dP
    com.aowagie.text.pdf.PdfName H5 -> dQ
    com.aowagie.text.pdf.PdfName H6 -> dR
    com.aowagie.text.pdf.PdfName HALIGN -> dS
    com.aowagie.text.pdf.PdfName HEIGHT -> dT
    com.aowagie.text.pdf.PdfName HELV -> dU
    com.aowagie.text.pdf.PdfName HELVETICA -> dV
    com.aowagie.text.pdf.PdfName HELVETICA_BOLD -> dW
    com.aowagie.text.pdf.PdfName HELVETICA_OBLIQUE -> dX
    com.aowagie.text.pdf.PdfName HELVETICA_BOLDOBLIQUE -> dY
    com.aowagie.text.pdf.PdfName HID -> dZ
    com.aowagie.text.pdf.PdfName HIDE -> ea
    com.aowagie.text.pdf.PdfName HIDEMENUBAR -> eb
    com.aowagie.text.pdf.PdfName HIDETOOLBAR -> ec
    com.aowagie.text.pdf.PdfName HIDEWINDOWUI -> ed
    com.aowagie.text.pdf.PdfName HIGHLIGHT -> ee
    com.aowagie.text.pdf.PdfName HOFFSET -> ef
    com.aowagie.text.pdf.PdfName I -> eg
    com.aowagie.text.pdf.PdfName ICCBASED -> eh
    com.aowagie.text.pdf.PdfName ID -> ei
    com.aowagie.text.pdf.PdfName IDENTITY -> ej
    com.aowagie.text.pdf.PdfName IF -> ek
    com.aowagie.text.pdf.PdfName IMAGE -> el
    com.aowagie.text.pdf.PdfName IMAGEB -> em
    com.aowagie.text.pdf.PdfName IMAGEC -> en
    com.aowagie.text.pdf.PdfName IMAGEI -> eo
    com.aowagie.text.pdf.PdfName IMAGEMASK -> ep
    com.aowagie.text.pdf.PdfName INDEX -> eq
    com.aowagie.text.pdf.PdfName INDEXED -> er
    com.aowagie.text.pdf.PdfName INFO -> es
    com.aowagie.text.pdf.PdfName INK -> et
    com.aowagie.text.pdf.PdfName INKLIST -> eu
    com.aowagie.text.pdf.PdfName INSTANCES -> ev
    com.aowagie.text.pdf.PdfName IMPORTDATA -> ew
    com.aowagie.text.pdf.PdfName INTENT -> ex
    com.aowagie.text.pdf.PdfName INTERPOLATE -> ey
    com.aowagie.text.pdf.PdfName ISMAP -> ez
    com.aowagie.text.pdf.PdfName IRT -> eA
    com.aowagie.text.pdf.PdfName ITALICANGLE -> eB
    com.aowagie.text.pdf.PdfName ITXT -> eC
    com.aowagie.text.pdf.PdfName IX -> eD
    com.aowagie.text.pdf.PdfName JAVASCRIPT -> eE
    com.aowagie.text.pdf.PdfName JBIG2DECODE -> eF
    com.aowagie.text.pdf.PdfName JBIG2GLOBALS -> eG
    com.aowagie.text.pdf.PdfName JPXDECODE -> eH
    com.aowagie.text.pdf.PdfName JS -> eI
    com.aowagie.text.pdf.PdfName K -> eJ
    com.aowagie.text.pdf.PdfName KEYWORDS -> eK
    com.aowagie.text.pdf.PdfName KIDS -> eL
    com.aowagie.text.pdf.PdfName L -> eM
    com.aowagie.text.pdf.PdfName L2R -> eN
    com.aowagie.text.pdf.PdfName LANG -> eO
    com.aowagie.text.pdf.PdfName LANGUAGE -> eP
    com.aowagie.text.pdf.PdfName LAST -> eQ
    com.aowagie.text.pdf.PdfName LASTCHAR -> eR
    com.aowagie.text.pdf.PdfName LASTPAGE -> eS
    com.aowagie.text.pdf.PdfName LAUNCH -> eT
    com.aowagie.text.pdf.PdfName LBL -> eU
    com.aowagie.text.pdf.PdfName LBODY -> eV
    com.aowagie.text.pdf.PdfName LENGTH -> eW
    com.aowagie.text.pdf.PdfName LENGTH1 -> eX
    com.aowagie.text.pdf.PdfName LI -> eY
    com.aowagie.text.pdf.PdfName LIMITS -> eZ
    com.aowagie.text.pdf.PdfName LINE -> fa
    com.aowagie.text.pdf.PdfName LINEAR -> fb
    com.aowagie.text.pdf.PdfName LINK -> fc
    com.aowagie.text.pdf.PdfName LISTMODE -> fd
    com.aowagie.text.pdf.PdfName LOCATION -> fe
    com.aowagie.text.pdf.PdfName LOCK -> ff
    com.aowagie.text.pdf.PdfName LOCKED -> fg
    com.aowagie.text.pdf.PdfName LZWDECODE -> fh
    com.aowagie.text.pdf.PdfName M -> fi
    com.aowagie.text.pdf.PdfName MATERIAL -> fj
    com.aowagie.text.pdf.PdfName MATRIX -> fk
    com.aowagie.text.pdf.PdfName MAC_EXPERT_ENCODING -> fl
    com.aowagie.text.pdf.PdfName MAC_ROMAN_ENCODING -> fm
    com.aowagie.text.pdf.PdfName MARKED -> fn
    com.aowagie.text.pdf.PdfName MARKINFO -> fo
    com.aowagie.text.pdf.PdfName MASK -> fp
    com.aowagie.text.pdf.PdfName MAX_LOWER_CASE -> fq
    com.aowagie.text.pdf.PdfName MAX_CAMEL_CASE -> fr
    com.aowagie.text.pdf.PdfName MAXLEN -> fs
    com.aowagie.text.pdf.PdfName MEDIABOX -> ft
    com.aowagie.text.pdf.PdfName MCID -> fu
    com.aowagie.text.pdf.PdfName MCR -> fv
    com.aowagie.text.pdf.PdfName METADATA -> fw
    com.aowagie.text.pdf.PdfName MIN_LOWER_CASE -> fx
    com.aowagie.text.pdf.PdfName MIN_CAMEL_CASE -> fy
    com.aowagie.text.pdf.PdfName MK -> fz
    com.aowagie.text.pdf.PdfName MMTYPE1 -> fA
    com.aowagie.text.pdf.PdfName MODDATE -> fB
    com.aowagie.text.pdf.PdfName N -> fC
    com.aowagie.text.pdf.PdfName N0 -> fD
    com.aowagie.text.pdf.PdfName N1 -> fE
    com.aowagie.text.pdf.PdfName N2 -> fF
    com.aowagie.text.pdf.PdfName N3 -> fG
    com.aowagie.text.pdf.PdfName N4 -> fH
    com.aowagie.text.pdf.PdfName NAME -> fI
    com.aowagie.text.pdf.PdfName NAMED -> fJ
    com.aowagie.text.pdf.PdfName NAMES -> fK
    com.aowagie.text.pdf.PdfName NAVIGATION -> fL
    com.aowagie.text.pdf.PdfName NAVIGATIONPANE -> fM
    com.aowagie.text.pdf.PdfName NEAR -> fN
    com.aowagie.text.pdf.PdfName NEEDAPPEARANCES -> fO
    com.aowagie.text.pdf.PdfName NEWWINDOW -> fP
    com.aowagie.text.pdf.PdfName NEXT -> fQ
    com.aowagie.text.pdf.PdfName NEXTPAGE -> fR
    com.aowagie.text.pdf.PdfName NM -> fS
    com.aowagie.text.pdf.PdfName NONE -> fT
    com.aowagie.text.pdf.PdfName NONFULLSCREENPAGEMODE -> fU
    com.aowagie.text.pdf.PdfName NONSTRUCT -> fV
    com.aowagie.text.pdf.PdfName NOTE -> fW
    com.aowagie.text.pdf.PdfName NUMCOPIES -> fX
    com.aowagie.text.pdf.PdfName NUMS -> fY
    com.aowagie.text.pdf.PdfName O -> fZ
    com.aowagie.text.pdf.PdfName OBJ -> ga
    com.aowagie.text.pdf.PdfName OBJR -> gb
    com.aowagie.text.pdf.PdfName OBJSTM -> gc
    com.aowagie.text.pdf.PdfName OC -> gd
    com.aowagie.text.pdf.PdfName OCG -> ge
    com.aowagie.text.pdf.PdfName OCGS -> gf
    com.aowagie.text.pdf.PdfName OCMD -> gg
    com.aowagie.text.pdf.PdfName OCPROPERTIES -> gh
    com.aowagie.text.pdf.PdfName Off -> gi
    com.aowagie.text.pdf.PdfName OFF -> gj
    com.aowagie.text.pdf.PdfName ON -> gk
    com.aowagie.text.pdf.PdfName ONECOLUMN -> gl
    com.aowagie.text.pdf.PdfName OPEN -> gm
    com.aowagie.text.pdf.PdfName OPENACTION -> gn
    com.aowagie.text.pdf.PdfName OP -> go
    com.aowagie.text.pdf.PdfName op -> gp
    com.aowagie.text.pdf.PdfName OPM -> gq
    com.aowagie.text.pdf.PdfName OPT -> gr
    com.aowagie.text.pdf.PdfName ORDER -> gs
    com.aowagie.text.pdf.PdfName ORDERING -> gt
    com.aowagie.text.pdf.PdfName OSCILLATING -> gu
    com.aowagie.text.pdf.PdfName OUTLINES -> gv
    com.aowagie.text.pdf.PdfName OUTPUTCONDITION -> gw
    com.aowagie.text.pdf.PdfName OUTPUTCONDITIONIDENTIFIER -> gx
    com.aowagie.text.pdf.PdfName OUTPUTINTENT -> gy
    com.aowagie.text.pdf.PdfName OUTPUTINTENTS -> gz
    com.aowagie.text.pdf.PdfName P -> gA
    com.aowagie.text.pdf.PdfName PAGE -> gB
    com.aowagie.text.pdf.PdfName PAGELABELS -> gC
    com.aowagie.text.pdf.PdfName PAGELAYOUT -> gD
    com.aowagie.text.pdf.PdfName PAGEMODE -> gE
    com.aowagie.text.pdf.PdfName PAGES -> gF
    com.aowagie.text.pdf.PdfName PAINTTYPE -> gG
    com.aowagie.text.pdf.PdfName PANOSE -> gH
    com.aowagie.text.pdf.PdfName PARAMS -> gI
    com.aowagie.text.pdf.PdfName PARENT -> gJ
    com.aowagie.text.pdf.PdfName PARENTTREE -> gK
    com.aowagie.text.pdf.PdfName PARENTTREENEXTKEY -> gL
    com.aowagie.text.pdf.PdfName PART -> gM
    com.aowagie.text.pdf.PdfName PASSCONTEXTCLICK -> gN
    com.aowagie.text.pdf.PdfName PATTERN -> gO
    com.aowagie.text.pdf.PdfName PATTERNTYPE -> gP
    com.aowagie.text.pdf.PdfName PC -> gQ
    com.aowagie.text.pdf.PdfName PDF -> gR
    com.aowagie.text.pdf.PdfName PDFDOCENCODING -> gS
    com.aowagie.text.pdf.PdfName PERCEPTUAL -> gT
    com.aowagie.text.pdf.PdfName PERMS -> gU
    com.aowagie.text.pdf.PdfName PG -> gV
    com.aowagie.text.pdf.PdfName PI -> gW
    com.aowagie.text.pdf.PdfName PICKTRAYBYPDFSIZE -> gX
    com.aowagie.text.pdf.PdfName PLAYCOUNT -> gY
    com.aowagie.text.pdf.PdfName PO -> gZ
    com.aowagie.text.pdf.PdfName POPUP -> ha
    com.aowagie.text.pdf.PdfName POSITION -> hb
    com.aowagie.text.pdf.PdfName PREDICTOR -> hc
    com.aowagie.text.pdf.PdfName PREFERRED -> hd
    com.aowagie.text.pdf.PdfName PRESENTATION -> he
    com.aowagie.text.pdf.PdfName PRESERVERB -> hf
    com.aowagie.text.pdf.PdfName PREV -> hg
    com.aowagie.text.pdf.PdfName PREVPAGE -> hh
    com.aowagie.text.pdf.PdfName PRINT -> hi
    com.aowagie.text.pdf.PdfName PRINTAREA -> hj
    com.aowagie.text.pdf.PdfName PRINTCLIP -> hk
    com.aowagie.text.pdf.PdfName PRINTPAGERANGE -> hl
    com.aowagie.text.pdf.PdfName PRINTSCALING -> hm
    com.aowagie.text.pdf.PdfName PRINTSTATE -> hn
    com.aowagie.text.pdf.PdfName PRIVATE -> ho
    com.aowagie.text.pdf.PdfName PROCSET -> hp
    com.aowagie.text.pdf.PdfName PRODUCER -> hq
    com.aowagie.text.pdf.PdfName PROPERTIES -> hr
    com.aowagie.text.pdf.PdfName PS -> hs
    com.aowagie.text.pdf.PdfName PUBSEC -> ht
    com.aowagie.text.pdf.PdfName PV -> hu
    com.aowagie.text.pdf.PdfName Q -> hv
    com.aowagie.text.pdf.PdfName QUADPOINTS -> hw
    com.aowagie.text.pdf.PdfName QUOTE -> hx
    com.aowagie.text.pdf.PdfName R -> hy
    com.aowagie.text.pdf.PdfName R2L -> hz
    com.aowagie.text.pdf.PdfName RANGE -> hA
    com.aowagie.text.pdf.PdfName RC -> hB
    com.aowagie.text.pdf.PdfName RBGROUPS -> hC
    com.aowagie.text.pdf.PdfName REASON -> hD
    com.aowagie.text.pdf.PdfName RECIPIENTS -> hE
    com.aowagie.text.pdf.PdfName RECT -> hF
    com.aowagie.text.pdf.PdfName REFERENCE -> hG
    com.aowagie.text.pdf.PdfName REGISTRY -> hH
    com.aowagie.text.pdf.PdfName REGISTRYNAME -> hI
    com.aowagie.text.pdf.PdfName RELATIVECOLORIMETRIC -> hJ
    com.aowagie.text.pdf.PdfName RENDITION -> hK
    com.aowagie.text.pdf.PdfName RESETFORM -> hL
    com.aowagie.text.pdf.PdfName RESOURCES -> hM
    com.aowagie.text.pdf.PdfName RI -> hN
    com.aowagie.text.pdf.PdfName RICHMEDIA -> hO
    com.aowagie.text.pdf.PdfName RICHMEDIAACTIVATION -> hP
    com.aowagie.text.pdf.PdfName RICHMEDIAANIMATION -> hQ
    com.aowagie.text.pdf.PdfName RICHMEDIACOMMAND -> hR
    com.aowagie.text.pdf.PdfName RICHMEDIACONFIGURATION -> hS
    com.aowagie.text.pdf.PdfName RICHMEDIACONTENT -> hT
    com.aowagie.text.pdf.PdfName RICHMEDIADEACTIVATION -> hU
    com.aowagie.text.pdf.PdfName RICHMEDIAEXECUTE -> hV
    com.aowagie.text.pdf.PdfName RICHMEDIAINSTANCE -> hW
    com.aowagie.text.pdf.PdfName RICHMEDIAPARAMS -> hX
    com.aowagie.text.pdf.PdfName RICHMEDIAPOSITION -> hY
    com.aowagie.text.pdf.PdfName RICHMEDIAPRESENTATION -> hZ
    com.aowagie.text.pdf.PdfName RICHMEDIASETTINGS -> ia
    com.aowagie.text.pdf.PdfName RICHMEDIAWINDOW -> ib
    com.aowagie.text.pdf.PdfName ROLEMAP -> ic
    com.aowagie.text.pdf.PdfName ROOT -> id
    com.aowagie.text.pdf.PdfName ROTATE -> ie
    com.aowagie.text.pdf.PdfName ROWS -> if
    com.aowagie.text.pdf.PdfName RUBY -> ig
    com.aowagie.text.pdf.PdfName RUNLENGTHDECODE -> ih
    com.aowagie.text.pdf.PdfName RV -> ii
    com.aowagie.text.pdf.PdfName S -> ij
    com.aowagie.text.pdf.PdfName SATURATION -> ik
    com.aowagie.text.pdf.PdfName SCHEMA -> il
    com.aowagie.text.pdf.PdfName SCREEN -> im
    com.aowagie.text.pdf.PdfName SCRIPTS -> in
    com.aowagie.text.pdf.PdfName SECT -> io
    com.aowagie.text.pdf.PdfName SEPARATION -> ip
    com.aowagie.text.pdf.PdfName SETOCGSTATE -> iq
    com.aowagie.text.pdf.PdfName SETTINGS -> ir
    com.aowagie.text.pdf.PdfName SHADING -> is
    com.aowagie.text.pdf.PdfName SHADINGTYPE -> it
    com.aowagie.text.pdf.PdfName SHIFT_JIS -> iu
    com.aowagie.text.pdf.PdfName SIG -> iv
    com.aowagie.text.pdf.PdfName SIGFLAGS -> iw
    com.aowagie.text.pdf.PdfName SIGREF -> ix
    com.aowagie.text.pdf.PdfName SIMPLEX -> iy
    com.aowagie.text.pdf.PdfName SINGLEPAGE -> iz
    com.aowagie.text.pdf.PdfName SIZE -> iA
    com.aowagie.text.pdf.PdfName SMASK -> iB
    com.aowagie.text.pdf.PdfName SORT -> iC
    com.aowagie.text.pdf.PdfName SOUND -> iD
    com.aowagie.text.pdf.PdfName SPAN -> iE
    com.aowagie.text.pdf.PdfName SPEED -> iF
    com.aowagie.text.pdf.PdfName SPLIT -> iG
    com.aowagie.text.pdf.PdfName SQUARE -> iH
    com.aowagie.text.pdf.PdfName SQUIGGLY -> iI
    com.aowagie.text.pdf.PdfName ST -> iJ
    com.aowagie.text.pdf.PdfName STAMP -> iK
    com.aowagie.text.pdf.PdfName STANDARD -> iL
    com.aowagie.text.pdf.PdfName STATE -> iM
    com.aowagie.text.pdf.PdfName STDCF -> iN
    com.aowagie.text.pdf.PdfName STEMV -> iO
    com.aowagie.text.pdf.PdfName STMF -> iP
    com.aowagie.text.pdf.PdfName STRF -> iQ
    com.aowagie.text.pdf.PdfName STRIKEOUT -> iR
    com.aowagie.text.pdf.PdfName STRUCTPARENT -> iS
    com.aowagie.text.pdf.PdfName STRUCTPARENTS -> iT
    com.aowagie.text.pdf.PdfName STRUCTTREEROOT -> iU
    com.aowagie.text.pdf.PdfName STYLE -> iV
    com.aowagie.text.pdf.PdfName SUBFILTER -> iW
    com.aowagie.text.pdf.PdfName SUBJECT -> iX
    com.aowagie.text.pdf.PdfName SUBMITFORM -> iY
    com.aowagie.text.pdf.PdfName SUBTYPE -> iZ
    com.aowagie.text.pdf.PdfName SUPPLEMENT -> ja
    com.aowagie.text.pdf.PdfName SV -> jb
    com.aowagie.text.pdf.PdfName SW -> jc
    com.aowagie.text.pdf.PdfName SYMBOL -> jd
    com.aowagie.text.pdf.PdfName T -> je
    com.aowagie.text.pdf.PdfName TA -> jf
    com.aowagie.text.pdf.PdfName TABLE -> jg
    com.aowagie.text.pdf.PdfName TABS -> jh
    com.aowagie.text.pdf.PdfName TBODY -> ji
    com.aowagie.text.pdf.PdfName TD -> jj
    com.aowagie.text.pdf.PdfName TEXT -> jk
    com.aowagie.text.pdf.PdfName TFOOT -> jl
    com.aowagie.text.pdf.PdfName TH -> jm
    com.aowagie.text.pdf.PdfName THEAD -> jn
    com.aowagie.text.pdf.PdfName THUMB -> jo
    com.aowagie.text.pdf.PdfName THREADS -> jp
    com.aowagie.text.pdf.PdfName TI -> jq
    com.aowagie.text.pdf.PdfName TIME -> jr
    com.aowagie.text.pdf.PdfName TILINGTYPE -> js
    com.aowagie.text.pdf.PdfName TIMES_ROMAN -> jt
    com.aowagie.text.pdf.PdfName TIMES_BOLD -> ju
    com.aowagie.text.pdf.PdfName TIMES_ITALIC -> jv
    com.aowagie.text.pdf.PdfName TIMES_BOLDITALIC -> jw
    com.aowagie.text.pdf.PdfName TITLE -> jx
    com.aowagie.text.pdf.PdfName TK -> jy
    com.aowagie.text.pdf.PdfName TM -> jz
    com.aowagie.text.pdf.PdfName TOC -> jA
    com.aowagie.text.pdf.PdfName TOCI -> jB
    com.aowagie.text.pdf.PdfName TOGGLE -> jC
    com.aowagie.text.pdf.PdfName TOOLBAR -> jD
    com.aowagie.text.pdf.PdfName TOUNICODE -> jE
    com.aowagie.text.pdf.PdfName TP -> jF
    com.aowagie.text.pdf.PdfName TABLEROW -> jG
    com.aowagie.text.pdf.PdfName TRANS -> jH
    com.aowagie.text.pdf.PdfName TRANSFORMPARAMS -> jI
    com.aowagie.text.pdf.PdfName TRANSFORMMETHOD -> jJ
    com.aowagie.text.pdf.PdfName TRANSPARENCY -> jK
    com.aowagie.text.pdf.PdfName TRANSPARENT -> jL
    com.aowagie.text.pdf.PdfName TRAPPED -> jM
    com.aowagie.text.pdf.PdfName TRIMBOX -> jN
    com.aowagie.text.pdf.PdfName TRUETYPE -> jO
    com.aowagie.text.pdf.PdfName TU -> jP
    com.aowagie.text.pdf.PdfName TWOCOLUMNLEFT -> jQ
    com.aowagie.text.pdf.PdfName TWOCOLUMNRIGHT -> jR
    com.aowagie.text.pdf.PdfName TWOPAGELEFT -> jS
    com.aowagie.text.pdf.PdfName TWOPAGERIGHT -> jT
    com.aowagie.text.pdf.PdfName TX -> jU
    com.aowagie.text.pdf.PdfName TYPE -> jV
    com.aowagie.text.pdf.PdfName TYPE0 -> jW
    com.aowagie.text.pdf.PdfName TYPE1 -> jX
    com.aowagie.text.pdf.PdfName TYPE3 -> jY
    com.aowagie.text.pdf.PdfName U -> jZ
    com.aowagie.text.pdf.PdfName UF -> ka
    com.aowagie.text.pdf.PdfName UHC -> kb
    com.aowagie.text.pdf.PdfName UNDERLINE -> kc
    com.aowagie.text.pdf.PdfName UR -> kd
    com.aowagie.text.pdf.PdfName UR3 -> ke
    com.aowagie.text.pdf.PdfName URI -> kf
    com.aowagie.text.pdf.PdfName URL -> kg
    com.aowagie.text.pdf.PdfName USAGE -> kh
    com.aowagie.text.pdf.PdfName USEATTACHMENTS -> ki
    com.aowagie.text.pdf.PdfName USENONE -> kj
    com.aowagie.text.pdf.PdfName USEOC -> kk
    com.aowagie.text.pdf.PdfName USEOUTLINES -> kl
    com.aowagie.text.pdf.PdfName USER -> km
    com.aowagie.text.pdf.PdfName USERPROPERTIES -> kn
    com.aowagie.text.pdf.PdfName USERUNIT -> ko
    com.aowagie.text.pdf.PdfName USETHUMBS -> kp
    com.aowagie.text.pdf.PdfName V -> kq
    com.aowagie.text.pdf.PdfName V2 -> kr
    com.aowagie.text.pdf.PdfName VALIGN -> ks
    com.aowagie.text.pdf.PdfName VERISIGN_PPKVS -> kt
    com.aowagie.text.pdf.PdfName VERSION -> ku
    com.aowagie.text.pdf.PdfName VIDEO -> kv
    com.aowagie.text.pdf.PdfName VIEW -> kw
    com.aowagie.text.pdf.PdfName VIEWS -> kx
    com.aowagie.text.pdf.PdfName VIEWAREA -> ky
    com.aowagie.text.pdf.PdfName VIEWCLIP -> kz
    com.aowagie.text.pdf.PdfName VIEWERPREFERENCES -> kA
    com.aowagie.text.pdf.PdfName VIEWSTATE -> kB
    com.aowagie.text.pdf.PdfName VISIBLEPAGES -> kC
    com.aowagie.text.pdf.PdfName VOFFSET -> kD
    com.aowagie.text.pdf.PdfName W -> kE
    com.aowagie.text.pdf.PdfName W2 -> kF
    com.aowagie.text.pdf.PdfName WARICHU -> kG
    com.aowagie.text.pdf.PdfName WC -> kH
    com.aowagie.text.pdf.PdfName WIDGET -> kI
    com.aowagie.text.pdf.PdfName WIDTH -> kJ
    com.aowagie.text.pdf.PdfName WIDTHS -> kK
    com.aowagie.text.pdf.PdfName WIN -> kL
    com.aowagie.text.pdf.PdfName WIN_ANSI_ENCODING -> kM
    com.aowagie.text.pdf.PdfName WINDOW -> kN
    com.aowagie.text.pdf.PdfName WINDOWED -> kO
    com.aowagie.text.pdf.PdfName WIPE -> kP
    com.aowagie.text.pdf.PdfName WHITEPOINT -> kQ
    com.aowagie.text.pdf.PdfName WP -> kR
    com.aowagie.text.pdf.PdfName WS -> kS
    com.aowagie.text.pdf.PdfName X -> kT
    com.aowagie.text.pdf.PdfName XA -> kU
    com.aowagie.text.pdf.PdfName XD -> kV
    com.aowagie.text.pdf.PdfName XFA -> kW
    com.aowagie.text.pdf.PdfName XML -> kX
    com.aowagie.text.pdf.PdfName XOBJECT -> kY
    com.aowagie.text.pdf.PdfName XSTEP -> kZ
    com.aowagie.text.pdf.PdfName XREF -> la
    com.aowagie.text.pdf.PdfName XREFSTM -> lb
    com.aowagie.text.pdf.PdfName XYZ -> lc
    com.aowagie.text.pdf.PdfName YSTEP -> ld
    com.aowagie.text.pdf.PdfName ZADB -> le
    com.aowagie.text.pdf.PdfName ZAPFDINGBATS -> lf
    com.aowagie.text.pdf.PdfName ZOOM -> lg
    java.util.Map staticNames -> lh
    int hash -> lk
    int compareTo(java.lang.Object) -> compareTo
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    byte[] encodeName(java.lang.String) -> a
    java.lang.String decodeName(java.lang.String) -> b
com.aowagie.text.pdf.PdfNameTree -> com.aowagie.text.pdf.ba:
    com.aowagie.text.pdf.PdfDictionary writeTree(java.util.HashMap,com.aowagie.text.pdf.PdfWriter) -> a
    void iterateItems(com.aowagie.text.pdf.PdfDictionary,java.util.HashMap) -> a
    java.util.HashMap readTree(com.aowagie.text.pdf.PdfDictionary) -> a
com.aowagie.text.pdf.PdfNull -> com.aowagie.text.pdf.bb:
    com.aowagie.text.pdf.PdfNull PDFNULL -> a
    java.lang.String toString() -> toString
com.aowagie.text.pdf.PdfNumber -> com.aowagie.text.pdf.bc:
    double value -> a
    int intValue() -> a
    double doubleValue() -> b
    float floatValue() -> c
com.aowagie.text.pdf.PdfNumberTree -> com.aowagie.text.pdf.bd:
    com.aowagie.text.pdf.PdfDictionary writeTree(java.util.HashMap,com.aowagie.text.pdf.PdfWriter) -> a
com.aowagie.text.pdf.PdfOCG -> com.aowagie.text.pdf.be:
    com.aowagie.text.pdf.PdfIndirectReference getRef() -> f
    com.aowagie.text.pdf.PdfObject getPdfObject() -> g
com.aowagie.text.pdf.PdfOCProperties -> com.aowagie.text.pdf.bf:
com.aowagie.text.pdf.PdfObject -> com.aowagie.text.pdf.bg:
    byte[] bytes -> li
    int type -> lj
    com.aowagie.text.pdf.PRIndirectReference indRef -> a
    void toPdf(com.aowagie.text.pdf.PdfWriter,java.io.OutputStream) -> a
    java.lang.String toString() -> toString
    byte[] getBytes() -> e
    boolean canBeInObjStm() -> n
    void setContent(java.lang.String) -> e
    int type() -> o
    boolean isNull() -> p
    boolean isNumber() -> q
    boolean isString() -> r
    boolean isName() -> s
    boolean isArray() -> t
    boolean isDictionary() -> u
    boolean isStream() -> v
    boolean isIndirect() -> w
    com.aowagie.text.pdf.PRIndirectReference getIndRef() -> x
    void setIndRef(com.aowagie.text.pdf.PRIndirectReference) -> a
com.aowagie.text.pdf.PdfOutline -> com.aowagie.text.pdf.bh:
    com.aowagie.text.pdf.PdfIndirectReference reference -> c
    int count -> d
    com.aowagie.text.pdf.PdfOutline parent -> e
    com.aowagie.text.pdf.PdfDestination destination -> f
    com.aowagie.text.pdf.PdfAction action -> g
    java.util.ArrayList kids -> a
    com.aowagie.text.pdf.PdfWriter writer -> b
    boolean open -> h
    java.awt.Color color -> m
    int style -> n
    void initOutline(com.aowagie.text.pdf.PdfOutline,java.lang.String,boolean) -> a
    void setIndirectReference(com.aowagie.text.pdf.PdfIndirectReference) -> a
    com.aowagie.text.pdf.PdfIndirectReference indirectReference() -> b
    com.aowagie.text.pdf.PdfOutline parent() -> c
    boolean setDestinationPage(com.aowagie.text.pdf.PdfIndirectReference) -> b
    int getCount() -> d
    void setCount(int) -> a
    int level() -> f
    void toPdf(com.aowagie.text.pdf.PdfWriter,java.io.OutputStream) -> a
    void addKid(com.aowagie.text.pdf.PdfOutline) -> a
    java.util.ArrayList getKids() -> g
    boolean isOpen() -> h
com.aowagie.text.pdf.PdfPCell -> com.aowagie.text.pdf.bi:
    com.aowagie.text.pdf.ColumnText column -> b
    int verticalAlignment -> c
    float paddingLeft -> d
    float paddingRight -> e
    float paddingTop -> f
    float paddingBottom -> g
    float fixedHeight -> h
    float minimumHeight -> i
    boolean noWrap -> j
    com.aowagie.text.pdf.PdfPTable table -> k
    int colspan -> l
    int rowspan -> m
    com.aowagie.text.Image image -> n
    com.aowagie.text.pdf.PdfPCellEvent cellEvent -> v
    boolean useDescender -> w
    boolean useBorderPadding -> x
    com.aowagie.text.Phrase phrase -> a
    int rotation -> y
    void addElement(com.aowagie.text.Element) -> a
    void setPhrase(com.aowagie.text.Phrase) -> a
    int getHorizontalAlignment() -> c
    void setHorizontalAlignment(int) -> a
    int getVerticalAlignment() -> d
    void setVerticalAlignment(int) -> b
    float getEffectivePaddingLeft() -> f
    void setPaddingLeft(float) -> a
    float getEffectivePaddingRight() -> g
    void setPaddingRight(float) -> b
    float getEffectivePaddingTop() -> h
    void setPaddingTop(float) -> c
    float getEffectivePaddingBottom() -> i
    void setPaddingBottom(float) -> m
    void setPadding(float) -> n
    boolean isUseBorderPadding() -> j
    void setUseBorderPadding(boolean) -> a
    void setLeading(float,float) -> a
    void setFixedHeight(float) -> o
    float getFixedHeight() -> m
    boolean hasFixedHeight() -> n
    void setMinimumHeight(float) -> p
    float getMinimumHeight() -> o
    boolean isNoWrap() -> p
    void setNoWrap(boolean) -> b
    int getColspan() -> q
    void setColspan(int) -> c
    int getRowspan() -> r
    void setRowspan(int) -> d
    void setRunDirection(int) -> h
    int getRunDirection() -> s
    com.aowagie.text.Image getImage() -> t
    com.aowagie.text.pdf.PdfPCellEvent getCellEvent() -> y
    void setCellEvent(com.aowagie.text.pdf.PdfPCellEvent) -> a
    void setUseAscender(boolean) -> c
    boolean isUseDescender() -> z
    void setUseDescender(boolean) -> d
    com.aowagie.text.pdf.ColumnText getColumn() -> A
    void setColumn(com.aowagie.text.pdf.ColumnText) -> a
    int getRotation() -> W
    void consumeHeight(float) -> q
    float getMaxHeight() -> B
com.aowagie.text.pdf.PdfPCellEvent -> com.aowagie.text.pdf.bj:
    void cellLayout(com.aowagie.text.pdf.PdfPCell,com.aowagie.text.Rectangle,com.aowagie.text.pdf.PdfContentByte[]) -> a
com.aowagie.text.pdf.PdfPKCS7 -> com.aowagie.text.pdf.bk:
    byte[] sigAttr -> a
    byte[] digestAttr -> b
    int version -> c
    int signerversion -> d
    java.util.Set digestalgos -> e
    java.util.Collection certs -> f
    java.util.Collection crls -> g
    java.util.Collection signCerts -> h
    java.security.cert.X509Certificate signCert -> i
    byte[] digest -> j
    java.security.MessageDigest messageDigest -> k
    java.lang.String digestAlgorithm -> l
    java.lang.String digestEncryptionAlgorithm -> m
    java.security.Signature sig -> n
    java.security.PrivateKey privKey -> o
    byte[] RSAdata -> p
    byte[] externalDigest -> q
    byte[] externalRSAdata -> r
    java.lang.String provider -> s
    java.lang.String reason -> t
    java.lang.String location -> u
    java.util.Calendar signDate -> v
    java.lang.String signName -> w
    org.spongycastle.tsp.TimeStampToken timeStampToken -> x
    java.util.HashMap digestNames -> y
    java.util.HashMap algorithmNames -> z
    java.util.HashMap allowedDigests -> A
    org.spongycastle.cert.ocsp.BasicOCSPResp basicResp -> B
    java.lang.String getDigest(java.lang.String) -> d
    java.lang.String getAlgorithm(java.lang.String) -> e
    void findOcsp(org.spongycastle.asn1.ASN1Sequence) -> a
    void update(byte[],int,int) -> a
    java.security.cert.Certificate[] getSignCertificateChain() -> a
    void signCertificateChain() -> h
    java.security.cert.X509Certificate getSigningCertificate() -> b
    java.lang.String getDigestAlgorithm() -> c
    java.lang.String getHashAlgorithm() -> d
    org.spongycastle.asn1.ASN1Primitive getIssuer(byte[]) -> a
    org.spongycastle.asn1.ASN1Primitive getSubject(byte[]) -> b
    com.aowagie.text.pdf.PdfPKCS7$X509Name getSubjectFields(java.security.cert.X509Certificate) -> a
    byte[] getEncodedPKCS1() -> e
    void setExternalDigest(byte[],byte[],java.lang.String) -> a
    byte[] getEncodedPKCS7() -> f
    byte[] getEncodedPKCS7(byte[],java.util.Calendar,com.aowagie.text.pdf.TSAClient,byte[]) -> a
    org.spongycastle.asn1.ASN1EncodableVector buildUnauthenticatedAttributes(byte[]) -> c
    org.spongycastle.asn1.DERSet getAuthenticatedAttributeSet(byte[],java.util.Calendar,byte[]) -> a
    void setReason(java.lang.String) -> a
    void setLocation(java.lang.String) -> b
    java.util.Calendar getSignDate() -> g
    void setSignDate(java.util.Calendar) -> a
    void setSignName(java.lang.String) -> c
    java.lang.String getDigestAlgorithmName(java.lang.String) -> f
com.aowagie.text.pdf.PdfPKCS7$X509Name -> com.aowagie.text.pdf.bl:
    org.spongycastle.asn1.ASN1ObjectIdentifier C -> a
    org.spongycastle.asn1.ASN1ObjectIdentifier O -> b
    org.spongycastle.asn1.ASN1ObjectIdentifier OU -> c
    org.spongycastle.asn1.ASN1ObjectIdentifier T -> d
    org.spongycastle.asn1.ASN1ObjectIdentifier CN -> e
    org.spongycastle.asn1.ASN1ObjectIdentifier SN -> f
    org.spongycastle.asn1.ASN1ObjectIdentifier L -> g
    org.spongycastle.asn1.ASN1ObjectIdentifier ST -> h
    org.spongycastle.asn1.ASN1ObjectIdentifier SURNAME -> i
    org.spongycastle.asn1.ASN1ObjectIdentifier GIVENNAME -> j
    org.spongycastle.asn1.ASN1ObjectIdentifier INITIALS -> k
    org.spongycastle.asn1.ASN1ObjectIdentifier GENERATION -> l
    org.spongycastle.asn1.ASN1ObjectIdentifier EmailAddress -> m
    org.spongycastle.asn1.ASN1ObjectIdentifier DC -> n
    org.spongycastle.asn1.ASN1ObjectIdentifier UID -> o
    java.util.HashMap DefaultSymbols -> p
    java.util.HashMap values -> q
    java.lang.String getField(java.lang.String) -> a
    java.lang.String toString() -> toString
com.aowagie.text.pdf.PdfPRow -> com.aowagie.text.pdf.bm:
    com.aowagie.text.pdf.PdfPCell[] cells -> a
    float[] widths -> b
    float[] extraHeights -> c
    float maxHeight -> d
    boolean calculated -> e
    int[] canvasesPos -> f
    boolean setWidths(float[]) -> a
    void initExtraHeights() -> a
    void setExtraHeight(int,float) -> a
    float calculateHeights() -> d
    void writeBorderAndBackground(float,float,float,com.aowagie.text.pdf.PdfPCell,com.aowagie.text.pdf.PdfContentByte[]) -> a
    void saveAndRotateCanvases(com.aowagie.text.pdf.PdfContentByte[],float,float,float,float,float,float) -> a
    void restoreCanvases(com.aowagie.text.pdf.PdfContentByte[]) -> a
    float setColumn(com.aowagie.text.pdf.ColumnText,float,float,float,float) -> a
    void writeCells(int,int,float,float,com.aowagie.text.pdf.PdfContentByte[]) -> a
    float getMaxHeights() -> b
    void setMaxHeights(float) -> a
    float[] getEventWidth(float) -> b
    com.aowagie.text.pdf.PdfPRow splitRow(com.aowagie.text.pdf.PdfPTable,int,float) -> a
    com.aowagie.text.pdf.PdfPCell[] getCells() -> c
com.aowagie.text.pdf.PdfPTable -> com.aowagie.text.pdf.bn:
    java.util.ArrayList rows -> a
    float totalHeight -> b
    com.aowagie.text.pdf.PdfPCell[] currentRow -> c
    int currentRowIdx -> d
    com.aowagie.text.pdf.PdfPCell defaultCell -> e
    float totalWidth -> f
    float[] relativeWidths -> g
    float[] absoluteWidths -> h
    com.aowagie.text.pdf.PdfPTableEvent tableEvent -> i
    int headerRows -> j
    float widthPercentage -> k
    int horizontalAlignment -> r
    boolean skipFirstHeader -> s
    boolean skipLastFooter -> t
    boolean isColspan -> l
    int runDirection -> m
    boolean lockedWidth -> u
    boolean splitRows -> v
    float spacingBefore -> n
    float spacingAfter -> o
    boolean extendLastRow -> w
    boolean headersInEvent -> x
    boolean splitLate -> y
    boolean keepTogether -> z
    boolean complete -> p
    int footerRows -> A
    boolean rowCompleted -> q
    com.aowagie.text.pdf.PdfPTable shallowCopy(com.aowagie.text.pdf.PdfPTable) -> a
    void copyFormat(com.aowagie.text.pdf.PdfPTable) -> b
    void setWidths(float[]) -> a
    void calculateWidths() -> e
    void setTotalWidth(float) -> a
    float getTotalWidth() -> f
    float calculateHeights(boolean) -> a
    void addCell(com.aowagie.text.pdf.PdfPCell) -> a
    void skipColsWithRowspanAbove() -> D
    boolean rowSpanAbove(int,int) -> a
    float writeSelectedRows(int,int,float,float,com.aowagie.text.pdf.PdfContentByte[]) -> a
    float writeSelectedRows(int,int,int,int,float,float,com.aowagie.text.pdf.PdfContentByte[]) -> a
    float writeSelectedRows(int,int,float,float,com.aowagie.text.pdf.PdfContentByte) -> a
    float writeSelectedRows(int,int,int,int,float,float,com.aowagie.text.pdf.PdfContentByte) -> a
    com.aowagie.text.pdf.PdfContentByte[] beginWritingRows(com.aowagie.text.pdf.PdfContentByte) -> a
    void endWritingRows(com.aowagie.text.pdf.PdfContentByte[]) -> a
    int size() -> g
    float getTotalHeight() -> h
    float getRowHeight(int) -> a
    float getRowHeight(int,boolean) -> a
    float getRowspanHeight(int,int) -> b
    float getHeaderHeight() -> i
    float getFooterHeight() -> j
    void deleteBodyRows() -> m
    int getNumberOfColumns() -> n
    int getHeaderRows() -> o
    void setHeaderRows(int) -> b
    java.util.ArrayList getChunks() -> a
    int type() -> b
    boolean isContent() -> k
    boolean isNestable() -> l
    boolean process(com.aowagie.text.ElementListener) -> a
    float getWidthPercentage() -> p
    void setWidthPercentage(float) -> b
    int getHorizontalAlignment() -> q
    void setHorizontalAlignment(int) -> c
    com.aowagie.text.pdf.PdfPRow getRow(int) -> d
    java.util.ArrayList getRows() -> r
    java.util.ArrayList getRows(int,int) -> c
    com.aowagie.text.pdf.PdfPRow adjustCellsInRow(int,int) -> d
    void setTableEvent(com.aowagie.text.pdf.PdfPTableEvent) -> a
    float[][] getEventWidths(float,int,int,boolean) -> a
    boolean isSkipFirstHeader() -> s
    boolean isSkipLastFooter() -> t
    void setSkipFirstHeader(boolean) -> b
    boolean isLockedWidth() -> u
    void setLockedWidth(boolean) -> c
    boolean isSplitRows() -> v
    void setSpacingBefore(float) -> c
    void setSpacingAfter(float) -> d
    float spacingBefore() -> w
    float spacingAfter() -> x
    boolean isExtendLastRow() -> y
    void setExtendLastRow(boolean) -> d
    boolean isHeadersInEvent() -> z
    void setHeadersInEvent(boolean) -> e
    boolean isSplitLate() -> A
    void setSplitLate(boolean) -> f
    void setKeepTogether(boolean) -> g
    boolean getKeepTogether() -> B
    int getFooterRows() -> C
    void flushContent() -> d
    boolean isComplete() -> c
    void setComplete(boolean) -> h
com.aowagie.text.pdf.PdfPTableEvent -> com.aowagie.text.pdf.bo:
    void tableLayout(com.aowagie.text.pdf.PdfPTable,float[][],float[],int,int,com.aowagie.text.pdf.PdfContentByte[]) -> a
com.aowagie.text.pdf.PdfPage -> com.aowagie.text.pdf.bp:
    java.lang.String[] boxStrings -> a
    com.aowagie.text.pdf.PdfName[] boxNames -> b
    com.aowagie.text.pdf.PdfRectangle mediaBox -> c
    void add(com.aowagie.text.pdf.PdfIndirectReference) -> a
com.aowagie.text.pdf.PdfPageEvent -> com.aowagie.text.pdf.bq:
    void onOpenDocument(com.aowagie.text.pdf.PdfWriter,com.aowagie.text.Document) -> a
    void onStartPage(com.aowagie.text.pdf.PdfWriter,com.aowagie.text.Document) -> b
    void onEndPage(com.aowagie.text.pdf.PdfWriter,com.aowagie.text.Document) -> c
    void onCloseDocument(com.aowagie.text.pdf.PdfWriter,com.aowagie.text.Document) -> d
    void onParagraph(com.aowagie.text.pdf.PdfWriter,com.aowagie.text.Document,float) -> a
    void onParagraphEnd(com.aowagie.text.pdf.PdfWriter,com.aowagie.text.Document,float) -> b
    void onChapter(com.aowagie.text.pdf.PdfWriter,com.aowagie.text.Document,float,com.aowagie.text.Paragraph) -> a
    void onChapterEnd(com.aowagie.text.pdf.PdfWriter,com.aowagie.text.Document,float) -> c
    void onSection(com.aowagie.text.pdf.PdfWriter,com.aowagie.text.Document,float,int,com.aowagie.text.Paragraph) -> a
    void onSectionEnd(com.aowagie.text.pdf.PdfWriter,com.aowagie.text.Document,float) -> d
    void onGenericTag(com.aowagie.text.pdf.PdfWriter,com.aowagie.text.Document,com.aowagie.text.Rectangle,java.lang.String) -> a
com.aowagie.text.pdf.PdfPageLabels -> com.aowagie.text.pdf.br:
    com.aowagie.text.pdf.PdfName[] numberingStyle -> a
    java.util.HashMap map -> b
    com.aowagie.text.pdf.PdfDictionary getDictionary(com.aowagie.text.pdf.PdfWriter) -> a
com.aowagie.text.pdf.PdfPages -> com.aowagie.text.pdf.bs:
    java.util.ArrayList pages -> a
    java.util.ArrayList parents -> b
    int leafSize -> c
    com.aowagie.text.pdf.PdfWriter writer -> d
    com.aowagie.text.pdf.PdfIndirectReference topParent -> e
    void addPage(com.aowagie.text.pdf.PdfDictionary) -> a
    com.aowagie.text.pdf.PdfIndirectReference writePageTree() -> a
com.aowagie.text.pdf.PdfPattern -> com.aowagie.text.pdf.bt:
com.aowagie.text.pdf.PdfPatternPainter -> com.aowagie.text.pdf.bu:
    float xstep -> m
    float ystep -> n
    boolean stencil -> o
    java.awt.Color defaultColor -> p
    float getXStep() -> C
    float getYStep() -> D
    boolean isStencil() -> E
    com.aowagie.text.pdf.PdfPattern getPattern(int) -> e
    com.aowagie.text.pdf.PdfContentByte getDuplicate() -> a
    java.awt.Color getDefaultColor() -> F
    void setGrayFill(float) -> c
    void setGrayStroke(float) -> d
    void resetGrayStroke() -> g
    void resetRGBColorFill() -> h
    void resetRGBColorStroke() -> i
    void setCMYKColorFillF(float,float,float,float) -> a
    void setCMYKColorStrokeF(float,float,float,float) -> b
    void addImage(com.aowagie.text.Image,float,float,float,float,float,float) -> a
    void setRGBColorFill(int,int,int) -> a
    void setRGBColorStroke(int,int,int) -> b
    void setColorStroke(java.awt.Color) -> a
    void setColorFill(java.awt.Color) -> b
    void setColorFill(com.aowagie.text.pdf.PdfSpotColor,float) -> a
    void setColorStroke(com.aowagie.text.pdf.PdfSpotColor,float) -> b
    void setPatternFill(com.aowagie.text.pdf.PdfPatternPainter) -> a
    void setPatternFill(com.aowagie.text.pdf.PdfPatternPainter,java.awt.Color,float) -> a
    void setPatternStroke(com.aowagie.text.pdf.PdfPatternPainter,java.awt.Color,float) -> b
    void setPatternStroke(com.aowagie.text.pdf.PdfPatternPainter) -> b
    void checkNoColor() -> O
com.aowagie.text.pdf.PdfPublicKeyRecipient -> com.aowagie.text.pdf.bv:
    java.security.cert.Certificate certificate -> a
    int permission -> b
    byte[] cms -> c
    java.security.cert.Certificate getCertificate() -> a
    int getPermission() -> b
    void setCms(byte[]) -> a
    byte[] getCms() -> c
com.aowagie.text.pdf.PdfPublicKeySecurityHandler -> com.aowagie.text.pdf.bw:
    java.util.ArrayList recipients -> a
    byte[] seed -> b
    byte[] getSeed() -> a
    int getRecipientsSize() -> b
    byte[] getEncodedRecipient(int) -> a
    com.aowagie.text.pdf.PdfArray getEncodedRecipients() -> c
    org.spongycastle.asn1.ASN1Primitive createDERForRecipient(byte[],java.security.cert.X509Certificate) -> a
    org.spongycastle.asn1.cms.KeyTransRecipientInfo computeRecipientInfo(java.security.cert.X509Certificate,byte[]) -> a
com.aowagie.text.pdf.PdfReader -> com.aowagie.text.pdf.bx:
    com.aowagie.text.pdf.PdfName[] pageInhCandidates -> e
    byte[] endstream -> f
    byte[] endobj -> g
    com.aowagie.text.pdf.PRTokeniser tokens -> a
    int[] xref -> h
    java.util.HashMap objStmMark -> i
    com.aowagie.text.pdf.IntHashtable objStmToOffset -> j
    boolean newXrefType -> k
    java.util.ArrayList xrefObj -> l
    com.aowagie.text.pdf.PdfDictionary rootPages -> m
    com.aowagie.text.pdf.PdfDictionary trailer -> b
    com.aowagie.text.pdf.PdfDictionary catalog -> c
    com.aowagie.text.pdf.PdfReader$PageRefs pageRefs -> d
    com.aowagie.text.pdf.PRAcroForm acroForm -> n
    boolean acroFormParsed -> o
    boolean encrypted -> p
    boolean rebuilt -> q
    int freeXref -> r
    boolean tampered -> s
    int lastXref -> t
    int eofPos -> u
    char pdfVersion -> v
    com.aowagie.text.pdf.PdfEncryption decrypt -> w
    byte[] password -> x
    java.security.Key certificateKey -> y
    java.security.cert.Certificate certificate -> z
    java.lang.String certificateKeyProvider -> A
    boolean ownerPasswordUsed -> B
    java.util.ArrayList strings -> C
    boolean sharedStreams -> D
    boolean consolidateNamedDestinations -> E
    int rValue -> F
    int pValue -> G
    int objNum -> H
    int objGen -> I
    int fileLength -> J
    boolean hybridXref -> K
    int lastXrefPartial -> L
    boolean partial -> M
    com.aowagie.text.pdf.PRIndirectReference cryptoRef -> N
    com.aowagie.text.pdf.internal.PdfViewerPreferencesImp viewerPreferences -> O
    boolean encryptionError -> P
    boolean appendable -> Q
    int readDepth -> R
    com.aowagie.text.pdf.RandomAccessFileOrArray getSafeFile() -> a
    int getNumberOfPages() -> b
    com.aowagie.text.pdf.PdfDictionary getCatalog() -> c
    int getPageRotation(int) -> a
    int getPageRotation(com.aowagie.text.pdf.PdfDictionary) -> a
    com.aowagie.text.Rectangle getPageSizeWithRotation(int) -> b
    com.aowagie.text.Rectangle getPageSizeWithRotation(com.aowagie.text.pdf.PdfDictionary) -> b
    com.aowagie.text.Rectangle getPageSize(int) -> c
    com.aowagie.text.Rectangle getPageSize(com.aowagie.text.pdf.PdfDictionary) -> c
    com.aowagie.text.Rectangle getNormalizedRectangle(com.aowagie.text.pdf.PdfArray) -> a
    void readPdf() -> d
    boolean equalsArray(byte[],byte[],int) -> a
    void readDecryptedDocObj() -> C
    com.aowagie.text.pdf.PdfObject getPdfObjectRelease(com.aowagie.text.pdf.PdfObject) -> a
    com.aowagie.text.pdf.PdfObject getPdfObject(com.aowagie.text.pdf.PdfObject) -> b
    com.aowagie.text.pdf.PdfObject getPdfObjectRelease(com.aowagie.text.pdf.PdfObject,com.aowagie.text.pdf.PdfObject) -> a
    com.aowagie.text.pdf.PdfObject getPdfObject(com.aowagie.text.pdf.PdfObject,com.aowagie.text.pdf.PdfObject) -> b
    com.aowagie.text.pdf.PdfObject getPdfObjectRelease(int) -> d
    com.aowagie.text.pdf.PdfObject getPdfObject(int) -> e
    void releaseLastXrefPartial() -> D
    void releaseLastXrefPartial(com.aowagie.text.pdf.PdfObject) -> c
    com.aowagie.text.pdf.PRIndirectReference addPdfObject(com.aowagie.text.pdf.PdfObject) -> d
    void readPages() -> e
    com.aowagie.text.pdf.PdfObject readSingleObject(int) -> j
    com.aowagie.text.pdf.PdfObject readOneObjStm(com.aowagie.text.pdf.PRStream,int) -> a
    void readDocObj() -> f
    void checkPRStreamLength(com.aowagie.text.pdf.PRStream) -> c
    void readObjStm(com.aowagie.text.pdf.PRStream,com.aowagie.text.pdf.IntHashtable) -> a
    com.aowagie.text.pdf.PdfObject killIndirect(com.aowagie.text.pdf.PdfObject) -> e
    void ensureXrefSize(int) -> k
    void readXref() -> E
    com.aowagie.text.pdf.PdfDictionary readXrefSection() -> F
    boolean readXRefStream(int) -> l
    void rebuildXref() -> g
    com.aowagie.text.pdf.PdfDictionary readDictionary() -> G
    com.aowagie.text.pdf.PdfArray readArray() -> H
    com.aowagie.text.pdf.PdfObject readPRObject() -> I
    byte[] FlateDecode(byte[]) -> a
    byte[] decodePredictor(byte[],com.aowagie.text.pdf.PdfObject) -> a
    byte[] FlateDecode(byte[],boolean) -> a
    byte[] ASCIIHexDecode(byte[]) -> b
    byte[] ASCII85Decode(byte[]) -> c
    byte[] LZWDecode(byte[]) -> d
    boolean isRebuilt() -> h
    com.aowagie.text.pdf.PdfDictionary getPageN(int) -> f
    com.aowagie.text.pdf.PdfDictionary getPageNRelease(int) -> g
    void releasePage(int) -> h
    com.aowagie.text.pdf.PRIndirectReference getPageOrigRef(int) -> i
    byte[] getPageContent(int,com.aowagie.text.pdf.RandomAccessFileOrArray) -> a
    void killXref(com.aowagie.text.pdf.PdfObject) -> f
    byte[] getStreamBytes(com.aowagie.text.pdf.PRStream,com.aowagie.text.pdf.RandomAccessFileOrArray) -> a
    byte[] getStreamBytes(com.aowagie.text.pdf.PRStream) -> a
    byte[] getStreamBytesRaw(com.aowagie.text.pdf.PRStream,com.aowagie.text.pdf.RandomAccessFileOrArray) -> b
    byte[] getStreamBytesRaw(com.aowagie.text.pdf.PRStream) -> b
    void eliminateSharedStreams() -> J
    boolean isTampered() -> i
    void setTampered(boolean) -> a
    byte[] getMetadata() -> j
    int getLastXref() -> k
    int getXrefSize() -> l
    char getPdfVersion() -> m
    boolean isEncrypted() -> n
    com.aowagie.text.pdf.PdfDictionary getTrailer() -> o
    com.aowagie.text.pdf.PdfEncryption getDecrypt() -> p
    boolean equalsn(byte[],byte[]) -> a
    void close() -> q
    void removeUnusedNode(com.aowagie.text.pdf.PdfObject,boolean[]) -> a
    int removeUnusedObjects() -> K
    com.aowagie.text.pdf.AcroFields getAcroFields() -> r
    void setViewerPreferences(com.aowagie.text.pdf.internal.PdfViewerPreferencesImp) -> a
    boolean isAppendable() -> s
    void setAppendable(boolean) -> b
    boolean isNewXrefType() -> t
    int getFileLength() -> u
    boolean isHybridXref() -> v
    com.aowagie.text.pdf.PdfIndirectReference getCryptoRef() -> w
    void removeUsageRights() -> x
    int getCertificationLevel() -> y
    boolean isOpenedWithFullPermissions() -> z
    void isAfirmaModifiedItext() -> A
    boolean access$0(com.aowagie.text.pdf.PdfReader) -> a
    com.aowagie.text.pdf.PdfDictionary access$1(com.aowagie.text.pdf.PdfReader) -> b
    int access$3(com.aowagie.text.pdf.PdfReader) -> c
    void access$4(com.aowagie.text.pdf.PdfReader,int) -> a
    void access$5(com.aowagie.text.pdf.PdfReader) -> d
    com.aowagie.text.pdf.PdfName[] access$6() -> B
com.aowagie.text.pdf.PdfReader$PageRefs -> com.aowagie.text.pdf.by:
    com.aowagie.text.pdf.PdfReader reader -> a
    com.aowagie.text.pdf.IntHashtable refsp -> b
    java.util.ArrayList refsn -> c
    java.util.ArrayList pageInh -> d
    int lastPageRead -> e
    int sizep -> f
    boolean keepPages -> g
    int size() -> b
    void readPages() -> a
    com.aowagie.text.pdf.PdfDictionary getPageN(int) -> a
    com.aowagie.text.pdf.PdfDictionary getPageNRelease(int) -> b
    com.aowagie.text.pdf.PRIndirectReference getPageOrigRef(int) -> c
    void keepPages() -> c
    void releasePage(int) -> d
    void insertPage(int,com.aowagie.text.pdf.PRIndirectReference) -> a
    void pushPageAttributes(com.aowagie.text.pdf.PdfDictionary) -> a
    void popPageAttributes() -> d
    void iteratePages(com.aowagie.text.pdf.PRIndirectReference) -> a
    com.aowagie.text.pdf.PRIndirectReference getSinglePage(int) -> e
    int access$1(com.aowagie.text.pdf.PdfReader$PageRefs) -> a
    void access$3(com.aowagie.text.pdf.PdfReader$PageRefs) -> b
com.aowagie.text.pdf.PdfReaderInstance -> com.aowagie.text.pdf.bz:
    com.aowagie.text.pdf.PdfLiteral IDENTITYMATRIX -> a
    com.aowagie.text.pdf.PdfNumber ONE -> b
    int[] myXref -> c
    com.aowagie.text.pdf.PdfReader reader -> d
    com.aowagie.text.pdf.RandomAccessFileOrArray file -> e
    java.util.HashMap importedPages -> f
    com.aowagie.text.pdf.PdfWriter writer -> g
    java.util.HashMap visited -> h
    java.util.ArrayList nextRound -> i
    com.aowagie.text.pdf.PdfReader getReader() -> a
    int getNewObjectNumber(int,int) -> a
    com.aowagie.text.pdf.PdfObject getResources(int) -> a
    com.aowagie.text.pdf.PdfStream getFormXObject(int,int) -> b
    void writeAllVisited() -> c
    void writeAllPages() -> b
com.aowagie.text.pdf.PdfRectangle -> com.aowagie.text.pdf.bA:
    float llx -> a
    float lly -> b
    float urx -> c
    float ury -> d
    boolean add(com.aowagie.text.pdf.PdfObject) -> a
    boolean add(float[]) -> a
    boolean add(int[]) -> a
    void addFirst(com.aowagie.text.pdf.PdfObject) -> b
    float left() -> f
    float right() -> g
    float top() -> h
    float bottom() -> i
com.aowagie.text.pdf.PdfRendition -> com.aowagie.text.pdf.bB:
com.aowagie.text.pdf.PdfResources -> com.aowagie.text.pdf.bC:
    void add(com.aowagie.text.pdf.PdfName,com.aowagie.text.pdf.PdfDictionary) -> a
com.aowagie.text.pdf.PdfShading -> com.aowagie.text.pdf.bD:
    com.aowagie.text.pdf.PdfDictionary shading -> a
    com.aowagie.text.pdf.PdfWriter writer -> b
    com.aowagie.text.pdf.ColorDetails colorDetails -> c
    com.aowagie.text.pdf.PdfName shadingName -> d
    com.aowagie.text.pdf.PdfIndirectReference shadingReference -> e
    java.awt.Color cspace -> f
    float[] bBox -> g
    boolean antiAlias -> h
    java.awt.Color getColorSpace() -> a
    com.aowagie.text.pdf.PdfIndirectReference getShadingReference() -> b
    void setName(int) -> a
    void addToBody() -> c
    com.aowagie.text.pdf.ColorDetails getColorDetails() -> d
com.aowagie.text.pdf.PdfShadingPattern -> com.aowagie.text.pdf.bE:
    com.aowagie.text.pdf.PdfShading shading -> a
    com.aowagie.text.pdf.PdfWriter writer -> b
    float[] matrix -> c
    com.aowagie.text.pdf.PdfName patternName -> d
    com.aowagie.text.pdf.PdfIndirectReference patternReference -> e
    com.aowagie.text.pdf.PdfName getPatternName() -> b
    com.aowagie.text.pdf.PdfIndirectReference getPatternReference() -> c
    com.aowagie.text.pdf.PdfIndirectReference getShadingReference() -> h
    void setName(int) -> a
    void addToBody() -> d
    com.aowagie.text.pdf.PdfShading getShading() -> f
    com.aowagie.text.pdf.ColorDetails getColorDetails() -> g
com.aowagie.text.pdf.PdfSigGenericPKCS -> com.aowagie.text.pdf.bF:
    java.lang.String hashAlgorithm -> a
    java.lang.String provider -> b
    com.aowagie.text.pdf.PdfPKCS7 pkcs -> c
    java.lang.String name -> d
    byte[] externalDigest -> e
    byte[] externalRSAdata -> f
    java.lang.String digestEncryptionAlgorithm -> g
    void setSignInfo(java.security.PrivateKey,java.security.cert.Certificate[],java.security.cert.CRL[]) -> a
    void setExternalDigest(byte[],byte[],java.lang.String) -> a
    com.aowagie.text.pdf.PdfPKCS7 getSigner() -> b
    byte[] getSignerContents() -> c
com.aowagie.text.pdf.PdfSigGenericPKCS$PPKLite -> com.aowagie.text.pdf.bG:
com.aowagie.text.pdf.PdfSigGenericPKCS$PPKMS -> com.aowagie.text.pdf.bH:
com.aowagie.text.pdf.PdfSigGenericPKCS$VeriSign -> com.aowagie.text.pdf.bI:
com.aowagie.text.pdf.PdfSignature -> com.aowagie.text.pdf.bJ:
    void setContents(byte[]) -> a
    void setCert(byte[]) -> b
    void setName(java.lang.String) -> a
    void setDate(com.aowagie.text.pdf.PdfDate) -> a
    void setLocation(java.lang.String) -> b
    void setReason(java.lang.String) -> c
    void setContact(java.lang.String) -> d
com.aowagie.text.pdf.PdfSignatureAppearance -> com.aowagie.text.pdf.bK:
    com.aowagie.text.pdf.PdfName SELF_SIGNED -> a
    com.aowagie.text.Rectangle rect -> b
    com.aowagie.text.Rectangle pageRect -> c
    com.aowagie.text.pdf.PdfTemplate[] app -> d
    com.aowagie.text.pdf.PdfTemplate frm -> e
    com.aowagie.text.pdf.PdfStamperImp writer -> f
    java.lang.String layer2Text -> g
    java.lang.String reason -> h
    java.lang.String location -> i
    java.util.Calendar signDate -> j
    java.lang.String provider -> k
    int page -> l
    java.lang.String fieldName -> m
    java.security.PrivateKey privKey -> n
    java.security.cert.Certificate[] certChain -> o
    java.security.cert.CRL[] crlList -> p
    com.aowagie.text.pdf.PdfName filter -> q
    boolean newField -> r
    com.aowagie.text.pdf.ByteBuffer sigout -> s
    java.io.OutputStream originalout -> t
    java.io.File tempFile -> u
    com.aowagie.text.pdf.PdfDictionary cryptoDictionary -> v
    com.aowagie.text.pdf.PdfStamper stamper -> w
    boolean preClosed -> x
    com.aowagie.text.pdf.PdfSigGenericPKCS sigStandard -> y
    int[] range -> z
    java.io.RandomAccessFile raf -> A
    byte[] bout -> B
    int boutLen -> C
    byte[] externalDigest -> D
    byte[] externalRSAdata -> E
    java.lang.String digestEncryptionAlgorithm -> F
    java.util.HashMap exclusionLocations -> G
    int render -> H
    com.aowagie.text.Image signatureGraphic -> I
    java.lang.String contact -> J
    com.aowagie.text.Font layer2Font -> K
    java.lang.String layer4Text -> L
    boolean acro6Layers -> M
    int runDirection -> N
    com.aowagie.text.pdf.PdfSignatureAppearance$SignatureEvent signatureEvent -> O
    com.aowagie.text.Image image -> P
    float imageScale -> Q
    int certificationLevel -> R
    void setRender(int) -> a
    void setLayer2Text(java.lang.String) -> a
    void setLayer4Text(java.lang.String) -> b
    boolean isInvisible() -> a
    void setCrypto(java.security.PrivateKey,java.security.cert.Certificate[],java.security.cert.CRL[],com.aowagie.text.pdf.PdfName) -> a
    void setVisibleSignature(com.aowagie.text.Rectangle,int,java.lang.String) -> a
    void setVisibleSignature(java.lang.String) -> c
    com.aowagie.text.pdf.PdfTemplate getAppearance() -> b
    float fitText(com.aowagie.text.Font,java.lang.String,com.aowagie.text.Rectangle,float,int) -> a
    java.lang.String getReason() -> c
    void setReason(java.lang.String) -> d
    java.lang.String getLocation() -> d
    void setLocation(java.lang.String) -> e
    java.lang.String getProvider() -> e
    java.security.PrivateKey getPrivKey() -> f
    java.security.cert.Certificate[] getCertChain() -> g
    java.security.cert.CRL[] getCrlList() -> h
    com.aowagie.text.pdf.PdfName getFilter() -> i
    boolean isNewField() -> j
    int getPage() -> k
    java.lang.String getFieldName() -> l
    com.aowagie.text.Rectangle getPageRect() -> m
    java.util.Calendar getSignDate() -> n
    void setSignDate(java.util.Calendar) -> a
    void setSigout(com.aowagie.text.pdf.ByteBuffer) -> a
    void setOriginalout(java.io.OutputStream) -> a
    void setTempFile(java.io.File) -> a
    java.lang.String getNewSigName() -> o
    void preClose(java.util.Calendar) -> b
    void preClose(java.util.HashMap,java.util.Calendar) -> a
    void close(com.aowagie.text.pdf.PdfDictionary) -> a
    void addDocMDP(com.aowagie.text.pdf.PdfDictionary) -> c
    java.io.InputStream getRangeStream() -> p
    void setCryptoDictionary(com.aowagie.text.pdf.PdfDictionary) -> b
    void setStamper(com.aowagie.text.pdf.PdfStamper) -> a
    com.aowagie.text.pdf.PdfSigGenericPKCS getSigStandard() -> q
    java.lang.String getContact() -> r
    void setContact(java.lang.String) -> f
    void setLayer2Font(com.aowagie.text.Font) -> a
    void setAcro6Layers(boolean) -> a
    void setImage(com.aowagie.text.Image) -> a
    void setCertificationLevel(int) -> b
com.aowagie.text.pdf.PdfSignatureAppearance$RangeStream -> com.aowagie.text.pdf.bL:
    byte[] b -> a
    java.io.RandomAccessFile raf -> b
    byte[] bout -> c
    int[] range -> d
    int rangePosition -> e
    int read() -> read
    int read(byte[],int,int) -> read
com.aowagie.text.pdf.PdfSignatureAppearance$SignatureEvent -> com.aowagie.text.pdf.bM:
    void getSignatureDictionary(com.aowagie.text.pdf.PdfDictionary) -> a
com.aowagie.text.pdf.PdfSpotColor -> com.aowagie.text.pdf.bN:
    com.aowagie.text.pdf.PdfName name -> a
    java.awt.Color altcs -> b
    java.awt.Color getAlternativeCS() -> a
    com.aowagie.text.pdf.PdfObject getSpotObject(com.aowagie.text.pdf.PdfWriter) -> a
com.aowagie.text.pdf.PdfStamper -> com.aowagie.text.pdf.bO:
    com.aowagie.text.pdf.PdfStamperImp stamper -> a
    java.util.Map moreInfo -> b
    boolean hasSignature -> c
    com.aowagie.text.pdf.PdfSignatureAppearance sigApp -> d
    java.util.Map getMoreInfo() -> a
    void setMoreInfo(java.util.Map) -> a
    void insertPage(int,com.aowagie.text.Rectangle) -> a
    com.aowagie.text.pdf.PdfSignatureAppearance getSignatureAppearance() -> b
    void close(java.util.Calendar) -> a
    com.aowagie.text.pdf.PdfWriter getWriter() -> c
    void setXmpMetadata(byte[]) -> a
    void setFullCompression() -> d
    com.aowagie.text.pdf.PdfStamper createSignature(com.aowagie.text.pdf.PdfReader,java.io.OutputStream,char,java.io.File,boolean,java.util.Calendar) -> a
    com.aowagie.text.pdf.PdfContentByte getOverContent(int) -> a
com.aowagie.text.pdf.PdfStamperImp -> com.aowagie.text.pdf.bP:
    com.aowagie.text.pdf.PdfObject pdfFileID -> D
    java.util.HashMap readers2intrefs -> E
    java.util.HashMap readers2file -> F
    com.aowagie.text.pdf.RandomAccessFileOrArray file -> G
    com.aowagie.text.pdf.PdfReader reader -> c
    com.aowagie.text.pdf.IntHashtable myXref -> H
    java.util.HashMap pagesToContent -> I
    boolean closed -> J
    boolean rotateContents -> K
    com.aowagie.text.pdf.AcroFields acroFields -> L
    boolean flat -> M
    boolean flatFreeText -> N
    int[] namePtr -> O
    java.util.HashSet partialFlattening -> P
    boolean useVp -> Q
    com.aowagie.text.pdf.internal.PdfViewerPreferencesImp viewerPreferences -> R
    java.util.HashMap fieldTemplates -> S
    boolean fieldsAdded -> T
    int sigFlags -> U
    boolean append -> V
    com.aowagie.text.pdf.IntHashtable marked -> W
    int initialXrefSize -> X
    com.aowagie.text.pdf.PdfAction openAction -> Y
    void close(java.util.Map,java.util.Calendar) -> a
    void applyRotation(com.aowagie.text.pdf.PdfDictionary,com.aowagie.text.pdf.ByteBuffer) -> a
    void alterContents() -> F
    void alterResources(com.aowagie.text.pdf.PdfStamperImp$PageStamp) -> a
    int getNewObjectNumber(com.aowagie.text.pdf.PdfReader,int,int) -> a
    com.aowagie.text.pdf.PdfStamperImp$PageStamp getPageStamp(int) -> d
    com.aowagie.text.pdf.PdfContentByte getOverContent(int) -> a
    void correctAcroFieldPages(int) -> e
    void insertPage(int,com.aowagie.text.Rectangle) -> a
    com.aowagie.text.pdf.AcroFields getAcroFields() -> c
    void flatFields() -> G
    void eliminateAcroformObjects() -> H
    void sweepKids(com.aowagie.text.pdf.PdfObject) -> c
    void flatFreeTextFields() -> I
    com.aowagie.text.pdf.PdfIndirectReference getPageReference(int) -> b
    void addAnnotation(com.aowagie.text.pdf.PdfAnnotation) -> a
    void addDocumentField(com.aowagie.text.pdf.PdfIndirectReference) -> b
    void addFieldResources() -> J
    void expandFields(com.aowagie.text.pdf.PdfFormField,java.util.ArrayList) -> a
    void addAnnotation(com.aowagie.text.pdf.PdfAnnotation,com.aowagie.text.pdf.PdfDictionary) -> a
    void addAnnotation(com.aowagie.text.pdf.PdfAnnotation,int) -> a
    void outlineTravel(com.aowagie.text.pdf.PRIndirectReference) -> a
    void deleteOutlines() -> K
    void setJavaScript() -> L
    void addFileAttachments() -> M
    void setOutlines() -> N
    void setSigFlags(int) -> c
    void markUsed(com.aowagie.text.pdf.PdfObject) -> a
    boolean isAppend() -> d
    com.aowagie.text.pdf.PdfContentByte getDirectContentUnder() -> e
    com.aowagie.text.pdf.PdfContentByte getDirectContent() -> f
    com.aowagie.text.pdf.PdfObject getFileID() -> g
    int[] access$0(com.aowagie.text.pdf.PdfStamperImp) -> a
com.aowagie.text.pdf.PdfStamperImp$PageStamp -> com.aowagie.text.pdf.bQ:
    com.aowagie.text.pdf.PdfDictionary pageN -> a
    com.aowagie.text.pdf.StampContent under -> c
    com.aowagie.text.pdf.StampContent over -> d
    com.aowagie.text.pdf.PageResources pageResources -> b
    int replacePoint -> e
    com.aowagie.text.pdf.StampContent access$0(com.aowagie.text.pdf.PdfStamperImp$PageStamp) -> a
    com.aowagie.text.pdf.StampContent access$1(com.aowagie.text.pdf.PdfStamperImp$PageStamp) -> b
    void access$3(com.aowagie.text.pdf.PdfStamperImp$PageStamp,com.aowagie.text.pdf.StampContent) -> a
com.aowagie.text.pdf.PdfStream -> com.aowagie.text.pdf.bR:
    boolean compressed -> g
    int compressionLevel -> h
    java.io.ByteArrayOutputStream streamBytes -> m
    java.io.InputStream inputStream -> n
    com.aowagie.text.pdf.PdfIndirectReference ref -> a
    int inputStreamLength -> o
    com.aowagie.text.pdf.PdfWriter writer -> b
    int rawLength -> p
    byte[] STARTSTREAM -> q
    byte[] ENDSTREAM -> r
    void writeLength() -> h
    int getRawLength() -> i
    void flateCompress(int) -> b
    void superToPdf(com.aowagie.text.pdf.PdfWriter,java.io.OutputStream) -> b
    void toPdf(com.aowagie.text.pdf.PdfWriter,java.io.OutputStream) -> a
    void writeContent(java.io.OutputStream) -> a
    java.lang.String toString() -> toString
com.aowagie.text.pdf.PdfString -> com.aowagie.text.pdf.bS:
    java.lang.String value -> a
    java.lang.String originalValue -> b
    java.lang.String encoding -> c
    int objNum -> d
    int objGen -> e
    boolean hexWriting -> f
    void toPdf(com.aowagie.text.pdf.PdfWriter,java.io.OutputStream) -> a
    java.lang.String toString() -> toString
    byte[] getBytes() -> e
    java.lang.String toUnicodeString() -> b
    void setObjNum(int,int) -> a
    void decrypt(com.aowagie.text.pdf.PdfReader) -> a
    byte[] getOriginalBytes() -> c
    com.aowagie.text.pdf.PdfString setHexWriting(boolean) -> a
com.aowagie.text.pdf.PdfTable -> com.aowagie.text.pdf.bT:
    int columns -> a
    java.util.ArrayList headercells -> b
    java.util.ArrayList cells -> c
    com.aowagie.text.Table table -> d
    float[] positions -> e
    void updateRowAdditionsInternal() -> i
    int rows() -> j
    int type() -> b
    java.util.ArrayList getHeaderCells() -> c
    java.util.ArrayList getCells() -> d
    int columns() -> f
    float cellpadding() -> m
    float cellspacing() -> g
    boolean hasToFitPageCells() -> h
com.aowagie.text.pdf.PdfTemplate -> com.aowagie.text.pdf.bU:
    int type -> f
    com.aowagie.text.pdf.PdfIndirectReference thisReference -> g
    com.aowagie.text.pdf.PageResources pageResources -> h
    com.aowagie.text.Rectangle bBox -> i
    com.aowagie.text.pdf.PdfArray matrix -> j
    com.aowagie.text.pdf.PdfTransparencyGroup group -> k
    com.aowagie.text.pdf.PdfOCG layer -> l
    com.aowagie.text.pdf.PdfTemplate createTemplate(com.aowagie.text.pdf.PdfWriter,float,float) -> a
    com.aowagie.text.pdf.PdfTemplate createTemplate(com.aowagie.text.pdf.PdfWriter,float,float,com.aowagie.text.pdf.PdfName) -> a
    void setWidth(float) -> h
    void setHeight(float) -> i
    float getWidth() -> G
    float getHeight() -> H
    com.aowagie.text.Rectangle getBoundingBox() -> I
    void setBoundingBox(com.aowagie.text.Rectangle) -> b
    com.aowagie.text.pdf.PdfOCG getLayer() -> J
    com.aowagie.text.pdf.PdfArray getMatrix() -> K
    com.aowagie.text.pdf.PdfIndirectReference getIndirectReference() -> L
    com.aowagie.text.pdf.PdfObject getResources() -> B
    com.aowagie.text.pdf.PdfStream getFormXObject(int) -> d
    com.aowagie.text.pdf.PdfContentByte getDuplicate() -> a
    int getType() -> M
    com.aowagie.text.pdf.PageResources getPageResources() -> A
    com.aowagie.text.pdf.PdfTransparencyGroup getGroup() -> N
com.aowagie.text.pdf.PdfTextArray -> com.aowagie.text.pdf.bV:
    java.util.ArrayList arrayList -> a
    java.lang.String lastStr -> b
    java.lang.Float lastNum -> c
    void add(float) -> a
    void add(java.lang.String) -> a
    java.util.ArrayList getArrayList() -> a
    void replaceLast(java.lang.Object) -> a
com.aowagie.text.pdf.PdfTransition -> com.aowagie.text.pdf.bW:
    int duration -> a
    int type -> b
    com.aowagie.text.pdf.PdfDictionary getTransitionDictionary() -> a
com.aowagie.text.pdf.PdfTransparencyGroup -> com.aowagie.text.pdf.bX:
com.aowagie.text.pdf.PdfWriter -> com.aowagie.text.pdf.bY:
    com.aowagie.text.pdf.PdfDocument pdf -> d
    com.aowagie.text.pdf.PdfContentByte directContent -> c
    com.aowagie.text.pdf.PdfContentByte directContentUnder -> D
    com.aowagie.text.pdf.PdfWriter$PdfBody body -> e
    com.aowagie.text.pdf.PdfDictionary extraCatalog -> E
    com.aowagie.text.pdf.PdfPages root -> f
    java.util.ArrayList pageReferences -> F
    int currentPageNumber -> G
    com.aowagie.text.pdf.PdfName tabs -> H
    com.aowagie.text.pdf.PdfPageEvent pageEvent -> I
    int prevxref -> g
    java.util.List newBookmarks -> h
    com.aowagie.text.pdf.PdfName PDF_VERSION_1_2 -> i
    com.aowagie.text.pdf.PdfName PDF_VERSION_1_3 -> j
    com.aowagie.text.pdf.PdfName PDF_VERSION_1_4 -> k
    com.aowagie.text.pdf.PdfName PDF_VERSION_1_5 -> l
    com.aowagie.text.pdf.PdfName PDF_VERSION_1_6 -> m
    com.aowagie.text.pdf.PdfName PDF_VERSION_1_7 -> n
    com.aowagie.text.pdf.internal.PdfVersionImp pdf_version -> o
    com.aowagie.text.pdf.PdfName DOCUMENT_CLOSE -> p
    com.aowagie.text.pdf.PdfName WILL_SAVE -> q
    com.aowagie.text.pdf.PdfName DID_SAVE -> r
    com.aowagie.text.pdf.PdfName WILL_PRINT -> s
    com.aowagie.text.pdf.PdfName DID_PRINT -> t
    byte[] xmpMetadata -> u
    com.aowagie.text.pdf.internal.PdfXConformanceImp pdfxConformance -> J
    com.aowagie.text.pdf.PdfEncryption crypto -> v
    boolean fullCompression -> w
    int compressionLevel -> x
    java.util.LinkedHashMap documentFonts -> K
    int fontNumber -> L
    java.util.HashMap formXObjects -> M
    int formXObjectsCounter -> N
    java.util.HashMap importedPages -> O
    com.aowagie.text.pdf.PdfReaderInstance currentPdfReaderInstance -> y
    java.util.HashMap documentColors -> P
    int colorNumber -> Q
    java.util.HashMap documentPatterns -> R
    int patternNumber -> S
    java.util.HashMap documentShadingPatterns -> T
    java.util.HashMap documentShadings -> U
    java.util.HashMap documentExtGState -> V
    java.util.HashMap documentProperties -> W
    boolean tagged -> X
    java.util.HashSet documentOCG -> z
    java.util.ArrayList documentOCGorder -> Y
    com.aowagie.text.pdf.PdfOCProperties OCProperties -> A
    com.aowagie.text.pdf.PdfArray OCGRadioGroup -> B
    com.aowagie.text.pdf.PdfArray OCGLocked -> C
    com.aowagie.text.pdf.PdfName PAGE_OPEN -> Z
    com.aowagie.text.pdf.PdfName PAGE_CLOSE -> aa
    com.aowagie.text.pdf.PdfDictionary group -> ab
    float spaceCharRatio -> ac
    int runDirection -> ad
    float userunit -> ae
    com.aowagie.text.pdf.PdfDictionary defaultColorspace -> af
    java.util.HashMap documentSpotPatterns -> ag
    com.aowagie.text.pdf.ColorDetails patternColorspaceRGB -> ah
    com.aowagie.text.pdf.ColorDetails patternColorspaceGRAY -> ai
    com.aowagie.text.pdf.ColorDetails patternColorspaceCMYK -> aj
    com.aowagie.text.pdf.PdfDictionary imageDictionary -> ak
    java.util.HashMap images -> al
    java.util.HashMap JBIG2Globals -> am
    boolean rgbTransparencyBlending -> an
    com.aowagie.text.pdf.PdfDocument getPdfDocument() -> h
    com.aowagie.text.pdf.PdfDictionary getInfo() -> i
    com.aowagie.text.pdf.PdfContentByte getDirectContent() -> f
    com.aowagie.text.pdf.PdfContentByte getDirectContentUnder() -> e
    void resetContent() -> j
    void addLocalDestinations(java.util.TreeMap) -> a
    com.aowagie.text.pdf.PdfIndirectObject addToBody(com.aowagie.text.pdf.PdfObject) -> b
    com.aowagie.text.pdf.PdfIndirectObject addToBody(com.aowagie.text.pdf.PdfObject,boolean) -> a
    com.aowagie.text.pdf.PdfIndirectObject addToBody(com.aowagie.text.pdf.PdfObject,com.aowagie.text.pdf.PdfIndirectReference) -> a
    com.aowagie.text.pdf.PdfIndirectObject addToBody(com.aowagie.text.pdf.PdfObject,com.aowagie.text.pdf.PdfIndirectReference,boolean) -> a
    com.aowagie.text.pdf.PdfIndirectObject addToBody(com.aowagie.text.pdf.PdfObject,int) -> a
    com.aowagie.text.pdf.PdfIndirectObject addToBody(com.aowagie.text.pdf.PdfObject,int,boolean) -> a
    com.aowagie.text.pdf.PdfIndirectReference getPdfIndirectReference() -> k
    int getIndirectReferenceNumber() -> l
    com.aowagie.text.pdf.OutputStreamCounter getOs() -> c
    com.aowagie.text.pdf.PdfDictionary getCatalog(com.aowagie.text.pdf.PdfIndirectReference) -> a
    com.aowagie.text.pdf.PdfDictionary getExtraCatalog() -> m
    com.aowagie.text.pdf.PdfIndirectReference getPageReference(int) -> b
    com.aowagie.text.pdf.PdfIndirectReference getCurrentPage() -> n
    int getCurrentPageNumber() -> o
    com.aowagie.text.pdf.PdfName getTabs() -> p
    com.aowagie.text.pdf.PdfIndirectReference add(com.aowagie.text.pdf.PdfPage,com.aowagie.text.pdf.PdfContents) -> a
    com.aowagie.text.pdf.PdfPageEvent getPageEvent() -> q
    void open() -> open
    void close() -> close
    void addSharedObjectsToBody() -> r
    void writeOutlines(com.aowagie.text.pdf.PdfDictionary,boolean) -> a
    void setPdfVersion(char) -> a
    void setAtLeastPdfVersion(char) -> b
    void addDeveloperExtension(com.aowagie.text.pdf.PdfDeveloperExtension) -> a
    com.aowagie.text.pdf.internal.PdfVersionImp getPdfVersion() -> s
    void addFileAttachment(java.lang.String,byte[],java.lang.String,java.lang.String) -> a
    void addFileAttachment(java.lang.String,com.aowagie.text.pdf.PdfFileSpecification) -> a
    void addAnnotation(com.aowagie.text.pdf.PdfAnnotation) -> a
    void addAnnotation(com.aowagie.text.pdf.PdfAnnotation,int) -> a
    void setSigFlags(int) -> c
    void setXmpMetadata(byte[]) -> a
    int getPDFXConformance() -> t
    boolean isPdfX() -> u
    com.aowagie.text.pdf.PdfEncryption getEncryption() -> v
    boolean isFullCompression() -> w
    void setFullCompression() -> x
    int getCompressionLevel() -> y
    com.aowagie.text.pdf.FontDetails addSimple(com.aowagie.text.pdf.BaseFont) -> a
    void eliminateFontSubset(com.aowagie.text.pdf.PdfDictionary) -> a
    com.aowagie.text.pdf.PdfName addDirectTemplateSimple(com.aowagie.text.pdf.PdfTemplate,com.aowagie.text.pdf.PdfName) -> a
    int getNewObjectNumber(com.aowagie.text.pdf.PdfReader,int,int) -> a
    com.aowagie.text.pdf.PdfName getColorspaceName() -> z
    com.aowagie.text.pdf.ColorDetails addSimple(com.aowagie.text.pdf.PdfSpotColor) -> a
    com.aowagie.text.pdf.PdfName addSimplePattern(com.aowagie.text.pdf.PdfPatternPainter) -> a
    void addSimpleShadingPattern(com.aowagie.text.pdf.PdfShadingPattern) -> a
    void addSimpleShading(com.aowagie.text.pdf.PdfShading) -> a
    com.aowagie.text.pdf.PdfObject[] addSimpleProperty(java.lang.Object,com.aowagie.text.pdf.PdfIndirectReference) -> a
    boolean isTagged() -> A
    void getOCGOrder(com.aowagie.text.pdf.PdfArray,com.aowagie.text.pdf.PdfLayer) -> a
    void addASEvent(com.aowagie.text.pdf.PdfName,com.aowagie.text.pdf.PdfName) -> a
    void fillOCProperties(boolean) -> a
    float getSpaceCharRatio() -> B
    float getUserunit() -> C
    com.aowagie.text.pdf.PdfDictionary getDefaultColorspace() -> D
    void setDefaultColorspace(com.aowagie.text.pdf.PdfName,com.aowagie.text.pdf.PdfObject) -> a
    com.aowagie.text.pdf.ColorDetails addSimplePatternColorspace(java.awt.Color) -> a
    com.aowagie.text.pdf.PdfName addDirectImageSimple(com.aowagie.text.Image) -> a
    com.aowagie.text.pdf.PdfName addDirectImageSimple(com.aowagie.text.Image,com.aowagie.text.pdf.PdfIndirectReference) -> a
    com.aowagie.text.pdf.PdfIndirectReference add(com.aowagie.text.pdf.PdfImage,com.aowagie.text.pdf.PdfIndirectReference) -> a
    com.aowagie.text.pdf.PdfIndirectReference getImageReference(com.aowagie.text.pdf.PdfName) -> a
    com.aowagie.text.pdf.PdfIndirectReference add(com.aowagie.text.pdf.PdfICCBased) -> a
    com.aowagie.text.pdf.PdfIndirectReference getReferenceJBIG2Globals(byte[]) -> b
    boolean isRgbTransparencyBlending() -> E
    com.aowagie.text.pdf.OutputStreamCounter access$0(com.aowagie.text.pdf.PdfWriter) -> a
com.aowagie.text.pdf.PdfWriter$PdfBody -> com.aowagie.text.pdf.bZ:
    java.util.TreeSet xrefs -> a
    int refnum -> b
    int position -> c
    com.aowagie.text.pdf.PdfWriter writer -> d
    com.aowagie.text.pdf.ByteBuffer index -> e
    com.aowagie.text.pdf.ByteBuffer streamObjects -> f
    int currentObjNum -> g
    int numObj -> h
    void setRefnum(int) -> a
    com.aowagie.text.pdf.PdfWriter$PdfBody$PdfCrossReference addToObjStm(com.aowagie.text.pdf.PdfObject,int) -> a
    void flushObjStm() -> e
    com.aowagie.text.pdf.PdfIndirectObject add(com.aowagie.text.pdf.PdfObject) -> a
    com.aowagie.text.pdf.PdfIndirectObject add(com.aowagie.text.pdf.PdfObject,boolean) -> a
    com.aowagie.text.pdf.PdfIndirectReference getPdfIndirectReference() -> a
    int getIndirectReferenceNumber() -> b
    com.aowagie.text.pdf.PdfIndirectObject add(com.aowagie.text.pdf.PdfObject,com.aowagie.text.pdf.PdfIndirectReference) -> a
    com.aowagie.text.pdf.PdfIndirectObject add(com.aowagie.text.pdf.PdfObject,com.aowagie.text.pdf.PdfIndirectReference,boolean) -> a
    com.aowagie.text.pdf.PdfIndirectObject add(com.aowagie.text.pdf.PdfObject,int) -> b
    com.aowagie.text.pdf.PdfIndirectObject add(com.aowagie.text.pdf.PdfObject,int,boolean) -> a
    int offset() -> c
    int size() -> d
    void writeCrossReferenceTable(java.io.OutputStream,com.aowagie.text.pdf.PdfIndirectReference,com.aowagie.text.pdf.PdfIndirectReference,com.aowagie.text.pdf.PdfIndirectReference,com.aowagie.text.pdf.PdfObject,int) -> a
    com.aowagie.text.pdf.PdfIndirectObject access$0(com.aowagie.text.pdf.PdfWriter$PdfBody,com.aowagie.text.pdf.PdfObject,boolean) -> a
    com.aowagie.text.pdf.PdfIndirectObject access$1(com.aowagie.text.pdf.PdfWriter$PdfBody,com.aowagie.text.pdf.PdfObject,com.aowagie.text.pdf.PdfIndirectReference,boolean) -> a
    com.aowagie.text.pdf.PdfIndirectObject access$2(com.aowagie.text.pdf.PdfWriter$PdfBody,com.aowagie.text.pdf.PdfObject,int) -> a
    com.aowagie.text.pdf.PdfIndirectObject access$3(com.aowagie.text.pdf.PdfWriter$PdfBody,com.aowagie.text.pdf.PdfObject,int,boolean) -> a
    void access$5(com.aowagie.text.pdf.PdfWriter$PdfBody) -> a
com.aowagie.text.pdf.PdfWriter$PdfBody$PdfCrossReference -> com.aowagie.text.pdf.ca:
    int type -> a
    int offset -> b
    int refnum -> c
    int generation -> d
    int getRefnum() -> a
    void toPdf(java.io.OutputStream) -> a
    void toPdf(int,java.io.OutputStream) -> a
    int compareTo(java.lang.Object) -> compareTo
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    int access$3(com.aowagie.text.pdf.PdfWriter$PdfBody$PdfCrossReference) -> a
    void access$4(com.aowagie.text.pdf.PdfWriter$PdfBody$PdfCrossReference,int,java.io.OutputStream) -> a
    void access$5(com.aowagie.text.pdf.PdfWriter$PdfBody$PdfCrossReference,java.io.OutputStream) -> a
com.aowagie.text.pdf.PdfWriter$PdfTrailer -> com.aowagie.text.pdf.cb:
    int offset -> a
    void toPdf(com.aowagie.text.pdf.PdfWriter,java.io.OutputStream) -> a
com.aowagie.text.pdf.PdfXConformanceException -> com.aowagie.text.pdf.cc:
com.aowagie.text.pdf.Pfm2afm -> com.aowagie.text.pdf.cd:
    com.aowagie.text.pdf.RandomAccessFileOrArray in -> a
    java.io.PrintWriter out -> b
    short vers -> c
    int h_len -> d
    java.lang.String copyright -> e
    short type -> f
    short points -> g
    short verres -> h
    short horres -> i
    short ascent -> j
    short intleading -> k
    short extleading -> l
    byte italic -> m
    byte uline -> n
    byte overs -> o
    short weight -> p
    byte charset -> q
    short pixwidth -> r
    short pixheight -> s
    byte kind -> t
    short avgwidth -> u
    short maxwidth -> v
    int firstchar -> w
    int lastchar -> x
    byte defchar -> y
    byte brkchar -> z
    short widthby -> A
    int device -> B
    int face -> C
    int bits -> D
    int bitoff -> E
    short extlen -> F
    int psext -> G
    int chartab -> H
    int res1 -> I
    int kernpairs -> J
    int res2 -> K
    int fontname -> L
    short capheight -> M
    short xheight -> N
    short ascender -> O
    short descender -> P
    boolean isMono -> Q
    int[] Win2PSStd -> R
    int[] WinClass -> S
    java.lang.String[] WinChars -> T
    void convert(com.aowagie.text.pdf.RandomAccessFileOrArray,java.io.OutputStream) -> a
    java.lang.String readString(int) -> a
    java.lang.String readString() -> a
    void outval(int) -> b
    void outchar(int,int,java.lang.String) -> a
    void openpfm() -> b
    void putheader() -> c
    void putchartab() -> d
    void putkerntab() -> e
    void puttrailer() -> f
com.aowagie.text.pdf.RandomAccessFileOrArray -> com.aowagie.text.pdf.ce:
    com.aowagie.text.pdf.MappedRandomAccessFile rf -> a
    java.io.RandomAccessFile trf -> b
    boolean plainRandomAccess -> c
    java.lang.String filename -> d
    byte[] arrayIn -> e
    int arrayInPtr -> f
    byte back -> g
    boolean isBack -> h
    int startOffset -> i
    byte[] InputStreamToArray(java.io.InputStream) -> a
    void pushBack(byte) -> a
    int read() -> a
    int read(byte[],int,int) -> a
    int read(byte[]) -> a
    void readFully(byte[]) -> readFully
    void readFully(byte[],int,int) -> readFully
    int skipBytes(int) -> skipBytes
    void reOpen() -> b
    void insureOpen() -> i
    void close() -> c
    int length() -> d
    void seek(int) -> a
    int getFilePointer() -> e
    boolean readBoolean() -> readBoolean
    byte readByte() -> readByte
    int readUnsignedByte() -> readUnsignedByte
    short readShort() -> readShort
    short readShortLE() -> f
    int readUnsignedShort() -> readUnsignedShort
    int readUnsignedShortLE() -> g
    char readChar() -> readChar
    int readInt() -> readInt
    int readIntLE() -> h
    long readLong() -> readLong
    float readFloat() -> readFloat
    double readDouble() -> readDouble
    java.lang.String readLine() -> readLine
    java.lang.String readUTF() -> readUTF
    void setStartOffset(int) -> b
com.aowagie.text.pdf.ShadingColor -> com.aowagie.text.pdf.cf:
    com.aowagie.text.pdf.PdfShadingPattern shadingPattern -> b
    com.aowagie.text.pdf.PdfShadingPattern getPdfShadingPattern() -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.aowagie.text.pdf.SimpleBookmark -> com.aowagie.text.pdf.cg:
    void createOutlineAction(com.aowagie.text.pdf.PdfDictionary,java.util.HashMap,com.aowagie.text.pdf.PdfWriter,boolean) -> a
    java.lang.Object[] iterateOutlines(com.aowagie.text.pdf.PdfWriter,com.aowagie.text.pdf.PdfIndirectReference,java.util.List,boolean) -> a
com.aowagie.text.pdf.SpotColor -> com.aowagie.text.pdf.ch:
    com.aowagie.text.pdf.PdfSpotColor spot -> b
    float tint -> c
    com.aowagie.text.pdf.PdfSpotColor getPdfSpotColor() -> a
    float getTint() -> b
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.aowagie.text.pdf.StampContent -> com.aowagie.text.pdf.ci:
    com.aowagie.text.pdf.PdfStamperImp$PageStamp ps -> f
    com.aowagie.text.pdf.PageResources pageResources -> g
    com.aowagie.text.pdf.PdfContentByte getDuplicate() -> a
    com.aowagie.text.pdf.PageResources getPageResources() -> A
    void addAnnotation(com.aowagie.text.pdf.PdfAnnotation) -> a
com.aowagie.text.pdf.StandardDecryption -> com.aowagie.text.pdf.cj:
    com.aowagie.text.pdf.crypto.ARCFOUREncryption arcfour -> a
    com.aowagie.text.pdf.crypto.AESCipher cipher -> b
    byte[] key -> c
    boolean aes -> d
    boolean initiated -> e
    byte[] iv -> f
    int ivptr -> g
    byte[] update(byte[],int,int) -> a
    byte[] finish() -> a
com.aowagie.text.pdf.TSAClient -> com.aowagie.text.pdf.ck:
    byte[] getTimeStampToken(com.aowagie.text.pdf.PdfPKCS7,byte[]) -> a
com.aowagie.text.pdf.TrueTypeFont -> com.aowagie.text.pdf.cl:
    java.lang.String[] codePages -> B
    boolean justNames -> C
    java.util.HashMap tables -> o
    com.aowagie.text.pdf.RandomAccessFileOrArray rf -> p
    java.lang.String fileName -> q
    boolean cff -> r
    int cffOffset -> D
    int cffLength -> E
    int directoryOffset -> s
    java.lang.String ttcIndex -> t
    java.lang.String style -> u
    com.aowagie.text.pdf.TrueTypeFont$FontHeader head -> F
    com.aowagie.text.pdf.TrueTypeFont$HorizontalHeader hhea -> G
    com.aowagie.text.pdf.TrueTypeFont$WindowsMetrics os_2 -> v
    int[] GlyphWidths -> H
    int[][] bboxes -> w
    java.util.HashMap cmap10 -> x
    java.util.HashMap cmap31 -> y
    java.util.HashMap cmapExt -> z
    com.aowagie.text.pdf.IntHashtable kerning -> I
    java.lang.String fontName -> A
    java.lang.String[][] fullName -> J
    java.lang.String[][] allNameEntries -> K
    java.lang.String[][] familyName -> L
    double italicAngle -> M
    boolean isFixedPitch -> N
    int underlinePosition -> O
    int underlineThickness -> P
    java.lang.String getTTCName(java.lang.String) -> e
    void fillTables() -> m
    java.lang.String getBaseFont() -> j
    java.lang.String[][] getNames(int) -> h
    java.lang.String[][] getAllNames() -> n
    void checkCff() -> o
    void process(byte[],boolean) -> a
    java.lang.String readStandardString(int) -> f
    java.lang.String readUnicodeString(int) -> i
    void readGlyphWidths() -> p
    int getGlyphWidth(int) -> j
    void readBbox() -> q
    void readCMaps() -> r
    java.util.HashMap readFormat12() -> s
    java.util.HashMap readFormat0() -> t
    java.util.HashMap readFormat4() -> u
    java.util.HashMap readFormat6() -> v
    void readKerning() -> w
    int getRawWidth(int,java.lang.String) -> a
    com.aowagie.text.pdf.PdfDictionary getFontDescriptor(com.aowagie.text.pdf.PdfIndirectReference,java.lang.String,com.aowagie.text.pdf.PdfIndirectReference) -> a
    com.aowagie.text.pdf.PdfDictionary getFontBaseType(com.aowagie.text.pdf.PdfIndirectReference,java.lang.String,int,int,byte[]) -> a
    byte[] getFullFont() -> k
    int[] compactRanges(java.util.ArrayList) -> a
    void addRangeUni(java.util.HashMap,boolean,boolean) -> a
    void writeFont(com.aowagie.text.pdf.PdfWriter,com.aowagie.text.pdf.PdfIndirectReference,java.lang.Object[]) -> a
    byte[] readCffFont() -> l
    float getFontDescriptor(int,float) -> b
    int[] getMetricsTT(int) -> g
    java.lang.String getPostscriptFontName() -> g
    java.lang.String[][] getFamilyFontName() -> h
    int[] getRawCharBBox(int,java.lang.String) -> b
com.aowagie.text.pdf.TrueTypeFont$FontHeader -> com.aowagie.text.pdf.cm:
    int unitsPerEm -> a
    short xMin -> b
    short yMin -> c
    short xMax -> d
    short yMax -> e
    int macStyle -> f
    void access$1(com.aowagie.text.pdf.TrueTypeFont$FontHeader,int) -> a
    void access$2(com.aowagie.text.pdf.TrueTypeFont$FontHeader,short) -> a
    void access$3(com.aowagie.text.pdf.TrueTypeFont$FontHeader,short) -> b
    void access$4(com.aowagie.text.pdf.TrueTypeFont$FontHeader,short) -> c
    void access$5(com.aowagie.text.pdf.TrueTypeFont$FontHeader,short) -> d
    void access$6(com.aowagie.text.pdf.TrueTypeFont$FontHeader,int) -> b
    int access$7(com.aowagie.text.pdf.TrueTypeFont$FontHeader) -> a
    short access$8(com.aowagie.text.pdf.TrueTypeFont$FontHeader) -> b
    short access$9(com.aowagie.text.pdf.TrueTypeFont$FontHeader) -> c
    short access$10(com.aowagie.text.pdf.TrueTypeFont$FontHeader) -> d
    short access$11(com.aowagie.text.pdf.TrueTypeFont$FontHeader) -> e
    int access$12(com.aowagie.text.pdf.TrueTypeFont$FontHeader) -> f
com.aowagie.text.pdf.TrueTypeFont$HorizontalHeader -> com.aowagie.text.pdf.cn:
    short Ascender -> a
    short Descender -> b
    short LineGap -> c
    int advanceWidthMax -> d
    short caretSlopeRise -> e
    short caretSlopeRun -> f
    int numberOfHMetrics -> g
    void access$1(com.aowagie.text.pdf.TrueTypeFont$HorizontalHeader,short) -> a
    void access$2(com.aowagie.text.pdf.TrueTypeFont$HorizontalHeader,short) -> b
    void access$3(com.aowagie.text.pdf.TrueTypeFont$HorizontalHeader,short) -> c
    void access$4(com.aowagie.text.pdf.TrueTypeFont$HorizontalHeader,int) -> a
    void access$5(com.aowagie.text.pdf.TrueTypeFont$HorizontalHeader,short) -> d
    void access$6(com.aowagie.text.pdf.TrueTypeFont$HorizontalHeader,short) -> e
    void access$7(com.aowagie.text.pdf.TrueTypeFont$HorizontalHeader,int) -> b
    short access$8(com.aowagie.text.pdf.TrueTypeFont$HorizontalHeader) -> a
    short access$9(com.aowagie.text.pdf.TrueTypeFont$HorizontalHeader) -> b
    int access$10(com.aowagie.text.pdf.TrueTypeFont$HorizontalHeader) -> c
    short access$11(com.aowagie.text.pdf.TrueTypeFont$HorizontalHeader) -> d
    short access$12(com.aowagie.text.pdf.TrueTypeFont$HorizontalHeader) -> e
    short access$13(com.aowagie.text.pdf.TrueTypeFont$HorizontalHeader) -> f
    int access$14(com.aowagie.text.pdf.TrueTypeFont$HorizontalHeader) -> g
com.aowagie.text.pdf.TrueTypeFont$WindowsMetrics -> com.aowagie.text.pdf.co:
    short xAvgCharWidth -> b
    short fsType -> a
    short ySubscriptXSize -> c
    short ySubscriptYSize -> d
    short ySubscriptYOffset -> e
    short ySuperscriptYSize -> f
    short ySuperscriptYOffset -> g
    short yStrikeoutSize -> h
    short yStrikeoutPosition -> i
    byte[] panose -> j
    byte[] achVendID -> k
    short sTypoAscender -> l
    short sTypoDescender -> m
    int ulCodePageRange1 -> n
    int ulCodePageRange2 -> o
    int sCapHeight -> p
    void access$0(com.aowagie.text.pdf.TrueTypeFont$WindowsMetrics,short) -> a
    void access$1(com.aowagie.text.pdf.TrueTypeFont$WindowsMetrics,short) -> b
    void access$2(com.aowagie.text.pdf.TrueTypeFont$WindowsMetrics,short) -> c
    void access$3(com.aowagie.text.pdf.TrueTypeFont$WindowsMetrics,short) -> d
    void access$4(com.aowagie.text.pdf.TrueTypeFont$WindowsMetrics,short) -> e
    void access$5(com.aowagie.text.pdf.TrueTypeFont$WindowsMetrics,short) -> f
    void access$6(com.aowagie.text.pdf.TrueTypeFont$WindowsMetrics,short) -> g
    void access$7(com.aowagie.text.pdf.TrueTypeFont$WindowsMetrics,short) -> h
    byte[] access$8(com.aowagie.text.pdf.TrueTypeFont$WindowsMetrics) -> a
    byte[] access$9(com.aowagie.text.pdf.TrueTypeFont$WindowsMetrics) -> b
    void access$10(com.aowagie.text.pdf.TrueTypeFont$WindowsMetrics,short) -> i
    void access$11(com.aowagie.text.pdf.TrueTypeFont$WindowsMetrics,short) -> j
    short access$12(com.aowagie.text.pdf.TrueTypeFont$WindowsMetrics) -> c
    void access$13(com.aowagie.text.pdf.TrueTypeFont$WindowsMetrics,int) -> a
    void access$14(com.aowagie.text.pdf.TrueTypeFont$WindowsMetrics,int) -> b
    void access$15(com.aowagie.text.pdf.TrueTypeFont$WindowsMetrics,int) -> c
    short access$16(com.aowagie.text.pdf.TrueTypeFont$WindowsMetrics) -> d
    int access$17(com.aowagie.text.pdf.TrueTypeFont$WindowsMetrics) -> e
    short access$18(com.aowagie.text.pdf.TrueTypeFont$WindowsMetrics) -> f
    short access$19(com.aowagie.text.pdf.TrueTypeFont$WindowsMetrics) -> g
    short access$20(com.aowagie.text.pdf.TrueTypeFont$WindowsMetrics) -> h
    short access$21(com.aowagie.text.pdf.TrueTypeFont$WindowsMetrics) -> i
    short access$22(com.aowagie.text.pdf.TrueTypeFont$WindowsMetrics) -> j
    short access$23(com.aowagie.text.pdf.TrueTypeFont$WindowsMetrics) -> k
com.aowagie.text.pdf.TrueTypeFontSubSet -> com.aowagie.text.pdf.cp:
    java.lang.String[] tableNamesSimple -> a
    java.lang.String[] tableNamesCmap -> b
    java.lang.String[] tableNamesExtra -> c
    int[] entrySelectors -> d
    java.util.HashMap tableDirectory -> e
    com.aowagie.text.pdf.RandomAccessFileOrArray rf -> f
    java.lang.String fileName -> g
    boolean includeCmap -> h
    boolean includeExtras -> i
    boolean locaShortTable -> j
    int[] locaTable -> k
    java.util.HashMap glyphsUsed -> l
    java.util.ArrayList glyphsInList -> m
    int tableGlyphOffset -> n
    int[] newLocaTable -> o
    byte[] newLocaTableOut -> p
    byte[] newGlyfTable -> q
    int glyfTableRealSize -> r
    int locaTableRealSize -> s
    byte[] outFont -> t
    int fontPtr -> u
    int directoryOffset -> v
    byte[] process() -> a
    void assembleFont() -> b
    void createTableDirectory() -> c
    void readLoca() -> d
    void createNewGlyphTables() -> e
    void locaTobytes() -> f
    void flatGlyphs() -> g
    void checkGlyphComposite(int) -> a
    java.lang.String readStandardString(int) -> b
    void writeFontShort(int) -> c
    void writeFontInt(int) -> d
    void writeFontString(java.lang.String) -> a
    int calculateChecksum(byte[]) -> a
com.aowagie.text.pdf.TrueTypeFontUnicode -> com.aowagie.text.pdf.cq:
    boolean vertical -> B
    byte[] rotbits -> C
    int getWidth(int) -> a
    int getWidth(java.lang.String) -> b
    com.aowagie.text.pdf.PdfStream getToUnicode(java.lang.Object[]) -> a
    java.lang.String toHex4(int) -> h
    java.lang.String toHex(int) -> i
    com.aowagie.text.pdf.PdfDictionary getCIDFontType2(com.aowagie.text.pdf.PdfIndirectReference,java.lang.String,java.lang.Object[]) -> a
    com.aowagie.text.pdf.PdfDictionary getFontBaseType(com.aowagie.text.pdf.PdfIndirectReference,java.lang.String,com.aowagie.text.pdf.PdfIndirectReference) -> b
    int compare(java.lang.Object,java.lang.Object) -> compare
    void writeFont(com.aowagie.text.pdf.PdfWriter,com.aowagie.text.pdf.PdfIndirectReference,java.lang.Object[]) -> a
    byte[] convertToBytes(java.lang.String) -> c
    byte[] convertToBytes(int) -> b
    int[] getMetricsTT(int) -> g
com.aowagie.text.pdf.Type1Font -> com.aowagie.text.pdf.cr:
    com.aowagie.text.pdf.fonts.FontsResourceAnchor resourceAnchor -> o
    byte[] pfb -> p
    java.lang.String FontName -> q
    java.lang.String FullName -> r
    java.lang.String FamilyName -> s
    java.lang.String Weight -> t
    float ItalicAngle -> u
    boolean IsFixedPitch -> v
    java.lang.String CharacterSet -> w
    int llx -> x
    int lly -> y
    int urx -> z
    int ury -> A
    int UnderlinePosition -> B
    int UnderlineThickness -> C
    java.lang.String EncodingScheme -> D
    int CapHeight -> E
    int XHeight -> F
    int Ascender -> G
    int Descender -> H
    int StdHW -> I
    int StdVW -> J
    java.util.HashMap CharMetrics -> K
    java.util.HashMap KernPairs -> L
    java.lang.String fileName -> M
    boolean builtinFont -> N
    int[] PFB_TYPES -> O
    int getRawWidth(int,java.lang.String) -> a
    void process(com.aowagie.text.pdf.RandomAccessFileOrArray) -> a
    com.aowagie.text.pdf.PdfStream getFullFontStream() -> j
    com.aowagie.text.pdf.PdfDictionary getFontDescriptor(com.aowagie.text.pdf.PdfIndirectReference) -> a
    com.aowagie.text.pdf.PdfDictionary getFontBaseType(com.aowagie.text.pdf.PdfIndirectReference,int,int,byte[]) -> a
    void writeFont(com.aowagie.text.pdf.PdfWriter,com.aowagie.text.pdf.PdfIndirectReference,java.lang.Object[]) -> a
    float getFontDescriptor(int,float) -> b
    java.lang.String getPostscriptFontName() -> g
    java.lang.String[][] getFamilyFontName() -> h
    int[] getRawCharBBox(int,java.lang.String) -> b
com.aowagie.text.pdf.XfaForm -> com.aowagie.text.pdf.cs:
    com.aowagie.text.pdf.XfaForm$Xml2SomTemplate templateSom -> a
    org.w3c.dom.Node templateNode -> b
    com.aowagie.text.pdf.XfaForm$Xml2SomDatasets datasetsSom -> c
    org.w3c.dom.Node datasetsNode -> d
    com.aowagie.text.pdf.XfaForm$AcroFieldsSearch acroFieldsSom -> e
    com.aowagie.text.pdf.PdfReader reader -> f
    boolean xfaPresent -> g
    org.w3c.dom.Document domDocument -> h
    boolean changed -> i
    com.aowagie.text.pdf.PdfObject getXfaObject(com.aowagie.text.pdf.PdfReader) -> a
    void extractNodes() -> c
    void setXfa(com.aowagie.text.pdf.XfaForm,com.aowagie.text.pdf.PdfReader,com.aowagie.text.pdf.PdfWriter) -> a
    void setXfa(com.aowagie.text.pdf.PdfWriter) -> a
    byte[] serializeDoc(org.w3c.dom.Node) -> a
    boolean isXfaPresent() -> a
    java.lang.String findFieldName(java.lang.String,com.aowagie.text.pdf.AcroFields) -> a
    boolean isChanged() -> b
com.aowagie.text.pdf.XfaForm$AcroFieldsSearch -> com.aowagie.text.pdf.ct:
    java.util.HashMap acroShort2LongName -> f
    java.util.HashMap getAcroShort2LongName() -> a
com.aowagie.text.pdf.XfaForm$InverseStore -> com.aowagie.text.pdf.cu:
    java.util.ArrayList part -> a
    java.util.ArrayList follow -> b
    java.lang.String getDefaultName() -> a
    boolean isSimilar(java.lang.String) -> a
    java.util.ArrayList access$1(com.aowagie.text.pdf.XfaForm$InverseStore) -> a
    java.util.ArrayList access$2(com.aowagie.text.pdf.XfaForm$InverseStore) -> b
    boolean access$3(com.aowagie.text.pdf.XfaForm$InverseStore,java.lang.String) -> a
com.aowagie.text.pdf.XfaForm$Stack2 -> com.aowagie.text.pdf.cv:
    java.lang.Object peek() -> a
    java.lang.Object pop() -> b
    java.lang.Object push(java.lang.Object) -> a
    boolean empty() -> c
    boolean access$0(com.aowagie.text.pdf.XfaForm$Stack2) -> a
    java.lang.Object access$1(com.aowagie.text.pdf.XfaForm$Stack2) -> b
    java.lang.Object access$3(com.aowagie.text.pdf.XfaForm$Stack2,java.lang.Object) -> a
    java.lang.Object access$4(com.aowagie.text.pdf.XfaForm$Stack2) -> c
com.aowagie.text.pdf.XfaForm$Xml2Som -> com.aowagie.text.pdf.cw:
    java.util.ArrayList order -> a
    java.util.HashMap name2Node -> b
    java.util.HashMap inverseSearch -> c
    com.aowagie.text.pdf.XfaForm$Stack2 stack -> d
    int anform -> e
    java.lang.String escapeSom(java.lang.String) -> a
    java.lang.String printStack() -> b
    java.lang.String getShortName(java.lang.String) -> b
    void inverseSearchAdd(java.lang.String) -> c
    void inverseSearchAdd(java.util.HashMap,com.aowagie.text.pdf.XfaForm$Stack2,java.lang.String) -> a
    java.lang.String inverseSearchGlobal(java.util.ArrayList) -> a
    com.aowagie.text.pdf.XfaForm$Stack2 splitParts(java.lang.String) -> d
    java.util.HashMap getName2Node() -> c
com.aowagie.text.pdf.XfaForm$Xml2SomDatasets -> com.aowagie.text.pdf.cx:
    boolean hasChildren(org.w3c.dom.Node) -> a
    void processDatasetsInternal(org.w3c.dom.Node) -> b
com.aowagie.text.pdf.XfaForm$Xml2SomTemplate -> com.aowagie.text.pdf.cy:
    boolean dynamicForm -> f
    int templateLevel -> g
    void processTemplate(org.w3c.dom.Node,java.util.HashMap) -> a
com.aowagie.text.pdf.codec.BmpImage -> com.aowagie.text.pdf.a.a:
    java.io.InputStream inputStream -> a
    long bitmapFileSize -> b
    long bitmapOffset -> c
    long compression -> d
    long imageSize -> e
    byte[] palette -> f
    int imageType -> g
    int numBands -> h
    boolean isBottomUp -> i
    int bitsPerPixel -> j
    int redMask -> k
    int greenMask -> l
    int blueMask -> m
    int alphaMask -> n
    java.util.HashMap properties -> o
    long xPelsPerMeter -> p
    long yPelsPerMeter -> q
    int width -> r
    int height -> s
    com.aowagie.text.Image getImage(java.io.InputStream,boolean,int) -> a
    void process(java.io.InputStream,boolean) -> a
    byte[] getPalette(int) -> a
    com.aowagie.text.Image getImage() -> a
    com.aowagie.text.Image indexedModel(byte[],int,int) -> a
    void readPalette(int) -> b
    com.aowagie.text.Image read1Bit(int) -> c
    com.aowagie.text.Image read4Bit(int) -> d
    com.aowagie.text.Image read8Bit(int) -> e
    void read24Bit(byte[]) -> a
    int findMask(int) -> f
    int findShift(int) -> g
    com.aowagie.text.Image read1632Bit(boolean) -> a
    com.aowagie.text.Image readRLE8() -> b
    com.aowagie.text.Image readRLE4() -> c
    byte[] decodeRLE(boolean,byte[]) -> a
    int readUnsignedByte(java.io.InputStream) -> a
    int readUnsignedShort(java.io.InputStream) -> b
    int readWord(java.io.InputStream) -> c
    long readUnsignedInt(java.io.InputStream) -> d
    int readInt(java.io.InputStream) -> e
    long readDWord(java.io.InputStream) -> f
    int readLong(java.io.InputStream) -> g
com.aowagie.text.pdf.codec.wmf.InputMeta -> com.aowagie.text.pdf.a.a.a:
    java.io.InputStream in -> a
    int length -> b
    int readWord() -> a
    int readShort() -> b
    int readInt() -> c
    int readByte() -> d
    void skip(int) -> a
    int getLength() -> e
    java.awt.Color readColor() -> f
com.aowagie.text.pdf.codec.wmf.MetaBrush -> com.aowagie.text.pdf.a.a.b:
    int style -> b
    int hatch -> c
    java.awt.Color color -> d
    void init(com.aowagie.text.pdf.codec.wmf.InputMeta) -> a
    int getStyle() -> a
    java.awt.Color getColor() -> b
com.aowagie.text.pdf.codec.wmf.MetaDo -> com.aowagie.text.pdf.a.a.c:
    com.aowagie.text.pdf.PdfContentByte cb -> a
    com.aowagie.text.pdf.codec.wmf.InputMeta in -> b
    int left -> c
    int top -> d
    int right -> e
    int bottom -> f
    int inch -> g
    com.aowagie.text.pdf.codec.wmf.MetaState state -> h
    void readAll() -> a
    void outputText(int,int,int,int,int,int,int,java.lang.String) -> a
    boolean isNullStrokeFill(boolean) -> a
    void strokeAndFill() -> b
    float getArc(float,float,float,float) -> a
com.aowagie.text.pdf.codec.wmf.MetaFont -> com.aowagie.text.pdf.a.a.d:
    java.lang.String[] fontNames -> b
    int height -> c
    float angle -> d
    int bold -> e
    int italic -> f
    boolean underline -> g
    boolean strikeout -> h
    int charset -> i
    int pitchAndFamily -> j
    java.lang.String faceName -> k
    com.aowagie.text.pdf.BaseFont font -> l
    void init(com.aowagie.text.pdf.codec.wmf.InputMeta) -> a
    com.aowagie.text.pdf.BaseFont getFont() -> a
    float getAngle() -> b
    boolean isUnderline() -> c
    boolean isStrikeout() -> d
    float getFontSize(com.aowagie.text.pdf.codec.wmf.MetaState) -> a
com.aowagie.text.pdf.codec.wmf.MetaObject -> com.aowagie.text.pdf.a.a.e:
    int type -> a
    int getType() -> e
com.aowagie.text.pdf.codec.wmf.MetaPen -> com.aowagie.text.pdf.a.a.f:
    int style -> b
    int penWidth -> c
    java.awt.Color color -> d
    void init(com.aowagie.text.pdf.codec.wmf.InputMeta) -> a
    int getStyle() -> a
    int getPenWidth() -> b
    java.awt.Color getColor() -> c
com.aowagie.text.pdf.codec.wmf.MetaState -> com.aowagie.text.pdf.a.a.g:
    java.util.Stack savedStates -> a
    java.util.ArrayList MetaObjects -> b
    java.awt.Point currentPoint -> c
    com.aowagie.text.pdf.codec.wmf.MetaPen currentPen -> d
    com.aowagie.text.pdf.codec.wmf.MetaBrush currentBrush -> e
    com.aowagie.text.pdf.codec.wmf.MetaFont currentFont -> f
    java.awt.Color currentBackgroundColor -> g
    java.awt.Color currentTextColor -> h
    int backgroundMode -> i
    int polyFillMode -> j
    int lineJoin -> k
    int textAlign -> l
    int offsetWx -> m
    int offsetWy -> n
    int extentWx -> o
    int extentWy -> p
    float scalingX -> q
    float scalingY -> r
    void setMetaState(com.aowagie.text.pdf.codec.wmf.MetaState) -> a
    void addMetaObject(com.aowagie.text.pdf.codec.wmf.MetaObject) -> a
    void selectMetaObject(int,com.aowagie.text.pdf.PdfContentByte) -> a
    void deleteMetaObject(int) -> a
    void saveState(com.aowagie.text.pdf.PdfContentByte) -> a
    void restoreState(int,com.aowagie.text.pdf.PdfContentByte) -> b
    void cleanup(com.aowagie.text.pdf.PdfContentByte) -> b
    float transformX(int) -> b
    float transformY(int) -> c
    void setScalingX(float) -> a
    void setScalingY(float) -> b
    void setOffsetWx(int) -> d
    void setOffsetWy(int) -> e
    void setExtentWx(int) -> f
    void setExtentWy(int) -> g
    float transformAngle(float) -> c
    void setCurrentPoint(java.awt.Point) -> a
    java.awt.Point getCurrentPoint() -> a
    com.aowagie.text.pdf.codec.wmf.MetaBrush getCurrentBrush() -> b
    com.aowagie.text.pdf.codec.wmf.MetaPen getCurrentPen() -> c
    com.aowagie.text.pdf.codec.wmf.MetaFont getCurrentFont() -> d
    java.awt.Color getCurrentBackgroundColor() -> e
    void setCurrentBackgroundColor(java.awt.Color) -> a
    java.awt.Color getCurrentTextColor() -> f
    void setCurrentTextColor(java.awt.Color) -> b
    int getBackgroundMode() -> g
    void setBackgroundMode(int) -> h
    int getTextAlign() -> h
    void setTextAlign(int) -> i
    int getPolyFillMode() -> i
    void setPolyFillMode(int) -> j
    void setLineJoinRectangle(com.aowagie.text.pdf.PdfContentByte) -> c
    void setLineJoinPolygon(com.aowagie.text.pdf.PdfContentByte) -> d
    boolean getLineNeutral() -> j
com.aowagie.text.pdf.collection.PdfCollection -> com.aowagie.text.pdf.b.a:
com.aowagie.text.pdf.crypto.AESCipher -> com.aowagie.text.pdf.c.a:
    org.spongycastle.crypto.paddings.PaddedBufferedBlockCipher bp -> a
    byte[] update(byte[],int,int) -> a
    byte[] doFinal() -> a
com.aowagie.text.pdf.crypto.ARCFOUREncryption -> com.aowagie.text.pdf.c.b:
    byte[] state -> a
    int x -> b
    int y -> c
    void prepareARCFOURKey(byte[]) -> a
    void prepareARCFOURKey(byte[],int,int) -> a
    void encryptARCFOUR(byte[],int,int,byte[],int) -> a
    void encryptARCFOUR(byte[],int,int) -> b
    void encryptARCFOUR(byte[],byte[]) -> a
    void encryptARCFOUR(byte[]) -> b
com.aowagie.text.pdf.crypto.IVGenerator -> com.aowagie.text.pdf.c.c:
    com.aowagie.text.pdf.crypto.ARCFOUREncryption arcfour -> a
    byte[] getIV() -> a
    byte[] getIV(int) -> a
com.aowagie.text.pdf.draw.DrawInterface -> com.aowagie.text.pdf.d.a:
    void draw(com.aowagie.text.pdf.PdfContentByte,float,float,float,float,float) -> a
com.aowagie.text.pdf.events.PdfPCellEventForwarder -> com.aowagie.text.pdf.e.a:
    java.util.ArrayList events -> a
    void addCellEvent(com.aowagie.text.pdf.PdfPCellEvent) -> a
    void cellLayout(com.aowagie.text.pdf.PdfPCell,com.aowagie.text.Rectangle,com.aowagie.text.pdf.PdfContentByte[]) -> a
com.aowagie.text.pdf.events.PdfPTableEventForwarder -> com.aowagie.text.pdf.e.b:
    java.util.ArrayList events -> a
    void addTableEvent(com.aowagie.text.pdf.PdfPTableEvent) -> a
    void tableLayout(com.aowagie.text.pdf.PdfPTable,float[][],float[],int,int,com.aowagie.text.pdf.PdfContentByte[]) -> a
com.aowagie.text.pdf.fonts.FontsResourceAnchor -> com.aowagie.text.pdf.f.a:
com.aowagie.text.pdf.internal.PdfAnnotationsImp -> com.aowagie.text.pdf.g.a:
    com.aowagie.text.pdf.PdfAcroForm acroForm -> a
    java.util.ArrayList annotations -> b
    java.util.ArrayList delayedAnnotations -> c
    boolean hasValidAcroForm() -> a
    com.aowagie.text.pdf.PdfAcroForm getAcroForm() -> b
    void setSigFlags(int) -> a
    void addAnnotation(com.aowagie.text.pdf.PdfAnnotation) -> a
    void addPlainAnnotation(com.aowagie.text.pdf.PdfAnnotation) -> b
    void addFormFieldRaw(com.aowagie.text.pdf.PdfFormField) -> a
    boolean hasUnusedAnnotations() -> c
    void resetAnnotations() -> d
    com.aowagie.text.pdf.PdfArray rotateAnnotations(com.aowagie.text.pdf.PdfWriter,com.aowagie.text.Rectangle) -> a
    com.aowagie.text.pdf.PdfAnnotation convertAnnotation(com.aowagie.text.pdf.PdfWriter,com.aowagie.text.Annotation,com.aowagie.text.Rectangle) -> a
com.aowagie.text.pdf.internal.PdfVersionImp -> com.aowagie.text.pdf.g.b:
    byte[][] HEADER -> a
    boolean headerWasWritten -> b
    boolean appendmode -> c
    char header_version -> d
    com.aowagie.text.pdf.PdfName catalog_version -> e
    com.aowagie.text.pdf.PdfDictionary extensions -> f
    void setPdfVersion(char) -> a
    void setAtLeastPdfVersion(char) -> b
    void setPdfVersion(com.aowagie.text.pdf.PdfName) -> a
    void setAppendmode(boolean) -> a
    void writeHeader(com.aowagie.text.pdf.OutputStreamCounter) -> a
    com.aowagie.text.pdf.PdfName getVersionAsName(char) -> c
    byte[] getVersionAsByteArray(char) -> d
    void addToCatalog(com.aowagie.text.pdf.PdfDictionary) -> a
    void addDeveloperExtension(com.aowagie.text.pdf.PdfDeveloperExtension) -> a
com.aowagie.text.pdf.internal.PdfViewerPreferencesImp -> com.aowagie.text.pdf.g.c:
    com.aowagie.text.pdf.PdfName[] VIEWER_PREFERENCES -> a
    com.aowagie.text.pdf.PdfName[] NONFULLSCREENPAGEMODE_PREFERENCES -> b
    com.aowagie.text.pdf.PdfName[] DIRECTION_PREFERENCES -> c
    com.aowagie.text.pdf.PdfName[] PAGE_BOUNDARIES -> d
    com.aowagie.text.pdf.PdfName[] PRINTSCALING_PREFERENCES -> e
    com.aowagie.text.pdf.PdfName[] DUPLEX_PREFERENCES -> f
    int pageLayoutAndMode -> g
    com.aowagie.text.pdf.PdfDictionary viewerPreferences -> h
    void addToCatalog(com.aowagie.text.pdf.PdfDictionary) -> a
com.aowagie.text.pdf.internal.PdfXConformanceImp -> com.aowagie.text.pdf.g.d:
    int pdfxConformance -> a
    int getPDFXConformance() -> a
    boolean isPdfX() -> b
    boolean isPdfX1A2001() -> c
    boolean isPdfX32002() -> d
    boolean isPdfA1() -> e
    void completeInfoDictionary(com.aowagie.text.pdf.PdfDictionary) -> a
    void completeExtraCatalog(com.aowagie.text.pdf.PdfDictionary) -> b
    void checkPDFXConformance(com.aowagie.text.pdf.PdfWriter,int,java.lang.Object) -> a
com.aowagie.text.xml.XmlDomWriter -> com.aowagie.text.b.a:
    java.io.PrintWriter fOut -> a
    boolean fCanonical -> b
    boolean fXML11 -> c
    void setCanonical(boolean) -> a
    void setOutput(java.io.OutputStream,java.lang.String) -> a
    void write(org.w3c.dom.Node) -> a
    org.w3c.dom.Attr[] sortAttributes(org.w3c.dom.NamedNodeMap) -> a
    void normalizeAndPrint(java.lang.String,boolean) -> a
    void normalizeAndPrint(char,boolean) -> a
com.aowagie.text.xml.xmp.XmpReader -> com.aowagie.text.b.a.a:
    org.w3c.dom.Document domDocument -> a
    boolean replace(java.lang.String,java.lang.String,java.lang.String) -> a
    boolean add(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
    boolean setNodeText(org.w3c.dom.Document,org.w3c.dom.Node,java.lang.String) -> a
    byte[] serializeDoc() -> a
com.dmurph.tracking.AnalyticsConfigData -> com.a.a.a:
    java.lang.String trackingCode -> a
    java.lang.String encoding -> b
    java.lang.String screenResolution -> c
    java.lang.String colorDepth -> d
    java.lang.String userLanguage -> e
    java.lang.String flashVersion -> f
    void populateFromSystem() -> a
    java.lang.String getColorDepth() -> b
    java.lang.String getEncoding() -> c
    java.lang.String getFlashVersion() -> d
    java.lang.String getScreenResolution() -> e
    java.lang.String getTrackingCode() -> f
    java.lang.String getUserLanguage() -> g
com.dmurph.tracking.AnalyticsRequestData -> com.a.a.b:
    java.lang.String pageTitle -> a
    java.lang.String hostName -> b
    java.lang.String pageURL -> c
    java.lang.String eventCategory -> d
    java.lang.String eventAction -> e
    java.lang.String eventLabel -> f
    java.lang.Integer eventValue -> g
    java.lang.String utmcsr -> h
    java.lang.String utmccn -> i
    java.lang.String utmctr -> j
    java.lang.String utmcmd -> k
    java.lang.String utmcct -> l
    void setReferrer(java.lang.String,java.lang.String) -> a
    java.lang.String getUtmcsr() -> a
    java.lang.String getUtmccn() -> b
    java.lang.String getUtmctr() -> c
    java.lang.String getUtmcmd() -> d
    java.lang.String getUtmcct() -> e
    java.lang.String getEventAction() -> f
    java.lang.String getEventCategory() -> g
    java.lang.String getEventLabel() -> h
    java.lang.Integer getEventValue() -> i
    java.lang.String getHostName() -> j
    java.lang.String getPageTitle() -> k
    java.lang.String getPageURL() -> l
    void setHostName(java.lang.String) -> a
    void setPageTitle(java.lang.String) -> b
    void setPageURL(java.lang.String) -> c
com.dmurph.tracking.GoogleAnalyticsV4_7_2 -> com.a.a.c:
    com.dmurph.tracking.AnalyticsConfigData config -> a
    java.util.Random random -> b
    int cookie1 -> c
    int cookie2 -> d
    java.lang.String getGoogleAnalyticsVersion() -> a
    java.lang.String buildURL(com.dmurph.tracking.AnalyticsRequestData) -> a
    java.lang.String getURIString(java.lang.String) -> a
    void resetSession() -> b
com.dmurph.tracking.IGoogleAnalyticsURLBuilder -> com.a.a.d:
    java.lang.String buildURL(com.dmurph.tracking.AnalyticsRequestData) -> a
com.dmurph.tracking.JGoogleAnalyticsTracker -> com.a.a.e:
    org.slf4j.Logger logger -> a
    java.lang.ThreadGroup asyncThreadGroup -> b
    long asyncThreadsRunning -> c
    java.net.Proxy proxy -> d
    java.util.LinkedList fifo -> e
    java.lang.Thread backgroundThread -> f
    boolean backgroundThreadMayRun -> g
    com.dmurph.tracking.JGoogleAnalyticsTracker$GoogleAnalyticsVersion gaVersion -> h
    com.dmurph.tracking.AnalyticsConfigData configData -> i
    com.dmurph.tracking.IGoogleAnalyticsURLBuilder builder -> j
    com.dmurph.tracking.JGoogleAnalyticsTracker$DispatchMode mode -> k
    boolean enabled -> l
    void setDispatchMode(com.dmurph.tracking.JGoogleAnalyticsTracker$DispatchMode) -> a
    void trackPageView(java.lang.String,java.lang.String,java.lang.String) -> a
    void trackPageViewFromReferrer(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
    void makeCustomRequest(com.dmurph.tracking.AnalyticsRequestData) -> a
    void dispatchRequest(java.lang.String) -> b
    void createBuilder() -> f
    void startBackgroundThread() -> g
    long access$008() -> a
    void access$100(java.lang.String) -> a
    long access$010() -> b
    org.slf4j.Logger access$200() -> c
    boolean access$300() -> d
    java.util.LinkedList access$400() -> e
com.dmurph.tracking.JGoogleAnalyticsTracker$1 -> com.a.a.f:
    java.lang.String val$url -> a
    com.dmurph.tracking.JGoogleAnalyticsTracker this$0 -> b
    void run() -> run
com.dmurph.tracking.JGoogleAnalyticsTracker$2 -> com.a.a.g:
    void run() -> run
com.dmurph.tracking.JGoogleAnalyticsTracker$3 -> com.a.a.h:
    int[] $SwitchMap$com$dmurph$tracking$JGoogleAnalyticsTracker$DispatchMode -> a
    int[] $SwitchMap$com$dmurph$tracking$JGoogleAnalyticsTracker$GoogleAnalyticsVersion -> b
com.dmurph.tracking.JGoogleAnalyticsTracker$DispatchMode -> com.a.a.i:
    com.dmurph.tracking.JGoogleAnalyticsTracker$DispatchMode SYNCHRONOUS -> a
    com.dmurph.tracking.JGoogleAnalyticsTracker$DispatchMode MULTI_THREAD -> b
    com.dmurph.tracking.JGoogleAnalyticsTracker$DispatchMode SINGLE_THREAD -> c
    com.dmurph.tracking.JGoogleAnalyticsTracker$DispatchMode[] $VALUES -> d
    com.dmurph.tracking.JGoogleAnalyticsTracker$DispatchMode[] values() -> values
    com.dmurph.tracking.JGoogleAnalyticsTracker$DispatchMode valueOf(java.lang.String) -> valueOf
com.dmurph.tracking.JGoogleAnalyticsTracker$GoogleAnalyticsVersion -> com.a.a.j:
    com.dmurph.tracking.JGoogleAnalyticsTracker$GoogleAnalyticsVersion V_4_7_2 -> a
    com.dmurph.tracking.JGoogleAnalyticsTracker$GoogleAnalyticsVersion[] $VALUES -> b
    com.dmurph.tracking.JGoogleAnalyticsTracker$GoogleAnalyticsVersion[] values() -> values
    com.dmurph.tracking.JGoogleAnalyticsTracker$GoogleAnalyticsVersion valueOf(java.lang.String) -> valueOf
com.dmurph.tracking.URIEncoder -> com.a.a.k:
    java.lang.String mark -> a
    java.lang.String encodeURI(java.lang.String) -> a
es.gob.afirma.applet.AOCantSaveDataException -> es.gob.afirma.applet.a:
es.gob.afirma.applet.AOMaxAttemptsExceededException -> es.gob.afirma.applet.b:
es.gob.afirma.applet.AOXMLTransform -> es.gob.afirma.applet.c:
    java.lang.String type -> a
    java.lang.String subtype -> b
    java.lang.String body -> c
    java.lang.String getType() -> a
    java.lang.String getSubtype() -> b
    java.lang.String getBody() -> c
es.gob.afirma.applet.AppletMessages -> es.gob.afirma.applet.d:
    java.util.ResourceBundle resourceBundle -> a
    java.lang.String getString(java.lang.String) -> a
    java.lang.String getString(java.lang.String,java.lang.String[]) -> a
es.gob.afirma.applet.AsynchronousSaveData -> es.gob.afirma.applet.e:
    java.util.logging.Logger LOGGER -> a
    byte[] dataToSave -> b
    java.lang.String dialogTitle -> c
    java.lang.String savingTarget -> d
    java.lang.String[] extensions -> e
    java.lang.String description -> f
    java.awt.Frame parent -> g
    boolean showDialogIfError -> h
    byte[] getDataToSave() -> a
    java.lang.String getDialogTitle() -> b
    void setSavingTarget(java.lang.String) -> a
    java.lang.String getSavingTarget() -> c
    java.lang.String[] getExtensions() -> d
    java.lang.String getDescription() -> e
    java.awt.Frame getParent() -> f
    boolean getShowDialogIfError() -> g
    void run() -> run
es.gob.afirma.applet.AsynchronousSaveData$1 -> es.gob.afirma.applet.AsynchronousSaveData$1:
    es.gob.afirma.applet.AsynchronousSaveData this$0 -> a
    java.lang.Void run() -> a
    java.lang.Object run() -> run
es.gob.afirma.applet.CipherAction -> es.gob.afirma.applet.CipherAction:
    es.gob.afirma.applet.CipherManager cipherManager -> a
    byte[] data -> b
    java.lang.Void run() -> a
    java.lang.Object run() -> run
es.gob.afirma.applet.CipherManager -> es.gob.afirma.applet.f:
    java.awt.Component parent -> a
    es.gob.afirma.core.ciphers.AOCipherConfig cipherConfig -> b
    java.lang.String cipherKeyAlias -> c
    char[] cipherKeystorePass -> d
    boolean useCipherKeyStore -> e
    java.lang.String keyMode -> f
    byte[] cipherKeyEncoded -> g
    char[] cipherPassword -> h
    byte[] plainData -> i
    byte[] cipheredData -> j
    java.net.URI fileUri -> k
    boolean fileBase64 -> l
    void initialize() -> a
    void setFileUri(java.net.URI,boolean) -> a
    es.gob.afirma.core.ciphers.CipherConstants$AOCipherAlgorithm getCipherAlgorithm() -> b
    void setCipherAlgorithm(es.gob.afirma.core.ciphers.CipherConstants$AOCipherAlgorithm) -> a
    es.gob.afirma.core.ciphers.AOCipherConfig getCipherConfig() -> c
    void setUseCipherKeyStore(boolean) -> a
    java.lang.String getKeyMode() -> d
    void setKeyMode(java.lang.String) -> a
    byte[] getCipherKey() -> e
    void setCipherKey(byte[]) -> a
    char[] getCipherPassword() -> f
    void setCipherPassword(char[]) -> a
    boolean isValidPassword(java.lang.String) -> b
    byte[] getPlainData() -> g
    void setPlainData(byte[]) -> b
    byte[] getCipheredData() -> h
    void setCipheredData(byte[]) -> c
    void cipherData() -> i
    void cipherData(byte[]) -> d
    java.security.Key getConfiguredKey() -> j
    java.security.Key getConfiguredKey(es.gob.afirma.core.ciphers.AOCipher,es.gob.afirma.core.ciphers.AOCipherConfig) -> a
    void decipherData() -> k
    void decipherData(byte[]) -> e
    java.security.Key getKeyFromCipherKeyStore() -> l
    void saveCipherKey(es.gob.afirma.core.ciphers.AOCipherConfig,java.security.Key) -> a
es.gob.afirma.applet.CoEnvelopAction -> es.gob.afirma.applet.CoEnvelopAction:
    es.gob.afirma.applet.EnveloperManager enveloperManager -> a
    byte[] envelop -> b
    byte[] run() -> a
    java.lang.Object run() -> run
es.gob.afirma.applet.CryptoUtils -> es.gob.afirma.applet.g:
    byte[] getMessageDigest(byte[],java.lang.String) -> a
es.gob.afirma.applet.DecipherAction -> es.gob.afirma.applet.DecipherAction:
    es.gob.afirma.applet.CipherManager cipherManager -> a
    byte[] data -> b
    java.lang.Void run() -> a
    java.lang.Object run() -> run
es.gob.afirma.applet.EnveloperManager -> es.gob.afirma.applet.h:
    java.util.logging.Logger LOGGER -> a
    java.awt.Component parent -> b
    java.lang.String contentType -> c
    es.gob.afirma.applet.KeyStoreConfigurationManager ksConfigManager -> d
    java.util.Map recipients -> e
    java.lang.String signAlgorithm -> f
    es.gob.afirma.applet.CipherManager cipherManager -> g
    byte[] envelopedData -> h
    byte[] contentData -> i
    java.net.URI fileUri -> j
    boolean fileBase64 -> k
    es.gob.afirma.envelopers.cms.AOCMSEnveloper enveloper -> l
    void initialize() -> a
    java.lang.String getCmsContentType() -> b
    void setCipherManager(es.gob.afirma.applet.CipherManager) -> a
    void setCmsContentType(java.lang.String) -> a
    java.security.cert.X509Certificate[] getRecipients() -> c
    void setKsConfigManager(es.gob.afirma.applet.KeyStoreConfigurationManager) -> a
    void addRecipient(java.security.cert.X509Certificate) -> a
    void addRecipient(byte[]) -> a
    void removeRecipient(java.security.cert.X509Certificate) -> b
    void removeRecipient(byte[]) -> b
    void removeAllRecipients() -> d
    java.security.cert.X509Certificate encodeCertificate(byte[]) -> g
    void envelop() -> e
    void envelop(byte[]) -> c
    void encrypt() -> f
    void encrypt(byte[]) -> d
    void unwrap(byte[]) -> e
    byte[] getConfigureContent() -> i
    byte[] recoverDataFromFile() -> j
    byte[] createCMSEncryptedData(byte[]) -> h
    byte[] createCMSEnvelopData(byte[]) -> i
    byte[] createCMSSignedEnvelopData(byte[]) -> j
    byte[] createCMSAuthenticatedEnvelopData(byte[]) -> k
    byte[] coEnvelop(byte[]) -> f
    byte[] getEnvelopedData() -> g
    byte[] getContentData() -> h
es.gob.afirma.applet.ExtFilter -> es.gob.afirma.applet.i:
    java.lang.String[] extensions -> a
    java.lang.String description -> b
    boolean accept(java.io.File) -> accept
    java.lang.String getDescription() -> getDescription
    java.lang.String getExtension(java.io.File) -> a
es.gob.afirma.applet.FileUtils -> es.gob.afirma.applet.j:
    byte[] loadFile(java.lang.String) -> a
    byte[] loadFile(java.net.URI) -> a
es.gob.afirma.applet.GetCertificateAction -> es.gob.afirma.applet.GetCertificateAction:
    java.lang.String alias -> a
    es.gob.afirma.applet.KeyStoreConfigurationManager ksConfigManager -> b
    java.security.cert.X509Certificate run() -> a
    java.lang.Object run() -> run
es.gob.afirma.applet.GetFileAction -> es.gob.afirma.applet.GetFileAction:
    java.io.File[] files -> a
    java.lang.String title -> b
    java.lang.String[] exts -> c
    java.lang.String desc -> d
    boolean multiSel -> e
    java.awt.Component parent -> f
    es.gob.afirma.applet.io.FileBean[] run() -> a
    java.lang.Object run() -> run
es.gob.afirma.applet.GetSignatureAction -> es.gob.afirma.applet.GetSignatureAction:
    java.util.logging.Logger LOGGER -> a
    byte[] signData -> b
    java.net.URI electronicSignatureFile -> c
    boolean selectSignature -> d
    java.lang.String signFormat -> e
    java.awt.Component parent -> f
    void setSelectFile(boolean,java.lang.String,java.awt.Component) -> a
    byte[] run() -> a
    java.net.URI getSelectedSignatureFile() -> b
    java.lang.String selectSignFile(java.lang.String,java.awt.Component) -> a
    java.lang.Object run() -> run
es.gob.afirma.applet.KeyStoreConfigurationManager -> es.gob.afirma.applet.k:
    es.gob.afirma.keystores.AOKeyStore ks -> a
    es.gob.afirma.keystores.AOKeyStore defaultKeyStore -> b
    java.lang.String selectedAlias -> c
    es.gob.afirma.keystores.AOKeyStoreManager ksManager -> d
    java.security.KeyStore$PrivateKeyEntry ke -> e
    java.lang.String ksPath -> f
    java.lang.String ksPassword -> g
    java.lang.String errorMessage -> h
    java.awt.Component parent -> i
    boolean showLoadingWarning -> j
    boolean showExpiratedCertificates -> k
    boolean checkPrivateKey -> l
    boolean mandatoryCert -> m
    java.util.List certFilters -> n
    es.gob.afirma.keystores.AOKeyStore getDefaultKeyStore() -> k
    void resetFilters() -> a
    void addCertFilter(es.gob.afirma.keystores.filters.CertificateFilter) -> a
    void initialize() -> b
    void initKeyStore() -> l
    void changeKeyStore(es.gob.afirma.keystores.AOKeyStore) -> a
    boolean isSelectedCertificate() -> c
    void selectCertificate() -> d
    java.security.cert.Certificate getCertificate(java.lang.String) -> a
    java.lang.String[] getArrayCertificateAlias() -> e
    es.gob.afirma.keystores.AOKeyStoreManager getKeyStoreManager() -> f
    es.gob.afirma.keystores.AOKeyStore getKeyStore() -> g
    java.security.KeyStore$PrivateKeyEntry getCertificateKeyEntry() -> h
    javax.security.auth.callback.PasswordCallback getCertificatePasswordCallback() -> m
    javax.security.auth.callback.PasswordCallback getKeystorePasswordCallback() -> n
    java.security.cert.X509Certificate getSelectedCertificate() -> i
    java.lang.String getSelectedAlias() -> j
    void setSelectedAlias(java.lang.String) -> b
    void setKsPassword(java.lang.String) -> c
    void setKsPath(java.lang.String) -> d
    boolean isMandatoryCert() -> o
    void setShowExpiratedCertificates(boolean) -> a
    void setShowOnlySignatureCertificates(boolean) -> b
    void setMandatoryCert(boolean) -> c
    void setLoadingWarning(boolean) -> d
    es.gob.afirma.keystores.AOKeyStore getAlternateKeyStoreType(es.gob.afirma.keystores.AOKeyStore) -> b
es.gob.afirma.applet.LdapUtils -> es.gob.afirma.applet.l:
    java.security.cert.X509Certificate getCertificate(java.lang.String,int,java.lang.String) -> a
es.gob.afirma.applet.LoadFileAction -> es.gob.afirma.applet.LoadFileAction:
    java.net.URI uri -> a
    byte[] run() -> a
    java.lang.Object run() -> run
es.gob.afirma.applet.NormalizedNames -> es.gob.afirma.applet.m:
    java.lang.String normalizeModeName(java.lang.String) -> a
    java.lang.String normalizeAlgorithmName(java.lang.String) -> b
    java.lang.String normalizeFormatName(java.lang.String) -> c
    java.lang.String normalizeKeyStoreName(java.lang.String) -> d
es.gob.afirma.applet.SignApplet -> es.gob.afirma.applet.SignApplet:
    java.lang.String STRING_SEPARATOR -> STRING_SEPARATOR
    java.util.logging.Logger LOGGER -> a
    java.lang.String userAgent -> b
    java.lang.String outputFile -> c
    java.lang.String fileUri -> d
    java.lang.String userSelectedPath -> e
    boolean fileBase64 -> f
    byte[] hash -> g
    java.lang.String sigAlgo -> h
    java.lang.String sigFormat -> i
    java.lang.String sigMode -> j
    byte[] data -> k
    byte[] signData -> l
    java.lang.String policyId -> m
    java.lang.String policyDesc -> n
    java.net.URI policyQualifier -> o
    java.lang.String policyHashB64 -> p
    java.lang.String[] signersToCounterSign -> q
    es.gob.afirma.massive.MassiveType massiveOperation -> r
    boolean firstMassiveFile -> s
    boolean recursiveSignDir -> t
    java.lang.String massiveInputDirectory -> u
    java.lang.String massiveOutputDirectory -> v
    boolean originalFormat -> w
    java.lang.String[] massiveExtFiltered -> z
    boolean error -> A
    boolean defaultShowExpiratedCertificates -> B
    boolean showErrors -> C
    java.lang.String errorMsg -> D
    boolean initializedApplet -> E
    java.net.URI electronicSignatureFile -> F
    java.util.Map signedAttributes -> G
    java.util.Map unsignedAttributes -> H
    java.util.Properties genericConfig -> I
    java.util.List xmlTransforms -> J
    es.gob.afirma.applet.KeyStoreConfigurationManager ksConfigManager -> K
    boolean showMozillaSmartCardWarning -> L
    es.gob.afirma.applet.CipherManager cipherManager -> M
    es.gob.afirma.applet.EnveloperManager enveloperManager -> N
    java.lang.String ldapServerUrl -> O
    int ldapServerPort -> P
    java.lang.String ldapCertificatePrincipal -> Q
    es.gob.afirma.massive.MassiveSignatureHelper massiveSignatureHelper -> R
    java.util.logging.Logger getLogger() -> a
    java.lang.String getOutputFile() -> b
    java.lang.String getInternalFileUri() -> c
    boolean isFileBase64() -> d
    byte[] getHash() -> e
    java.lang.String getSigAlgo() -> f
    java.lang.String getSigFormat() -> g
    java.lang.String getSigMode() -> h
    byte[] getInternalData() -> i
    byte[] getSignData() -> j
    void setSignData(byte[]) -> a
    java.lang.String[] getSignersToCounterSign() -> k
    es.gob.afirma.massive.MassiveType getMassiveOperation() -> l
    boolean isRecursiveSignDir() -> m
    java.lang.String getMassiveInputDirectory() -> n
    java.lang.String getMassiveOutputDirectory() -> o
    boolean isOriginalFormat() -> p
    java.lang.String[] getMassiveExtFiltered() -> q
    void setError(boolean) -> a
    java.net.URI getElectronicSignatureFile() -> r
    void setElectronicSignatureFile(java.net.URI) -> a
    java.util.Properties getGenericConfig() -> s
    es.gob.afirma.applet.KeyStoreConfigurationManager getKsConfigManager() -> t
    boolean getShowMozillaSmartCardWarning() -> u
    es.gob.afirma.applet.CipherManager getCipherManager() -> v
    java.lang.String getLdapServerUrl() -> w
    int getLdapServerPort() -> x
    java.lang.String getLdapCertificatePrincipal() -> y
    void init() -> init
    void start() -> start
    void initialize() -> initialize
    java.lang.String getCertificatesAlias() -> getCertificatesAlias
    java.lang.String[] getArrayCertificatesAlias() -> getArrayCertificatesAlias
    java.lang.String getCertificates() -> getCertificates
    java.lang.String[] getArrayCertificates() -> getArrayCertificates
    java.lang.String getCertificate(java.lang.String) -> getCertificate
    java.lang.String getCertificatePublicKey(java.lang.String) -> getCertificatePublicKey
    java.security.cert.X509Certificate getCertificateBinary(java.lang.String) -> b
    void saveDataToStorage(byte[],java.lang.String) -> a
    boolean saveDataToFile(java.lang.String) -> saveDataToFile
    boolean saveDataToFile() -> saveDataToFile
    boolean saveSignToFile() -> saveSignToFile
    void saveFileAsinchronously(byte[],java.lang.String,java.lang.String,java.lang.String[],java.lang.String) -> a
    void setData(java.lang.String) -> setData
    void setFileuri(java.lang.String) -> setFileuri
    void setFileuriBase64(java.lang.String) -> setFileuriBase64
    void setHash(java.lang.String) -> setHash
    void setElectronicSignature(java.lang.String) -> setElectronicSignature
    void setElectronicSignatureFile(java.lang.String) -> setElectronicSignatureFile
    void setSignersToCounterSign(java.lang.String) -> setSignersToCounterSign
    java.lang.String getSignersStructure() -> getSignersStructure
    boolean counterSignTree() -> counterSignTree
    boolean counterSignLeafs() -> counterSignLeafs
    boolean counterSignSigners() -> counterSignSigners
    boolean counterSignIndexes() -> counterSignIndexes
    boolean counterSign(es.gob.afirma.core.signers.CounterSignTarget) -> a
    void setOutFilePath(java.lang.String) -> setOutFilePath
    void setSignatureAlgorithm(java.lang.String) -> setSignatureAlgorithm
    void setSignatureFormat(java.lang.String) -> setSignatureFormat
    void setSignatureMode(java.lang.String) -> setSignatureMode
    java.lang.String getSignatureMode() -> getSignatureMode
    void setKeyStore(java.lang.String,java.lang.String,java.lang.String) -> setKeyStore
    void setPolicy(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> setPolicy
    boolean sign() -> sign
    void configureXMLTransforms() -> z
    void configureDataTypeExtraParams(java.util.Properties) -> a
    es.gob.afirma.core.signers.AOSigner addAttributes(es.gob.afirma.core.signers.AOSigner) -> a
    void configurePolicy() -> A
    boolean coSign() -> coSign
    void setInIncludeExtensions(java.lang.String) -> setInIncludeExtensions
    boolean signDirectory() -> signDirectory
    void setMassiveOperation(java.lang.String) -> setMassiveOperation
    byte[] getInData() -> B
    void analizeMimeType(byte[]) -> b
    es.gob.afirma.massive.MassiveSignatureHelper getMassiveSignatureHelper() -> C
    void setMassiveSignatureHelper(es.gob.afirma.massive.MassiveSignatureHelper) -> a
    boolean initMassiveSignature() -> initMassiveSignature
    void endMassiveSignature() -> endMassiveSignature
    java.lang.String massiveSignatureData(java.lang.String) -> massiveSignatureData
    java.lang.String massiveSignatureHash(java.lang.String) -> massiveSignatureHash
    java.lang.String massiveSignatureFile(java.lang.String) -> massiveSignatureFile
    java.lang.String getMassiveSignatureCurrentLog() -> getMassiveSignatureCurrentLog
    java.lang.String getMassiveSignatureLog() -> getMassiveSignatureLog
    void saveMassiveSignatureLog() -> saveMassiveSignatureLog
    void setSelectedCertificateAlias(java.lang.String) -> setSelectedCertificateAlias
    es.gob.afirma.keystores.AOKeyStore configureDefaultStore(es.gob.afirma.core.misc.Platform$OS,es.gob.afirma.core.misc.Platform$BROWSER) -> a
    void setLookAndFeel() -> E
    boolean isInitialized() -> isInitialized
    boolean signData(java.lang.String) -> signData
    java.lang.String getSignCertificateBase64Encoded() -> getSignCertificateBase64Encoded
    java.lang.String getSignatureBase64Encoded() -> getSignatureBase64Encoded
    java.lang.String getSignatureText(java.lang.String) -> getSignatureText
    java.lang.String getSignatureByText(java.lang.String) -> c
    java.lang.String getFilePath() -> getFilePath
    java.lang.String getFileUsedPath() -> getFileUsedPath
    java.lang.String getErrorMessage() -> getErrorMessage
    boolean isError() -> isError
    void setError(java.lang.String) -> a
    void setError(java.lang.String,boolean) -> a
    java.lang.String getTextFileContent(java.lang.String) -> getTextFileContent
    java.lang.String getTextFileContent(java.lang.String,java.lang.String) -> getTextFileContent
    java.lang.String getTextFromBase64(java.lang.String) -> getTextFromBase64
    java.lang.String getTextFromBase64(java.lang.String,java.lang.String) -> getTextFromBase64
    java.lang.String getBase64FromText(java.lang.String) -> getBase64FromText
    java.lang.String getBase64FromText(java.lang.String,java.lang.String) -> getBase64FromText
    java.lang.String getFileBase64Encoded(java.lang.String,boolean) -> getFileBase64Encoded
    java.lang.String getFileBase64Encoded(boolean) -> getFileBase64Encoded
    java.lang.String getFileBase64Encoded(java.net.URI) -> b
    java.lang.String getFileHashBase64Encoded() -> getFileHashBase64Encoded
    java.lang.String showCertSelectionDialog() -> showCertSelectionDialog
    void setDataMimeType(java.lang.String) -> setDataMimeType
    java.lang.String getB64Data() -> getB64Data
    java.lang.String getData() -> getData
    void setInRecursiveDirectorySign(boolean) -> setInRecursiveDirectorySign
    void setInputDirectoryToSign(java.lang.String) -> setInputDirectoryToSign
    java.lang.String getInputDirectoryToSign() -> getInputDirectoryToSign
    void setOutputDirectoryToSign(java.lang.String) -> setOutputDirectoryToSign
    java.lang.String getOutputDirectoryToSign() -> getOutputDirectoryToSign
    void setOriginalFormat(boolean) -> setOriginalFormat
    void setShowErrors(boolean) -> setShowErrors
    void setShowExpiratedCertificates(boolean) -> setShowExpiratedCertificates
    boolean addSignedAttribute(java.lang.String,java.lang.String) -> addSignedAttribute
    boolean removeSignedAttribute(java.lang.String) -> removeSignedAttribute
    boolean addUnsignedAttribute(java.lang.String,java.lang.String) -> addUnsignedAttribute
    boolean removeUnsignedAttribute(java.lang.String,java.lang.String) -> removeUnsignedAttribute
    void addExtraParam(java.lang.String,java.lang.String) -> addExtraParam
    void removeExtraParam(java.lang.String) -> removeExtraParam
    void addXMLTransform(java.lang.String,java.lang.String,java.lang.String) -> addXMLTransform
    void resetXMLTransforms() -> resetXMLTransforms
    java.lang.String getVersion() -> getVersion
    java.lang.String loadFilePath(java.lang.String,java.lang.String,java.lang.String) -> loadFilePath
    java.lang.String normalizePath(java.lang.String) -> d
    java.lang.String selectDirectory() -> selectDirectory
    java.security.cert.X509Certificate getSignCertificate() -> getSignCertificate
    java.awt.Frame getParentFrame(java.awt.Component) -> a
    java.lang.String concatStrings(java.lang.String[],java.lang.String) -> a
    void setCertFilterRFC2254(java.lang.String,java.lang.String,boolean) -> setCertFilterRFC2254
    void setMandatoryCertificateConditionRFC2254(java.lang.String,java.lang.String,boolean) -> setMandatoryCertificateConditionRFC2254
    void addRFC2254CertificateFilter(java.lang.String,java.lang.String,boolean) -> addRFC2254CertificateFilter
    void resetFilters() -> resetFilters
    void setShowOnlySignatureCertificates(boolean) -> setShowOnlySignatureCertificates
    void setMandatoryCertificate(boolean) -> setMandatoryCertificate
    java.security.KeyStore$PrivateKeyEntry configureCertificate() -> D
    boolean checkUserPermision(java.lang.String) -> e
    java.lang.String signText(java.lang.String,java.lang.String,java.lang.String[]) -> signText
    java.lang.String signText(java.lang.String,java.lang.String) -> signText
    void changeLocale(java.lang.String) -> f
    java.util.Locale parseLocale(java.lang.String) -> g
    void setSystemProperties(java.lang.String) -> h
    void setLocale(java.lang.String) -> i
    void setCipherData(java.lang.String) -> setCipherData
    void setPlainData(java.lang.String) -> setPlainData
    java.lang.String getCipherData() -> getCipherData
    java.lang.String getPlainData() -> getPlainData
    java.lang.String getKey() -> getKey
    void setKey(java.lang.String) -> setKey
    java.lang.String getPassword() -> getPassword
    boolean setPassword(java.lang.String) -> setPassword
    void setCipherAlgorithm(java.lang.String) -> setCipherAlgorithm
    java.lang.String getCipherAlgorithm() -> getCipherAlgorithm
    void setKeyMode(java.lang.String) -> setKeyMode
    java.lang.String getKeyMode() -> getKeyMode
    void setUseCipherKeyStore(boolean) -> setUseCipherKeyStore
    boolean cipherFile(java.lang.String) -> cipherFile
    boolean cipherData() -> cipherData
    boolean cipherData(byte[]) -> c
    boolean decipherFile(java.lang.String) -> decipherFile
    boolean decipherData() -> decipherData
    boolean decipherData(byte[]) -> d
    boolean savePlainDataToFile(java.lang.String) -> savePlainDataToFile
    boolean saveCipherDataToFile(java.lang.String) -> saveCipherDataToFile
    void setRecipientsToCMS(java.lang.String) -> setRecipientsToCMS
    void addRecipientToCMS(java.lang.String) -> addRecipientToCMS
    void addRecipientToCMS(byte[]) -> e
    void removeRecipientToCMS(java.lang.String) -> removeRecipientToCMS
    void setCMSContentType(java.lang.String) -> setCMSContentType
    boolean buildCMSEncrypted() -> buildCMSEncrypted
    boolean buildCMSEnveloped() -> buildCMSEnveloped
    boolean buildCMSAuthenticated() -> buildCMSAuthenticated
    boolean buildCMSStructure() -> buildCMSStructure
    boolean signAndPackData() -> signAndPackData
    boolean signAndPackFile(java.lang.String) -> signAndPackFile
    boolean doEnvelopOperation(byte[],java.lang.String) -> b
    boolean coEnvelop() -> coEnvelop
    boolean recoverCMS() -> recoverCMS
    void setLdapConfiguration(java.lang.String,java.lang.String,java.lang.String) -> setLdapConfiguration
    void setLdapCertificatePrincipal(java.lang.String) -> setLdapCertificatePrincipal
    java.lang.String getLdapCertificate() -> getLdapCertificate
es.gob.afirma.applet.SignApplet$1 -> es.gob.afirma.applet.SignApplet$1:
    es.gob.afirma.applet.SignApplet this$0 -> a
    java.lang.Void run() -> a
    java.lang.Object run() -> run
es.gob.afirma.applet.SignApplet$10 -> es.gob.afirma.applet.SignApplet$10:
    es.gob.afirma.applet.SignApplet this$0 -> a
    java.lang.Boolean run() -> a
    java.lang.Object run() -> run
es.gob.afirma.applet.SignApplet$11 -> es.gob.afirma.applet.SignApplet$11:
    es.gob.afirma.applet.SignApplet this$0 -> a
    java.lang.Boolean run() -> a
    java.lang.Object run() -> run
es.gob.afirma.applet.SignApplet$12 -> es.gob.afirma.applet.SignApplet$12:
    es.gob.afirma.applet.SignApplet this$0 -> a
    java.lang.Boolean run() -> a
    java.lang.Object run() -> run
es.gob.afirma.applet.SignApplet$13 -> es.gob.afirma.applet.SignApplet$13:
    byte[] val$dataToSign -> a
    es.gob.afirma.applet.SignApplet this$0 -> b
    java.lang.String run() -> a
    java.lang.Object run() -> run
es.gob.afirma.applet.SignApplet$14 -> es.gob.afirma.applet.SignApplet$14:
    byte[] val$dataHash -> a
    es.gob.afirma.applet.SignApplet this$0 -> b
    java.lang.String run() -> a
    java.lang.Object run() -> run
es.gob.afirma.applet.SignApplet$15 -> es.gob.afirma.applet.SignApplet$15:
    java.lang.String val$filename -> a
    es.gob.afirma.applet.SignApplet this$0 -> b
    java.lang.String run() -> a
    java.lang.Object run() -> run
es.gob.afirma.applet.SignApplet$16 -> es.gob.afirma.applet.SignApplet$16:
    es.gob.afirma.applet.SignApplet this$0 -> a
    java.lang.Void run() -> a
    java.lang.Object run() -> run
es.gob.afirma.applet.SignApplet$17 -> es.gob.afirma.applet.SignApplet$17:
    java.lang.String val$filename -> a
    java.lang.String val$charset -> b
    es.gob.afirma.applet.SignApplet this$0 -> c
    java.lang.String run() -> a
    java.lang.Object run() -> run
es.gob.afirma.applet.SignApplet$18 -> es.gob.afirma.applet.SignApplet$18:
    es.gob.afirma.applet.SignApplet this$0 -> a
    java.lang.String run() -> a
    java.lang.Object run() -> run
es.gob.afirma.applet.SignApplet$19 -> es.gob.afirma.applet.SignApplet$19:
    es.gob.afirma.applet.SignApplet this$0 -> a
    java.lang.String run() -> a
    java.lang.Object run() -> run
es.gob.afirma.applet.SignApplet$2 -> es.gob.afirma.applet.SignApplet$2:
    es.gob.afirma.applet.SignApplet this$0 -> a
    java.lang.String[] run() -> a
    java.lang.Object run() -> run
es.gob.afirma.applet.SignApplet$20 -> es.gob.afirma.applet.SignApplet$20:
    java.lang.String val$title -> a
    java.lang.String val$exts -> b
    java.lang.String val$description -> c
    es.gob.afirma.applet.SignApplet this$0 -> d
    java.lang.String run() -> a
    java.lang.Object run() -> run
es.gob.afirma.applet.SignApplet$21 -> es.gob.afirma.applet.SignApplet$21:
    es.gob.afirma.applet.SignApplet this$0 -> a
    java.lang.String run() -> a
    java.lang.Object run() -> run
es.gob.afirma.applet.SignApplet$22 -> es.gob.afirma.applet.SignApplet$22:
    java.lang.String val$stringToSign -> a
    java.lang.String val$caOption -> b
    java.lang.String[] val$caNameN -> c
    es.gob.afirma.applet.SignApplet this$0 -> d
    java.lang.String run() -> a
    java.lang.Object run() -> run
es.gob.afirma.applet.SignApplet$23 -> es.gob.afirma.applet.SignApplet$23:
    java.lang.String val$filename -> a
    es.gob.afirma.applet.SignApplet this$0 -> b
    java.lang.Boolean run() -> a
    java.lang.Object run() -> run
es.gob.afirma.applet.SignApplet$24 -> es.gob.afirma.applet.SignApplet$24:
    java.lang.String val$filename -> a
    es.gob.afirma.applet.SignApplet this$0 -> b
    java.lang.Boolean run() -> a
    java.lang.Object run() -> run
es.gob.afirma.applet.SignApplet$25 -> es.gob.afirma.applet.SignApplet$25:
    es.gob.afirma.applet.SignApplet this$0 -> a
    java.lang.Object run() -> run
es.gob.afirma.applet.SignApplet$26 -> es.gob.afirma.applet.SignApplet$26:
    es.gob.afirma.applet.SignApplet this$0 -> a
    java.lang.Object run() -> run
es.gob.afirma.applet.SignApplet$27 -> es.gob.afirma.applet.SignApplet$27:
    es.gob.afirma.applet.SignApplet this$0 -> a
    java.lang.String run() -> a
    java.lang.Object run() -> run
es.gob.afirma.applet.SignApplet$3 -> es.gob.afirma.applet.SignApplet$3:
    java.lang.String val$filename -> a
    es.gob.afirma.applet.SignApplet this$0 -> b
    java.lang.Boolean run() -> a
    java.lang.Object run() -> run
es.gob.afirma.applet.SignApplet$4 -> es.gob.afirma.applet.SignApplet$4:
    es.gob.afirma.applet.SignApplet this$0 -> a
    java.lang.Boolean run() -> a
    java.lang.Object run() -> run
es.gob.afirma.applet.SignApplet$5 -> es.gob.afirma.applet.SignApplet$5:
    es.gob.afirma.applet.SignApplet this$0 -> a
    java.lang.Boolean run() -> a
    java.lang.Object run() -> run
es.gob.afirma.applet.SignApplet$6 -> es.gob.afirma.applet.SignApplet$6:
    es.gob.afirma.applet.SignApplet this$0 -> a
    java.lang.String run() -> a
    java.lang.Object run() -> run
es.gob.afirma.applet.SignApplet$7 -> es.gob.afirma.applet.SignApplet$7:
    es.gob.afirma.core.signers.CounterSignTarget val$target -> a
    es.gob.afirma.applet.SignApplet this$0 -> b
    java.lang.Boolean run() -> a
    java.lang.Object run() -> run
es.gob.afirma.applet.SignApplet$8 -> es.gob.afirma.applet.SignApplet$8:
    java.lang.String val$type -> a
    java.lang.String val$filename -> b
    java.lang.String val$password -> c
    es.gob.afirma.applet.SignApplet this$0 -> d
    java.lang.Void run() -> a
    java.lang.Object run() -> run
es.gob.afirma.applet.SignApplet$9 -> es.gob.afirma.applet.SignApplet$9:
    es.gob.afirma.applet.SignApplet this$0 -> a
    java.lang.Boolean run() -> a
    java.lang.Object run() -> run
es.gob.afirma.applet.SignText -> es.gob.afirma.applet.n:
    java.lang.String[] alias -> a
    es.gob.afirma.keystores.AOKeyStoreManager kss -> b
    java.awt.Component parent -> c
    java.lang.String result -> d
    boolean useCAdES -> e
    javax.security.auth.callback.PasswordCallback passCbk -> f
    java.lang.String getResult() -> a
    void signText(java.lang.String,java.lang.String,java.lang.String[]) -> a
    java.lang.String firmar(java.lang.String,java.security.KeyStore$PrivateKeyEntry,java.security.cert.X509Certificate) -> a
    void createUI(java.lang.String,java.util.Map) -> a
es.gob.afirma.applet.SignText$1 -> es.gob.afirma.applet.o:
    es.gob.afirma.applet.SignText this$0 -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
es.gob.afirma.applet.UIDialogs -> es.gob.afirma.applet.p:
    java.lang.String[] showSignersSelectionPane(es.gob.afirma.core.util.tree.AOTreeModel,java.awt.Component) -> a
    void getSigners(javax.swing.tree.DefaultMutableTreeNode,java.util.Set) -> a
    int[] showNodeSignSelectionPane(es.gob.afirma.core.util.tree.AOTreeModel,java.awt.Component) -> b
es.gob.afirma.applet.UIDialogs$1 -> es.gob.afirma.applet.q:
    void treeCollapsed(javax.swing.event.TreeExpansionEvent) -> treeCollapsed
    void treeExpanded(javax.swing.event.TreeExpansionEvent) -> treeExpanded
es.gob.afirma.applet.UnwrapAction -> es.gob.afirma.applet.UnwrapAction:
    es.gob.afirma.applet.EnveloperManager enveloperManager -> a
    byte[] envelop -> b
    byte[] run() -> a
    java.lang.Object run() -> run
es.gob.afirma.applet.WrapAction -> es.gob.afirma.applet.WrapAction:
    es.gob.afirma.applet.EnveloperManager enveloperManager -> a
    byte[] data -> b
    byte[] run() -> a
    java.lang.Object run() -> run
es.gob.afirma.applet.io.FileBean -> es.gob.afirma.applet.io.FileBean:
    java.io.File file -> a
    byte[] content -> b
    java.lang.String getPath() -> getPath
    byte[] getContent() -> getContent
es.gob.afirma.ciphers.AOCipherConstants -> es.gob.afirma.ciphers.AOCipherConstants:
    java.lang.String KEY_MODE_GENERATEKEY -> KEY_MODE_GENERATEKEY
    java.lang.String KEY_MODE_USERINPUT -> KEY_MODE_USERINPUT
    java.lang.String KEY_MODE_PASSWORD -> KEY_MODE_PASSWORD
    java.lang.String DEFAULT_KEY_MODE -> DEFAULT_KEY_MODE
es.gob.afirma.ciphers.AOCipherKeyStoreHelper -> es.gob.afirma.ciphers.AOCipherKeyStoreHelper:
    java.util.logging.Logger LOGGER -> a
    java.security.KeyStore ks -> b
    char[] pss -> c
    void storeKey(java.lang.String,java.security.Key) -> storeKey
    java.lang.String[] getAliases() -> getAliases
    void createCipherKeyStore() -> a
    void loadCipherKeyStore() -> b
    java.security.Key getKey(java.lang.String) -> getKey
    boolean storeExists() -> storeExists
    boolean removeStore() -> removeStore
    java.lang.String getCipherKeystore() -> c
es.gob.afirma.ciphers.jce.AOSunJCECipher -> es.gob.afirma.ciphers.jce.AOSunJCECipher:
    byte[] SALT -> a
    byte[] IV_8 -> b
    byte[] IV_16 -> c
    es.gob.afirma.core.ciphers.AOCipherConfig[] SUPPORTED_CONFIGS -> d
    es.gob.afirma.core.ciphers.AOCipherConfig[] getSupportedConfigs() -> getSupportedConfigs
    byte[] cipher(byte[],es.gob.afirma.core.ciphers.AOCipherConfig,java.security.Key) -> cipher
    byte[] decipher(byte[],es.gob.afirma.core.ciphers.AOCipherConfig,java.security.Key) -> decipher
    java.security.Key decodeKey(byte[],es.gob.afirma.core.ciphers.AOCipherConfig,java.lang.Object[]) -> decodeKey
    java.security.Key decodePassphrase(char[],es.gob.afirma.core.ciphers.AOCipherConfig,java.lang.Object[]) -> decodePassphrase
    java.security.Key generateKey(es.gob.afirma.core.ciphers.AOCipherConfig) -> generateKey
    java.security.spec.AlgorithmParameterSpec getParams(es.gob.afirma.core.ciphers.AOCipherConfig) -> a
es.gob.afirma.core.AOCancelledOperationException -> es.gob.afirma.core.AOCancelledOperationException:
es.gob.afirma.core.AOException -> es.gob.afirma.core.AOException:
es.gob.afirma.core.AOFormatFileException -> es.gob.afirma.core.AOFormatFileException:
es.gob.afirma.core.AOInvalidFormatException -> es.gob.afirma.core.AOInvalidFormatException:
es.gob.afirma.core.AOUnsupportedSignFormatException -> es.gob.afirma.core.AOUnsupportedSignFormatException:
es.gob.afirma.core.InvalidLibraryException -> es.gob.afirma.core.InvalidLibraryException:
es.gob.afirma.core.InvalidOSException -> es.gob.afirma.core.InvalidOSException:
    java.lang.String os -> a
    java.lang.String getExpectedOS() -> getExpectedOS
es.gob.afirma.core.LogManager -> es.gob.afirma.core.LogManager:
    java.util.logging.Logger LOGGER -> a
    boolean installed -> b
    java.lang.String logFile -> c
    es.gob.afirma.core.LogManager$App application -> d
    void install(es.gob.afirma.core.LogManager$App) -> install
    void install(es.gob.afirma.core.LogManager$App,java.lang.String) -> install
    java.util.logging.FileHandler createFileHandler(java.lang.String) -> a
    java.lang.String getLogFile() -> getLogFile
es.gob.afirma.core.LogManager$App -> es.gob.afirma.core.LogManager$App:
    es.gob.afirma.core.LogManager$App MINIAPPLET -> MINIAPPLET
    es.gob.afirma.core.LogManager$App APPLET -> APPLET
    es.gob.afirma.core.LogManager$App AUTOFIRMA -> AUTOFIRMA
    es.gob.afirma.core.LogManager$App AUTOFIRMA_CONFIGURATOR -> AUTOFIRMA_CONFIGURATOR
    es.gob.afirma.core.LogManager$App STANDALONE -> STANDALONE
    es.gob.afirma.core.LogManager$App ANDROID -> ANDROID
    es.gob.afirma.core.LogManager$App HANDWRITTEN -> HANDWRITTEN
    es.gob.afirma.core.LogManager$App DNINB -> DNINB
    es.gob.afirma.core.LogManager$App OTHER -> OTHER
    es.gob.afirma.core.LogManager$App[] $VALUES -> a
    es.gob.afirma.core.LogManager$App[] values() -> values
    es.gob.afirma.core.LogManager$App valueOf(java.lang.String) -> valueOf
es.gob.afirma.core.MissingLibraryException -> es.gob.afirma.core.MissingLibraryException:
es.gob.afirma.core.ciphers.AOCipher -> es.gob.afirma.core.ciphers.AOCipher:
    es.gob.afirma.core.ciphers.AOCipherConfig[] getSupportedConfigs() -> getSupportedConfigs
    byte[] cipher(byte[],es.gob.afirma.core.ciphers.AOCipherConfig,java.security.Key) -> cipher
    byte[] decipher(byte[],es.gob.afirma.core.ciphers.AOCipherConfig,java.security.Key) -> decipher
    java.security.Key decodeKey(byte[],es.gob.afirma.core.ciphers.AOCipherConfig,java.lang.Object[]) -> decodeKey
    java.security.Key decodePassphrase(char[],es.gob.afirma.core.ciphers.AOCipherConfig,java.lang.Object[]) -> decodePassphrase
    java.security.Key generateKey(es.gob.afirma.core.ciphers.AOCipherConfig) -> generateKey
es.gob.afirma.core.ciphers.AOCipherConfig -> es.gob.afirma.core.ciphers.AOCipherConfig:
    es.gob.afirma.core.ciphers.CipherConstants$AOCipherAlgorithm algo -> a
    es.gob.afirma.core.ciphers.CipherConstants$AOCipherBlockMode mode -> b
    es.gob.afirma.core.ciphers.CipherConstants$AOCipherPadding padding -> c
    es.gob.afirma.core.ciphers.AOCipherConfig parse(java.lang.String) -> parse
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    es.gob.afirma.core.ciphers.CipherConstants$AOCipherAlgorithm getAlgorithm() -> getAlgorithm
    es.gob.afirma.core.ciphers.CipherConstants$AOCipherBlockMode getBlockMode() -> getBlockMode
    es.gob.afirma.core.ciphers.CipherConstants$AOCipherPadding getPadding() -> getPadding
    void setAlgorithm(es.gob.afirma.core.ciphers.CipherConstants$AOCipherAlgorithm) -> setAlgorithm
    void setBlockMode(es.gob.afirma.core.ciphers.CipherConstants$AOCipherBlockMode) -> setBlockMode
    void setPadding(es.gob.afirma.core.ciphers.CipherConstants$AOCipherPadding) -> setPadding
es.gob.afirma.core.ciphers.CipherConstants -> es.gob.afirma.core.ciphers.CipherConstants:
es.gob.afirma.core.ciphers.CipherConstants$AOCipherAlgorithm -> es.gob.afirma.core.ciphers.CipherConstants$AOCipherAlgorithm:
    es.gob.afirma.core.ciphers.CipherConstants$AOCipherAlgorithm AES -> AES
    es.gob.afirma.core.ciphers.CipherConstants$AOCipherAlgorithm BLOWFISH -> BLOWFISH
    es.gob.afirma.core.ciphers.CipherConstants$AOCipherAlgorithm DES -> DES
    es.gob.afirma.core.ciphers.CipherConstants$AOCipherAlgorithm TRIPLEDES -> TRIPLEDES
    es.gob.afirma.core.ciphers.CipherConstants$AOCipherAlgorithm PBEWITHMD5ANDDES -> PBEWITHMD5ANDDES
    es.gob.afirma.core.ciphers.CipherConstants$AOCipherAlgorithm PBEWITHSHA1ANDDESEDE -> PBEWITHSHA1ANDDESEDE
    es.gob.afirma.core.ciphers.CipherConstants$AOCipherAlgorithm PBEWITHSHA1ANDRC2_40 -> PBEWITHSHA1ANDRC2_40
    es.gob.afirma.core.ciphers.CipherConstants$AOCipherAlgorithm HMACMD5 -> HMACMD5
    es.gob.afirma.core.ciphers.CipherConstants$AOCipherAlgorithm HMACSHA1 -> HMACSHA1
    es.gob.afirma.core.ciphers.CipherConstants$AOCipherAlgorithm HMACSHA256 -> HMACSHA256
    es.gob.afirma.core.ciphers.CipherConstants$AOCipherAlgorithm HMACSHA384 -> HMACSHA384
    es.gob.afirma.core.ciphers.CipherConstants$AOCipherAlgorithm HMACSHA512 -> HMACSHA512
    es.gob.afirma.core.ciphers.CipherConstants$AOCipherAlgorithm DEFAULT_CIPHER_ALGO -> a
    java.lang.String name -> b
    java.lang.String description -> c
    boolean password -> d
    boolean key -> e
    java.lang.String oid -> f
    es.gob.afirma.core.ciphers.CipherConstants$AOCipherAlgorithm[] $VALUES -> g
    es.gob.afirma.core.ciphers.CipherConstants$AOCipherAlgorithm[] values() -> values
    es.gob.afirma.core.ciphers.CipherConstants$AOCipherAlgorithm valueOf(java.lang.String) -> valueOf
    es.gob.afirma.core.ciphers.CipherConstants$AOCipherAlgorithm getDefault() -> getDefault
    boolean supportsPassword() -> supportsPassword
    boolean supportsKey() -> supportsKey
    java.lang.String getName() -> getName
    java.lang.String toString() -> toString
    java.lang.String getOid() -> getOid
    es.gob.afirma.core.ciphers.CipherConstants$AOCipherAlgorithm getValueOf(java.lang.String) -> getValueOf
es.gob.afirma.core.ciphers.CipherConstants$AOCipherBlockMode -> es.gob.afirma.core.ciphers.CipherConstants$AOCipherBlockMode:
    es.gob.afirma.core.ciphers.CipherConstants$AOCipherBlockMode ECB -> ECB
    es.gob.afirma.core.ciphers.CipherConstants$AOCipherBlockMode CBC -> CBC
    es.gob.afirma.core.ciphers.CipherConstants$AOCipherBlockMode PCBC -> PCBC
    es.gob.afirma.core.ciphers.CipherConstants$AOCipherBlockMode CTR -> CTR
    es.gob.afirma.core.ciphers.CipherConstants$AOCipherBlockMode CFB -> CFB
    es.gob.afirma.core.ciphers.CipherConstants$AOCipherBlockMode OFB -> OFB
    java.lang.String name -> a
    java.lang.String description -> b
    es.gob.afirma.core.ciphers.CipherConstants$AOCipherBlockMode[] $VALUES -> c
    es.gob.afirma.core.ciphers.CipherConstants$AOCipherBlockMode[] values() -> values
    es.gob.afirma.core.ciphers.CipherConstants$AOCipherBlockMode valueOf(java.lang.String) -> valueOf
    java.lang.String getName() -> getName
    java.lang.String toString() -> toString
    es.gob.afirma.core.ciphers.CipherConstants$AOCipherBlockMode getValueOf(java.lang.String) -> getValueOf
es.gob.afirma.core.ciphers.CipherConstants$AOCipherPadding -> es.gob.afirma.core.ciphers.CipherConstants$AOCipherPadding:
    es.gob.afirma.core.ciphers.CipherConstants$AOCipherPadding PKCS5PADDING -> PKCS5PADDING
    es.gob.afirma.core.ciphers.CipherConstants$AOCipherPadding ISO10126PADDING -> ISO10126PADDING
    es.gob.afirma.core.ciphers.CipherConstants$AOCipherPadding NOPADDING -> NOPADDING
    java.lang.String name -> a
    java.lang.String description -> b
    es.gob.afirma.core.ciphers.CipherConstants$AOCipherPadding[] $VALUES -> c
    es.gob.afirma.core.ciphers.CipherConstants$AOCipherPadding[] values() -> values
    es.gob.afirma.core.ciphers.CipherConstants$AOCipherPadding valueOf(java.lang.String) -> valueOf
    java.lang.String getName() -> getName
    java.lang.String toString() -> toString
    es.gob.afirma.core.ciphers.CipherConstants$AOCipherPadding getValueOf(java.lang.String) -> getValueOf
es.gob.afirma.core.envelopers.AOEnveloper -> es.gob.afirma.core.envelopers.AOEnveloper:
    byte[] envelop(byte[],java.lang.String,java.lang.String,java.security.KeyStore$PrivateKeyEntry,java.security.cert.X509Certificate[],es.gob.afirma.core.ciphers.CipherConstants$AOCipherAlgorithm,java.lang.String,java.util.Properties) -> envelop
    byte[] encrypt(byte[],java.lang.String,java.lang.String,es.gob.afirma.core.ciphers.CipherConstants$AOCipherAlgorithm,java.lang.String) -> encrypt
    byte[] recoverData(byte[],java.security.KeyStore$PrivateKeyEntry) -> recoverData
es.gob.afirma.core.keystores.KeyStoreManager -> es.gob.afirma.core.keystores.KeyStoreManager:
    void deactivateEntry(java.lang.String) -> deactivateEntry
    boolean isKeyEntry(java.lang.String) -> isKeyEntry
    java.lang.String[] getAliases() -> getAliases
    java.security.cert.X509Certificate getCertificate(java.lang.String) -> getCertificate
    java.security.cert.X509Certificate[] getCertificateChain(java.lang.String) -> getCertificateChain
    java.security.KeyStore$PrivateKeyEntry getKeyEntry(java.lang.String) -> getKeyEntry
    void refresh() -> refresh
    void setEntryPasswordCallBack(javax.security.auth.callback.PasswordCallback) -> setEntryPasswordCallBack
    void setParentComponent(java.lang.Object) -> setParentComponent
es.gob.afirma.core.keystores.KeyUsage -> es.gob.afirma.core.keystores.KeyUsage:
    java.lang.Boolean[] usage -> a
    es.gob.afirma.core.keystores.KeyUsage SIGN -> SIGN
    es.gob.afirma.core.keystores.KeyUsage AUTH -> AUTH
    es.gob.afirma.core.keystores.KeyUsage CYPH -> CYPH
    boolean equals(java.lang.Object) -> equals
    boolean includes(es.gob.afirma.core.keystores.KeyUsage) -> includes
    int hashCode() -> hashCode
    java.lang.Boolean[] getUsage() -> a
    java.lang.String toString() -> toString
es.gob.afirma.core.keystores.NameCertificateBean -> es.gob.afirma.core.keystores.NameCertificateBean:
    java.lang.String alias -> a
    java.lang.String name -> b
    java.security.cert.X509Certificate[] certificateChain -> c
    java.lang.String getAlias() -> getAlias
    java.lang.String getName() -> getName
    java.security.cert.X509Certificate getCertificate() -> getCertificate
    java.security.cert.X509Certificate[] getCertificateChain() -> getCertificateChain
    java.lang.String toString() -> toString
es.gob.afirma.core.misc.AOFileUtils -> es.gob.afirma.core.misc.AOFileUtils:
    java.util.zip.ZipFile createTempZipFile(byte[]) -> createTempZipFile
    java.lang.String pathLengthShortener(java.lang.String,int) -> pathLengthShortener
    boolean isXML(byte[]) -> isXML
es.gob.afirma.core.misc.AOFileUtils$1 -> es.gob.afirma.core.misc.a:
    void warning(org.xml.sax.SAXParseException) -> warning
    void fatalError(org.xml.sax.SAXParseException) -> fatalError
    void error(org.xml.sax.SAXParseException) -> error
    void log(java.lang.Exception) -> a
es.gob.afirma.core.misc.AOUtil -> es.gob.afirma.core.misc.AOUtil:
    java.util.logging.Logger LOGGER -> a
    java.lang.String[] SUPPORTED_URI_SCHEMES -> b
    char[] HEX_CHARS -> c
    java.net.URI createURI(java.lang.String) -> createURI
    java.io.InputStream loadFile(java.net.URI) -> loadFile
    byte[] getDataFromInputStream(java.io.InputStream) -> getDataFromInputStream
    java.lang.String getCN(java.security.cert.X509Certificate) -> getCN
    java.lang.String getCN(java.lang.String) -> getCN
    java.lang.String getRDNvalueFromLdapName(java.lang.String,java.lang.String) -> getRDNvalueFromLdapName
    java.lang.String hexify(byte[],boolean) -> hexify
    java.lang.String hexify(byte[],java.lang.String) -> hexify
    void loadNativeLibrary(java.lang.String) -> loadNativeLibrary
    void copyFile(java.io.File,java.io.File) -> copyFile
    java.lang.String[] split(java.lang.String,java.lang.String) -> split
    java.lang.String properties2Base64(java.util.Properties) -> properties2Base64
    java.util.Properties base642Properties(java.lang.String) -> base642Properties
    boolean isJava9orNewer() -> isJava9orNewer
es.gob.afirma.core.misc.Base64 -> es.gob.afirma.core.misc.Base64:
    byte[] STANDARD_ALPHABET -> b
    byte[] STANDARD_DECODABET -> c
    byte[] URL_SAFE_ALPHABET -> d
    byte[] URL_SAFE_DECODABET -> e
    boolean $assertionsDisabled -> a
    byte[] getAlphabet(int) -> a
    byte[] getDecodabet(int) -> b
    byte[] encode3to4(byte[],int,int,byte[],int,int) -> a
    java.lang.String encode(byte[]) -> encode
    java.lang.String encode(byte[],boolean) -> encode
    java.lang.String encodeBytes(byte[],int,int,int) -> a
    byte[] encodeBytesToBytes(byte[],int,int,int) -> b
    int decode4to3(byte[],int,byte[],int,int) -> a
    byte[] decode(byte[],int,int,boolean) -> decode
    byte[] decode(java.lang.String) -> decode
    byte[] decode(java.lang.String,boolean) -> decode
    boolean isBase64(byte[]) -> isBase64
    boolean isBase64(java.lang.String) -> isBase64
es.gob.afirma.core.misc.BoundedBufferedReader -> es.gob.afirma.core.misc.BoundedBufferedReader:
    int readerMaxLines -> a
    int readerMaxLineLen -> b
    int currentLine -> c
    java.lang.String readLine() -> readLine
es.gob.afirma.core.misc.MimeHelper -> es.gob.afirma.core.misc.MimeHelper:
    java.util.logging.Logger LOGGER -> a
    java.lang.String UNKNOWN_JMIMEMAGIC_VALUE -> UNKNOWN_JMIMEMAGIC_VALUE
    java.lang.String DEFAULT_MIMETYPE -> DEFAULT_MIMETYPE
    java.lang.String DEFAULT_CONTENT_DESCRIPTION -> DEFAULT_CONTENT_DESCRIPTION
    java.lang.String DEFAULT_CONTENT_OID_DATA -> DEFAULT_CONTENT_OID_DATA
    java.util.Properties oidMimetypeProp -> b
    java.util.Properties mimetypeOidProp -> c
    es.gob.afirma.core.misc.MimeHelper$MimeInfo mimeInfo -> d
    byte[] data -> e
    java.lang.String mimeType -> f
    java.lang.String transformMimeTypeToOid(java.lang.String) -> transformMimeTypeToOid
    java.lang.String transformOidToMimeType(java.lang.String) -> transformOidToMimeType
    void loadOidMimetypeProperties() -> a
    void loadMimetypeOidProperties() -> b
    java.lang.String getMimeType() -> getMimeType
    java.lang.String getExtension() -> getExtension
    java.lang.String getDescription() -> getDescription
es.gob.afirma.core.misc.MimeHelper$MimeInfo -> es.gob.afirma.core.misc.b:
    java.lang.String mType -> a
    java.lang.String extension -> b
    java.lang.String description -> c
    void setMimeType(java.lang.String) -> a
    java.lang.String getMimeType() -> a
    java.lang.String getExtension() -> b
    void setExtension(java.lang.String) -> b
    java.lang.String getDescription() -> c
    void setDescription(java.lang.String) -> c
es.gob.afirma.core.misc.OfficeAnalizer -> es.gob.afirma.core.misc.OfficeAnalizer:
    java.util.logging.Logger LOGGER -> a
    java.util.Set OOXML_MIMETYPES -> b
    java.util.Set ODF_MIMETYPES -> c
    java.util.Map FILE_EXTENSIONS -> d
    java.lang.String getMimeType(byte[]) -> a
    java.lang.String getMimeTypeOffice97(byte[]) -> c
    java.lang.String getExtension(byte[]) -> b
    boolean isOOXMLDocument(byte[]) -> isOOXMLDocument
    boolean isOOXMLFile(java.util.zip.ZipFile) -> a
    java.lang.String getOOXMLMimeType(java.io.InputStream) -> getOOXMLMimeType
    boolean isODFDocument(byte[]) -> isODFDocument
    boolean isODFFile(java.util.zip.ZipFile) -> b
    java.lang.String getODFMimeType(java.io.InputStream) -> a
es.gob.afirma.core.misc.Platform -> es.gob.afirma.core.misc.Platform:
    java.util.logging.Logger LOGGER -> a
    es.gob.afirma.core.misc.Platform$OS os -> b
    java.lang.String javaArch -> c
    java.lang.String javaHome -> d
    java.lang.String javaLibraryPath -> e
    java.lang.String userHome -> f
    es.gob.afirma.core.misc.Platform$OS recoverOsName() -> a
    es.gob.afirma.core.misc.Platform$BROWSER getBrowser(java.lang.String) -> getBrowser
    es.gob.afirma.core.misc.Platform$OS getOS() -> getOS
    java.lang.String getJavaArch() -> getJavaArch
    java.lang.String getJavaHome() -> getJavaHome
    java.lang.String getJavaLibraryPath() -> getJavaLibraryPath
    java.lang.String getUserHome() -> getUserHome
    java.lang.String recoverJavaHome() -> b
    java.lang.String getSystemRoot() -> c
    java.lang.String getSystemLibDir() -> getSystemLibDir
es.gob.afirma.core.misc.Platform$BROWSER -> es.gob.afirma.core.misc.Platform$BROWSER:
    es.gob.afirma.core.misc.Platform$BROWSER INTERNET_EXPLORER -> INTERNET_EXPLORER
    es.gob.afirma.core.misc.Platform$BROWSER FIREFOX -> FIREFOX
    es.gob.afirma.core.misc.Platform$BROWSER CHROME -> CHROME
    es.gob.afirma.core.misc.Platform$BROWSER SAFARI -> SAFARI
    es.gob.afirma.core.misc.Platform$BROWSER OPERA -> OPERA
    es.gob.afirma.core.misc.Platform$BROWSER OTHER -> OTHER
    es.gob.afirma.core.misc.Platform$BROWSER[] $VALUES -> a
    es.gob.afirma.core.misc.Platform$BROWSER[] values() -> values
    es.gob.afirma.core.misc.Platform$BROWSER valueOf(java.lang.String) -> valueOf
es.gob.afirma.core.misc.Platform$OS -> es.gob.afirma.core.misc.Platform$OS:
    es.gob.afirma.core.misc.Platform$OS WINDOWS -> WINDOWS
    es.gob.afirma.core.misc.Platform$OS LINUX -> LINUX
    es.gob.afirma.core.misc.Platform$OS SOLARIS -> SOLARIS
    es.gob.afirma.core.misc.Platform$OS MACOSX -> MACOSX
    es.gob.afirma.core.misc.Platform$OS ANDROID -> ANDROID
    es.gob.afirma.core.misc.Platform$OS OTHER -> OTHER
    es.gob.afirma.core.misc.Platform$OS[] $VALUES -> a
    es.gob.afirma.core.misc.Platform$OS[] values() -> values
    es.gob.afirma.core.misc.Platform$OS valueOf(java.lang.String) -> valueOf
es.gob.afirma.core.misc.http.DataDownloader -> es.gob.afirma.core.misc.http.DataDownloader:
    byte[] downloadData(java.lang.String) -> downloadData
es.gob.afirma.core.misc.http.HttpError -> es.gob.afirma.core.misc.http.HttpError:
    int responseCode -> a
    java.lang.String responseDescription -> b
    int getResponseCode() -> getResponseCode
    java.lang.String getResponseDescription() -> getResponseDescription
es.gob.afirma.core.misc.http.URLName -> es.gob.afirma.core.misc.http.a:
    java.util.logging.Logger LOGGER -> c
    java.lang.String fullURL -> a
    java.lang.String protocol -> d
    java.lang.String username -> e
    java.lang.String password -> f
    java.lang.String host -> g
    java.net.InetAddress hostAddress -> h
    boolean hostAddressKnown -> i
    int port -> j
    java.lang.String file -> k
    java.lang.String ref -> l
    int hashCode -> m
    boolean doEncode -> n
    java.util.BitSet dontNeedEncoding -> b
    java.lang.String toString() -> toString
    void parseString(java.lang.String) -> b
    int getPort() -> a
    java.lang.String getProtocol() -> b
    java.lang.String getFile() -> c
    java.lang.String getHost() -> d
    java.lang.String getUsername() -> e
    java.lang.String getPassword() -> f
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.net.InetAddress getHostAddress() -> g
    java.lang.String decode(java.lang.String) -> a
    int indexOfAny(java.lang.String,java.lang.String) -> a
    int indexOfAny(java.lang.String,java.lang.String,int) -> a
es.gob.afirma.core.misc.http.UrlHttpManager -> es.gob.afirma.core.misc.http.UrlHttpManager:
    byte[] readUrl(java.lang.String,int,java.lang.String,java.lang.String,es.gob.afirma.core.misc.http.UrlHttpMethod) -> readUrl
    byte[] readUrl(java.lang.String,es.gob.afirma.core.misc.http.UrlHttpMethod) -> readUrl
es.gob.afirma.core.misc.http.UrlHttpManagerFactory -> es.gob.afirma.core.misc.http.UrlHttpManagerFactory:
    es.gob.afirma.core.misc.http.UrlHttpManager staticUrlManager -> a
    void install(es.gob.afirma.core.misc.http.UrlHttpManager) -> install
    es.gob.afirma.core.misc.http.UrlHttpManager getInstalledManager() -> getInstalledManager
es.gob.afirma.core.misc.http.UrlHttpManagerImpl -> es.gob.afirma.core.misc.http.UrlHttpManagerImpl:
    java.util.logging.Logger LOGGER -> a
    int DEFAULT_TIMEOUT -> DEFAULT_TIMEOUT
    javax.net.ssl.HostnameVerifier DEFAULT_HOSTNAME_VERIFIER -> b
    javax.net.ssl.SSLSocketFactory DEFAULT_SSL_SOCKET_FACTORY -> c
    javax.net.ssl.TrustManager[] DUMMY_TRUST_MANAGER -> d
    byte[] readUrl(java.lang.String,es.gob.afirma.core.misc.http.UrlHttpMethod) -> readUrl
    boolean isLocal(java.net.URL) -> a
    byte[] readUrl(java.lang.String,int,java.lang.String,java.lang.String,es.gob.afirma.core.misc.http.UrlHttpMethod) -> readUrl
    void enableSslChecks() -> enableSslChecks
    void disableSslChecks() -> disableSslChecks
    javax.net.ssl.KeyManager[] getKeyManager() -> a
es.gob.afirma.core.misc.http.UrlHttpManagerImpl$1 -> es.gob.afirma.core.misc.http.b:
    java.security.cert.X509Certificate[] getAcceptedIssuers() -> getAcceptedIssuers
    void checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkClientTrusted
    void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkServerTrusted
es.gob.afirma.core.misc.http.UrlHttpManagerImpl$2 -> es.gob.afirma.core.misc.http.c:
    boolean verify(java.lang.String,javax.net.ssl.SSLSession) -> verify
es.gob.afirma.core.misc.http.UrlHttpMethod -> es.gob.afirma.core.misc.http.UrlHttpMethod:
    es.gob.afirma.core.misc.http.UrlHttpMethod GET -> GET
    es.gob.afirma.core.misc.http.UrlHttpMethod POST -> POST
    es.gob.afirma.core.misc.http.UrlHttpMethod PUT -> PUT
    es.gob.afirma.core.misc.http.UrlHttpMethod[] $VALUES -> a
    es.gob.afirma.core.misc.http.UrlHttpMethod[] values() -> values
    es.gob.afirma.core.misc.http.UrlHttpMethod valueOf(java.lang.String) -> valueOf
es.gob.afirma.core.misc.protocol.ParameterException -> es.gob.afirma.core.misc.protocol.ParameterException:
es.gob.afirma.core.misc.protocol.ParameterLocalAccessRequestedException -> es.gob.afirma.core.misc.protocol.ParameterLocalAccessRequestedException:
es.gob.afirma.core.misc.protocol.ParameterNeedsUpdatedVersionException -> es.gob.afirma.core.misc.protocol.ParameterNeedsUpdatedVersionException:
es.gob.afirma.core.misc.protocol.ProtocolInvocationUriParser -> es.gob.afirma.core.misc.protocol.ProtocolInvocationUriParser:
    es.gob.afirma.core.misc.protocol.UrlParametersToSign getParametersToSign(java.lang.String) -> getParametersToSign
    es.gob.afirma.core.misc.protocol.UrlParametersToSign getParametersToSign(byte[]) -> getParametersToSign
    es.gob.afirma.core.misc.protocol.UrlParametersToSignAndSave getParametersToSignAndSave(java.lang.String) -> getParametersToSignAndSave
    es.gob.afirma.core.misc.protocol.UrlParametersToSignAndSave getParametersToSignAndSave(byte[]) -> getParametersToSignAndSave
    es.gob.afirma.core.misc.protocol.UrlParametersToSelectCert getParametersToSelectCert(java.lang.String) -> getParametersToSelectCert
    es.gob.afirma.core.misc.protocol.UrlParametersToSelectCert getParametersToSelectCert(byte[]) -> getParametersToSelectCert
    es.gob.afirma.core.misc.protocol.UrlParametersToSave getParametersToSave(byte[]) -> getParametersToSave
    es.gob.afirma.core.misc.protocol.UrlParametersToSave getParametersToSave(java.lang.String) -> getParametersToSave
    es.gob.afirma.core.misc.protocol.UrlParametersForBatch getParametersForBatch(java.lang.String) -> getParametersForBatch
    es.gob.afirma.core.misc.protocol.UrlParametersForBatch getParametersForBatch(byte[]) -> getParametersForBatch
    java.util.Map parserUri(java.lang.String) -> a
es.gob.afirma.core.misc.protocol.ProtocolInvocationUriParserUtil -> es.gob.afirma.core.misc.protocol.a:
    es.gob.afirma.core.misc.protocol.UrlParametersForBatch getParametersForBatch(java.util.Map) -> a
    es.gob.afirma.core.misc.protocol.UrlParametersToSave getParametersToSave(java.util.Map) -> b
    java.util.Map parseXml(byte[]) -> a
    es.gob.afirma.core.misc.protocol.UrlParametersToSign getParametersToSign(java.util.Map) -> c
    es.gob.afirma.core.misc.protocol.UrlParametersToSignAndSave getParametersToSignAndSave(java.util.Map) -> d
    es.gob.afirma.core.misc.protocol.UrlParametersToSelectCert getParametersToSelectCert(java.util.Map) -> e
es.gob.afirma.core.misc.protocol.ProtocolVersion -> es.gob.afirma.core.misc.protocol.ProtocolVersion:
    es.gob.afirma.core.misc.protocol.ProtocolVersion VERSION_0 -> VERSION_0
    es.gob.afirma.core.misc.protocol.ProtocolVersion VERSION_1 -> VERSION_1
    int version -> a
    es.gob.afirma.core.misc.protocol.ProtocolVersion[] $VALUES -> b
    es.gob.afirma.core.misc.protocol.ProtocolVersion[] values() -> values
    es.gob.afirma.core.misc.protocol.ProtocolVersion valueOf(java.lang.String) -> valueOf
    int getVersion() -> getVersion
    boolean support(java.lang.Object) -> support
    boolean support(int) -> support
    java.lang.String toString() -> toString
es.gob.afirma.core.misc.protocol.ProtocoloMessages -> es.gob.afirma.core.misc.protocol.b:
    java.util.ResourceBundle RESOURCE_BUNDLE -> a
    java.lang.String getString(java.lang.String) -> a
es.gob.afirma.core.misc.protocol.UrlParameters -> es.gob.afirma.core.misc.protocol.UrlParameters:
    java.lang.String PROPERTIES_PARAM -> PROPERTIES_PARAM
    java.lang.String DATA_PARAM -> DATA_PARAM
    java.lang.String STORAGE_SERVLET_PARAM -> STORAGE_SERVLET_PARAM
    java.lang.String FILE_ID_PARAM -> FILE_ID_PARAM
    byte[] data -> a
    java.lang.String fileId -> b
    byte[] desKey -> c
    java.net.URL retrieveServletUrl -> d
    java.net.URL storageServer -> e
    java.lang.String id -> f
    java.lang.String defaultKeyStore -> g
    java.lang.String defaultKeyStoreLib -> h
    java.util.Properties extraParams -> i
    java.lang.String filename -> j
    java.util.Properties getExtraParams() -> getExtraParams
    void setExtraParams(java.util.Properties) -> a
    java.lang.String getFileName() -> getFileName
    void setFilename(java.lang.String) -> a
    java.lang.String getDefaultKeyStore() -> getDefaultKeyStore
    void setDefaultKeyStore(java.lang.String) -> b
    java.lang.String getDefaultKeyStoreLib() -> getDefaultKeyStoreLib
    void setDefaultKeyStoreLib(java.lang.String) -> c
    void setData(byte[]) -> setData
    void setFileId(java.lang.String) -> d
    void setDesKey(byte[]) -> a
    void setRetrieveServletUrl(java.net.URL) -> a
    byte[] getData() -> getData
    java.lang.String getFileId() -> getFileId
    byte[] getDesKey() -> getDesKey
    java.net.URL getRetrieveServletUrl() -> getRetrieveServletUrl
    java.net.URL getStorageServletUrl() -> getStorageServletUrl
    void setStorageServletUrl(java.net.URL) -> setStorageServletUrl
    java.lang.String getId() -> getId
    void setSessionId(java.lang.String) -> e
    void setCommonParameters(java.util.Map) -> a
    byte[] verifyCipherKey(java.util.Map) -> b
    java.net.URL validateURL(java.lang.String) -> validateURL
    java.lang.String getDefaultKeyStoreName(java.util.Map) -> getDefaultKeyStoreName
    java.lang.String getDefaultKeyStoreLib(java.util.Map) -> getDefaultKeyStoreLib
es.gob.afirma.core.misc.protocol.UrlParametersForBatch -> es.gob.afirma.core.misc.protocol.UrlParametersForBatch:
    java.lang.String batchPreSignerUrl -> a
    java.lang.String batchPostSignerUrl -> b
    java.lang.String minimumVersion -> c
    java.lang.String getBatchPresignerUrl() -> getBatchPresignerUrl
    void setBatchPresignerUrl(java.lang.String) -> f
    java.lang.String getBatchPostSignerUrl() -> getBatchPostSignerUrl
    void setBatchPostsignerUrl(java.lang.String) -> g
    void setBatchParameters(java.util.Map) -> b
    java.lang.String getMinimumVersion() -> getMinimumVersion
    void setMinimumVersion(java.lang.String) -> h
es.gob.afirma.core.misc.protocol.UrlParametersNNN -> es.gob.afirma.core.misc.protocol.UrlParametersNNN:
    java.lang.String PROPERTIES_PARAM -> PROPERTIES_PARAM
    java.lang.String DATA_PARAM -> DATA_PARAM
    java.lang.String STORAGE_SERVLET_PARAM -> STORAGE_SERVLET_PARAM
    java.lang.String FILE_ID_PARAM -> FILE_ID_PARAM
    byte[] data -> a
    byte[][] datas -> b
    java.lang.String[] operaciones -> c
    boolean multifirma -> d
    java.lang.String fileId -> e
    byte[] desKey -> f
    java.net.URL retrieveServletUrl -> g
    java.net.URL storageServer -> h
    java.lang.String id -> i
    java.lang.String defaultKeyStore -> j
    java.util.Properties extraParams -> k
    java.lang.String filename -> l
    java.util.Properties getExtraParams() -> getExtraParams
    java.lang.String getFileName() -> getFileName
    java.lang.String getDefaultKeyStore() -> getDefaultKeyStore
    void setData(byte[]) -> setData
    byte[] getData() -> getData
    java.lang.String getFileId() -> getFileId
    byte[] getDesKey() -> getDesKey
    java.net.URL getRetrieveServletUrl() -> getRetrieveServletUrl
    java.net.URL getStorageServletUrl() -> getStorageServletUrl
    void setStorageServletUrl(java.net.URL) -> setStorageServletUrl
    java.lang.String getId() -> getId
    byte[][] getDatas() -> getDatas
    void setDatas(byte[][]) -> setDatas
    java.lang.String[] getOperaciones() -> getOperaciones
    void setOperaciones(java.lang.String[]) -> setOperaciones
    java.net.URL validateURL(java.lang.String) -> validateURL
    java.lang.String verifyDefaultKeyStoreName(java.util.Map) -> verifyDefaultKeyStoreName
es.gob.afirma.core.misc.protocol.UrlParametersToSave -> es.gob.afirma.core.misc.protocol.UrlParametersToSave:
    java.lang.String title -> a
    java.lang.String filename -> b
    java.lang.String extensions -> c
    java.lang.String fileTypeDescription -> d
    java.lang.String minimumVersion -> e
    void setFileTypeDescription(java.lang.String) -> f
    void setExtensions(java.lang.String) -> g
    void setFilename(java.lang.String) -> a
    void setTitle(java.lang.String) -> h
    void setMinimumVersion(java.lang.String) -> i
    java.lang.String getFileTypeDescription() -> getFileTypeDescription
    java.lang.String getExtensions() -> getExtensions
    java.lang.String getFileName() -> getFileName
    java.lang.String getTitle() -> getTitle
    java.lang.String getMinimumVersion() -> getMinimumVersion
    void setSaveParameters(java.util.Map) -> b
    java.lang.String verifyFilename(java.util.Map) -> c
    java.lang.String verifyExtensions(java.util.Map) -> d
    java.lang.String verifyTitle(java.util.Map) -> e
    java.lang.String verifyFileTypeDescription(java.util.Map) -> f
es.gob.afirma.core.misc.protocol.UrlParametersToSelectCert -> es.gob.afirma.core.misc.protocol.UrlParametersToSelectCert:
    java.lang.String minimumVerstion -> a
    java.lang.String getMinimumVersion() -> getMinimumVersion
    void setMinimumVersion(java.lang.String) -> f
    void setSelectCertParameters(java.util.Map) -> b
es.gob.afirma.core.misc.protocol.UrlParametersToSign -> es.gob.afirma.core.misc.protocol.UrlParametersToSign:
    java.util.Set SUPPORTED_SIGNATURE_ALGORITHMS -> a
    es.gob.afirma.core.misc.protocol.UrlParametersToSign$Operation operation -> b
    java.lang.String signFormat -> c
    java.lang.String signAlgorithm -> d
    java.lang.String minimumVersion -> e
    java.lang.String getMinimumVersion() -> getMinimumVersion
    es.gob.afirma.core.misc.protocol.UrlParametersToSign$Operation getOperation() -> getOperation
    java.lang.String getSignatureFormat() -> getSignatureFormat
    java.lang.String getSignatureAlgorithm() -> getSignatureAlgorithm
    void setOperation(es.gob.afirma.core.misc.protocol.UrlParametersToSign$Operation) -> a
    void setSignFormat(java.lang.String) -> setSignFormat
    void setSignAlgorithm(java.lang.String) -> f
    void setMinimumVersion(java.lang.String) -> g
    void setSignParameters(java.util.Map) -> b
    void expandExtraParams() -> expandExtraParams
es.gob.afirma.core.misc.protocol.UrlParametersToSign$Operation -> es.gob.afirma.core.misc.protocol.UrlParametersToSign$Operation:
    es.gob.afirma.core.misc.protocol.UrlParametersToSign$Operation SIGN -> SIGN
    es.gob.afirma.core.misc.protocol.UrlParametersToSign$Operation COSIGN -> COSIGN
    es.gob.afirma.core.misc.protocol.UrlParametersToSign$Operation COUNTERSIGN -> COUNTERSIGN
    es.gob.afirma.core.misc.protocol.UrlParametersToSign$Operation[] $VALUES -> a
    es.gob.afirma.core.misc.protocol.UrlParametersToSign$Operation[] values() -> values
    es.gob.afirma.core.misc.protocol.UrlParametersToSign$Operation valueOf(java.lang.String) -> valueOf
    es.gob.afirma.core.misc.protocol.UrlParametersToSign$Operation getOperation(java.lang.String) -> getOperation
es.gob.afirma.core.misc.protocol.UrlParametersToSignAndSave -> es.gob.afirma.core.misc.protocol.UrlParametersToSignAndSave:
    java.util.Set SUPPORTED_SIGNATURE_ALGORITHMS -> a
    es.gob.afirma.core.misc.protocol.UrlParametersToSignAndSave$Operation operation -> b
    java.lang.String signFormat -> c
    java.lang.String signAlgorithm -> d
    java.lang.String minimumVersion -> e
    java.lang.String getMinimumVersion() -> getMinimumVersion
    es.gob.afirma.core.misc.protocol.UrlParametersToSignAndSave$Operation getOperation() -> getOperation
    java.lang.String getSignatureFormat() -> getSignatureFormat
    java.lang.String getSignatureAlgorithm() -> getSignatureAlgorithm
    void setOperation(es.gob.afirma.core.misc.protocol.UrlParametersToSignAndSave$Operation) -> a
    void setSignFormat(java.lang.String) -> setSignFormat
    void setSignAlgorithm(java.lang.String) -> f
    void setMinimumVersion(java.lang.String) -> g
    void setSignAndSaveParameters(java.util.Map) -> b
    void expandExtraParams() -> expandExtraParams
es.gob.afirma.core.misc.protocol.UrlParametersToSignAndSave$Operation -> es.gob.afirma.core.misc.protocol.UrlParametersToSignAndSave$Operation:
    es.gob.afirma.core.misc.protocol.UrlParametersToSignAndSave$Operation SIGN -> SIGN
    es.gob.afirma.core.misc.protocol.UrlParametersToSignAndSave$Operation COSIGN -> COSIGN
    es.gob.afirma.core.misc.protocol.UrlParametersToSignAndSave$Operation COUNTERSIGN -> COUNTERSIGN
    es.gob.afirma.core.misc.protocol.UrlParametersToSignAndSave$Operation[] $VALUES -> a
    es.gob.afirma.core.misc.protocol.UrlParametersToSignAndSave$Operation[] values() -> values
    es.gob.afirma.core.misc.protocol.UrlParametersToSignAndSave$Operation valueOf(java.lang.String) -> valueOf
    es.gob.afirma.core.misc.protocol.UrlParametersToSignAndSave$Operation getOperation(java.lang.String) -> getOperation
es.gob.afirma.core.signers.AOCoSigner -> es.gob.afirma.core.signers.AOCoSigner:
    byte[] cosign(byte[],byte[],java.lang.String,java.security.PrivateKey,java.security.cert.Certificate[],java.util.Properties) -> cosign
    byte[] cosign(byte[],java.lang.String,java.security.PrivateKey,java.security.cert.Certificate[],java.util.Properties) -> cosign
es.gob.afirma.core.signers.AOCounterSigner -> es.gob.afirma.core.signers.AOCounterSigner:
    byte[] countersign(byte[],java.lang.String,es.gob.afirma.core.signers.CounterSignTarget,java.lang.Object[],java.security.PrivateKey,java.security.cert.Certificate[],java.util.Properties) -> countersign
es.gob.afirma.core.signers.AOPkcs1Signer -> es.gob.afirma.core.signers.AOPkcs1Signer:
    byte[] sign(byte[],java.lang.String,java.security.PrivateKey,java.security.cert.Certificate[],java.util.Properties) -> sign
    byte[] cosign(byte[],byte[],java.lang.String,java.security.PrivateKey,java.security.cert.Certificate[],java.util.Properties) -> cosign
    byte[] cosign(byte[],java.lang.String,java.security.PrivateKey,java.security.cert.Certificate[],java.util.Properties) -> cosign
    byte[] countersign(byte[],java.lang.String,es.gob.afirma.core.signers.CounterSignTarget,java.lang.Object[],java.security.PrivateKey,java.security.cert.Certificate[],java.util.Properties) -> countersign
    es.gob.afirma.core.util.tree.AOTreeModel getSignersStructure(byte[],boolean) -> getSignersStructure
    boolean isSign(byte[]) -> isSign
    boolean isValidDataFile(byte[]) -> isValidDataFile
    java.lang.String getSignedName(java.lang.String,java.lang.String) -> getSignedName
    byte[] getData(byte[]) -> getData
    es.gob.afirma.core.signers.AOSignInfo getSignInfo(byte[]) -> getSignInfo
es.gob.afirma.core.signers.AOSignConstants -> es.gob.afirma.core.signers.AOSignConstants:
    java.lang.String SIGN_FORMAT_AUTO -> SIGN_FORMAT_AUTO
    java.lang.String SIGN_FORMAT_CMS -> SIGN_FORMAT_CMS
    java.lang.String SIGN_FORMAT_CADES_ASIC_S -> SIGN_FORMAT_CADES_ASIC_S
    java.lang.String SIGN_FORMAT_CADES_ASIC_S_TRI -> SIGN_FORMAT_CADES_ASIC_S_TRI
    java.lang.String SIGN_FORMAT_CADES -> SIGN_FORMAT_CADES
    java.lang.String SIGN_FORMAT_CADES_TRI -> SIGN_FORMAT_CADES_TRI
    java.lang.String SIGN_FORMAT_PKCS1 -> SIGN_FORMAT_PKCS1
    java.lang.String SIGN_FORMAT_XADES_ASIC_S -> SIGN_FORMAT_XADES_ASIC_S
    java.lang.String SIGN_FORMAT_XADES_ASIC_S_TRI -> SIGN_FORMAT_XADES_ASIC_S_TRI
    java.lang.String SIGN_FORMAT_XADES_DETACHED -> SIGN_FORMAT_XADES_DETACHED
    java.lang.String SIGN_FORMAT_XADES_EXTERNALLY_DETACHED -> SIGN_FORMAT_XADES_EXTERNALLY_DETACHED
    java.lang.String SIGN_FORMAT_XADES_ENVELOPED -> SIGN_FORMAT_XADES_ENVELOPED
    java.lang.String SIGN_FORMAT_XADES_ENVELOPING -> SIGN_FORMAT_XADES_ENVELOPING
    java.lang.String SIGN_FORMAT_XADES -> SIGN_FORMAT_XADES
    java.lang.String SIGN_FORMAT_XADES_TRI -> SIGN_FORMAT_XADES_TRI
    java.lang.String SIGN_FORMAT_XMLDSIG_DETACHED -> SIGN_FORMAT_XMLDSIG_DETACHED
    java.lang.String SIGN_FORMAT_XMLDSIG_EXTERNALLY_DETACHED -> SIGN_FORMAT_XMLDSIG_EXTERNALLY_DETACHED
    java.lang.String SIGN_FORMAT_XMLDSIG_ENVELOPED -> SIGN_FORMAT_XMLDSIG_ENVELOPED
    java.lang.String SIGN_FORMAT_XMLDSIG_ENVELOPING -> SIGN_FORMAT_XMLDSIG_ENVELOPING
    java.lang.String SIGN_FORMAT_XMLDSIG -> SIGN_FORMAT_XMLDSIG
    java.lang.String SIGN_FORMAT_OOXML -> SIGN_FORMAT_OOXML
    java.lang.String SIGN_FORMAT_OOXML_ALT1 -> SIGN_FORMAT_OOXML_ALT1
    java.lang.String SIGN_FORMAT_ODF -> SIGN_FORMAT_ODF
    java.lang.String SIGN_FORMAT_ODF_ALT1 -> SIGN_FORMAT_ODF_ALT1
    java.lang.String SIGN_FORMAT_PDF -> SIGN_FORMAT_PDF
    java.lang.String SIGN_FORMAT_PDF_TRI -> SIGN_FORMAT_PDF_TRI
    java.lang.String SIGN_FORMAT_PADES -> SIGN_FORMAT_PADES
    java.lang.String SIGN_FORMAT_PADES_TRI -> SIGN_FORMAT_PADES_TRI
    java.lang.String SIGN_FORMAT_SOAP -> SIGN_FORMAT_SOAP
    java.lang.String SIGN_FORMAT_FACTURAE -> SIGN_FORMAT_FACTURAE
    java.lang.String SIGN_FORMAT_FACTURAE_TRI -> SIGN_FORMAT_FACTURAE_TRI
    java.lang.String SIGN_FORMAT_FACTURAE_ALT1 -> SIGN_FORMAT_FACTURAE_ALT1
    java.lang.String DEFAULT_SIGN_FORMAT -> DEFAULT_SIGN_FORMAT
    java.lang.String MASSIVE_OPERATION_SIGN -> MASSIVE_OPERATION_SIGN
    java.lang.String MASSIVE_OPERATION_COSIGN -> MASSIVE_OPERATION_COSIGN
    java.lang.String MASSIVE_OPERATION_COUNTERSIGN_TREE -> MASSIVE_OPERATION_COUNTERSIGN_TREE
    java.lang.String MASSIVE_OPERATION_COUNTERSIGN_LEAFS -> MASSIVE_OPERATION_COUNTERSIGN_LEAFS
    java.lang.String DEFAULT_MASSIVE_OPERATION -> DEFAULT_MASSIVE_OPERATION
    java.lang.String CMS_CONTENTTYPE_DATA -> CMS_CONTENTTYPE_DATA
    java.lang.String CMS_CONTENTTYPE_SIGNEDDATA -> CMS_CONTENTTYPE_SIGNEDDATA
    java.lang.String CMS_CONTENTTYPE_DIGESTEDDATA -> CMS_CONTENTTYPE_DIGESTEDDATA
    java.lang.String CMS_CONTENTTYPE_COMPRESSEDDATA -> CMS_CONTENTTYPE_COMPRESSEDDATA
    java.lang.String CMS_CONTENTTYPE_ENCRYPTEDDATA -> CMS_CONTENTTYPE_ENCRYPTEDDATA
    java.lang.String CMS_CONTENTTYPE_ENVELOPEDDATA -> CMS_CONTENTTYPE_ENVELOPEDDATA
    java.lang.String CMS_CONTENTTYPE_SIGNEDANDENVELOPEDDATA -> CMS_CONTENTTYPE_SIGNEDANDENVELOPEDDATA
    java.lang.String CMS_CONTENTTYPE_AUTHENTICATEDDATA -> CMS_CONTENTTYPE_AUTHENTICATEDDATA
    java.lang.String CMS_CONTENTTYPE_AUTHENVELOPEDDATA -> CMS_CONTENTTYPE_AUTHENVELOPEDDATA
    java.lang.String DEFAULT_CMS_CONTENTTYPE -> DEFAULT_CMS_CONTENTTYPE
    java.lang.String DEFAULT_OID_TO_SIGN -> DEFAULT_OID_TO_SIGN
    java.lang.String PADES_SUBFILTER_BASIC -> PADES_SUBFILTER_BASIC
    java.lang.String PADES_SUBFILTER_BES -> PADES_SUBFILTER_BES
    java.lang.String SIGN_ALGORITHM_SHA1WITHRSA -> SIGN_ALGORITHM_SHA1WITHRSA
    java.lang.String SIGN_ALGORITHM_SHA256WITHRSA -> SIGN_ALGORITHM_SHA256WITHRSA
    java.lang.String SIGN_ALGORITHM_SHA384WITHRSA -> SIGN_ALGORITHM_SHA384WITHRSA
    java.lang.String SIGN_ALGORITHM_SHA512WITHRSA -> SIGN_ALGORITHM_SHA512WITHRSA
    java.lang.String SIGN_ALGORITHM_NONEWITHRSA -> SIGN_ALGORITHM_NONEWITHRSA
    java.lang.String SIGN_ALGORITHM_SHA1WITHDSA -> SIGN_ALGORITHM_SHA1WITHDSA
    java.lang.String SIGN_ALGORITHM_SHA1WITHECDSA -> SIGN_ALGORITHM_SHA1WITHECDSA
    java.lang.String SIGN_ALGORITHM_NONEWITHECDSA -> SIGN_ALGORITHM_NONEWITHECDSA
    java.lang.String[] SUPPORTED_SIGN_ALGOS -> SUPPORTED_SIGN_ALGOS
    java.lang.String DEFAULT_SIGN_ALGO -> DEFAULT_SIGN_ALGO
    java.lang.String SIGN_MODE_EXPLICIT -> SIGN_MODE_EXPLICIT
    java.lang.String SIGN_MODE_IMPLICIT -> SIGN_MODE_IMPLICIT
    java.lang.String DEFAULT_SIGN_MODE -> DEFAULT_SIGN_MODE
    java.lang.String getDigestAlgorithmName(java.lang.String) -> getDigestAlgorithmName
    boolean isSHA2SignatureAlgorithm(java.lang.String) -> isSHA2SignatureAlgorithm
es.gob.afirma.core.signers.AOSignInfo -> es.gob.afirma.core.signers.AOSignInfo:
    java.lang.String format -> a
    java.lang.String variant -> b
    java.lang.String urlSignObject -> c
    java.lang.String urlSignedData -> d
    java.lang.String b64VerificationCode -> e
    java.lang.String getVariant() -> getVariant
    void setVariant(java.lang.String) -> setVariant
    java.lang.String getUrlSignObject() -> getUrlSignObject
    void setUrlSignObject(java.lang.String) -> setUrlSignObject
    java.lang.String getUrlSignedData() -> getUrlSignedData
    void setUrlSignedData(java.lang.String) -> setUrlSignedData
    java.lang.String getB64VerificationCode() -> getB64VerificationCode
    void setB64VerificationCode(java.lang.String) -> setB64VerificationCode
    java.lang.String getFormat() -> getFormat
es.gob.afirma.core.signers.AOSigner -> es.gob.afirma.core.signers.AOSigner:
    es.gob.afirma.core.util.tree.AOTreeModel getSignersStructure(byte[],boolean) -> getSignersStructure
    boolean isSign(byte[]) -> isSign
    boolean isValidDataFile(byte[]) -> isValidDataFile
    java.lang.String getSignedName(java.lang.String,java.lang.String) -> getSignedName
    byte[] getData(byte[]) -> getData
    es.gob.afirma.core.signers.AOSignInfo getSignInfo(byte[]) -> getSignInfo
es.gob.afirma.core.signers.AOSignerFactory -> es.gob.afirma.core.signers.AOSignerFactory:
    java.util.logging.Logger LOGGER -> a
    java.util.Map SIGNERS -> b
    java.lang.String[][] SIGNERS_CLASSES -> c
    es.gob.afirma.core.signers.AOSigner getSigner(byte[]) -> getSigner
    es.gob.afirma.core.signers.AOSigner getSigner(java.lang.String) -> getSigner
    java.lang.String[] getSupportedFormats() -> getSupportedFormats
es.gob.afirma.core.signers.AOSimpleSignInfo -> es.gob.afirma.core.signers.AOSimpleSignInfo:
    java.security.cert.X509Certificate[] certs -> a
    java.lang.String signAlgorithm -> b
    java.lang.String signFormat -> c
    java.util.Date signingTime -> d
    java.util.Date[] timestampingTime -> e
    byte[] pkcs1 -> f
    java.lang.String getSignAlgorithm() -> getSignAlgorithm
    void setSignAlgorithm(java.lang.String) -> setSignAlgorithm
    java.lang.String getSignFormat() -> getSignFormat
    void setSignFormat(java.lang.String) -> setSignFormat
    java.util.Date[] getTimestampingTime() -> getTimestampingTime
    void setTimestampingTime(java.util.Date[]) -> setTimestampingTime
    java.security.cert.X509Certificate[] getCerts() -> getCerts
    java.util.Date getSigningTime() -> getSigningTime
    boolean isTimeStamped() -> isTimeStamped
    byte[] getPkcs1() -> getPkcs1
    void setPkcs1(byte[]) -> setPkcs1
    java.lang.String toString() -> toString
es.gob.afirma.core.signers.AOSimpleSigner -> es.gob.afirma.core.signers.AOSimpleSigner:
    byte[] sign(byte[],java.lang.String,java.security.PrivateKey,java.security.cert.Certificate[],java.util.Properties) -> sign
es.gob.afirma.core.signers.AOTimestampInfo -> es.gob.afirma.core.signers.AOTimestampInfo:
    java.security.cert.X509Certificate issuer -> a
    java.util.Date date -> b
    java.util.Date getDate() -> getDate
    java.security.cert.X509Certificate getIssuer() -> getIssuer
    java.lang.String toString() -> toString
es.gob.afirma.core.signers.AdESPolicy -> es.gob.afirma.core.signers.AdESPolicy:
    java.lang.String policyIdentifier -> a
    java.lang.String policyIdentifierHash -> b
    java.lang.String policyIdentifierHashAlgorithm -> c
    java.net.URL policyQualifier -> d
    void setValues(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
    java.lang.String getPolicyIdentifier() -> getPolicyIdentifier
    java.lang.String getPolicyIdentifierHash() -> getPolicyIdentifierHash
    java.lang.String getPolicyIdentifierHashAlgorithm() -> getPolicyIdentifierHashAlgorithm
    java.net.URL getPolicyQualifier() -> getPolicyQualifier
    es.gob.afirma.core.signers.AdESPolicy buildAdESPolicy(java.util.Properties) -> buildAdESPolicy
    java.util.Properties asExtraParams() -> asExtraParams
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
es.gob.afirma.core.signers.AdESPolicyPropertiesManager -> es.gob.afirma.core.signers.a:
    java.util.logging.Logger LOGGER -> a
    java.util.ResourceBundle RESOURCE_BUNDLE -> b
    void setProperties(java.util.Properties,java.lang.String,java.lang.String) -> a
    java.lang.String getProperty(java.lang.String,java.lang.String,java.lang.String) -> a
    void setProperty(java.util.Properties,java.lang.String,java.lang.String) -> b
es.gob.afirma.core.signers.CounterSignTarget -> es.gob.afirma.core.signers.CounterSignTarget:
    es.gob.afirma.core.signers.CounterSignTarget SIGNERS -> SIGNERS
    es.gob.afirma.core.signers.CounterSignTarget NODES -> NODES
    es.gob.afirma.core.signers.CounterSignTarget TREE -> TREE
    es.gob.afirma.core.signers.CounterSignTarget LEAFS -> LEAFS
    java.lang.String name -> a
    es.gob.afirma.core.signers.CounterSignTarget[] $VALUES -> b
    es.gob.afirma.core.signers.CounterSignTarget[] values() -> values
    es.gob.afirma.core.signers.CounterSignTarget valueOf(java.lang.String) -> valueOf
    java.lang.String toString() -> toString
    es.gob.afirma.core.signers.CounterSignTarget getTarget(java.lang.String) -> getTarget
es.gob.afirma.core.signers.ExtraParamsProcessor -> es.gob.afirma.core.signers.ExtraParamsProcessor:
    java.util.logging.Logger LOGGER -> a
    java.util.Properties convertToProperties(java.lang.String) -> convertToProperties
    java.util.Properties expandProperties(java.util.Properties) -> expandProperties
    java.util.Properties expandProperties(java.util.Properties,byte[],java.lang.String) -> expandProperties
    java.lang.String getSignFormat(es.gob.afirma.core.signers.AOSigner) -> getSignFormat
    void expandPolicyKeys(java.util.Properties,byte[],java.lang.String) -> a
    void configAutoFormat(es.gob.afirma.core.signers.AOSigner,byte[],java.util.Properties) -> configAutoFormat
es.gob.afirma.core.signers.ExtraParamsProcessor$IncompatiblePolicyException -> es.gob.afirma.core.signers.ExtraParamsProcessor$IncompatiblePolicyException:
es.gob.afirma.core.signers.TriphaseData -> es.gob.afirma.core.signers.TriphaseData:
    java.util.List signs -> a
    java.lang.String format -> b
    java.lang.String getFormat() -> getFormat
    void setFormat(java.lang.String) -> setFormat
    es.gob.afirma.core.signers.TriphaseData$TriSign getTriSign(java.lang.String) -> getTriSign
    java.util.List getTriSigns(java.lang.String) -> getTriSigns
    java.util.List getTriSigns() -> getTriSigns
    void addSignOperation(es.gob.afirma.core.signers.TriphaseData$TriSign) -> addSignOperation
    es.gob.afirma.core.signers.TriphaseData$TriSign getSign(int) -> getSign
    int getSignsCount() -> getSignsCount
    es.gob.afirma.core.signers.TriphaseData parser(byte[]) -> parser
    java.util.List parseSignsNode(org.w3c.dom.Node) -> a
    java.util.Map parseParamsListNode(org.w3c.dom.Node) -> b
    int nextNodeElementIndex(org.w3c.dom.NodeList,int) -> a
    java.lang.String toString() -> toString
es.gob.afirma.core.signers.TriphaseData$TriSign -> es.gob.afirma.core.signers.TriphaseData$TriSign:
    java.util.Map dict -> a
    java.lang.String id -> b
    java.lang.String toString() -> toString
    java.lang.String getId() -> getId
    java.lang.String getProperty(java.lang.String) -> getProperty
    void addProperty(java.lang.String,java.lang.String) -> addProperty
    void deleteProperty(java.lang.String) -> deleteProperty
    java.util.Map getDict() -> getDict
es.gob.afirma.core.signers.TriphaseDataSigner -> es.gob.afirma.core.signers.TriphaseDataSigner:
    es.gob.afirma.core.signers.TriphaseData doSign(es.gob.afirma.core.signers.AOPkcs1Signer,java.lang.String,java.security.PrivateKey,java.security.cert.Certificate[],es.gob.afirma.core.signers.TriphaseData) -> doSign
es.gob.afirma.core.signers.TriphaseUtil -> es.gob.afirma.core.signers.TriphaseUtil:
    java.lang.String prepareCertChainParam(java.security.cert.Certificate[],java.util.Properties) -> prepareCertChainParam
es.gob.afirma.core.signers.asic.ASiCUtil -> es.gob.afirma.core.signers.asic.ASiCUtil:
    java.lang.String ENTRY_NAME_BINARY_SIGNATURE -> ENTRY_NAME_BINARY_SIGNATURE
    java.lang.String ENTRY_NAME_XML_SIGNATURE -> ENTRY_NAME_XML_SIGNATURE
    java.lang.String getASiCSDefaultDataFilename(byte[]) -> getASiCSDefaultDataFilename
    byte[] createSContainer(byte[],byte[],java.lang.String,java.lang.String) -> createSContainer
    byte[] getASiCSBinarySignature(byte[]) -> getASiCSBinarySignature
    byte[] getASiCSXMLSignature(byte[]) -> getASiCSXMLSignature
    byte[] getASiCSSignature(byte[],java.lang.String) -> a
    byte[] getASiCSData(byte[]) -> getASiCSData
    java.lang.String getASiCSDataFilename(byte[]) -> getASiCSDataFilename
es.gob.afirma.core.ui.AOUIFactory -> es.gob.afirma.core.ui.AOUIFactory:
    int PLAIN_MESSAGE -> PLAIN_MESSAGE
    int YES_NO_OPTION -> YES_NO_OPTION
    int WARNING_MESSAGE -> WARNING_MESSAGE
    int YES_OPTION -> YES_OPTION
    int NO_OPTION -> NO_OPTION
    int OK_CANCEL_OPTION -> OK_CANCEL_OPTION
    int OK_OPTION -> OK_OPTION
    int INFORMATION_MESSAGE -> INFORMATION_MESSAGE
    int QUESTION_MESSAGE -> QUESTION_MESSAGE
    int ERROR_MESSAGE -> ERROR_MESSAGE
    es.gob.afirma.core.ui.AOUIManager uiManager -> a
    void setUIManager(es.gob.afirma.core.ui.AOUIManager) -> setUIManager
    char[] getPassword(java.lang.String,java.lang.Object) -> getPassword
    char[] getPassword(java.lang.String,java.lang.Object,java.lang.String,boolean,java.lang.Object) -> getPassword
    int showConfirmDialog(java.lang.Object,java.lang.Object,java.lang.String,int,int) -> showConfirmDialog
    void showMessageDialog(java.lang.Object,java.lang.Object,java.lang.String,int) -> showMessageDialog
    void showMessageDialog(java.lang.Object,java.lang.Object,java.lang.String,int,java.lang.Object) -> showMessageDialog
    void showErrorMessage(java.lang.Object,java.lang.Object,java.lang.String,int) -> showErrorMessage
    java.lang.Object showInputDialog(java.lang.Object,java.lang.Object,java.lang.String,int,java.lang.Object,java.lang.Object[],java.lang.Object) -> showInputDialog
    java.lang.String showCertificateSelectionDialog(java.lang.Object,es.gob.afirma.core.ui.KeyStoreDialogManager) -> showCertificateSelectionDialog
    java.io.File[] getLoadFiles(java.lang.String,java.lang.String,java.lang.String,java.lang.String[],java.lang.String,boolean,boolean,java.lang.Object,java.lang.Object) -> getLoadFiles
    java.io.File getSaveDataToFile(byte[],java.lang.String,java.lang.String,java.lang.String,java.lang.String[],java.lang.String,java.lang.Object) -> getSaveDataToFile
es.gob.afirma.core.ui.AOUIManager -> es.gob.afirma.core.ui.AOUIManager:
    char[] getPassword(java.lang.String,java.lang.Object) -> getPassword
    char[] getPassword(java.lang.String,java.lang.Object,java.lang.String,boolean,java.lang.Object) -> getPassword
    java.lang.Object showInputDialog(java.lang.Object,java.lang.Object,java.lang.String,int,java.lang.Object,java.lang.Object[],java.lang.Object) -> showInputDialog
    java.lang.String showCertificateSelectionDialog(java.lang.Object,es.gob.afirma.core.ui.KeyStoreDialogManager) -> showCertificateSelectionDialog
    int showConfirmDialog(java.lang.Object,java.lang.Object,java.lang.String,int,int) -> showConfirmDialog
    void showMessageDialog(java.lang.Object,java.lang.Object,java.lang.String,int) -> showMessageDialog
    void showMessageDialog(java.lang.Object,java.lang.Object,java.lang.String,int,java.lang.Object) -> showMessageDialog
    void showErrorMessage(java.lang.Object,java.lang.Object,java.lang.String,int) -> showErrorMessage
    int getPlainMessageCode() -> getPlainMessageCode
    int getYesNoOptionCode() -> getYesNoOptionCode
    int getWarningMessageCode() -> getWarningMessageCode
    int getErrorMessageCode() -> getErrorMessageCode
    int getYesOptionCode() -> getYesOptionCode
    int getNoOptionCode() -> getNoOptionCode
    int getOkCancelOptionCode() -> getOkCancelOptionCode
    int getOkOptionCode() -> getOkOptionCode
    int getInformationMessageCode() -> getInformationMessageCode
    int getQuestionMessageCode() -> getQuestionMessageCode
    java.io.File[] getLoadFiles(java.lang.String,java.lang.String,java.lang.String,java.lang.String[],java.lang.String,boolean,boolean,java.lang.Object,java.lang.Object) -> getLoadFiles
    java.io.File saveDataToFile(byte[],java.lang.String,java.lang.String,java.lang.String,java.lang.String[],java.lang.String,java.lang.Object) -> saveDataToFile
es.gob.afirma.core.ui.KeyStoreDialogManager -> es.gob.afirma.core.ui.KeyStoreDialogManager:
    void refresh() -> refresh
    es.gob.afirma.core.keystores.NameCertificateBean[] getNameCertificates() -> getNameCertificates
    void setKeyStoreManager(es.gob.afirma.core.keystores.KeyStoreManager) -> setKeyStoreManager
    java.lang.Object getKeyEntry(java.lang.String) -> getKeyEntry
    java.lang.String show() -> show
    java.lang.String getSelectedAlias() -> getSelectedAlias
    void allowOpenExternalStores(boolean) -> allowOpenExternalStores
    boolean isExternalStoresOpeningAllowed() -> isExternalStoresOpeningAllowed
es.gob.afirma.core.util.tree.AOTreeModel -> es.gob.afirma.core.util.tree.AOTreeModel:
    es.gob.afirma.core.util.tree.AOTreeNode root -> a
    java.lang.Object getRoot() -> getRoot
    java.lang.Object getChild(java.lang.Object,int) -> getChild
    int getChildCount(java.lang.Object) -> getChildCount
es.gob.afirma.core.util.tree.AOTreeNode -> es.gob.afirma.core.util.tree.AOTreeNode:
    es.gob.afirma.core.util.tree.AOTreeNode parent -> a
    java.util.List children -> b
    java.lang.Object userObject -> c
    void insert(es.gob.afirma.core.util.tree.AOTreeNode,int) -> a
    void remove(int) -> a
    void setParent(es.gob.afirma.core.util.tree.AOTreeNode) -> setParent
    es.gob.afirma.core.util.tree.AOTreeNode getParent() -> getParent
    es.gob.afirma.core.util.tree.AOTreeNode getChildAt(int) -> getChildAt
    int getChildCount() -> getChildCount
    int getIndex(es.gob.afirma.core.util.tree.AOTreeNode) -> a
    java.lang.Object getUserObject() -> getUserObject
    void remove(es.gob.afirma.core.util.tree.AOTreeNode) -> b
    void add(es.gob.afirma.core.util.tree.AOTreeNode) -> add
    boolean isNodeAncestor(es.gob.afirma.core.util.tree.AOTreeNode) -> c
    boolean isNodeChild(es.gob.afirma.core.util.tree.AOTreeNode) -> d
    boolean isLeaf() -> isLeaf
    java.lang.String toString() -> toString
es.gob.afirma.core.util.tree.AOTreeUtil -> es.gob.afirma.core.util.tree.AOTreeUtil:
    java.util.logging.Logger LOGGER -> a
    java.lang.String showTreeAsString(es.gob.afirma.core.util.tree.AOTreeModel,java.lang.String,java.lang.String) -> showTreeAsString
    void archiveTreeNode(es.gob.afirma.core.util.tree.AOTreeNode,int,java.lang.String,java.lang.String,java.lang.StringBuilder) -> a
es.gob.afirma.crypto.jarverifier.JarSignatureCertExtractor -> es.gob.afirma.crypto.jarverifier.JarSignatureCertExtractor:
    java.util.logging.Logger LOGGER -> a
    java.lang.String[] CACERTS_DEFAULT_PASSWORDS -> b
    java.lang.String keystorePassword -> c
    java.security.cert.X509Certificate[] getJarSignatureCertChain(byte[]) -> a
    byte[] getJarSignature(java.io.InputStream) -> a
    java.io.InputStream getJarInputStream() -> a
    java.io.File getUsersJavaCaKeyStoreFile() -> b
    java.io.File getSystemsJavaCaKeyStoreFile() -> c
    java.security.KeyStore getJavaCaKeyStore(java.io.File) -> a
    void checkCertChain(java.security.cert.X509Certificate[],java.security.KeyStore) -> a
    void insertJarSignerOnCACerts(java.lang.Object) -> insertJarSignerOnCACerts
es.gob.afirma.crypto.jarverifier.JarSignatureCertExtractorMessages -> es.gob.afirma.crypto.jarverifier.a:
    java.util.ResourceBundle RESOURCE_BUNDLE -> a
    java.lang.String getString(java.lang.String) -> a
es.gob.afirma.envelopers.cms.AOCMSEnveloper -> es.gob.afirma.envelopers.cms.AOCMSEnveloper:
    java.lang.String CMS_CONTENTTYPE_DATA -> CMS_CONTENTTYPE_DATA
    java.lang.String CMS_CONTENTTYPE_SIGNEDDATA -> CMS_CONTENTTYPE_SIGNEDDATA
    java.lang.String CMS_CONTENTTYPE_DIGESTEDDATA -> CMS_CONTENTTYPE_DIGESTEDDATA
    java.lang.String CMS_CONTENTTYPE_COMPRESSEDDATA -> CMS_CONTENTTYPE_COMPRESSEDDATA
    java.lang.String CMS_CONTENTTYPE_ENCRYPTEDDATA -> CMS_CONTENTTYPE_ENCRYPTEDDATA
    java.lang.String CMS_CONTENTTYPE_ENVELOPEDDATA -> CMS_CONTENTTYPE_ENVELOPEDDATA
    java.lang.String CMS_CONTENTTYPE_SIGNEDANDENVELOPEDDATA -> CMS_CONTENTTYPE_SIGNEDANDENVELOPEDDATA
    java.lang.String CMS_CONTENTTYPE_AUTHENTICATEDDATA -> CMS_CONTENTTYPE_AUTHENTICATEDDATA
    java.lang.String CMS_CONTENTTYPE_AUTHENVELOPEDDATA -> CMS_CONTENTTYPE_AUTHENVELOPEDDATA
    java.lang.String DEFAULT_CMS_CONTENTTYPE -> DEFAULT_CMS_CONTENTTYPE
    java.lang.String envelopType -> a
    byte[] signerCert -> b
    java.lang.String DATA_TYPE_OID -> c
    java.lang.String signatureAlgorithm -> d
    java.util.Map attrib -> e
    java.util.Map uattrib -> f
    java.lang.String cipherKey -> g
    byte[] envelop(byte[],java.lang.String,java.lang.String,java.security.KeyStore$PrivateKeyEntry,java.security.cert.X509Certificate[],es.gob.afirma.core.ciphers.CipherConstants$AOCipherAlgorithm,java.lang.String,java.util.Properties) -> envelop
    byte[] encrypt(byte[],java.lang.String,java.lang.String,es.gob.afirma.core.ciphers.CipherConstants$AOCipherAlgorithm,java.lang.String) -> encrypt
    void addSignedAttribute(java.lang.String,byte[]) -> addSignedAttribute
    void addUnsignedAttribute(java.lang.String,byte[]) -> addUnsignedAttribute
    byte[] createCMSEncryptedData(byte[],es.gob.afirma.core.ciphers.AOCipherConfig,java.security.Key) -> createCMSEncryptedData
    byte[] createCMSEnvelopedData(byte[],java.security.KeyStore$PrivateKeyEntry,es.gob.afirma.core.ciphers.AOCipherConfig,java.security.cert.X509Certificate[],java.lang.Integer) -> createCMSEnvelopedData
    byte[] createCMSSignedAndEnvelopedData(byte[],java.security.KeyStore$PrivateKeyEntry,es.gob.afirma.core.ciphers.AOCipherConfig,java.security.cert.X509Certificate[],java.lang.Integer) -> createCMSSignedAndEnvelopedData
    byte[] createCMSAuthenticatedEnvelopedData(byte[],java.security.KeyStore$PrivateKeyEntry,es.gob.afirma.core.ciphers.AOCipherConfig,java.security.cert.X509Certificate[],java.lang.Integer) -> createCMSAuthenticatedEnvelopedData
    es.gob.afirma.signers.pkcs7.P7ContentSignerParameters createContentSignerParementers(byte[],java.lang.String) -> a
    byte[] addOriginator(byte[],java.security.KeyStore$PrivateKeyEntry) -> addOriginator
    byte[] addOriginator(byte[],java.lang.String,java.security.KeyStore$PrivateKeyEntry) -> a
    void setSignatureAlgorithm(java.lang.String) -> setSignatureAlgorithm
    void setCipherKey(java.lang.String) -> setCipherKey
    byte[] recoverData(byte[],java.security.KeyStore$PrivateKeyEntry) -> recoverData
    java.lang.String getProcessedEnvelopType() -> getProcessedEnvelopType
    byte[] getSignerCert() -> getSignerCert
es.gob.afirma.envelopers.cms.AOCMSMultiEnveloper -> es.gob.afirma.envelopers.cms.AOCMSMultiEnveloper:
    java.lang.String dataTypeOID -> a
    java.util.Map atrib -> b
    java.util.Map uatrib -> c
    java.lang.String DATA_TYPE_OID -> d
    java.lang.String signatureAlgorithm -> e
    java.util.Map attrib -> f
    java.util.Map uattrib -> g
    java.security.KeyStore$PrivateKeyEntry configuredKe -> h
    java.lang.String cipherKey -> i
    byte[] cosign(byte[],byte[],java.lang.String,java.security.KeyStore$PrivateKeyEntry,java.util.Properties) -> cosign
    byte[] cosign(byte[],java.lang.String,java.security.KeyStore$PrivateKeyEntry) -> cosign
    void setSignatureAlgorithm(java.lang.String) -> setSignatureAlgorithm
es.gob.afirma.envelopers.cms.AOInvalidRecipientException -> es.gob.afirma.envelopers.cms.AOInvalidRecipientException:
es.gob.afirma.envelopers.cms.BinaryUtils -> es.gob.afirma.envelopers.cms.a:
    byte[] uncompress(byte[]) -> a
es.gob.afirma.envelopers.cms.CMSAuthenticatedEnvelopedData -> es.gob.afirma.envelopers.cms.CMSAuthenticatedEnvelopedData:
    byte[] genAuthenticatedEnvelopedData(es.gob.afirma.signers.pkcs7.P7ContentSignerParameters,java.security.cert.X509Certificate[],java.lang.String,es.gob.afirma.core.ciphers.AOCipherConfig,java.security.cert.X509Certificate[],java.lang.String,boolean,java.util.Map,java.util.Map,java.lang.Integer) -> a
    byte[] genPack(byte[],byte[]) -> a
    org.spongycastle.asn1.ASN1Set generateSignedAtt(java.lang.String,boolean,java.util.Map) -> a
    byte[] addOriginatorInfo(byte[],java.security.cert.X509Certificate[]) -> addOriginatorInfo
es.gob.afirma.envelopers.cms.CMSCompressedData -> es.gob.afirma.envelopers.cms.b:
    byte[] getContentCompressedData(byte[]) -> a
es.gob.afirma.envelopers.cms.CMSDecipherAuthenticatedData -> es.gob.afirma.envelopers.cms.c:
    javax.crypto.SecretKey cipherKey -> a
    es.gob.afirma.core.ciphers.CipherConstants$AOCipherAlgorithm macAlgorithmConfig -> b
    byte[] decipherAuthenticatedData(byte[],java.security.KeyStore$PrivateKeyEntry) -> a
    void assignKey(byte[],java.security.KeyStore$PrivateKeyEntry,org.spongycastle.asn1.x509.AlgorithmIdentifier) -> a
    javax.crypto.Cipher createCipher(java.lang.String) -> a
es.gob.afirma.envelopers.cms.CMSDecipherAuthenticatedEnvelopedData -> es.gob.afirma.envelopers.cms.CMSDecipherAuthenticatedEnvelopedData:
    byte[] dechiperAuthenticatedEnvelopedData(byte[],java.security.KeyStore$PrivateKeyEntry) -> dechiperAuthenticatedEnvelopedData
es.gob.afirma.envelopers.cms.CMSDecipherEncryptedData -> es.gob.afirma.envelopers.cms.d:
    javax.crypto.SecretKey cipherKey -> a
    es.gob.afirma.core.ciphers.AOCipherConfig config -> b
    byte[] dechiperEncryptedData(byte[],java.lang.String) -> a
    void assignKey(org.spongycastle.asn1.x509.AlgorithmIdentifier,java.lang.String) -> a
es.gob.afirma.envelopers.cms.CMSDecipherEnvelopData -> es.gob.afirma.envelopers.cms.CMSDecipherEnvelopData:
    byte[] dechiperEnvelopData(byte[],java.security.KeyStore$PrivateKeyEntry) -> dechiperEnvelopData
es.gob.afirma.envelopers.cms.CMSDecipherSignedAndEnvelopedData -> es.gob.afirma.envelopers.cms.CMSDecipherSignedAndEnvelopedData:
    byte[] cmsData -> a
    byte[][] encodedCerts -> b
    byte[] decipher(java.security.KeyStore$PrivateKeyEntry) -> decipher
    byte[][] getEncodedCerts() -> getEncodedCerts
es.gob.afirma.envelopers.cms.CMSEncryptedData -> es.gob.afirma.envelopers.cms.e:
    byte[] genEncryptedData(byte[],java.lang.String,es.gob.afirma.core.ciphers.AOCipherConfig,java.security.Key,java.lang.String,java.util.Map) -> a
es.gob.afirma.envelopers.cms.CMSEnvelopedData -> es.gob.afirma.envelopers.cms.CMSEnvelopedData:
    javax.crypto.SecretKey cipherKey -> a
    byte[] genEnvelopedData(es.gob.afirma.signers.pkcs7.P7ContentSignerParameters,java.security.cert.X509Certificate[],es.gob.afirma.core.ciphers.AOCipherConfig,java.security.cert.X509Certificate[],java.lang.String,java.util.Map,java.lang.Integer) -> a
    byte[] genEnvelopedData(byte[],java.lang.String,es.gob.afirma.core.ciphers.AOCipherConfig,java.security.cert.X509Certificate[],java.lang.String,java.util.Map,java.lang.Integer) -> a
    byte[] addOriginatorInfo(byte[],java.security.cert.X509Certificate[]) -> addOriginatorInfo
es.gob.afirma.envelopers.cms.CMSHelper -> es.gob.afirma.envelopers.cms.CMSHelper:
    boolean isCMSValid(byte[]) -> isCMSValid
    boolean isCMSValid(byte[],java.lang.String) -> isCMSValid
es.gob.afirma.envelopers.cms.CMSSignedAndEnvelopedData -> es.gob.afirma.envelopers.cms.f:
    org.spongycastle.asn1.ASN1Set signedAttr2 -> a
    byte[] genSignedAndEnvelopedData(es.gob.afirma.signers.pkcs7.P7ContentSignerParameters,java.security.cert.X509Certificate[],es.gob.afirma.core.ciphers.AOCipherConfig,java.security.cert.X509Certificate[],java.lang.String,java.security.KeyStore$PrivateKeyEntry,java.util.Map,java.util.Map,java.lang.Integer) -> a
    org.spongycastle.asn1.ASN1Set generateSignerInfo(java.security.cert.X509Certificate,java.lang.String,byte[],java.lang.String,java.util.Map) -> a
es.gob.afirma.envelopers.cms.CoSignerEnveloped -> es.gob.afirma.envelopers.cms.g:
    org.spongycastle.asn1.ASN1Set signedAttr2 -> a
    org.spongycastle.asn1.ASN1Set getCertificates(es.gob.afirma.signers.pkcs7.SignedAndEnvelopedData,java.security.cert.X509Certificate[]) -> a
    byte[] coSigner(es.gob.afirma.signers.pkcs7.P7ContentSignerParameters,java.security.cert.X509Certificate[],byte[],java.lang.String,java.security.KeyStore$PrivateKeyEntry,java.util.Map,java.util.Map,byte[]) -> a
    byte[] coSigner(java.lang.String,java.security.cert.X509Certificate[],byte[],java.lang.String,java.security.KeyStore$PrivateKeyEntry,java.util.Map,java.util.Map,byte[]) -> a
    org.spongycastle.asn1.ASN1Set generateSignerInfo(java.lang.String,byte[],java.lang.String,java.util.Map) -> a
    org.spongycastle.asn1.ASN1Set generateSignerInfoFromHash(java.security.cert.X509Certificate,byte[],java.lang.String,java.util.Map) -> a
    org.spongycastle.asn1.ASN1OctetString firma(java.lang.String,java.security.KeyStore$PrivateKeyEntry) -> a
es.gob.afirma.envelopers.cms.EncryptedKeyDatas -> es.gob.afirma.envelopers.cms.h:
    byte[] encryptedKey -> a
    org.spongycastle.asn1.x509.AlgorithmIdentifier algEncryptedKey -> b
    byte[] getEncryptedKey() -> a
    void setEncryptedKey(byte[]) -> a
    org.spongycastle.asn1.x509.AlgorithmIdentifier getAlgEncryptedKey() -> b
    void setAlgEncryptedKey(org.spongycastle.asn1.x509.AlgorithmIdentifier) -> a
es.gob.afirma.envelopers.cms.EvelopUtils -> es.gob.afirma.envelopers.cms.i:
    org.spongycastle.asn1.x509.AlgorithmIdentifier makeAlgId(java.lang.String) -> a
    org.spongycastle.asn1.ASN1Set createBerSetFromList(java.util.List) -> a
    org.spongycastle.asn1.ASN1Set getAttributeSet(org.spongycastle.asn1.cms.AttributeTable) -> a
    org.spongycastle.asn1.ASN1Set generateUnsignedInfo(java.util.Map) -> a
es.gob.afirma.envelopers.cms.Info -> es.gob.afirma.envelopers.cms.j:
    org.spongycastle.asn1.ASN1EncodableVector recipientInfos -> a
    org.spongycastle.asn1.cms.EncryptedContentInfo encInfo -> b
    org.spongycastle.asn1.ASN1EncodableVector getRecipientInfos() -> a
    void setRecipientInfos(org.spongycastle.asn1.ASN1EncodableVector) -> a
    org.spongycastle.asn1.cms.EncryptedContentInfo getEncInfo() -> b
    void setEncInfo(org.spongycastle.asn1.cms.EncryptedContentInfo) -> a
es.gob.afirma.envelopers.cms.KeyAsigned -> es.gob.afirma.envelopers.cms.k:
    javax.crypto.SecretKey cipherKey -> a
    es.gob.afirma.core.ciphers.AOCipherConfig config -> b
    javax.crypto.SecretKey getCipherKey() -> a
    void setCipherKey(javax.crypto.SecretKey) -> a
    es.gob.afirma.core.ciphers.AOCipherConfig getConfig() -> b
    void setConfig(es.gob.afirma.core.ciphers.AOCipherConfig) -> a
es.gob.afirma.envelopers.cms.Pkcs11WrapOperationException -> es.gob.afirma.envelopers.cms.Pkcs11WrapOperationException:
es.gob.afirma.envelopers.cms.Utils -> es.gob.afirma.envelopers.cms.l:
    byte[] SALT -> a
    byte[] IV_8 -> b
    byte[] IV_16 -> c
    java.util.logging.Logger LOGGER -> d
    javax.crypto.SecretKey initEnvelopedData(es.gob.afirma.core.ciphers.AOCipherConfig,java.lang.Integer) -> a
    javax.crypto.SecretKey assignKey(es.gob.afirma.core.ciphers.AOCipherConfig,java.lang.Integer) -> b
    org.spongycastle.asn1.ASN1Set fetchCertificatesList(java.security.cert.X509Certificate[]) -> a
    es.gob.afirma.envelopers.cms.Info initVariables(byte[],es.gob.afirma.core.ciphers.AOCipherConfig,java.security.cert.X509Certificate[],javax.crypto.SecretKey) -> a
    org.spongycastle.asn1.cms.EncryptedContentInfo getEncryptedContentInfo(byte[],es.gob.afirma.core.ciphers.AOCipherConfig,javax.crypto.SecretKey) -> a
    org.spongycastle.asn1.cms.EncryptedContentInfo getEncryptedContentInfo(byte[],java.security.Key,es.gob.afirma.core.ciphers.AOCipherConfig) -> a
    org.spongycastle.asn1.cms.EncryptedContentInfo getEncryptedContentInfo(byte[],es.gob.afirma.core.ciphers.AOCipherConfig,java.security.spec.AlgorithmParameterSpec,javax.crypto.Cipher) -> a
    javax.crypto.Cipher createCipher(java.lang.String) -> a
    java.security.spec.AlgorithmParameterSpec getParams(es.gob.afirma.core.ciphers.AOCipherConfig) -> a
    byte[] cipherKey(java.security.PublicKey,javax.crypto.SecretKey) -> a
    org.spongycastle.asn1.ASN1EncodableVector initContexExpecific(java.lang.String,byte[],java.lang.String,byte[]) -> a
    org.spongycastle.asn1.ASN1Set generateUnsignedAtt(java.util.Map) -> a
    byte[] genMac(java.lang.String,byte[],javax.crypto.SecretKey) -> a
    org.spongycastle.asn1.cms.OriginatorInfo checkCertificates(java.security.cert.X509Certificate[],org.spongycastle.asn1.ASN1Set) -> a
    es.gob.afirma.envelopers.cms.EncryptedKeyDatas fetchEncryptedKeyDatas(java.security.cert.X509Certificate,java.util.Enumeration) -> a
    org.spongycastle.asn1.ASN1Sequence fetchWrappedData(byte[]) -> a
    byte[] deCipherContent(byte[],es.gob.afirma.core.ciphers.AOCipherConfig,javax.crypto.SecretKey) -> b
    javax.crypto.SecretKey loadCipherKey(es.gob.afirma.core.ciphers.AOCipherConfig,java.lang.String) -> a
    es.gob.afirma.envelopers.cms.KeyAsigned assignKey(byte[],java.security.KeyStore$PrivateKeyEntry,org.spongycastle.asn1.x509.AlgorithmIdentifier) -> a
    org.spongycastle.asn1.ASN1Set generateSignerInfo(java.lang.String,byte[],java.lang.String,java.util.Map) -> a
    org.spongycastle.asn1.ASN1OctetString firma(java.lang.String,java.security.KeyStore$PrivateKeyEntry,org.spongycastle.asn1.ASN1Set) -> a
es.gob.afirma.envelopers.cms.ValidateCMS -> es.gob.afirma.envelopers.cms.m:
    boolean isCMSData(byte[]) -> a
    boolean isCMSSignedData(byte[]) -> b
    boolean verifySignerInfo(org.spongycastle.asn1.cms.SignerInfo) -> a
    boolean isCMSDigestedData(byte[]) -> c
    boolean isCMSEncryptedData(byte[]) -> d
    boolean isCMSEnvelopedData(byte[]) -> e
    boolean isCMSSignedAndEnvelopedData(byte[]) -> f
    boolean isCMSAuthenticatedData(byte[]) -> g
    boolean isCMSAuthenticatedEnvelopedData(byte[]) -> h
    boolean isCMSCompressedData(byte[]) -> i
es.gob.afirma.keystores.AOCertificatesNotFoundException -> es.gob.afirma.keystores.AOCertificatesNotFoundException:
es.gob.afirma.keystores.AOKeyStore -> es.gob.afirma.keystores.AOKeyStore:
    es.gob.afirma.keystores.AOKeyStore WINDOWS -> WINDOWS
    es.gob.afirma.keystores.AOKeyStore APPLE -> APPLE
    es.gob.afirma.keystores.AOKeyStore SHARED_NSS -> SHARED_NSS
    es.gob.afirma.keystores.AOKeyStore PKCS12 -> PKCS12
    es.gob.afirma.keystores.AOKeyStore JAVA -> JAVA
    es.gob.afirma.keystores.AOKeyStore PKCS11 -> PKCS11
    es.gob.afirma.keystores.AOKeyStore SINGLE -> SINGLE
    es.gob.afirma.keystores.AOKeyStore MOZ_UNI -> MOZ_UNI
    es.gob.afirma.keystores.AOKeyStore JCEKS -> JCEKS
    es.gob.afirma.keystores.AOKeyStore JAVACE -> JAVACE
    es.gob.afirma.keystores.AOKeyStore TEMD -> TEMD
    es.gob.afirma.keystores.AOKeyStore WINADDRESSBOOK -> WINADDRESSBOOK
    es.gob.afirma.keystores.AOKeyStore WINCA -> WINCA
    es.gob.afirma.keystores.AOKeyStore CERES -> CERES
    es.gob.afirma.keystores.AOKeyStore DNIEJAVA -> DNIEJAVA
    java.lang.String name -> a
    int ordinal -> b
    java.lang.String providerName -> c
    javax.security.auth.callback.PasswordCallback certificatePasswordCallback -> d
    javax.security.auth.callback.PasswordCallback storePasswordCallback -> e
    es.gob.afirma.keystores.AOKeyStore[] $VALUES -> f
    es.gob.afirma.keystores.AOKeyStore[] values() -> values
    es.gob.afirma.keystores.AOKeyStore valueOf(java.lang.String) -> valueOf
    java.lang.String toString() -> toString
    java.lang.String getProviderName() -> getProviderName
    int getOrdinal() -> getOrdinal
    java.lang.String getName() -> getName
    es.gob.afirma.keystores.AOKeyStore getKeyStore(java.lang.String) -> getKeyStore
    javax.security.auth.callback.PasswordCallback getCertificatePasswordCallback(java.lang.Object) -> getCertificatePasswordCallback
    javax.security.auth.callback.PasswordCallback getStorePasswordCallback(java.lang.Object) -> getStorePasswordCallback
es.gob.afirma.keystores.AOKeyStoreDialog -> es.gob.afirma.keystores.AOKeyStoreDialog:
    java.util.logging.Logger LOGGER -> a
    es.gob.afirma.core.keystores.KeyStoreManager ksm -> b
    java.lang.Object parentComponent -> c
    boolean checkPrivateKeys -> d
    boolean checkValidity -> e
    boolean showExpiredCertificates -> f
    java.util.List certFilters -> g
    boolean mandatoryCertificate -> h
    java.lang.String selectedAlias -> i
    boolean allowExternalStores -> j
    es.gob.afirma.core.keystores.NameCertificateBean[] getNameCertificates() -> getNameCertificates
    void setKeyStoreManager(es.gob.afirma.core.keystores.KeyStoreManager) -> setKeyStoreManager
    java.lang.Object getKeyEntry(java.lang.String) -> getKeyEntry
    java.lang.String show() -> show
    java.lang.String getSelectedAlias() -> getSelectedAlias
    void refresh() -> refresh
    void allowOpenExternalStores(boolean) -> allowOpenExternalStores
    boolean isExternalStoresOpeningAllowed() -> isExternalStoresOpeningAllowed
es.gob.afirma.keystores.AOKeyStoreManager -> es.gob.afirma.keystores.AOKeyStoreManager:
    java.lang.Object parentComponent -> a
    java.util.logging.Logger LOGGER -> LOGGER
    java.util.Set deactivatedCertificatesThumbprints -> b
    java.lang.String[] cachedAliases -> c
    boolean preferred -> d
    es.gob.afirma.keystores.AOKeyStore ksType -> e
    java.security.KeyStore ks -> f
    java.io.InputStream storeIs -> g
    javax.security.auth.callback.PasswordCallback storePasswordCallBack -> h
    javax.security.auth.callback.PasswordCallback entryPasswordCallBack -> i
    java.lang.Object[] storeParams -> j
    java.lang.Object getParentComponent() -> getParentComponent
    void setParentComponent(java.lang.Object) -> setParentComponent
    void resetCachedAliases() -> resetCachedAliases
    java.lang.String[] getCachedAliases() -> getCachedAliases
    void setCachedAliases(java.lang.String[]) -> setCachedAliases
    boolean isPreferred() -> isPreferred
    void setPreferred(boolean) -> a
    void setKeyStore(java.security.KeyStore) -> setKeyStore
    java.security.KeyStore getKeyStore() -> getKeyStore
    void refresh() -> refresh
    boolean lacksKeyStores() -> lacksKeyStores
    void setKeyStoreType(es.gob.afirma.keystores.AOKeyStore) -> setKeyStoreType
    es.gob.afirma.keystores.AOKeyStore getType() -> getType
    es.gob.afirma.keystores.AOKeyStore getType(java.lang.String) -> getType
    void setEntryPasswordCallBack(javax.security.auth.callback.PasswordCallback) -> setEntryPasswordCallBack
    javax.security.auth.callback.PasswordCallback getEntryPasswordCallBack() -> getEntryPasswordCallBack
    void init(es.gob.afirma.keystores.AOKeyStore,java.io.InputStream,javax.security.auth.callback.PasswordCallback,java.lang.Object[],boolean) -> init
    java.security.KeyStore$PrivateKeyEntry getKeyEntry(java.lang.String) -> getKeyEntry
    java.security.cert.X509Certificate getCertificate(java.lang.String) -> getCertificate
    java.security.cert.X509Certificate[] getCertificateChain(java.lang.String) -> getCertificateChain
    java.lang.String[] getAliases() -> getAliases
    java.lang.String toString() -> toString
    boolean isKeyEntry(java.lang.String) -> isKeyEntry
    java.lang.String[] cleanDeactivatedAliases(java.lang.String[]) -> cleanDeactivatedAliases
    void deactivateEntry(java.lang.String) -> deactivateEntry
es.gob.afirma.keystores.AOKeyStoreManager$1 -> es.gob.afirma.keystores.a:
    int[] $SwitchMap$es$gob$afirma$keystores$AOKeyStore -> a
es.gob.afirma.keystores.AOKeyStoreManagerException -> es.gob.afirma.keystores.AOKeyStoreManagerException:
es.gob.afirma.keystores.AOKeyStoreManagerFactory -> es.gob.afirma.keystores.AOKeyStoreManagerFactory:
    java.util.logging.Logger LOGGER -> a
    es.gob.afirma.keystores.AggregatedKeyStoreManager mozillaKeyStoreManager -> b
    es.gob.afirma.keystores.AggregatedKeyStoreManager getAOKeyStoreManager(es.gob.afirma.keystores.AOKeyStore,java.lang.String,java.lang.String,javax.security.auth.callback.PasswordCallback,java.lang.Object) -> getAOKeyStoreManager
    es.gob.afirma.keystores.AOKeyStoreManager addFileKeyStoreManager(es.gob.afirma.keystores.AOKeyStoreManager,java.lang.String[],java.lang.String,java.lang.String,javax.security.auth.callback.PasswordCallback,boolean,java.lang.Object) -> a
    es.gob.afirma.keystores.AOKeyStoreManager getPkcs12KeyStoreManager(java.lang.String,javax.security.auth.callback.PasswordCallback,boolean,java.lang.Object) -> a
    es.gob.afirma.keystores.AOKeyStoreManager getJavaKeyStoreManager(java.lang.String,javax.security.auth.callback.PasswordCallback,boolean,java.lang.Object) -> b
    es.gob.afirma.keystores.AOKeyStoreManager getCeresJavaKeyStoreManager(javax.security.auth.callback.PasswordCallback,boolean,java.lang.Object) -> a
    es.gob.afirma.keystores.AOKeyStoreManager getDnieJavaKeyStoreManager(javax.security.auth.callback.PasswordCallback,boolean,java.lang.Object) -> b
    es.gob.afirma.keystores.AOKeyStoreManager getFileKeyStoreManager(es.gob.afirma.keystores.AOKeyStore,java.lang.String,javax.security.auth.callback.PasswordCallback,boolean,java.lang.Object) -> a
    es.gob.afirma.keystores.AOKeyStoreManager getPkcs11KeyStoreManager(java.lang.String,java.lang.String,javax.security.auth.callback.PasswordCallback,boolean,java.lang.Object) -> a
    es.gob.afirma.keystores.AOKeyStoreManager getWindowsAddressBookKeyStoreManager(es.gob.afirma.keystores.AOKeyStore,boolean) -> a
    es.gob.afirma.keystores.AOKeyStoreManager getWindowsMyCapiKeyStoreManager(boolean) -> a
    es.gob.afirma.keystores.AggregatedKeyStoreManager getNssKeyStoreManager(java.lang.String,javax.security.auth.callback.PasswordCallback,boolean,java.lang.Object) -> c
    es.gob.afirma.keystores.AggregatedKeyStoreManager getSharedNssKeyStoreManager(javax.security.auth.callback.PasswordCallback,boolean,java.lang.Object) -> c
    es.gob.afirma.keystores.AggregatedKeyStoreManager getMozillaUnifiedKeyStoreManager(javax.security.auth.callback.PasswordCallback,boolean,java.lang.Object) -> d
    es.gob.afirma.keystores.AggregatedKeyStoreManager getMacOSXKeyStoreManager(es.gob.afirma.keystores.AOKeyStore,java.lang.String,boolean,java.lang.Object) -> a
    es.gob.afirma.keystores.AOKeyStore getAlternateKeyStoreType(es.gob.afirma.keystores.AOKeyStore) -> a
es.gob.afirma.keystores.AOKeyStoreManagerHelperCapiAddressBook -> es.gob.afirma.keystores.b:
    java.util.logging.Logger LOGGER -> a
    java.security.KeyStore initCAPIAddressBook(es.gob.afirma.keystores.AOKeyStore) -> a
es.gob.afirma.keystores.AOKeyStoreManagerHelperFullJava -> es.gob.afirma.keystores.c:
    java.util.logging.Logger LOGGER -> a
    java.security.KeyStore initCeresJava(java.lang.Object) -> a
    java.security.KeyStore initDnieJava(java.lang.Object) -> b
    java.security.KeyStore init(es.gob.afirma.keystores.AOKeyStore,java.security.KeyStore$LoadStoreParameter,java.lang.Object,java.lang.String) -> a
    java.security.KeyStore$LoadStoreParameter buildLoadStoreParameter(javax.security.auth.callback.CallbackHandler) -> a
es.gob.afirma.keystores.AOKeyStoreManagerHelperFullJava$1 -> es.gob.afirma.keystores.AOKeyStoreManagerHelperFullJava$1:
    javax.security.auth.callback.CallbackHandler val$callbackHandler -> a
    java.security.KeyStore$ProtectionParameter getProtectionParameter() -> getProtectionParameter
es.gob.afirma.keystores.AOKeyStoreManagerHelperJava -> es.gob.afirma.keystores.d:
    java.security.KeyStore initJava(java.io.InputStream,javax.security.auth.callback.PasswordCallback,es.gob.afirma.keystores.AOKeyStore) -> a
es.gob.afirma.keystores.AOKeyStoreManagerHelperPkcs11 -> es.gob.afirma.keystores.e:
    java.util.logging.Logger LOGGER -> a
    java.security.KeyStore initPKCS11(javax.security.auth.callback.PasswordCallback,java.lang.Object[],boolean) -> a
    java.security.KeyStore getKeyStoreWithNullPassword(java.security.Provider) -> a
    java.security.Provider getP11Provider(byte[]) -> a
    java.security.Provider getP11ProviderJava9(byte[]) -> b
    java.security.Provider getP11ProviderJava8(byte[]) -> c
es.gob.afirma.keystores.AOKeyStoreManagerHelperSingle -> es.gob.afirma.keystores.f:
    java.security.KeyStore initSingle(java.io.InputStream,javax.security.auth.callback.PasswordCallback) -> a
es.gob.afirma.keystores.AOKeystoreAlternativeException -> es.gob.afirma.keystores.AOKeystoreAlternativeException:
    es.gob.afirma.keystores.AOKeyStore alternativeKs -> a
    es.gob.afirma.keystores.AOKeyStore getAlternativeKsm() -> getAlternativeKsm
es.gob.afirma.keystores.AggregatedKeyStoreManager -> es.gob.afirma.keystores.AggregatedKeyStoreManager:
    java.util.List ksms -> a
    es.gob.afirma.keystores.AOKeyStore getType(java.lang.String) -> getType
    void addKeyStoreManager(es.gob.afirma.keystores.AOKeyStoreManager) -> addKeyStoreManager
    java.lang.String[] getAliases() -> getAliases
    java.security.cert.X509Certificate getCertificate(java.lang.String) -> getCertificate
    java.security.KeyStore$PrivateKeyEntry getKeyEntry(java.lang.String) -> getKeyEntry
    java.security.cert.X509Certificate[] getCertificateChain(java.lang.String) -> getCertificateChain
    void refresh() -> refresh
    boolean lacksKeyStores() -> lacksKeyStores
    boolean isKeyEntry(java.lang.String) -> isKeyEntry
    void removeAll() -> removeAll
es.gob.afirma.keystores.AppleKeyStoreManager -> es.gob.afirma.keystores.g:
    void init(es.gob.afirma.keystores.AOKeyStore,java.io.InputStream,javax.security.auth.callback.PasswordCallback,java.lang.Object[],boolean) -> init
    java.security.KeyStore$PrivateKeyEntry getKeyEntry(java.lang.String) -> getKeyEntry
    java.security.KeyStore initApple(java.io.InputStream) -> a
    void getAliasesWithoutDuplicates() -> a
es.gob.afirma.keystores.CAPIKeyStoreManager -> es.gob.afirma.keystores.CAPIKeyStoreManager:
    java.security.KeyStore capiKsMy -> a
    java.security.KeyStore$PrivateKeyEntry getKeyEntry(java.lang.String) -> getKeyEntry
    void init(es.gob.afirma.keystores.AOKeyStore,java.io.InputStream,javax.security.auth.callback.PasswordCallback,java.lang.Object[],boolean) -> init
    java.security.KeyStore initCapi() -> a
    java.security.cert.X509Certificate getCertificate(java.lang.String) -> getCertificate
    java.security.cert.X509Certificate[] getCertificateChain(java.lang.String) -> getCertificateChain
    java.lang.String[] getAliases() -> getAliases
    java.lang.String toString() -> toString
    void cleanCAPIDuplicateAliases(java.security.KeyStore) -> a
es.gob.afirma.keystores.FileKeyStoreManager -> es.gob.afirma.keystores.h:
    javax.security.auth.callback.PasswordCallback cachePasswordCallback -> a
    java.security.KeyStore init(java.io.InputStream,javax.security.auth.callback.PasswordCallback) -> init
    java.security.KeyStore$PrivateKeyEntry getKeyEntry(java.lang.String) -> getKeyEntry
es.gob.afirma.keystores.JavaKeyStoreManager -> es.gob.afirma.keystores.JavaKeyStoreManager:
    void init(es.gob.afirma.keystores.AOKeyStore,java.io.InputStream,javax.security.auth.callback.PasswordCallback,java.lang.Object[],boolean) -> init
    java.security.KeyStore$PrivateKeyEntry getKeyEntry(java.lang.String) -> getKeyEntry
es.gob.afirma.keystores.KeyStoreConfiguration -> es.gob.afirma.keystores.KeyStoreConfiguration:
    es.gob.afirma.keystores.AOKeyStore type -> a
    java.lang.String name -> b
    java.lang.String lib -> c
    es.gob.afirma.keystores.AOKeyStore getType() -> getType
    java.lang.String getLib() -> getLib
    java.lang.String toString() -> toString
es.gob.afirma.keystores.KeyStoreMessages -> es.gob.afirma.keystores.i:
    java.util.ResourceBundle RESOURCE_BUNDLE -> a
    java.lang.String getString(java.lang.String) -> a
es.gob.afirma.keystores.KeyStoreUtilities -> es.gob.afirma.keystores.KeyStoreUtilities:
    java.util.logging.Logger LOGGER -> a
    java.lang.String[] FNMT_PKCS11_LIBS_WITHOUT_SHA1 -> b
    java.lang.String createPKCS11ConfigFile(java.lang.String,java.lang.String,java.lang.Integer) -> a
    java.util.Map getAliasesByFriendlyName(java.lang.String[],es.gob.afirma.core.keystores.KeyStoreManager,boolean,boolean,java.util.List) -> getAliasesByFriendlyName
    java.lang.String getShort(java.lang.String) -> getShort
    boolean addPreferredKeyStoreManagers(es.gob.afirma.keystores.AggregatedKeyStoreManager,java.lang.Object) -> addPreferredKeyStoreManagers
    es.gob.afirma.keystores.AOKeyStoreManager getDnieKeyStoreManager(java.lang.Object) -> a
    es.gob.afirma.keystores.AOKeyStoreManager getCeresKeyStoreManager(java.lang.Object) -> b
    java.security.KeyStore getKeyStoreWithPasswordCallbackHandler(es.gob.afirma.keystores.AOKeyStore,javax.security.auth.callback.PasswordCallback,java.security.Provider,java.lang.Object) -> getKeyStoreWithPasswordCallbackHandler
    java.lang.String searchPathForFile(java.lang.String[]) -> searchPathForFile
es.gob.afirma.keystores.KeyStoreUtilities$1 -> es.gob.afirma.keystores.j:
    javax.security.auth.callback.PasswordCallback val$pssCallBack -> a
    java.lang.Object val$parentComponent -> b
    void handle(javax.security.auth.callback.Callback[]) -> handle
es.gob.afirma.keystores.MissingSunMSCAPIException -> es.gob.afirma.keystores.MissingSunMSCAPIException:
es.gob.afirma.keystores.Pkcs12KeyStoreManager -> es.gob.afirma.keystores.Pkcs12KeyStoreManager:
    void init(es.gob.afirma.keystores.AOKeyStore,java.io.InputStream,javax.security.auth.callback.PasswordCallback,java.lang.Object[],boolean) -> init
    java.security.KeyStore$PrivateKeyEntry getKeyEntry(java.lang.String) -> getKeyEntry
es.gob.afirma.keystores.SmartCardException -> es.gob.afirma.keystores.SmartCardException:
es.gob.afirma.keystores.SmartCardLockedException -> es.gob.afirma.keystores.SmartCardLockedException:
es.gob.afirma.keystores.callbacks.CachePasswordCallback -> es.gob.afirma.keystores.callbacks.CachePasswordCallback:
    java.lang.String toString() -> toString
es.gob.afirma.keystores.callbacks.FirstEmptyThenPinUiPasswordCallback -> es.gob.afirma.keystores.callbacks.FirstEmptyThenPinUiPasswordCallback:
    boolean isFirstTime -> a
    es.gob.afirma.keystores.callbacks.UIPasswordCallback uiPasswordCallback -> b
    void setParent(java.lang.Object) -> setParent
    char[] getPassword() -> getPassword
es.gob.afirma.keystores.callbacks.NullPasswordCallback -> es.gob.afirma.keystores.callbacks.NullPasswordCallback:
    es.gob.afirma.keystores.callbacks.NullPasswordCallback INSTANCE -> a
    char[] getPassword() -> getPassword
    es.gob.afirma.keystores.callbacks.NullPasswordCallback getInstance() -> getInstance
es.gob.afirma.keystores.callbacks.UIPasswordCallback -> es.gob.afirma.keystores.callbacks.UIPasswordCallback:
    java.lang.Object parent -> a
    void setParent(java.lang.Object) -> setParent
    char[] getPassword() -> getPassword
es.gob.afirma.keystores.capiaddressbook.MSCAPIAddressBook -> es.gob.afirma.keystores.capiaddressbook.MSCAPIAddressBook:
es.gob.afirma.keystores.filters.AuthCertificateFilter -> es.gob.afirma.keystores.filters.AuthCertificateFilter:
    es.gob.afirma.keystores.filters.SignatureDNIeFilter signatureDnieCertFilter -> a
    boolean matches(java.security.cert.X509Certificate) -> matches
es.gob.afirma.keystores.filters.AuthenticationDNIeFilter -> es.gob.afirma.keystores.filters.AuthenticationDNIeFilter:
    es.gob.afirma.keystores.filters.rfc.RFC2254CertificateFilter rfc2254Filter -> a
    es.gob.afirma.keystores.filters.rfc.KeyUsageFilter keyUsageFilter -> b
    java.lang.Boolean[] AUTHENTICATION_CERT_USAGE -> c
    boolean matches(java.security.cert.X509Certificate) -> matches
es.gob.afirma.keystores.filters.CertFilterManager -> es.gob.afirma.keystores.filters.CertFilterManager:
    java.lang.String[] PATTERN_KEYUSAGES_FILTER -> a
    java.util.logging.Logger LOGGER -> b
    boolean mandatoryCertificate -> c
    java.util.List filters -> d
    boolean allowExternalStores -> e
    boolean isExternalStoresOpeningAllowed() -> isExternalStoresOpeningAllowed
    java.util.List getFilterValues(java.util.Properties) -> a
    es.gob.afirma.keystores.filters.CertificateFilter parseFilter(java.lang.String) -> a
    java.lang.Boolean[] generateKeyUsageFiltersPattern(java.lang.String[],int) -> a
    void processKeyUsageFilterDeclaration(java.lang.String,java.lang.Boolean[]) -> a
    java.util.List getFilters() -> getFilters
    boolean isMandatoryCertificate() -> isMandatoryCertificate
es.gob.afirma.keystores.filters.CertificateFilter -> es.gob.afirma.keystores.filters.CertificateFilter:
    boolean matches(java.security.cert.X509Certificate) -> matches
    java.lang.String[] matches(java.lang.String[],es.gob.afirma.core.keystores.KeyStoreManager) -> matches
es.gob.afirma.keystores.filters.ExpiredCertificateFilter -> es.gob.afirma.keystores.filters.ExpiredCertificateFilter:
    boolean matches(java.security.cert.X509Certificate) -> matches
es.gob.afirma.keystores.filters.FilterUtils -> es.gob.afirma.keystores.filters.a:
    java.lang.String[] SUBJECT_SN_RDN -> a
    java.lang.String getSubjectSN(java.security.cert.X509Certificate) -> a
    java.lang.String bigIntegerToHex(java.math.BigInteger) -> a
es.gob.afirma.keystores.filters.KeyUsagesPattern -> es.gob.afirma.keystores.filters.KeyUsagesPattern:
    java.lang.Boolean[] DEFAULT_SIGNATURE_KEYUSAGES -> a
    java.util.Map SIGNATURE_KEYUSAGES -> b
    java.security.Principal issuer -> c
    java.lang.Boolean[] getSignaturePattern() -> getSignaturePattern
es.gob.afirma.keystores.filters.MultipleCertificateFilter -> es.gob.afirma.keystores.filters.MultipleCertificateFilter:
    es.gob.afirma.keystores.filters.CertificateFilter[] filters -> a
    boolean matches(java.security.cert.X509Certificate) -> matches
    java.lang.String[] matches(java.lang.String[],es.gob.afirma.core.keystores.KeyStoreManager) -> matches
es.gob.afirma.keystores.filters.PolicyIdFilter -> es.gob.afirma.keystores.filters.PolicyIdFilter:
    java.util.logging.Logger LOGGER -> b
    java.util.List allowedOids -> a
    boolean matches(java.security.cert.X509Certificate) -> matches
    java.util.List getCertificatePolicyIds(java.security.cert.X509Certificate) -> a
es.gob.afirma.keystores.filters.PseudonymFilter -> es.gob.afirma.keystores.filters.PseudonymFilter:
    es.gob.afirma.keystores.filters.CertificateFilter PSEUDONYM_POLICY_FILTER -> a
    boolean matches(java.security.cert.X509Certificate) -> matches
    java.lang.String[] matches(java.lang.String[],es.gob.afirma.core.keystores.KeyStoreManager) -> matches
    boolean isPseudonymFor(java.security.cert.X509Certificate,java.security.cert.X509Certificate) -> a
    boolean compareArrays(boolean[],boolean[]) -> a
es.gob.afirma.keystores.filters.QualifiedCertificatesFilter -> es.gob.afirma.keystores.filters.QualifiedCertificatesFilter:
    java.lang.String serialNumber -> a
    boolean matches(java.security.cert.X509Certificate) -> matches
    java.lang.String[] matches(java.lang.String[],es.gob.afirma.core.keystores.KeyStoreManager) -> matches
    java.lang.String searchQualifiedSignatureCertificate(java.security.cert.X509Certificate,es.gob.afirma.core.keystores.KeyStoreManager,java.lang.String[]) -> a
    boolean isSignatureCert(java.security.cert.X509Certificate) -> a
    boolean checkKeyUsages(boolean[],java.lang.Boolean[]) -> a
    java.lang.String getExpiredDate(java.security.cert.X509Certificate) -> b
    java.lang.String getCertificateSN(java.security.cert.X509Certificate) -> c
    java.lang.String prepareSerialNumber(java.lang.String) -> a
es.gob.afirma.keystores.filters.SSLFilter -> es.gob.afirma.keystores.filters.SSLFilter:
    java.lang.String serialNumber -> a
    es.gob.afirma.keystores.filters.AuthenticationDNIeFilter authenticationDnieCertFilter -> b
    es.gob.afirma.keystores.filters.SignatureDNIeFilter signatureDnieCertFilter -> c
    boolean matches(java.security.cert.X509Certificate) -> matches
    java.lang.String[] matches(java.lang.String[],es.gob.afirma.core.keystores.KeyStoreManager) -> matches
    boolean isAuthenticationDnieCert(java.security.cert.X509Certificate) -> a
    boolean isSignatureDnieCert(java.security.cert.X509Certificate) -> b
    java.lang.String getAssociatedCertAlias(es.gob.afirma.core.keystores.KeyStoreManager,java.security.cert.X509Certificate,java.lang.String[],int) -> a
    java.lang.String getExpiredDate(java.security.cert.X509Certificate) -> c
    java.lang.String getCertificateSN(java.security.cert.X509Certificate) -> d
    java.lang.String prepareSerialNumber(java.lang.String) -> a
es.gob.afirma.keystores.filters.SignatureDNIeFilter -> es.gob.afirma.keystores.filters.SignatureDNIeFilter:
    es.gob.afirma.keystores.filters.rfc.RFC2254CertificateFilter rfc2254Filter -> a
    es.gob.afirma.keystores.filters.rfc.KeyUsageFilter keyUsageFilter -> b
    boolean matches(java.security.cert.X509Certificate) -> matches
es.gob.afirma.keystores.filters.SigningCertificateFilter -> es.gob.afirma.keystores.filters.SigningCertificateFilter:
    es.gob.afirma.keystores.filters.AuthenticationDNIeFilter authenticationDnieCertFilter -> a
    boolean matches(java.security.cert.X509Certificate) -> matches
es.gob.afirma.keystores.filters.TextContainedCertificateFilter -> es.gob.afirma.keystores.filters.TextContainedCertificateFilter:
    java.lang.String[] subjectTexts -> a
    java.lang.String[] issuerTexts -> b
    boolean matches(java.security.cert.X509Certificate) -> matches
es.gob.afirma.keystores.filters.ThumbPrintCertificateFilter -> es.gob.afirma.keystores.filters.ThumbPrintCertificateFilter:
    java.lang.String digestAlgorithm -> a
    java.lang.String thumbprint -> b
    java.util.logging.Logger LOGGER -> c
    boolean matches(java.security.cert.X509Certificate) -> matches
es.gob.afirma.keystores.filters.rfc.AttrFilter -> es.gob.afirma.keystores.filters.rfc.a:
    boolean check(javax.naming.directory.Attributes) -> a
es.gob.afirma.keystores.filters.rfc.KeyUsageFilter -> es.gob.afirma.keystores.filters.rfc.KeyUsageFilter:
    java.lang.Boolean[] keyUsageFilter -> a
    java.lang.Boolean[] SIGN_CERT_USAGE -> SIGN_CERT_USAGE
    boolean matches(java.security.cert.X509Certificate) -> matches
es.gob.afirma.keystores.filters.rfc.QCStatements -> es.gob.afirma.keystores.filters.rfc.b:
    java.util.List qCStatements -> a
    es.gob.afirma.keystores.filters.rfc.QCStatements getInstance(java.lang.Object) -> a
    java.util.List getQCStatement() -> a
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
es.gob.afirma.keystores.filters.rfc.RFC2254CertificateFilter -> es.gob.afirma.keystores.filters.rfc.RFC2254CertificateFilter:
    java.util.logging.Logger LOGGER -> a
    java.lang.String rfc2254IssuerFilter -> b
    java.lang.String rfc2254SubjectFilter -> c
    boolean recurseIssuers -> d
    java.lang.String[] matches(java.lang.String[],es.gob.afirma.core.keystores.KeyStoreManager) -> matches
    boolean matches(java.security.cert.X509Certificate) -> matches
    boolean matchesIssuersRecursivelly(java.security.cert.X509Certificate[]) -> a
    boolean filterSubjectByRFC2254(java.lang.String,java.security.cert.X509Certificate) -> a
    boolean filterIssuerByRFC2254(java.lang.String,java.security.cert.X509Certificate) -> b
    boolean filterRFC2254(java.lang.String,java.lang.String) -> a
    boolean filterRFC2254(java.lang.String,javax.naming.ldap.LdapName) -> a
es.gob.afirma.keystores.filters.rfc.SearchFilter -> es.gob.afirma.keystores.filters.rfc.c:
    java.lang.String filter -> a
    int pos -> b
    es.gob.afirma.keystores.filters.rfc.SearchFilter$StringFilter rootFilter -> c
    boolean check(javax.naming.directory.Attributes) -> a
    void normalizeFilter() -> a
    void skipWhiteSpace() -> b
    es.gob.afirma.keystores.filters.rfc.SearchFilter$StringFilter createNextFilter() -> c
    char getCurrentChar() -> d
    char relCharAt(int) -> a
    void consumeChar() -> e
    void consumeChars(int) -> b
    int relIndexOf(int) -> c
    java.lang.String relSubstring(int,int) -> a
es.gob.afirma.keystores.filters.rfc.SearchFilter$AtomicFilter -> es.gob.afirma.keystores.filters.rfc.d:
    java.lang.String attrID -> b
    java.lang.String value -> c
    int matchType -> d
    es.gob.afirma.keystores.filters.rfc.SearchFilter this$0 -> a
    void parse() -> a
    boolean check(javax.naming.directory.Attributes) -> a
    boolean substringMatch(java.lang.String,java.lang.String) -> a
es.gob.afirma.keystores.filters.rfc.SearchFilter$CompoundFilter -> es.gob.afirma.keystores.filters.rfc.e:
    java.util.Vector subFilters -> b
    boolean polarity -> c
    es.gob.afirma.keystores.filters.rfc.SearchFilter this$0 -> a
    void parse() -> a
    boolean check(javax.naming.directory.Attributes) -> a
es.gob.afirma.keystores.filters.rfc.SearchFilter$NotFilter -> es.gob.afirma.keystores.filters.rfc.f:
    es.gob.afirma.keystores.filters.rfc.SearchFilter$StringFilter fltr -> b
    es.gob.afirma.keystores.filters.rfc.SearchFilter this$0 -> a
    void parse() -> a
    boolean check(javax.naming.directory.Attributes) -> a
es.gob.afirma.keystores.filters.rfc.SearchFilter$StringFilter -> es.gob.afirma.keystores.filters.rfc.g:
    void parse() -> a
es.gob.afirma.keystores.filters.rfc.SerialNumberFilter -> es.gob.afirma.keystores.filters.rfc.SerialNumberFilter:
    java.math.BigInteger serialNumber -> a
    boolean matches(java.security.cert.X509Certificate) -> matches
es.gob.afirma.keystores.filters.rfc.SscdFilter -> es.gob.afirma.keystores.filters.rfc.SscdFilter:
    org.spongycastle.asn1.ASN1ObjectIdentifier QC_SSCD_OID -> a
    boolean matches(java.security.cert.X509Certificate) -> matches
es.gob.afirma.keystores.mozilla.AOSecMod -> es.gob.afirma.keystores.mozilla.AOSecMod:
    java.util.List modules -> a
    java.lang.String cleanModuleName(java.lang.String) -> b
    es.gob.afirma.keystores.mozilla.AOSecMod$ModuleName processNames(byte[],int) -> a
    boolean isUnixLib(java.lang.String) -> c
    boolean isWindowsLib(java.lang.String) -> d
    java.util.List getModules(java.lang.String) -> a
    int getShort(byte[],int) -> b
es.gob.afirma.keystores.mozilla.AOSecMod$ModuleName -> es.gob.afirma.keystores.mozilla.AOSecMod$ModuleName:
    java.lang.String lib -> a
    java.lang.String description -> b
    java.lang.String getLib() -> a
    java.lang.String getDescription() -> b
    java.lang.String toString() -> toString
es.gob.afirma.keystores.mozilla.BundledNssHelper -> es.gob.afirma.keystores.mozilla.a:
    java.lang.String AFIRMA_NSS_HOME -> a
    java.lang.String getBundledNssDirectory() -> a
    java.lang.String getNssZipResourceName() -> b
    java.io.File getNssDirFile() -> c
    void uncompressZip(java.lang.String,java.io.File) -> a
es.gob.afirma.keystores.mozilla.FirefoxKeyStoreMessages -> es.gob.afirma.keystores.mozilla.b:
    java.util.ResourceBundle RESOURCE_BUNDLE -> a
    java.lang.String getString(java.lang.String) -> a
es.gob.afirma.keystores.mozilla.MozillaKeyStoreUtilities -> es.gob.afirma.keystores.mozilla.MozillaKeyStoreUtilities:
    java.lang.String[] DNI_P11_NAMES -> a
    java.util.logging.Logger LOGGER -> b
    java.lang.String nssLibDir -> c
    java.lang.String createPKCS11NSSConfigFile(java.lang.String,java.lang.String) -> a
    java.lang.String getNssPathFromCompatibilityFile() -> a
    java.lang.String getSystemNSSLibDir() -> getSystemNSSLibDir
    java.util.Map getMozillaPKCS11Modules(boolean,boolean) -> a
    java.util.Map getPkcs11ModulesFromModuleNames(java.util.List,boolean,boolean) -> getPkcs11ModulesFromModuleNames
    void loadNSSDependencies(java.lang.String) -> a
    java.lang.String[] getSoftkn3Dependencies(java.lang.String) -> b
    java.lang.String getProfilesIniPath() -> b
    java.lang.String getMozillaUserProfileDirectory() -> getMozillaUserProfileDirectory
    java.lang.String getMozillaUserProfileDirectoryWindows(java.lang.String) -> getMozillaUserProfileDirectoryWindows
    java.security.Provider loadNssJava9(java.lang.String,java.lang.String) -> b
    java.security.Provider loadNssJava8(java.lang.String,java.lang.String) -> c
    java.security.Provider loadNSS(boolean) -> a
    boolean isDniePkcs11Library(java.lang.String) -> c
    java.lang.String getWindowsSystemDirWithFinalSlash() -> c
    boolean isModuleIncluded(java.util.Map,java.lang.String) -> a
    java.util.Map purgeStoresTable(java.util.Map) -> a
es.gob.afirma.keystores.mozilla.MozillaKeyStoreUtilities$KnownModule -> es.gob.afirma.keystores.mozilla.c:
    es.gob.afirma.keystores.mozilla.MozillaKeyStoreUtilities$KnownModule ATOS_CARDOS -> a
    es.gob.afirma.keystores.mozilla.MozillaKeyStoreUtilities$KnownModule FNMT_64 -> b
    es.gob.afirma.keystores.mozilla.MozillaKeyStoreUtilities$KnownModule FNMT_32 -> c
    java.lang.String description -> d
    java.lang.String lib -> e
    boolean forcedLoad -> f
    es.gob.afirma.keystores.mozilla.MozillaKeyStoreUtilities$KnownModule[] $VALUES -> g
    es.gob.afirma.keystores.mozilla.MozillaKeyStoreUtilities$KnownModule[] values() -> values
    es.gob.afirma.keystores.mozilla.MozillaKeyStoreUtilities$KnownModule valueOf(java.lang.String) -> valueOf
    java.lang.String getDescription() -> a
    java.lang.String getLib() -> b
    boolean isForcedLoad() -> c
es.gob.afirma.keystores.mozilla.MozillaKeyStoreUtilitiesOsX -> es.gob.afirma.keystores.mozilla.MozillaKeyStoreUtilitiesOsX:
    java.util.logging.Logger LOGGER -> a
    void configureMacNSS(java.lang.String) -> configureMacNSS
    javax.script.ScriptEngine getAppleScriptEngine() -> getAppleScriptEngine
    java.lang.String getSystemNSSLibDirMacOsX() -> a
es.gob.afirma.keystores.mozilla.MozillaKeyStoreUtilitiesUnix -> es.gob.afirma.keystores.mozilla.d:
    java.util.logging.Logger LOGGER -> a
    java.lang.String[] NSS_PATHS -> b
    java.lang.String[] SQLITE_LIBS -> c
    java.lang.String getNSSLibDirUnix() -> a
    java.lang.String searchLastFirefoxVersion(java.lang.String) -> a
es.gob.afirma.keystores.mozilla.MozillaKeyStoreUtilitiesUnix$1 -> es.gob.afirma.keystores.mozilla.e:
    int compare(java.lang.String,java.lang.String) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
es.gob.afirma.keystores.mozilla.MozillaKeyStoreUtilitiesWindows -> es.gob.afirma.keystores.mozilla.f:
    java.util.logging.Logger LOGGER -> a
    java.lang.String appData -> b
    java.lang.String getShort(java.lang.String) -> a
    java.lang.String cleanMozillaUserProfileDirectoryWindows(java.lang.String) -> b
    java.lang.String getSystemNSSLibDirWindows() -> a
    java.lang.String[] getSoftkn3DependenciesWindows(java.lang.String) -> c
    java.lang.String getWindowsAppDataDir() -> b
    void copyFile(java.lang.String[],java.lang.String,java.lang.String) -> a
es.gob.afirma.keystores.mozilla.MozillaUnifiedKeyStoreManager -> es.gob.afirma.keystores.mozilla.MozillaUnifiedKeyStoreManager:
    java.lang.String INCLUDE_NATIVE_DNIE_P11 -> INCLUDE_NATIVE_DNIE_P11
    javax.security.auth.callback.PasswordCallback passwordCallback -> a
    java.lang.Object[] configParams -> b
    boolean initialized -> c
    boolean preferredKsAdded -> d
    java.util.Map getExternalStores() -> getExternalStores
    java.util.Map getExternalStores(boolean) -> getExternalStores
    es.gob.afirma.keystores.AOKeyStoreManager getNssKeyStoreManager() -> getNssKeyStoreManager
    void init(es.gob.afirma.keystores.AOKeyStore,java.io.InputStream,javax.security.auth.callback.PasswordCallback,java.lang.Object[],boolean) -> init
    void internalInitStore(es.gob.afirma.keystores.AOKeyStoreManager,java.lang.String,java.lang.Object,boolean,java.lang.String) -> a
    void refresh() -> refresh
es.gob.afirma.keystores.mozilla.NSPreferences -> es.gob.afirma.keystores.mozilla.g:
    java.lang.String getFireFoxUserProfileDirectory(java.io.File) -> a
    es.gob.afirma.keystores.mozilla.NSPreferences$FirefoxProfile[] readProfiles(java.io.File) -> b
    boolean isProfileLocked(es.gob.afirma.keystores.mozilla.NSPreferences$FirefoxProfile) -> a
es.gob.afirma.keystores.mozilla.NSPreferences$FirefoxProfile -> es.gob.afirma.keystores.mozilla.h:
    java.lang.String name -> a
    boolean relative -> b
    java.lang.String path -> c
    java.lang.String absolutePath -> d
    boolean def -> e
    java.lang.String getName() -> a
    void setName(java.lang.String) -> a
    boolean isRelative() -> b
    void setRelative(boolean) -> a
    java.lang.String getPath() -> c
    void setPath(java.lang.String) -> b
    java.lang.String getAbsolutePath() -> d
    void setAbsolutePath(java.lang.String) -> c
    boolean isDefault() -> e
    void setDefault(boolean) -> b
es.gob.afirma.keystores.mozilla.NssKeyStoreManager -> es.gob.afirma.keystores.mozilla.NssKeyStoreManager:
    java.security.Provider nssProvider -> a
    boolean useSharedNss -> b
    java.lang.Object parentComponent -> c
    void init(es.gob.afirma.keystores.AOKeyStore,java.io.InputStream,javax.security.auth.callback.PasswordCallback,java.lang.Object[],boolean) -> init
    java.security.Provider getNssProvider(boolean) -> b
es.gob.afirma.keystores.mozilla.bintutil.AOBinUtil -> es.gob.afirma.keystores.mozilla.bintutil.a:
    int getDWord(byte[],int) -> a
    int getU2(byte[],int) -> b
    int getInt(byte[],int) -> c
es.gob.afirma.keystores.mozilla.bintutil.MsPortableExecutable -> es.gob.afirma.keystores.mozilla.bintutil.MsPortableExecutable:
    java.lang.String description -> a
    es.gob.afirma.keystores.mozilla.bintutil.PeMachineType machine -> b
    es.gob.afirma.keystores.mozilla.bintutil.PeMachineType getPeMachineType() -> getPeMachineType
    java.lang.String toString() -> toString
es.gob.afirma.keystores.mozilla.bintutil.PEParserException -> es.gob.afirma.keystores.mozilla.bintutil.PEParserException:
es.gob.afirma.keystores.mozilla.bintutil.PeMachineType -> es.gob.afirma.keystores.mozilla.bintutil.PeMachineType:
    es.gob.afirma.keystores.mozilla.bintutil.PeMachineType UNKNOWN -> UNKNOWN
    es.gob.afirma.keystores.mozilla.bintutil.PeMachineType MATSUSHITA_AM33 -> MATSUSHITA_AM33
    es.gob.afirma.keystores.mozilla.bintutil.PeMachineType X64 -> X64
    es.gob.afirma.keystores.mozilla.bintutil.PeMachineType ARM_LITTLE_ENDIAN -> ARM_LITTLE_ENDIAN
    es.gob.afirma.keystores.mozilla.bintutil.PeMachineType EFI_BYTECODE -> EFI_BYTECODE
    es.gob.afirma.keystores.mozilla.bintutil.PeMachineType INTEL_386 -> INTEL_386
    es.gob.afirma.keystores.mozilla.bintutil.PeMachineType INTEL_ITANIUM -> INTEL_ITANIUM
    es.gob.afirma.keystores.mozilla.bintutil.PeMachineType MITSUBISHI_M32R_LITTLE_ENDIAN -> MITSUBISHI_M32R_LITTLE_ENDIAN
    es.gob.afirma.keystores.mozilla.bintutil.PeMachineType MIPS16 -> MIPS16
    es.gob.afirma.keystores.mozilla.bintutil.PeMachineType MIPS_FPU -> MIPS_FPU
    java.lang.String description -> a
    java.util.Hashtable machineTypes -> b
    es.gob.afirma.keystores.mozilla.bintutil.PeMachineType[] $VALUES -> c
    es.gob.afirma.keystores.mozilla.bintutil.PeMachineType[] values() -> values
    es.gob.afirma.keystores.mozilla.bintutil.PeMachineType valueOf(java.lang.String) -> valueOf
    java.lang.String toString() -> toString
    es.gob.afirma.keystores.mozilla.bintutil.PeMachineType getPeMachineType(java.lang.String) -> a
es.gob.afirma.keystores.mozilla.shared.Pkcs11Txt -> es.gob.afirma.keystores.mozilla.shared.a:
    java.util.List getModules() -> a
    java.util.List getModules(java.io.File) -> a
    java.util.List getModules(java.io.Reader) -> a
es.gob.afirma.keystores.mozilla.shared.SharedNssKeyStoreManager -> es.gob.afirma.keystores.mozilla.shared.SharedNssKeyStoreManager:
    java.util.Map getExternalStores() -> getExternalStores
    es.gob.afirma.keystores.AOKeyStoreManager getNssKeyStoreManager() -> getNssKeyStoreManager
es.gob.afirma.keystores.mozilla.shared.SharedNssUtil -> es.gob.afirma.keystores.mozilla.shared.SharedNssUtil:
    java.lang.String NSSDB_PATH_UNIX_USER -> a
    java.util.logging.Logger LOGGER -> b
    java.lang.String getSharedUserProfileDirectory() -> getSharedUserProfileDirectory
    java.util.Map getSharedNssPKCS11Modules(boolean,boolean) -> a
es.gob.afirma.keystores.mozilla.shared.SharedNssUtil$1 -> es.gob.afirma.keystores.mozilla.shared.b:
    boolean accept(java.io.File) -> accept
es.gob.afirma.keystores.single.SingleCertKeyStore -> es.gob.afirma.keystores.single.SingleCertKeyStore:
    java.util.logging.Logger LOGGER -> a
    java.util.Map certificates -> b
    java.security.cert.CertificateFactory cf -> c
    java.util.Enumeration engineAliases() -> engineAliases
    boolean engineContainsAlias(java.lang.String) -> engineContainsAlias
    void engineDeleteEntry(java.lang.String) -> engineDeleteEntry
    java.security.cert.Certificate engineGetCertificate(java.lang.String) -> engineGetCertificate
    java.lang.String engineGetCertificateAlias(java.security.cert.Certificate) -> engineGetCertificateAlias
    java.security.cert.Certificate[] engineGetCertificateChain(java.lang.String) -> engineGetCertificateChain
    java.util.Date engineGetCreationDate(java.lang.String) -> engineGetCreationDate
    java.security.Key engineGetKey(java.lang.String,char[]) -> engineGetKey
    boolean engineIsCertificateEntry(java.lang.String) -> engineIsCertificateEntry
    boolean engineIsKeyEntry(java.lang.String) -> engineIsKeyEntry
    void engineLoad(java.io.InputStream,char[]) -> engineLoad
    void engineSetCertificateEntry(java.lang.String,java.security.cert.Certificate) -> engineSetCertificateEntry
    void engineSetKeyEntry(java.lang.String,byte[],java.security.cert.Certificate[]) -> engineSetKeyEntry
    void engineSetKeyEntry(java.lang.String,java.security.Key,char[],java.security.cert.Certificate[]) -> engineSetKeyEntry
    int engineSize() -> engineSize
    void engineStore(java.io.OutputStream,char[]) -> engineStore
    void getCertificatesFromStream(byte[]) -> a
    void addCertificate(java.lang.String,java.lang.String) -> a
es.gob.afirma.keystores.single.SingleCertKeyStoreProvider -> es.gob.afirma.keystores.single.SingleCertKeyStoreProvider:
es.gob.afirma.keystores.single.SingleCertKeyStoreProvider$1 -> es.gob.afirma.keystores.single.SingleCertKeyStoreProvider$1:
    es.gob.afirma.keystores.single.SingleCertKeyStoreProvider this$0 -> a
    java.lang.Object run() -> run
es.gob.afirma.massive.DefaultLogHandler -> es.gob.afirma.massive.a:
    java.io.OutputStream os -> a
    void addLog(int,java.lang.String,java.lang.String,java.lang.String) -> addLog
    void close(java.util.Properties) -> close
    java.lang.String getLevel(int) -> a
es.gob.afirma.massive.DirectorySignatureHelper -> es.gob.afirma.massive.DirectorySignatureHelper:
    java.util.logging.Logger LOGGER -> a
    java.security.MessageDigest md -> b
    java.lang.String algorithm -> c
    java.lang.String format -> d
    java.lang.String mode -> e
    es.gob.afirma.core.signers.AOSigner defaultSigner -> f
    java.io.FileFilter fileFilter -> g
    java.lang.String outputDir -> h
    boolean overwriteFiles -> i
    es.gob.afirma.massive.LogHandler logHandler -> j
    int errorCount -> k
    int warnCount -> l
    java.lang.String inDir -> m
    java.util.List signedFilenames -> n
    boolean activeLog -> o
    java.lang.String logPath -> p
    boolean massiveSign(es.gob.afirma.massive.MassiveType,java.lang.String,boolean,java.lang.String,boolean,boolean,java.security.KeyStore$PrivateKeyEntry,java.util.Properties) -> massiveSign
    boolean massiveSign(es.gob.afirma.massive.MassiveType,java.lang.String[],java.lang.String,boolean,boolean,java.security.KeyStore$PrivateKeyEntry,java.util.Properties) -> massiveSign
    java.lang.String[] hashesMassiveSign(java.lang.String[],java.security.KeyStore$PrivateKeyEntry,es.gob.afirma.core.signers.AOSigner,java.util.Properties) -> hashesMassiveSign
    java.io.File[] getFiles(java.lang.String[]) -> a
    boolean massiveSignOperation(java.io.File[],java.io.File,java.security.KeyStore$PrivateKeyEntry,java.util.Properties) -> a
    boolean massiveCosignOperation(java.io.File[],java.io.File,boolean,java.security.KeyStore$PrivateKeyEntry,java.util.Properties) -> a
    byte[] cosign(es.gob.afirma.core.signers.AOSigner,byte[],java.lang.String,java.security.KeyStore$PrivateKeyEntry,java.util.Properties) -> a
    byte[] sign(es.gob.afirma.core.signers.AOSigner,byte[],java.lang.String,java.security.KeyStore$PrivateKeyEntry,java.util.Properties) -> b
    boolean massiveCounterSignOperation(es.gob.afirma.massive.MassiveType,java.io.File[],java.io.File,boolean,java.security.KeyStore$PrivateKeyEntry,java.util.Properties) -> a
    java.lang.String saveSignToDirectory(java.lang.String,byte[],java.io.File,es.gob.afirma.core.signers.AOSigner,java.lang.String) -> a
    es.gob.afirma.core.signers.AOSigner getAppropiatedSigner(java.io.File) -> a
    boolean isSign(es.gob.afirma.core.signers.AOSigner,java.io.File) -> a
    boolean isValidDataFile(es.gob.afirma.core.signers.AOSigner,java.io.File) -> b
    void setActiveLog(boolean) -> setActiveLog
    void setLogPath(java.lang.String) -> setLogPath
    void setLogHandler(es.gob.afirma.massive.LogHandler) -> setLogHandler
    java.lang.String getLogPath() -> getLogPath
    boolean isActiveLog() -> isActiveLog
    java.lang.String getRelativePath(java.lang.String) -> a
    void setFileFilter(java.io.FileFilter) -> setFileFilter
    java.io.FileFilter getFileFilter() -> getFileFilter
    es.gob.afirma.core.signers.AOSigner getDefaultSigner() -> getDefaultSigner
    void setOverwritePreviuosFileSigns(boolean) -> setOverwritePreviuosFileSigns
    void addLogRegistry(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String) -> a
    es.gob.afirma.massive.LogHandler initDefaultLogHandler(java.io.OutputStream) -> initDefaultLogHandler
    void closeLogRegistry() -> a
    es.gob.afirma.core.signers.AOSigner determineType(java.io.File) -> b
    java.lang.String[] getSignedFilenames() -> getSignedFilenames
    es.gob.afirma.core.signers.AOSigner getSpecificSigner(byte[]) -> a
    byte[] digest(byte[]) -> b
es.gob.afirma.massive.LogHandler -> es.gob.afirma.massive.LogHandler:
    int LEVEL_INFO -> LEVEL_INFO
    int LEVEL_WARNING -> LEVEL_WARNING
    int LEVEL_SEVERE -> LEVEL_SEVERE
    void close(java.util.Properties) -> close
    void addLog(int,java.lang.String,java.lang.String,java.lang.String) -> addLog
es.gob.afirma.massive.MassiveSignConfiguration -> es.gob.afirma.massive.MassiveSignConfiguration:
    java.security.KeyStore$PrivateKeyEntry keyEntry -> a
    es.gob.afirma.massive.MassiveType massiveOperation -> b
    java.lang.String algorithm -> c
    java.lang.String mode -> d
    java.lang.String defaultFormat -> e
    java.lang.String signatureFormat -> f
    boolean originalFormat -> g
    java.util.Properties extraParams -> h
    es.gob.afirma.massive.MassiveType getMassiveOperation() -> getMassiveOperation
    void setMassiveOperation(es.gob.afirma.massive.MassiveType) -> setMassiveOperation
    java.lang.String getAlgorithm() -> getAlgorithm
    void setAlgorithm(java.lang.String) -> setAlgorithm
    java.lang.String getMode() -> getMode
    void setMode(java.lang.String) -> setMode
    java.lang.String getDefaultFormat() -> getDefaultFormat
    void setDefaultFormat(java.lang.String) -> setDefaultFormat
    java.lang.String getSignatureFormat() -> getSignatureFormat
    void setSignatureFormat(java.lang.String) -> setSignatureFormat
    boolean isOriginalFormat() -> isOriginalFormat
    void setOriginalFormat(boolean) -> setOriginalFormat
    java.security.KeyStore$PrivateKeyEntry getKeyEntry() -> getKeyEntry
    void setExtraParams(java.util.Properties) -> setExtraParams
    java.util.Properties getExtraParams() -> getExtraParams
es.gob.afirma.massive.MassiveSignMessages -> es.gob.afirma.massive.b:
    java.util.ResourceBundle RESOURCE_BUNDLE -> a
    java.lang.String getString(java.lang.String) -> a
es.gob.afirma.massive.MassiveSignatureHelper -> es.gob.afirma.massive.MassiveSignatureHelper:
    java.util.logging.Logger LOGGER -> a
    es.gob.afirma.core.AOException SIGN_DATA_NOT_GENERATED -> b
    java.security.MessageDigest md -> c
    es.gob.afirma.massive.MassiveSignConfiguration massiveConfiguration -> d
    java.util.List log -> e
    es.gob.afirma.core.signers.AOSigner defaultSigner -> f
    es.gob.afirma.core.signers.AOSigner massiveSignSigner -> g
    boolean enabled -> h
    boolean isEnabled() -> isEnabled
    void disable() -> disable
    void setMassiveOperation(es.gob.afirma.massive.MassiveType) -> setMassiveOperation
    void setSignatureFormat(java.lang.String) -> setSignatureFormat
    byte[] signData(byte[]) -> signData
    byte[] signHash(byte[]) -> signHash
    void checkvalidSignFormat(es.gob.afirma.massive.MassiveSignConfiguration) -> a
    byte[] signFile(java.lang.String) -> signFile
    byte[] signDataFromData(es.gob.afirma.core.signers.AOSigner,byte[],java.net.URI,java.util.Properties) -> a
    byte[] signDataFromHash(es.gob.afirma.core.signers.AOSigner,byte[],java.util.Properties) -> a
    byte[] cosign(es.gob.afirma.core.signers.AOSigner,byte[],java.util.Properties) -> b
    byte[] countersignTree(es.gob.afirma.core.signers.AOSigner,byte[],java.util.Properties) -> c
    byte[] countersignLeafs(es.gob.afirma.core.signers.AOSigner,byte[],java.util.Properties) -> d
    byte[] countersignOperation(es.gob.afirma.core.signers.AOSigner,byte[],es.gob.afirma.core.signers.CounterSignTarget,java.util.Properties) -> a
    es.gob.afirma.core.signers.AOSigner getValidSigner(es.gob.afirma.core.signers.AOSigner,byte[]) -> a
    es.gob.afirma.core.signers.AOSigner getSpecificSigner(byte[]) -> a
    void addLog(java.lang.String) -> a
    java.lang.String getCurrentLogEntry() -> getCurrentLogEntry
    java.lang.String getDefaultSignatureFormat() -> getDefaultSignatureFormat
    java.lang.String getAllLogEntries() -> getAllLogEntries
    byte[] digest(byte[]) -> b
es.gob.afirma.massive.MassiveType -> es.gob.afirma.massive.MassiveType:
    es.gob.afirma.massive.MassiveType SIGN -> SIGN
    es.gob.afirma.massive.MassiveType COSIGN -> COSIGN
    es.gob.afirma.massive.MassiveType COUNTERSIGN_ALL -> COUNTERSIGN_ALL
    es.gob.afirma.massive.MassiveType COUNTERSIGN_LEAFS -> COUNTERSIGN_LEAFS
    es.gob.afirma.massive.MassiveType[] $VALUES -> a
    es.gob.afirma.massive.MassiveType[] values() -> values
    es.gob.afirma.massive.MassiveType valueOf(java.lang.String) -> valueOf
es.gob.afirma.signers.cades.AOCAdESSigner -> es.gob.afirma.signers.cades.AOCAdESSigner:
    java.util.logging.Logger LOGGER -> a
    byte[] sign(byte[],java.lang.String,java.security.PrivateKey,java.security.cert.Certificate[],java.util.Properties) -> sign
    byte[] cosign(byte[],byte[],java.lang.String,java.security.PrivateKey,java.security.cert.Certificate[],java.util.Properties) -> cosign
    byte[] cosign(byte[],java.lang.String,java.security.PrivateKey,java.security.cert.Certificate[],java.util.Properties) -> cosign
    byte[] countersign(byte[],java.lang.String,es.gob.afirma.core.signers.CounterSignTarget,java.lang.Object[],java.security.PrivateKey,java.security.cert.Certificate[],java.util.Properties) -> countersign
    es.gob.afirma.core.util.tree.AOTreeModel getSignersStructure(byte[],boolean) -> getSignersStructure
    boolean isSign(byte[]) -> isSign
    boolean isValidDataFile(byte[]) -> isValidDataFile
    byte[] getData(byte[]) -> getData
    java.lang.String getSignedName(java.lang.String,java.lang.String) -> getSignedName
    es.gob.afirma.core.signers.AOSignInfo getSignInfo(byte[]) -> getSignInfo
    void checkAlgorithm(java.lang.String) -> a
es.gob.afirma.signers.cades.AOSigPolicyQualifierInfo -> es.gob.afirma.signers.cades.a:
    org.spongycastle.asn1.ASN1ObjectIdentifier sigPolicyQualifierId -> a
    org.spongycastle.asn1.ASN1Encodable sigQualifier -> b
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
es.gob.afirma.signers.cades.CAdESExtraParams -> es.gob.afirma.signers.cades.CAdESExtraParams:
    java.util.logging.Logger LOGGER -> a
    java.lang.String DO_NOT_INCLUDE_POLICY_ON_SIGNING_CERTIFICATE -> DO_NOT_INCLUDE_POLICY_ON_SIGNING_CERTIFICATE
    java.lang.String PRECALCULATED_HASH_ALGORITHM -> PRECALCULATED_HASH_ALGORITHM
    java.lang.String SIGNING_CERTIFICATE_V2 -> SIGNING_CERTIFICATE_V2
    java.lang.String MODE -> MODE
    java.lang.String CONTENT_DESCRIPTION -> CONTENT_DESCRIPTION
    java.lang.String INCLUDE_ONLY_SIGNNING_CERTIFICATE -> INCLUDE_ONLY_SIGNNING_CERTIFICATE
    java.lang.String INCLUDE_SIGNING_TIME_ATTRIBUTE -> INCLUDE_SIGNING_TIME_ATTRIBUTE
    java.lang.String CONTENT_TYPE_OID -> CONTENT_TYPE_OID
es.gob.afirma.signers.cades.CAdESSignerMetadata -> es.gob.afirma.signers.cades.CAdESSignerMetadata:
    es.gob.afirma.signers.cades.CAdESSignerMetadata$CAdESSignerLocation signerLocation -> a
    es.gob.afirma.signers.cades.CAdESSignerMetadata$CAdESSignerLocation getSignerLocation() -> getSignerLocation
es.gob.afirma.signers.cades.CAdESSignerMetadata$CAdESSignerLocation -> es.gob.afirma.signers.cades.CAdESSignerMetadata$CAdESSignerLocation:
    java.lang.String countryName -> a
    java.lang.String localityName -> b
    java.util.List postalAddress -> c
    java.lang.String getCountryName() -> getCountryName
    java.lang.String getLocalityName() -> getLocalityName
    java.util.List getPostalAddress() -> getPostalAddress
es.gob.afirma.signers.cades.CAdESSignerMetadataHelper -> es.gob.afirma.signers.cades.CAdESSignerMetadataHelper:
    es.gob.afirma.signers.cades.CAdESSignerMetadata getCAdESSignerMetadata(java.util.Properties) -> getCAdESSignerMetadata
    org.spongycastle.asn1.esf.SignerLocation getSignerLocation(es.gob.afirma.signers.cades.CAdESSignerMetadata$CAdESSignerLocation) -> getSignerLocation
es.gob.afirma.signers.cades.CAdESTriPhaseSigner -> es.gob.afirma.signers.cades.CAdESTriPhaseSigner:
    byte[] preSign(java.lang.String,byte[],java.security.cert.Certificate[],es.gob.afirma.core.signers.AdESPolicy,boolean,byte[],java.util.Date,boolean,boolean,java.lang.String,java.lang.String,java.util.List,es.gob.afirma.signers.cades.CAdESSignerMetadata,boolean) -> preSign
    byte[] postSign(java.lang.String,byte[],java.security.cert.Certificate[],byte[],byte[]) -> postSign
es.gob.afirma.signers.cades.CAdESUtils -> es.gob.afirma.signers.cades.CAdESUtils:
    java.util.logging.Logger LOGGER -> a
    org.spongycastle.asn1.cms.Attribute getSigningCertificateV2(java.security.cert.X509Certificate,java.lang.String,boolean) -> a
    org.spongycastle.asn1.cms.Attribute getSigningCertificateV1(java.security.cert.X509Certificate,java.lang.String,boolean) -> b
    org.spongycastle.asn1.cms.Attribute getSigPolicyId(java.lang.String,es.gob.afirma.core.signers.AdESPolicy) -> a
    org.spongycastle.asn1.ASN1EncodableVector generateSignerInfo(java.security.cert.Certificate,java.lang.String,byte[],es.gob.afirma.core.signers.AdESPolicy,boolean,byte[],java.util.Date,boolean,boolean,java.lang.String,java.lang.String,java.util.List,es.gob.afirma.signers.cades.CAdESSignerMetadata,boolean,boolean) -> generateSignerInfo
    org.spongycastle.asn1.x509.PolicyInformation[] getPolicyInformation(java.security.cert.X509Certificate) -> a
    org.spongycastle.asn1.ASN1EncodableVector initContextSpecific(java.lang.String,byte[],byte[],java.util.Date,boolean,boolean) -> a
es.gob.afirma.signers.cades.CAdESValidator -> es.gob.afirma.signers.cades.CAdESValidator:
    java.util.logging.Logger LOGGER -> a
    java.util.Enumeration getCAdESObjects(byte[]) -> f
    boolean isCAdESData(byte[]) -> a
    boolean isCAdESSignedData(byte[],boolean) -> isCAdESSignedData
    boolean verifySignerInfo(org.spongycastle.asn1.cms.SignerInfo) -> a
    boolean isCAdESDigestedData(byte[]) -> b
    boolean isCAdESEncryptedData(byte[]) -> c
    boolean isCAdESEnvelopedData(byte[]) -> d
    boolean isCAdESSignedAndEnvelopedData(byte[]) -> e
    boolean isCAdESValid(byte[],java.lang.String,boolean) -> isCAdESValid
    boolean isCAdESValid(byte[],boolean) -> isCAdESValid
es.gob.afirma.signers.cades.CommitmentTypeIndicationBean -> es.gob.afirma.signers.cades.CommitmentTypeIndicationBean:
    java.lang.String identifier -> a
    java.util.List qualifiers -> b
    java.lang.String getIdentifier() -> a
    java.util.List getQualifiers() -> b
es.gob.afirma.signers.cades.CommitmentTypeIndicationsHelper -> es.gob.afirma.signers.cades.CommitmentTypeIndicationsHelper:
    org.spongycastle.asn1.ASN1ObjectIdentifier COMMITMENT_TYPE_IDENTIFIER_PROOF_OF_ORIGIN -> a
    org.spongycastle.asn1.ASN1ObjectIdentifier COMMITMENT_TYPE_IDENTIFIER_PROOF_OF_RECEIPT -> b
    org.spongycastle.asn1.ASN1ObjectIdentifier COMMITMENT_TYPE_IDENTIFIER_PROOF_OF_DELIVERY -> c
    org.spongycastle.asn1.ASN1ObjectIdentifier COMMITMENT_TYPE_IDENTIFIER_PROOF_OF_SENDER -> d
    org.spongycastle.asn1.ASN1ObjectIdentifier COMMITMENT_TYPE_IDENTIFIER_PROOF_OF_APPROVAL -> e
    org.spongycastle.asn1.ASN1ObjectIdentifier COMMITMENT_TYPE_IDENTIFIER_PROOF_OF_CREATION -> f
    java.util.Map COMMITMENT_TYPE_IDENTIFIERS -> g
    java.util.logging.Logger LOGGER -> h
    java.util.List getCommitmentTypeIndications(java.util.Properties) -> getCommitmentTypeIndications
    org.spongycastle.asn1.esf.CommitmentTypeIndication generateCommitmentTypeIndication(es.gob.afirma.signers.cades.CommitmentTypeIndicationBean) -> a
es.gob.afirma.signers.cades.GenCAdESEPESSignedData -> es.gob.afirma.signers.cades.GenCAdESEPESSignedData:
    byte[] generateSignedData(es.gob.afirma.signers.pkcs7.P7ContentSignerParameters,boolean,es.gob.afirma.core.signers.AdESPolicy,boolean,java.security.PrivateKey,java.security.cert.Certificate[],byte[],java.lang.String,boolean,boolean,java.lang.String,java.lang.String,java.util.List,es.gob.afirma.signers.cades.CAdESSignerMetadata,boolean) -> generateSignedData
es.gob.afirma.signers.cades.asic.AOCAdESASiCSSigner -> es.gob.afirma.signers.cades.asic.AOCAdESASiCSSigner:
    java.util.logging.Logger LOGGER -> a
    byte[] sign(byte[],java.lang.String,java.security.PrivateKey,java.security.cert.Certificate[],java.util.Properties) -> sign
    es.gob.afirma.core.util.tree.AOTreeModel getSignersStructure(byte[],boolean) -> getSignersStructure
    boolean isSign(byte[]) -> isSign
    boolean isValidDataFile(byte[]) -> isValidDataFile
    java.lang.String getSignedName(java.lang.String,java.lang.String) -> getSignedName
    byte[] getData(byte[]) -> getData
    es.gob.afirma.core.signers.AOSignInfo getSignInfo(byte[]) -> getSignInfo
    byte[] cosign(byte[],byte[],java.lang.String,java.security.PrivateKey,java.security.cert.Certificate[],java.util.Properties) -> cosign
    byte[] cosign(byte[],java.lang.String,java.security.PrivateKey,java.security.cert.Certificate[],java.util.Properties) -> cosign
    byte[] countersign(byte[],java.lang.String,es.gob.afirma.core.signers.CounterSignTarget,java.lang.Object[],java.security.PrivateKey,java.security.cert.Certificate[],java.util.Properties) -> countersign
es.gob.afirma.signers.cms.AOCMSExtraParams -> es.gob.afirma.signers.cms.AOCMSExtraParams:
    java.lang.String PRECALCULATED_HASH_ALGORITHM -> PRECALCULATED_HASH_ALGORITHM
es.gob.afirma.signers.cms.AOCMSSigner -> es.gob.afirma.signers.cms.AOCMSSigner:
    java.lang.String dataType -> a
    java.util.Map atrib -> b
    java.util.Map uatrib -> c
    java.util.logging.Logger LOGGER -> d
    byte[] sign(byte[],java.lang.String,java.security.PrivateKey,java.security.cert.Certificate[],java.util.Properties) -> sign
    byte[] cosign(byte[],byte[],java.lang.String,java.security.PrivateKey,java.security.cert.Certificate[],java.util.Properties) -> cosign
    byte[] cosign(byte[],java.lang.String,java.security.PrivateKey,java.security.cert.Certificate[],java.util.Properties) -> cosign
    byte[] countersign(byte[],java.lang.String,es.gob.afirma.core.signers.CounterSignTarget,java.lang.Object[],java.security.PrivateKey,java.security.cert.Certificate[],java.util.Properties) -> countersign
    es.gob.afirma.core.util.tree.AOTreeModel getSignersStructure(byte[],boolean) -> getSignersStructure
    boolean isSign(byte[]) -> isSign
    boolean isValidDataFile(byte[]) -> isValidDataFile
    void addSignedAttribute(java.lang.String,byte[]) -> addSignedAttribute
    void addUnsignedAttribute(java.lang.String,byte[]) -> addUnsignedAttribute
    byte[] getData(byte[]) -> getData
    java.lang.String getSignedName(java.lang.String,java.lang.String) -> getSignedName
    es.gob.afirma.core.signers.AOSignInfo getSignInfo(byte[]) -> getSignInfo
es.gob.afirma.signers.cms.CmsUtil -> es.gob.afirma.signers.cms.a:
    org.spongycastle.asn1.ASN1OctetString firma(java.lang.String,java.security.PrivateKey,org.spongycastle.asn1.ASN1Set) -> a
    org.spongycastle.asn1.cms.ContentInfo getContentInfo(byte[],boolean,java.lang.String) -> a
es.gob.afirma.signers.cms.CoSigner -> es.gob.afirma.signers.cms.b:
    org.spongycastle.asn1.ASN1Set signedAttr2 -> a
    byte[] coSigner(es.gob.afirma.signers.pkcs7.P7ContentSignerParameters,byte[],boolean,java.lang.String,java.security.PrivateKey,java.security.cert.Certificate[],java.util.Map,java.util.Map,byte[]) -> a
    byte[] coSigner(java.lang.String,java.security.cert.X509Certificate[],byte[],java.lang.String,java.security.PrivateKey,java.util.Map,java.util.Map,byte[]) -> a
    org.spongycastle.asn1.ASN1Set generateSignerInfo(java.lang.String,byte[],java.lang.String,java.util.Map) -> a
    org.spongycastle.asn1.ASN1Set generateSignerInfoFromHash(java.security.cert.X509Certificate,byte[],java.lang.String,java.util.Map) -> a
    org.spongycastle.asn1.ASN1Set generateUnsignerInfo(java.util.Map) -> a
es.gob.afirma.signers.cms.CounterSigner -> es.gob.afirma.signers.cms.c:
    int actualIndex -> a
    org.spongycastle.asn1.ASN1Set signedAttr2 -> b
    java.util.Map atrib2 -> c
    java.util.Map uatrib2 -> d
    byte[] counterSigner(es.gob.afirma.signers.pkcs7.P7ContentSignerParameters,byte[],es.gob.afirma.core.signers.CounterSignTarget,int[],java.security.PrivateKey,java.security.cert.Certificate[],java.util.Map,java.util.Map) -> a
    org.spongycastle.asn1.ASN1EncodableVector counterTree(org.spongycastle.asn1.ASN1Set,es.gob.afirma.signers.pkcs7.P7ContentSignerParameters,java.security.PrivateKey,java.security.cert.Certificate[]) -> a
    org.spongycastle.asn1.ASN1EncodableVector counterLeaf(org.spongycastle.asn1.ASN1Set,es.gob.afirma.signers.pkcs7.P7ContentSignerParameters,java.security.PrivateKey,java.security.cert.Certificate[]) -> b
    org.spongycastle.asn1.ASN1EncodableVector counterNode(org.spongycastle.asn1.cms.SignedData,es.gob.afirma.signers.pkcs7.P7ContentSignerParameters,java.security.PrivateKey,java.security.cert.Certificate[],int) -> a
    org.spongycastle.asn1.cms.SignerInfo getCounterUnsignedAtributes(org.spongycastle.asn1.cms.SignerInfo,es.gob.afirma.signers.pkcs7.P7ContentSignerParameters,java.security.PrivateKey,java.security.cert.Certificate[]) -> a
    org.spongycastle.asn1.cms.SignerInfo getCounterLeafUnsignedAtributes(org.spongycastle.asn1.cms.SignerInfo,es.gob.afirma.signers.pkcs7.P7ContentSignerParameters,java.security.PrivateKey,java.security.cert.Certificate[]) -> b
    org.spongycastle.asn1.cms.SignerInfo getCounterNodeUnsignedAtributes(org.spongycastle.asn1.cms.SignerInfo,es.gob.afirma.signers.pkcs7.P7ContentSignerParameters,java.security.PrivateKey,java.security.cert.Certificate[]) -> c
    org.spongycastle.asn1.cms.SignerInfo getCounterNodeUnsignedAtributes(org.spongycastle.asn1.cms.SignerInfo,es.gob.afirma.signers.pkcs7.P7ContentSignerParameters,java.security.PrivateKey,java.security.cert.Certificate[],int) -> a
    org.spongycastle.asn1.ASN1Set generateSignerInfo(java.security.cert.X509Certificate,java.lang.String,byte[]) -> a
    org.spongycastle.asn1.ASN1Set generateUnsignerInfo() -> a
    org.spongycastle.asn1.ASN1Set generateUnsignerInfoFromCounter(org.spongycastle.asn1.cms.Attribute) -> a
    org.spongycastle.asn1.cms.SignerInfo unsignedAtributte(es.gob.afirma.signers.pkcs7.P7ContentSignerParameters,org.spongycastle.asn1.cms.SignerInfo,java.security.PrivateKey,java.security.cert.Certificate[]) -> a
es.gob.afirma.signers.cms.GenSignedData -> es.gob.afirma.signers.cms.d:
    org.spongycastle.asn1.ASN1Set signedAttr2 -> a
    byte[] generateSignedData(es.gob.afirma.signers.pkcs7.P7ContentSignerParameters,boolean,boolean,java.lang.String,java.security.PrivateKey,java.security.cert.Certificate[],java.util.Map,java.util.Map,byte[]) -> a
    org.spongycastle.asn1.ASN1Set generateSignedInfo(java.lang.String,byte[],java.lang.String,boolean,java.util.Map,byte[]) -> a
    org.spongycastle.asn1.ASN1Set generateUnsignedInfo(java.util.Map) -> a
    org.spongycastle.asn1.ASN1OctetString firma(java.lang.String,java.security.PrivateKey) -> a
es.gob.afirma.signers.cms.ValidateCMSSignedData -> es.gob.afirma.signers.cms.e:
    boolean isCMSSignedData(byte[]) -> a
    boolean verifySignerInfo(org.spongycastle.asn1.cms.SignerInfo) -> a
es.gob.afirma.signers.multi.cades.AOCAdESCoSigner -> es.gob.afirma.signers.multi.cades.AOCAdESCoSigner:
    java.util.logging.Logger LOGGER -> a
    byte[] cosign(byte[],byte[],java.lang.String,java.security.PrivateKey,java.security.cert.Certificate[],java.util.Properties) -> cosign
    byte[] cosign(byte[],java.lang.String,java.security.PrivateKey,java.security.cert.Certificate[],java.util.Properties) -> cosign
es.gob.afirma.signers.multi.cades.AOCAdESCounterSigner -> es.gob.afirma.signers.multi.cades.AOCAdESCounterSigner:
    es.gob.afirma.core.signers.AOSimpleSigner ss -> a
    java.util.Date date -> b
    java.util.logging.Logger LOGGER -> c
    byte[] countersign(byte[],java.lang.String,es.gob.afirma.core.signers.CounterSignTarget,java.lang.Object[],java.security.PrivateKey,java.security.cert.Certificate[],java.util.Properties) -> countersign
es.gob.afirma.signers.multi.cades.CAdESCoSigner -> es.gob.afirma.signers.multi.cades.a:
    org.spongycastle.asn1.ASN1Set signedAttr2 -> a
    org.spongycastle.asn1.cms.SignedData readData(byte[]) -> a
    byte[] coSigner(es.gob.afirma.signers.pkcs7.P7ContentSignerParameters,byte[],boolean,es.gob.afirma.core.signers.AdESPolicy,boolean,java.security.PrivateKey,java.security.cert.Certificate[],byte[],java.lang.String,java.lang.String,java.util.List,boolean,es.gob.afirma.signers.cades.CAdESSignerMetadata,boolean) -> a
    byte[] coSigner(java.lang.String,java.security.cert.X509Certificate[],java.io.InputStream,es.gob.afirma.core.signers.AdESPolicy,boolean,java.security.PrivateKey,java.security.cert.Certificate[],byte[],java.lang.String,java.lang.String,java.util.List,boolean,es.gob.afirma.signers.cades.CAdESSignerMetadata,boolean) -> a
    org.spongycastle.asn1.ASN1OctetString firma(java.lang.String,java.security.PrivateKey,java.security.cert.Certificate[]) -> a
es.gob.afirma.signers.multi.cades.CAdESCounterSigner -> es.gob.afirma.signers.multi.cades.b:
    es.gob.afirma.core.signers.AOSimpleSigner ss -> a
    java.util.Date date -> b
    void setPkcs1Signer(es.gob.afirma.core.signers.AOSimpleSigner,java.util.Date) -> a
    byte[] counterSign(java.lang.String,byte[],es.gob.afirma.core.signers.CounterSignTarget,java.security.PrivateKey,java.security.cert.Certificate[],es.gob.afirma.core.signers.AdESPolicy,boolean,java.util.List,boolean,es.gob.afirma.signers.cades.CAdESSignerMetadata,boolean) -> a
    org.spongycastle.asn1.ASN1EncodableVector counterSignSignerInfos(org.spongycastle.asn1.ASN1Set,java.lang.String,java.security.PrivateKey,java.security.cert.Certificate[],es.gob.afirma.core.signers.AdESPolicy,boolean,java.util.List,boolean,es.gob.afirma.signers.cades.CAdESSignerMetadata,es.gob.afirma.core.signers.CounterSignTarget,boolean) -> a
    org.spongycastle.asn1.cms.SignerInfo counterSignSignerInfo(org.spongycastle.asn1.cms.SignerInfo,java.lang.String,java.security.PrivateKey,java.security.cert.Certificate[],es.gob.afirma.core.signers.AdESPolicy,boolean,java.util.List,boolean,es.gob.afirma.signers.cades.CAdESSignerMetadata,es.gob.afirma.core.signers.CounterSignTarget,boolean) -> a
    org.spongycastle.asn1.cms.SignerInfo signSignerInfo(org.spongycastle.asn1.cms.SignerInfo,java.lang.String,java.security.PrivateKey,java.security.cert.Certificate[],es.gob.afirma.core.signers.AdESPolicy,boolean,java.util.List,boolean,es.gob.afirma.signers.cades.CAdESSignerMetadata,boolean) -> a
    java.util.List getSignerInfoFromUnauthenticatedAttributes(org.spongycastle.asn1.cms.Attribute) -> a
    byte[] pkcs1Sign(byte[],java.lang.String,java.security.PrivateKey,java.security.cert.Certificate[]) -> a
es.gob.afirma.signers.multi.cades.CAdESMultiUtil -> es.gob.afirma.signers.multi.cades.c:
    org.spongycastle.asn1.ASN1ObjectIdentifier ARCHIVE_TIMESTAMP_V2_OID -> a
    java.util.List UNSUPPORTED_ATTRIBUTES -> b
    org.spongycastle.asn1.ASN1Set addCertificates(org.spongycastle.asn1.cms.SignedData,java.security.cert.Certificate[]) -> a
    void checkUnsupportedAttributes(byte[]) -> a
    void checkUnsupportedAttributes(org.spongycastle.cms.CMSSignedData) -> a
    void checkUnsupportedAttributes(org.spongycastle.cms.SignerInformation) -> a
    void checkUnsupported(org.spongycastle.asn1.ASN1ObjectIdentifier) -> a
    boolean isCounterSignature(org.spongycastle.asn1.ASN1ObjectIdentifier) -> b
es.gob.afirma.signers.multi.cades.asic.AOCAdESASiCSCoSigner -> es.gob.afirma.signers.multi.cades.asic.AOCAdESASiCSCoSigner:
    byte[] cosign(byte[],byte[],java.lang.String,java.security.PrivateKey,java.security.cert.Certificate[],java.util.Properties) -> cosign
    byte[] cosign(byte[],java.lang.String,java.security.PrivateKey,java.security.cert.Certificate[],java.util.Properties) -> cosign
es.gob.afirma.signers.multi.cades.asic.AOCAdESASiCSCounterSigner -> es.gob.afirma.signers.multi.cades.asic.AOCAdESASiCSCounterSigner:
    byte[] countersign(byte[],java.lang.String,es.gob.afirma.core.signers.CounterSignTarget,java.lang.Object[],java.security.PrivateKey,java.security.cert.Certificate[],java.util.Properties) -> countersign
es.gob.afirma.signers.odf.AOODFSigner -> es.gob.afirma.signers.odf.AOODFSigner:
    java.util.logging.Logger LOGGER -> a
    java.util.Set SUPPORTED_FORMATS -> b
    byte[] sign(byte[],java.lang.String,java.security.PrivateKey,java.security.cert.Certificate[],java.util.Properties) -> sign
    byte[] cosign(byte[],byte[],java.lang.String,java.security.PrivateKey,java.security.cert.Certificate[],java.util.Properties) -> cosign
    byte[] cosign(byte[],java.lang.String,java.security.PrivateKey,java.security.cert.Certificate[],java.util.Properties) -> cosign
    byte[] countersign(byte[],java.lang.String,es.gob.afirma.core.signers.CounterSignTarget,java.lang.Object[],java.security.PrivateKey,java.security.cert.Certificate[],java.util.Properties) -> countersign
    es.gob.afirma.core.util.tree.AOTreeModel getSignersStructure(byte[],boolean) -> getSignersStructure
    boolean isSign(byte[]) -> isSign
    boolean isValidDataFile(byte[]) -> isValidDataFile
    java.lang.String getSignedName(java.lang.String,java.lang.String) -> getSignedName
    void writeXML(java.io.OutputStream,org.w3c.dom.Node,boolean) -> a
    void writeXML(java.io.Writer,org.w3c.dom.Node,boolean) -> a
    byte[] getData(byte[]) -> getData
    es.gob.afirma.core.signers.AOSignInfo getSignInfo(byte[]) -> getSignInfo
    java.lang.String getODFMimeType(java.io.File) -> a
    java.io.File createTempFile(byte[]) -> a
es.gob.afirma.signers.odf.OdfXmlUtil -> es.gob.afirma.signers.odf.a:
    byte[] canonicalizeXml(org.w3c.dom.Element,java.lang.String) -> a
es.gob.afirma.signers.ooxml.AOOOXMLSigner -> es.gob.afirma.signers.ooxml.AOOOXMLSigner:
    java.util.logging.Logger LOGGER -> a
    byte[] getData(byte[]) -> getData
    boolean isOOXMLFile(byte[]) -> a
    es.gob.afirma.core.signers.AOSignInfo getSignInfo(byte[]) -> getSignInfo
    java.lang.String getSignedName(java.lang.String,java.lang.String) -> getSignedName
    es.gob.afirma.core.util.tree.AOTreeModel getSignersStructure(byte[],boolean) -> getSignersStructure
    boolean isSign(byte[]) -> isSign
    boolean isValidDataFile(byte[]) -> isValidDataFile
    byte[] sign(byte[],java.lang.String,java.security.PrivateKey,java.security.cert.Certificate[],java.util.Properties) -> sign
    byte[] cosign(byte[],java.lang.String,java.security.PrivateKey,java.security.cert.Certificate[],java.util.Properties) -> cosign
    byte[] cosign(byte[],byte[],java.lang.String,java.security.PrivateKey,java.security.cert.Certificate[],java.util.Properties) -> cosign
    byte[] countersign(byte[],java.lang.String,es.gob.afirma.core.signers.CounterSignTarget,java.lang.Object[],java.security.PrivateKey,java.security.cert.Certificate[],java.util.Properties) -> countersign
    byte[] signOOXML(byte[],java.lang.String,java.security.PrivateKey,java.security.cert.X509Certificate[],java.util.Properties) -> a
es.gob.afirma.signers.ooxml.ContentTypeManager -> es.gob.afirma.signers.ooxml.a:
    java.util.Map defaultContentTypes -> a
    java.util.Map overrideContentTypes -> b
    javax.xml.parsers.DocumentBuilderFactory DOC_FACTORY -> c
    org.w3c.dom.Document loadDocument(java.io.InputStream) -> a
    javax.xml.parsers.DocumentBuilder getNewDocumentBuilder() -> a
    java.lang.String getAttributeValue(org.w3c.dom.NamedNodeMap,java.lang.String) -> a
    java.lang.String getContentType(java.lang.String) -> a
    java.lang.String getExtension(java.lang.String) -> b
es.gob.afirma.signers.ooxml.NoCloseInputStream -> es.gob.afirma.signers.ooxml.b:
    void close() -> close
es.gob.afirma.signers.ooxml.OOXMLAdvancedSignature -> es.gob.afirma.signers.ooxml.c:
    byte[] ooXmlDocument -> a
    es.gob.afirma.signers.ooxml.OOXMLAdvancedSignature newInstance(net.java.xades.security.xml.XAdES.XAdES_BES,byte[]) -> a
    void sign(java.security.cert.X509Certificate[],java.security.PrivateKey,java.lang.String,java.util.List,java.lang.String) -> a
    javax.xml.crypto.dsig.keyinfo.KeyInfo newKeyInfo(java.security.cert.X509Certificate[],java.lang.String) -> a
es.gob.afirma.signers.ooxml.OOXMLOfficeObjectHelper -> es.gob.afirma.signers.ooxml.d:
    javax.xml.crypto.dsig.XMLObject getOfficeObject(java.lang.String,javax.xml.crypto.dsig.XMLSignatureFactory,org.w3c.dom.Document,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
es.gob.afirma.signers.ooxml.OOXMLPackageObjectHelper -> es.gob.afirma.signers.ooxml.e:
    java.lang.String[] CONTENT_DIRS -> a
    java.util.Set EXCLUDED_RELATIONSHIPS -> b
    javax.xml.crypto.dsig.XMLObject getPackageObject(java.lang.String,javax.xml.crypto.dsig.XMLSignatureFactory,byte[],org.w3c.dom.Document,java.lang.String) -> a
    boolean startsWithAnyOfThose(java.lang.String,java.lang.String[]) -> a
    void addParts(javax.xml.crypto.dsig.XMLSignatureFactory,es.gob.afirma.signers.ooxml.ContentTypeManager,java.util.List,byte[],java.lang.String[],javax.xml.crypto.dsig.DigestMethod) -> a
    java.io.InputStream getContentTypesXMLInputStream(byte[]) -> a
    org.w3c.dom.Document loadDocumentNoClose(java.io.InputStream) -> a
    void addRelationshipsReference(javax.xml.crypto.dsig.XMLSignatureFactory,java.lang.String,org.w3c.dom.Document,java.util.List,java.lang.String,javax.xml.crypto.dsig.DigestMethod) -> a
    void addRelationshipsReferences(javax.xml.crypto.dsig.XMLSignatureFactory,java.util.List,byte[],javax.xml.crypto.dsig.DigestMethod) -> a
    javax.xml.crypto.dsig.Manifest constructManifest(javax.xml.crypto.dsig.XMLSignatureFactory,byte[]) -> a
    void addSignatureTime(javax.xml.crypto.dsig.XMLSignatureFactory,org.w3c.dom.Document,java.lang.String,java.util.List) -> a
es.gob.afirma.signers.ooxml.OOXMLURIDereferencer -> es.gob.afirma.signers.ooxml.OOXMLURIDereferencer:
    byte[] ooxml -> a
    javax.xml.crypto.URIDereferencer baseUriDereferencer -> b
    javax.xml.crypto.Data dereference(javax.xml.crypto.URIReference,javax.xml.crypto.XMLCryptoContext) -> dereference
    java.io.InputStream findDataInputStream(java.lang.String) -> a
es.gob.afirma.signers.ooxml.OOXMLUtil -> es.gob.afirma.signers.ooxml.f:
    java.util.logging.Logger LOGGER -> a
    int countOOXMLSignatures(byte[]) -> a
    es.gob.afirma.signers.ooxml.Relationship[] getOOXMLSignaturesRelationships(byte[]) -> c
    byte[][] getOOXMLSignatures(byte[]) -> b
    java.util.zip.ZipEntry getSignaturesRelsEntry(java.util.zip.ZipFile) -> a
es.gob.afirma.signers.ooxml.OOXMLXAdESSigner -> es.gob.afirma.signers.ooxml.g:
    java.util.logging.Logger LOGGER -> a
    byte[] getSignedXML(byte[],java.lang.String,java.security.PrivateKey,java.security.cert.X509Certificate[],java.util.Properties) -> a
    byte[] writeXML(org.w3c.dom.Node) -> a
    void writeXMLwithXALAN(java.io.Writer,org.w3c.dom.Node,java.lang.String) -> a
    net.java.xades.security.xml.XAdES.SignatureProductionPlace getSignatureProductionPlace(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
es.gob.afirma.signers.ooxml.OOXMLZipHelper -> es.gob.afirma.signers.ooxml.h:
    byte[] outputSignedOfficeOpenXMLDocument(byte[],byte[]) -> a
    java.util.zip.ZipOutputStream copyOOXMLContent(byte[],java.lang.String,java.io.OutputStream) -> a
    void addOriginSigs(java.util.zip.ZipOutputStream) -> a
    void addOriginSigsRels(java.lang.String,java.util.zip.ZipOutputStream) -> a
    org.w3c.dom.Document loadDocumentNoClose(java.io.InputStream) -> a
    void writeDocumentNoClosing(org.w3c.dom.Document,java.io.OutputStream,boolean) -> a
es.gob.afirma.signers.ooxml.OOXMLZipHelper$1 -> es.gob.afirma.signers.ooxml.i:
    java.util.Iterator getPrefixes(java.lang.String) -> getPrefixes
    java.lang.String getPrefix(java.lang.String) -> getPrefix
    java.lang.String getNamespaceURI(java.lang.String) -> getNamespaceURI
es.gob.afirma.signers.ooxml.OOXMLZipHelper$2 -> es.gob.afirma.signers.ooxml.j:
    java.util.Iterator getPrefixes(java.lang.String) -> getPrefixes
    java.lang.String getPrefix(java.lang.String) -> getPrefix
    java.lang.String getNamespaceURI(java.lang.String) -> getNamespaceURI
es.gob.afirma.signers.ooxml.OOXMLZipHelper$NoCloseOutputStream -> es.gob.afirma.signers.ooxml.k:
    void close() -> close
es.gob.afirma.signers.ooxml.Relationship -> es.gob.afirma.signers.ooxml.l:
    java.lang.String id -> a
    java.lang.String type -> b
    java.lang.String target -> c
    java.lang.String getType() -> a
    java.lang.String getTarget() -> b
    java.lang.String toString() -> toString
es.gob.afirma.signers.ooxml.RelationshipsParser -> es.gob.afirma.signers.ooxml.m:
    es.gob.afirma.signers.ooxml.Relationship[] relations -> a
    es.gob.afirma.signers.ooxml.Relationship[] getRelationships() -> a
    es.gob.afirma.signers.ooxml.Relationship[] getRelationships(java.io.InputStream) -> a
    es.gob.afirma.signers.ooxml.Relationship getRelationship(org.w3c.dom.Node) -> a
es.gob.afirma.signers.ooxml.UnsupportedJreVersionException -> es.gob.afirma.signers.ooxml.UnsupportedJreVersionException:
es.gob.afirma.signers.ooxml.relprovider.OOXMLProvider -> es.gob.afirma.signers.ooxml.relprovider.OOXMLProvider:
    java.lang.String RELATIONSHIP_TRANSFORM_PROVIDER_NAME -> RELATIONSHIP_TRANSFORM_PROVIDER_NAME
es.gob.afirma.signers.ooxml.relprovider.RelationshipComparator -> es.gob.afirma.signers.ooxml.relprovider.a:
    int compare(org.w3c.dom.Element,org.w3c.dom.Element) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
es.gob.afirma.signers.ooxml.relprovider.RelationshipTransformParameterSpec -> es.gob.afirma.signers.ooxml.relprovider.RelationshipTransformParameterSpec:
    java.util.List sourceIds -> a
    void addRelationshipReference(java.lang.String) -> addRelationshipReference
    java.util.List getSourceIds() -> a
es.gob.afirma.signers.ooxml.relprovider.RelationshipTransformService -> es.gob.afirma.signers.ooxml.relprovider.RelationshipTransformService:
    java.util.logging.Logger LOGGER -> a
    java.lang.String TRANSFORM_URI -> TRANSFORM_URI
    java.util.List sourceIds -> b
    void init(javax.xml.crypto.dsig.spec.TransformParameterSpec) -> init
    void init(javax.xml.crypto.XMLStructure,javax.xml.crypto.XMLCryptoContext) -> init
    void marshalParams(javax.xml.crypto.XMLStructure,javax.xml.crypto.XMLCryptoContext) -> marshalParams
    java.security.spec.AlgorithmParameterSpec getParameterSpec() -> getParameterSpec
    javax.xml.crypto.Data transform(javax.xml.crypto.Data,javax.xml.crypto.XMLCryptoContext) -> transform
    void sortRelationshipElements(org.w3c.dom.Element) -> a
    java.lang.String toString(org.w3c.dom.Node) -> a
    javax.xml.crypto.OctetStreamData toOctetStreamData(org.w3c.dom.Node) -> b
    org.w3c.dom.Document loadDocument(java.io.InputStream) -> a
    javax.xml.crypto.Data transform(javax.xml.crypto.Data,javax.xml.crypto.XMLCryptoContext,java.io.OutputStream) -> transform
    boolean isFeatureSupported(java.lang.String) -> isFeatureSupported
es.gob.afirma.signers.ooxml.relprovider.RelationshipTransformService$1 -> es.gob.afirma.signers.ooxml.relprovider.b:
    es.gob.afirma.signers.ooxml.relprovider.RelationshipTransformService this$0 -> a
    java.util.Iterator getPrefixes(java.lang.String) -> getPrefixes
    java.lang.String getPrefix(java.lang.String) -> getPrefix
    java.lang.String getNamespaceURI(java.lang.String) -> getNamespaceURI
es.gob.afirma.signers.pades.AOPDFSigner -> es.gob.afirma.signers.pades.AOPDFSigner:
    java.util.logging.Logger LOGGER -> a
    com.aowagie.text.pdf.PdfName PDFNAME_ETSI_RFC3161 -> b
    com.aowagie.text.pdf.PdfName PDFNAME_DOCTIMESTAMP -> c
    byte[] sign(byte[],java.lang.String,java.security.PrivateKey,java.security.cert.Certificate[],java.util.Properties) -> sign
    byte[] cosign(byte[],byte[],java.lang.String,java.security.PrivateKey,java.security.cert.Certificate[],java.util.Properties) -> cosign
    byte[] cosign(byte[],java.lang.String,java.security.PrivateKey,java.security.cert.Certificate[],java.util.Properties) -> cosign
    byte[] countersign(byte[],java.lang.String,es.gob.afirma.core.signers.CounterSignTarget,java.lang.Object[],java.security.PrivateKey,java.security.cert.Certificate[],java.util.Properties) -> countersign
    java.lang.String getSignedName(java.lang.String,java.lang.String) -> getSignedName
    es.gob.afirma.core.util.tree.AOTreeModel getSignersStructure(byte[],boolean) -> getSignersStructure
    boolean isSign(byte[]) -> isSign
    boolean isPdfFile(byte[]) -> a
    boolean isValidDataFile(byte[]) -> isValidDataFile
    java.lang.String getSignedName(java.lang.String) -> getSignedName
    byte[] getData(byte[]) -> getData
    es.gob.afirma.core.signers.AOSignInfo getSignInfo(byte[]) -> getSignInfo
    void configureRespectfulProperties(byte[],java.util.Properties) -> configureRespectfulProperties
    void checkIText() -> a
es.gob.afirma.signers.pades.BadPdfPasswordException -> es.gob.afirma.signers.pades.BadPdfPasswordException:
es.gob.afirma.signers.pades.CommonPdfMessages -> es.gob.afirma.signers.pades.a:
    java.util.ResourceBundle RESOURCE_BUNDLE -> a
    java.lang.String getString(java.lang.String) -> a
es.gob.afirma.signers.pades.InvalidITextException -> es.gob.afirma.signers.pades.InvalidITextException:
es.gob.afirma.signers.pades.InvalidPdfException -> es.gob.afirma.signers.pades.InvalidPdfException:
es.gob.afirma.signers.pades.PAdESTriPhaseSigner -> es.gob.afirma.signers.pades.PAdESTriPhaseSigner:
    int LAST_PAGE -> LAST_PAGE
    java.lang.String ITEXT_VERSION -> ITEXT_VERSION
    es.gob.afirma.signers.pades.PdfSignResult preSign(java.lang.String,byte[],java.security.cert.Certificate[],java.util.GregorianCalendar,java.util.Properties) -> preSign
    byte[] postSign(java.lang.String,byte[],java.security.cert.Certificate[],byte[],es.gob.afirma.signers.pades.PdfSignResult,es.gob.afirma.signers.pades.SignEnhancer,java.util.Properties) -> postSign
    es.gob.afirma.signers.pades.PdfSignResult generatePdfSignature(java.lang.String,java.security.cert.Certificate[],java.util.Properties,byte[],byte[],java.lang.String,byte[],java.util.GregorianCalendar,es.gob.afirma.signers.pades.SignEnhancer,java.util.Properties) -> a
    byte[] insertSignatureOnPdf(byte[],java.security.cert.Certificate[],es.gob.afirma.signers.pades.PdfSignResult) -> a
es.gob.afirma.signers.pades.PdfHasUnregisteredSignaturesException -> es.gob.afirma.signers.pades.PdfHasUnregisteredSignaturesException:
es.gob.afirma.signers.pades.PdfIsCertifiedException -> es.gob.afirma.signers.pades.PdfIsCertifiedException:
es.gob.afirma.signers.pades.PdfIsPasswordProtectedException -> es.gob.afirma.signers.pades.PdfIsPasswordProtectedException:
es.gob.afirma.signers.pades.PdfPreProcessor -> es.gob.afirma.signers.pades.PdfPreProcessor:
    java.util.logging.Logger LOGGER -> a
    void addMoreInfo(java.util.Map,com.aowagie.text.pdf.PdfStamper) -> addMoreInfo
    void attachFile(java.util.Properties,com.aowagie.text.pdf.PdfStamper) -> a
    void addImage(byte[],int,int,int,int,int,java.lang.String,com.aowagie.text.pdf.PdfStamper) -> addImage
    void addImage(java.util.Properties,com.aowagie.text.pdf.PdfStamper,com.aowagie.text.pdf.PdfReader) -> a
    com.aowagie.text.Rectangle getPositionOnPage(java.util.Properties,java.lang.String) -> a
    com.aowagie.text.Image getImage(java.lang.String) -> a
es.gob.afirma.signers.pades.PdfSessionManager -> es.gob.afirma.signers.pades.PdfSessionManager:
    java.util.logging.Logger LOGGER -> a
    es.gob.afirma.signers.pades.PdfTriPhaseSession getSessionData(byte[],java.security.cert.Certificate[],java.util.Calendar,java.util.Properties) -> getSessionData
    com.aowagie.text.Rectangle getSignaturePositionOnPage(java.util.Properties) -> a
es.gob.afirma.signers.pades.PdfSignResult -> es.gob.afirma.signers.pades.PdfSignResult:
    java.lang.String fileID -> a
    byte[] sign -> b
    byte[] timestamp -> c
    java.util.GregorianCalendar signTime -> d
    java.util.Properties extraParams -> e
    void setExtraParams(java.util.Properties) -> setExtraParams
    java.util.Properties getExtraParams() -> a
    java.lang.String getFileID() -> getFileID
    byte[] getSign() -> getSign
    byte[] getTimestamp() -> getTimestamp
    java.util.GregorianCalendar getSignTime() -> b
es.gob.afirma.signers.pades.PdfTimestamper -> es.gob.afirma.signers.pades.PdfTimestamper:
    java.util.logging.Logger LOGGER -> a
    byte[] timestampPdf(byte[],java.util.Properties,java.util.Calendar) -> timestampPdf
    byte[] getTspToken(java.util.Properties,byte[],java.util.Calendar) -> a
es.gob.afirma.signers.pades.PdfTriPhaseSession -> es.gob.afirma.signers.pades.PdfTriPhaseSession:
    com.aowagie.text.pdf.PdfSignatureAppearance sap -> a
    java.io.ByteArrayOutputStream baos -> b
    java.lang.String fileID -> c
    java.io.ByteArrayOutputStream getBAOS() -> getBAOS
    com.aowagie.text.pdf.PdfSignatureAppearance getSAP() -> getSAP
    java.lang.String getFileID() -> getFileID
es.gob.afirma.signers.pades.PdfUtil -> es.gob.afirma.signers.pades.PdfUtil:
    java.util.logging.Logger LOGGER -> a
    java.util.Set SUPPORTED_SUBFILTERS -> b
    boolean isPdfA1(byte[]) -> a
    boolean isPdfAx(byte[]) -> b
    java.util.GregorianCalendar getSignTime(java.lang.String) -> a
    com.aowagie.text.pdf.PdfReader getPdfReader(byte[],java.util.Properties,boolean) -> a
    void checkPdfCertification(int,java.util.Properties) -> a
    void enableLtv(com.aowagie.text.pdf.PdfStamper) -> a
    boolean getAppendMode(java.util.Properties,com.aowagie.text.pdf.PdfReader) -> a
    boolean pdfHasUnregisteredSignatures(byte[],java.util.Properties) -> a
    java.lang.String getFirstSupportedSignSubFilter(byte[],java.util.Properties) -> b
    boolean pdfHasUnregisteredSignatures(com.aowagie.text.pdf.PdfReader) -> a
    java.util.List getPdfEmptySignatureFields(byte[]) -> getPdfEmptySignatureFields
es.gob.afirma.signers.pades.PdfUtil$SignatureField -> es.gob.afirma.signers.pades.PdfUtil$SignatureField:
    int signaturePositionOnPageLowerLeftX -> a
    int signaturePositionOnPageLowerLeftY -> b
    int signaturePositionOnPageUpperRightX -> c
    int signaturePositionOnPageUpperRightY -> d
    int page -> e
    java.lang.String name -> f
    java.lang.String toString() -> toString
    java.lang.String getName() -> getName
    int getPage() -> getPage
    int getSignaturePositionOnPageUpperRightX() -> getSignaturePositionOnPageUpperRightX
    int getSignaturePositionOnPageUpperRightY() -> getSignaturePositionOnPageUpperRightY
    int getSignaturePositionOnPageLowerLeftY() -> getSignaturePositionOnPageLowerLeftY
    int getSignaturePositionOnPageLowerLeftX() -> getSignaturePositionOnPageLowerLeftX
es.gob.afirma.signers.pades.PdfVisibleAreasUtils -> es.gob.afirma.signers.pades.b:
    java.util.logging.Logger LOGGER -> a
    java.util.Map COLORS -> b
    com.aowagie.text.Font getFont(int,int,int,java.lang.String) -> a
    java.lang.String getLayerText(java.lang.String,java.security.cert.X509Certificate,java.util.Calendar) -> a
es.gob.afirma.signers.pades.PdfVisibleAreasUtils$ColorValues -> es.gob.afirma.signers.pades.c:
    int r -> a
    int g -> b
    int b -> c
    int getR() -> a
    int getG() -> b
    int getB() -> c
es.gob.afirma.signers.pades.SignEnhancer -> es.gob.afirma.signers.pades.SignEnhancer:
    byte[] enhance(byte[],java.util.Properties) -> enhance
es.gob.afirma.signers.pades.XmpHelper -> es.gob.afirma.signers.pades.d:
    java.lang.String getOriginalCreationDateAsW3C(byte[]) -> a
    byte[] addSignHistoryToXmp(byte[],java.util.Calendar) -> a
    byte[] writeXml(org.w3c.dom.Node) -> a
es.gob.afirma.signers.pades.ltv.DocumentSecurityStoreUpgrade -> es.gob.afirma.signers.pades.ltv.DocumentSecurityStoreUpgrade:
    java.util.logging.Logger LOGGER -> a
es.gob.afirma.signers.pades.ltv.PdfDocumentSecurityStore -> es.gob.afirma.signers.pades.ltv.PdfDocumentSecurityStore:
    java.util.List signatures -> a
    java.util.List getSignatures() -> a
    java.util.List getCrls() -> getCrls
    void registerOcspBasicResp(byte[]) -> registerOcspBasicResp
es.gob.afirma.signers.pades.ltv.PdfDocumentSecurityStore$ValidationInformation -> es.gob.afirma.signers.pades.ltv.a:
    java.util.List crl -> a
    java.util.List getCrls() -> a
es.gob.afirma.signers.pkcs7.AOAlgorithmID -> es.gob.afirma.signers.pkcs7.AOAlgorithmID:
    java.util.Dictionary OIDS -> a
    java.lang.String getOID(java.lang.String) -> getOID
es.gob.afirma.signers.pkcs7.ContainsNoDataException -> es.gob.afirma.signers.pkcs7.ContainsNoDataException:
es.gob.afirma.signers.pkcs7.DigestedData -> es.gob.afirma.signers.pkcs7.DigestedData:
    org.spongycastle.asn1.ASN1Integer version -> a
    org.spongycastle.asn1.x509.AlgorithmIdentifier digestAlgorithm -> b
    org.spongycastle.asn1.cms.ContentInfo contentInfo -> c
    org.spongycastle.asn1.ASN1OctetString digest -> d
    java.lang.String getVersion() -> getVersion
    java.lang.String getDigestAlgorithm() -> getDigestAlgorithm
    java.lang.String getContentType() -> getContentType
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
es.gob.afirma.signers.pkcs7.InvalidBouncyCastleException -> es.gob.afirma.signers.pkcs7.InvalidBouncyCastleException:
    java.lang.String exp -> a
    java.lang.String fnd -> b
    java.lang.String getExpectedVersion() -> getExpectedVersion
    java.lang.String getFoundVersion() -> getFoundVersion
es.gob.afirma.signers.pkcs7.InvalidSpongyCastleException -> es.gob.afirma.signers.pkcs7.InvalidSpongyCastleException:
    java.lang.String exp -> a
    java.lang.String fnd -> b
    java.lang.String getExpectedVersion() -> getExpectedVersion
    java.lang.String getFoundVersion() -> getFoundVersion
es.gob.afirma.signers.pkcs7.ObtainContentSignedData -> es.gob.afirma.signers.pkcs7.ObtainContentSignedData:
    java.util.logging.Logger LOGGER -> a
    byte[] obtainData(byte[]) -> obtainData
    byte[] obtainMessageDigest(byte[],java.lang.String) -> obtainMessageDigest
es.gob.afirma.signers.pkcs7.P7ContentSignerParameters -> es.gob.afirma.signers.pkcs7.P7ContentSignerParameters:
    byte[] data -> a
    java.lang.String sigAlgo -> b
    byte[] signature -> c
    java.util.logging.Logger LOGGER -> d
    byte[] getContent() -> getContent
    byte[] getSignature() -> getSignature
    java.lang.String getSignatureAlgorithm() -> getSignatureAlgorithm
es.gob.afirma.signers.pkcs7.ReadNodesTree -> es.gob.afirma.signers.pkcs7.ReadNodesTree:
    java.util.logging.Logger LOGGER -> a
    java.lang.String stringRetorn -> b
    es.gob.afirma.core.util.tree.AOTreeNode rama -> c
    es.gob.afirma.core.util.tree.AOTreeNode rama2 -> d
    java.util.List lista -> e
    java.util.List listaCert -> f
    es.gob.afirma.core.util.tree.AOTreeModel readNodesTree(byte[],boolean) -> readNodesTree
    void getUnsignedAtributes(boolean,org.spongycastle.asn1.ASN1Set,es.gob.afirma.core.util.tree.AOTreeNode,org.spongycastle.asn1.ASN1Set) -> a
    boolean isValideAttributeType(org.spongycastle.asn1.ASN1ObjectIdentifier) -> a
    int[] readNodesFromSigners(java.lang.String[],byte[]) -> readNodesFromSigners
    int[] simplyArray(int[]) -> simplyArray
    java.lang.String searchName(org.spongycastle.asn1.ASN1Set,org.spongycastle.asn1.ASN1Integer) -> a
    java.security.cert.X509Certificate[] searchCert(org.spongycastle.asn1.ASN1Set,org.spongycastle.asn1.ASN1Integer) -> b
    java.util.Date getSigningTime(org.spongycastle.asn1.cms.SignerInfo) -> a
es.gob.afirma.signers.pkcs7.SCChecker -> es.gob.afirma.signers.pkcs7.SCChecker:
    void checkSpongyCastle() -> checkSpongyCastle
es.gob.afirma.signers.pkcs7.SigUtils -> es.gob.afirma.signers.pkcs7.SigUtils:
    java.util.logging.Logger LOGGER -> a
    org.spongycastle.asn1.x509.AlgorithmIdentifier makeAlgId(java.lang.String) -> makeAlgId
    org.spongycastle.asn1.ASN1Set createBerSetFromList(java.util.List) -> createBerSetFromList
    org.spongycastle.asn1.ASN1Set getAttributeSet(org.spongycastle.asn1.cms.AttributeTable) -> getAttributeSet
    org.spongycastle.asn1.ASN1Set fillRestCerts(java.util.List,org.spongycastle.asn1.ASN1EncodableVector) -> fillRestCerts
es.gob.afirma.signers.pkcs7.SignedAndEnvelopedData -> es.gob.afirma.signers.pkcs7.SignedAndEnvelopedData:
    org.spongycastle.asn1.ASN1Integer version -> a
    org.spongycastle.asn1.ASN1Set recipientInfos -> b
    org.spongycastle.asn1.ASN1Primitive digestAlgorithms -> c
    org.spongycastle.asn1.cms.EncryptedContentInfo encryptedContentInfo -> d
    org.spongycastle.asn1.ASN1Set certificates -> e
    org.spongycastle.asn1.ASN1Set crls -> f
    org.spongycastle.asn1.ASN1Set signerInfos -> g
    es.gob.afirma.signers.pkcs7.SignedAndEnvelopedData getInstance(java.lang.Object) -> getInstance
    org.spongycastle.asn1.ASN1Integer getVersion() -> getVersion
    org.spongycastle.asn1.ASN1Set getRecipientInfos() -> getRecipientInfos
    org.spongycastle.asn1.ASN1Primitive getDigestAlgorithms() -> getDigestAlgorithms
    org.spongycastle.asn1.cms.EncryptedContentInfo getEncryptedContentInfo() -> getEncryptedContentInfo
    org.spongycastle.asn1.ASN1Set getCertificates() -> getCertificates
    org.spongycastle.asn1.ASN1Set getSignerInfos() -> getSignerInfos
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
es.gob.afirma.signers.tsp.pkcs7.CMSTimestamper -> es.gob.afirma.signers.tsp.pkcs7.CMSTimestamper:
    java.util.logging.Logger LOGGER -> a
    org.spongycastle.tsp.TimeStampRequestGenerator tsqGenerator -> b
    java.net.URI tsaURL -> c
    java.lang.String tsaUsername -> d
    java.lang.String tsaPassword -> e
    byte[] sslKeyStoreFile -> f
    java.lang.String sslKeyStorePassword -> g
    java.lang.String sslKeyStoreType -> h
    byte[] sslTrustStoreFile -> i
    java.lang.String sslTrustStorePassword -> j
    java.lang.String sslTrustStoreType -> k
    boolean verifyHostname -> l
    byte[] addTimestamp(byte[],java.lang.String,java.util.Calendar) -> addTimestamp
    byte[] getTSAResponse(byte[]) -> a
    byte[] getTSAResponseSocket(byte[]) -> b
    byte[] getTSAResponseExternalSocket(byte[],java.net.Socket) -> a
    byte[] getTSAResponseHttp(byte[]) -> c
    byte[] getTSAResponseHttps(byte[]) -> d
    byte[] getTSAResponseHttp(byte[],java.net.URLConnection) -> a
    java.net.URLConnection prepareConnection(boolean) -> a
    void configureHttpsConnection(java.net.URLConnection) -> a
    byte[] getTimeStampToken(byte[],java.lang.String,java.util.Calendar) -> getTimeStampToken
es.gob.afirma.signers.tsp.pkcs7.CMSTimestamper$1 -> es.gob.afirma.signers.tsp.pkcs7.a:
    es.gob.afirma.signers.tsp.pkcs7.CMSTimestamper this$0 -> a
    boolean verify(java.lang.String,javax.net.ssl.SSLSession) -> verify
es.gob.afirma.signers.tsp.pkcs7.CMSTimestamper$2 -> es.gob.afirma.signers.tsp.pkcs7.b:
    es.gob.afirma.signers.tsp.pkcs7.CMSTimestamper this$0 -> a
    void checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkClientTrusted
    void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkServerTrusted
    java.security.cert.X509Certificate[] getAcceptedIssuers() -> getAcceptedIssuers
es.gob.afirma.signers.tsp.pkcs7.TsaParams -> es.gob.afirma.signers.tsp.pkcs7.TsaParams:
    java.lang.String TS_SIGN -> TS_SIGN
    java.lang.String TS_DOC -> TS_DOC
    java.lang.String TS_SIGN_DOC -> TS_SIGN_DOC
    boolean tsaRequireCert -> a
    java.lang.String tsaPolicy -> b
    java.net.URI tsaURL -> c
    java.lang.String tsaUsr -> d
    java.lang.String tsaPwd -> e
    es.gob.afirma.signers.tsp.pkcs7.TsaRequestExtension[] extensions -> f
    java.lang.String tsaHashAlgorithm -> g
    byte[] sslKeyStore -> h
    java.lang.String sslKeyStorePassword -> i
    java.lang.String sslKeyStoreType -> j
    byte[] sslTrustStore -> k
    java.lang.String sslTrustStorePassword -> l
    java.lang.String sslTrustStoreType -> m
    boolean verifyHostname -> n
    java.util.logging.Logger LOGGER -> o
    boolean doTsaRequireCert() -> a
    java.lang.String getTsaPolicy() -> b
    java.net.URI getTsaUrl() -> c
    java.lang.String getTsaUsr() -> d
    java.lang.String getTsaPwd() -> e
    es.gob.afirma.signers.tsp.pkcs7.TsaRequestExtension[] getExtensions() -> f
    es.gob.afirma.signers.tsp.pkcs7.TsaRequestExtension[] getExtensions(java.util.Properties) -> a
    java.lang.String getTsaHashAlgorithm() -> getTsaHashAlgorithm
    byte[] getSslKeyStore() -> getSslKeyStore
    java.lang.String getSslKeyStorePassword() -> getSslKeyStorePassword
    java.lang.String getSslKeyStoreType() -> getSslKeyStoreType
    byte[] getSslTrustStore() -> getSslTrustStore
    java.lang.String getSslTrustStorePassword() -> getSslTrustStorePassword
    java.lang.String getSslTrustStoreType() -> getSslTrustStoreType
    boolean isVerifyHostname() -> isVerifyHostname
    java.util.Properties getExtraParams() -> getExtraParams
    java.lang.String toString() -> toString
es.gob.afirma.signers.tsp.pkcs7.TsaRequestExtension -> es.gob.afirma.signers.tsp.pkcs7.TsaRequestExtension:
    java.lang.String oid -> a
    boolean critical -> b
    byte[] value -> c
    java.lang.String toString() -> toString
    boolean isCritical() -> a
    java.lang.String getOid() -> b
    byte[] getValue() -> c
es.gob.afirma.signers.xades.AOFacturaESigner -> es.gob.afirma.signers.xades.AOFacturaESigner:
    es.gob.afirma.core.signers.AdESPolicy POLICY_FACTURAE_31 -> a
    es.gob.afirma.core.signers.AdESPolicy POLICY_FACTURAE_30 -> b
    es.gob.afirma.core.signers.AOSigner XADES_SIGNER -> c
    java.util.Set ALLOWED_PARAMS -> d
    java.util.Properties EXTRA_PARAMS -> e
    java.util.logging.Logger LOGGER -> f
    byte[] sign(byte[],java.lang.String,java.security.PrivateKey,java.security.cert.Certificate[],java.util.Properties) -> sign
    byte[] cosign(byte[],byte[],java.lang.String,java.security.PrivateKey,java.security.cert.Certificate[],java.util.Properties) -> cosign
    byte[] cosign(byte[],java.lang.String,java.security.PrivateKey,java.security.cert.Certificate[],java.util.Properties) -> cosign
    byte[] countersign(byte[],java.lang.String,es.gob.afirma.core.signers.CounterSignTarget,java.lang.Object[],java.security.PrivateKey,java.security.cert.Certificate[],java.util.Properties) -> countersign
    java.util.Properties getFacturaEExtraParams(java.util.Properties) -> getFacturaEExtraParams
    es.gob.afirma.core.util.tree.AOTreeModel getSignersStructure(byte[],boolean) -> getSignersStructure
    boolean isSign(byte[]) -> isSign
    boolean isValidDataFile(byte[]) -> isValidDataFile
    java.lang.String getSignedName(java.lang.String,java.lang.String) -> getSignedName
    byte[] getData(byte[]) -> getData
    es.gob.afirma.core.signers.AOSignInfo getSignInfo(byte[]) -> getSignInfo
es.gob.afirma.signers.xades.AOXAdESSigner -> es.gob.afirma.signers.xades.AOXAdESSigner:
    java.util.logging.Logger LOGGER -> a
    java.lang.String SIGNATURE_TAG -> SIGNATURE_TAG
    byte[] sign(byte[],java.lang.String,java.security.PrivateKey,java.security.cert.Certificate[],java.util.Properties) -> sign
    boolean isDetached(org.w3c.dom.Element) -> isDetached
    boolean isEnveloped(org.w3c.dom.Element) -> isEnveloped
    boolean isEnveloping(org.w3c.dom.Element) -> isEnveloping
    byte[] getData(byte[]) -> getData
    void removeEnvelopedSignatures(org.w3c.dom.Element) -> a
    boolean isBase64TransformationDeclared(org.w3c.dom.Element,java.lang.String) -> a
    byte[] cosign(byte[],byte[],java.lang.String,java.security.PrivateKey,java.security.cert.Certificate[],java.util.Properties) -> cosign
    byte[] cosign(byte[],java.lang.String,java.security.PrivateKey,java.security.cert.Certificate[],java.util.Properties) -> cosign
    byte[] countersign(byte[],java.lang.String,es.gob.afirma.core.signers.CounterSignTarget,java.lang.Object[],java.security.PrivateKey,java.security.cert.Certificate[],java.util.Properties) -> countersign
    es.gob.afirma.core.util.tree.AOTreeModel getSignersStructure(byte[],boolean) -> getSignersStructure
    es.gob.afirma.core.util.tree.AOTreeNode[] generateSignsTree(int,int,java.util.List,java.util.List,java.util.List) -> a
    boolean isSign(byte[]) -> isSign
    boolean isValidDataFile(byte[]) -> isValidDataFile
    java.lang.String getSignedName(java.lang.String,java.lang.String) -> getSignedName
    org.w3c.dom.Document insertarNodoAfirma(org.w3c.dom.Document) -> a
    es.gob.afirma.core.signers.AOSignInfo getSignInfo(byte[]) -> getSignInfo
es.gob.afirma.signers.xades.AOXMLAdvancedSignature -> es.gob.afirma.signers.xades.a:
    java.util.logging.Logger LOGGER -> a
    java.lang.String canonicalizationMethod -> p
    org.w3c.dom.Element styleElement -> q
    java.lang.String styleType -> r
    java.lang.String styleEncoding -> s
    java.lang.String styleId -> t
    void addStyleSheetEnvelopingOntoSignature(es.gob.afirma.signers.xml.style.XmlStyle,java.lang.String) -> a
    void setCanonicalizationMethod(java.lang.String) -> a
    javax.xml.crypto.dsig.keyinfo.KeyInfo newKeyInfo(java.util.List,java.lang.String,boolean,boolean,boolean) -> a
    void sign(java.util.List,java.security.PrivateKey,java.lang.String,java.util.List,java.lang.String,boolean,boolean,boolean,boolean) -> a
    es.gob.afirma.signers.xades.AOXMLAdvancedSignature newInstance(net.java.xades.security.xml.XAdES.XAdES_BES) -> a
es.gob.afirma.signers.xades.EFacturaAlreadySignedException -> es.gob.afirma.signers.xades.EFacturaAlreadySignedException:
es.gob.afirma.signers.xades.EscapeHelper -> es.gob.afirma.signers.xades.b:
    java.util.logging.Logger LOGGER -> a
    java.util.List getEscapedCertificates(java.util.List) -> a
    java.lang.String escapeLdapName(java.lang.String) -> a
    java.lang.String escapeCharacters(java.lang.String) -> b
es.gob.afirma.signers.xades.EscapeHelper$EscapedCertificate -> es.gob.afirma.signers.xades.c:
    java.security.cert.X509Certificate cert -> a
    javax.security.auth.x500.X500Principal escapePrincipal(java.security.Principal) -> a
    java.security.Principal getSubjectDN() -> getSubjectDN
    javax.security.auth.x500.X500Principal getSubjectX500Principal() -> getSubjectX500Principal
    java.security.Principal getIssuerDN() -> getIssuerDN
    javax.security.auth.x500.X500Principal getIssuerX500Principal() -> getIssuerX500Principal
    java.util.Set getCriticalExtensionOIDs() -> getCriticalExtensionOIDs
    byte[] getExtensionValue(java.lang.String) -> getExtensionValue
    java.util.Set getNonCriticalExtensionOIDs() -> getNonCriticalExtensionOIDs
    boolean hasUnsupportedCriticalExtension() -> hasUnsupportedCriticalExtension
    void checkValidity() -> checkValidity
    void checkValidity(java.util.Date) -> checkValidity
    int getBasicConstraints() -> getBasicConstraints
    boolean[] getIssuerUniqueID() -> getIssuerUniqueID
    boolean[] getKeyUsage() -> getKeyUsage
    java.util.Date getNotAfter() -> getNotAfter
    java.util.Date getNotBefore() -> getNotBefore
    java.math.BigInteger getSerialNumber() -> getSerialNumber
    java.lang.String getSigAlgName() -> getSigAlgName
    java.lang.String getSigAlgOID() -> getSigAlgOID
    byte[] getSigAlgParams() -> getSigAlgParams
    byte[] getSignature() -> getSignature
    boolean[] getSubjectUniqueID() -> getSubjectUniqueID
    byte[] getTBSCertificate() -> getTBSCertificate
    int getVersion() -> getVersion
    byte[] getEncoded() -> getEncoded
    java.security.PublicKey getPublicKey() -> getPublicKey
    java.lang.String toString() -> toString
    void verify(java.security.PublicKey) -> verify
    void verify(java.security.PublicKey,java.lang.String) -> verify
es.gob.afirma.signers.xades.InvalidEFacturaDataException -> es.gob.afirma.signers.xades.InvalidEFacturaDataException:
es.gob.afirma.signers.xades.XAdESCoSigner -> es.gob.afirma.signers.xades.XAdESCoSigner:
    byte[] cosign(byte[],java.lang.String,java.security.PrivateKey,java.security.cert.Certificate[],java.util.Properties) -> cosign
es.gob.afirma.signers.xades.XAdESCommonMetadataUtil -> es.gob.afirma.signers.xades.d:
    void addCommonMetadata(net.java.xades.security.xml.XAdES.XAdES_EPES,java.util.Properties) -> a
    net.java.xades.security.xml.XAdES.SignerRole parseSignerRole(java.util.Properties) -> a
    net.java.xades.security.xml.XAdES.SignatureProductionPlace getSignatureProductionPlace(java.util.Properties) -> b
    net.java.xades.security.xml.XAdES.SignatureProductionPlace getSignatureProductionPlace(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
    net.java.xades.security.xml.XAdES.SignaturePolicyIdentifier getPolicy(java.util.Properties) -> c
    net.java.xades.security.xml.XAdES.SignaturePolicyIdentifier getPolicy(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
es.gob.afirma.signers.xades.XAdESCounterSigner -> es.gob.afirma.signers.xades.XAdESCounterSigner:
    java.util.logging.Logger LOGGER -> a
    byte[] countersign(byte[],java.lang.String,es.gob.afirma.core.signers.CounterSignTarget,java.lang.Object[],java.security.PrivateKey,java.security.cert.Certificate[],java.util.Properties) -> countersign
    void countersignLeafs(org.w3c.dom.Element,java.security.PrivateKey,java.security.cert.Certificate[],java.util.Properties,java.lang.String,org.w3c.dom.Document) -> a
    void countersignNodes(org.w3c.dom.Element,java.lang.Object[],java.security.PrivateKey,java.security.cert.Certificate[],java.util.Properties,java.lang.String,org.w3c.dom.Document) -> a
    void countersignSigners(org.w3c.dom.Element,java.lang.Object[],java.security.PrivateKey,java.security.cert.Certificate[],java.util.Properties,java.lang.String,org.w3c.dom.Document) -> b
    void countersignTree(org.w3c.dom.Element,java.security.PrivateKey,java.security.cert.Certificate[],java.util.Properties,java.lang.String,org.w3c.dom.Document) -> b
    void cs(org.w3c.dom.Element,java.security.PrivateKey,java.security.cert.Certificate[],java.util.Properties,java.lang.String,org.w3c.dom.Document) -> c
es.gob.afirma.signers.xades.XAdESExtraParams -> es.gob.afirma.signers.xades.XAdESExtraParams:
    java.lang.String URI -> URI
    java.lang.String USE_MANIFEST -> USE_MANIFEST
    java.lang.String FORMAT -> FORMAT
    java.lang.String ADD_KEY_INFO_KEY_NAME -> ADD_KEY_INFO_KEY_NAME
    java.lang.String ADD_KEY_INFO_X509_ISSUER_SERIAL -> ADD_KEY_INFO_X509_ISSUER_SERIAL
    java.util.Map COMMITMENT_TYPE_IDENTIFIERS -> a
    java.lang.String ROOT_XML_NODE_NAME -> ROOT_XML_NODE_NAME
    java.lang.String ROOT_XML_NODE_NAMESPACE -> ROOT_XML_NODE_NAMESPACE
    java.lang.String ROOT_XML_NODE_NAMESPACE_PREFIX -> ROOT_XML_NODE_NAMESPACE_PREFIX
es.gob.afirma.signers.xades.XAdESSigner -> es.gob.afirma.signers.xades.XAdESSigner:
    java.util.logging.Logger LOGGER -> a
    byte[] sign(byte[],java.lang.String,java.security.PrivateKey,java.security.cert.Certificate[],java.util.Properties) -> sign
es.gob.afirma.signers.xades.XAdESUtil -> es.gob.afirma.signers.xades.e:
    java.util.logging.Logger LOGGER -> a
    java.lang.String[] SUPPORTED_XADES_NAMESPACE_URIS -> b
    boolean checkSignNodes(java.util.List) -> a
    es.gob.afirma.signers.xades.AOXMLAdvancedSignature getXmlAdvancedSignature(net.java.xades.security.xml.XAdES.XAdES_EPES,java.lang.String,java.lang.String,java.lang.String) -> a
    org.w3c.dom.Element getFirstElmentFromXPath(java.lang.String,org.w3c.dom.Element) -> a
    java.util.List parseCommitmentTypeIndications(java.util.Properties,java.lang.String) -> a
    java.lang.String getDigestMethodByCommonName(java.lang.String) -> a
    org.w3c.dom.Element getRootElement(org.w3c.dom.Document,java.util.Properties) -> a
    java.util.List createManifest(java.util.List,javax.xml.crypto.dsig.XMLSignatureFactory,es.gob.afirma.signers.xades.AOXMLAdvancedSignature,javax.xml.crypto.dsig.DigestMethod,javax.xml.crypto.dsig.Transform,java.lang.String) -> a
    java.util.Map getOriginalXMLProperties(org.w3c.dom.Document,java.lang.String) -> a
es.gob.afirma.signers.xades.asic.AOXAdESASiCSSigner -> es.gob.afirma.signers.xades.asic.AOXAdESASiCSSigner:
    java.util.logging.Logger LOGGER -> a
    byte[] sign(byte[],java.lang.String,java.security.PrivateKey,java.security.cert.Certificate[],java.util.Properties) -> sign
    byte[] cosign(byte[],byte[],java.lang.String,java.security.PrivateKey,java.security.cert.Certificate[],java.util.Properties) -> cosign
    byte[] cosign(byte[],java.lang.String,java.security.PrivateKey,java.security.cert.Certificate[],java.util.Properties) -> cosign
    byte[] countersign(byte[],java.lang.String,es.gob.afirma.core.signers.CounterSignTarget,java.lang.Object[],java.security.PrivateKey,java.security.cert.Certificate[],java.util.Properties) -> countersign
    es.gob.afirma.core.util.tree.AOTreeModel getSignersStructure(byte[],boolean) -> getSignersStructure
    boolean isSign(byte[]) -> isSign
    boolean isValidDataFile(byte[]) -> isValidDataFile
    java.lang.String getSignedName(java.lang.String,java.lang.String) -> getSignedName
    byte[] getData(byte[]) -> getData
    es.gob.afirma.core.signers.AOSignInfo getSignInfo(byte[]) -> getSignInfo
    java.util.Properties setASiCProperties(java.util.Properties,byte[]) -> setASiCProperties
es.gob.afirma.signers.xml.CustomUriDereferencer -> es.gob.afirma.signers.xml.CustomUriDereferencer:
    javax.xml.crypto.URIDereferencer defaultUriDereferencer -> a
    java.lang.Class getNodesetDataClass() -> a
    java.lang.Class getOctetStreamDataClass() -> b
    java.lang.Class getXmlSignatureInputClass() -> c
    java.lang.Class getDereferencerClass() -> d
    javax.xml.crypto.URIDereferencer getDefaultDereferencer() -> getDefaultDereferencer
    javax.xml.crypto.Data dereference(javax.xml.crypto.URIReference,javax.xml.crypto.XMLCryptoContext) -> dereference
    org.w3c.dom.Node getNodeByInternalUriReference(java.lang.String,org.w3c.dom.Document) -> getNodeByInternalUriReference
    javax.xml.crypto.Data getStreamData(org.w3c.dom.Node) -> a
    org.w3c.dom.Element getElementById(org.w3c.dom.Document,java.lang.String) -> getElementById
es.gob.afirma.signers.xml.InvalidXMLException -> es.gob.afirma.signers.xml.InvalidXMLException:
es.gob.afirma.signers.xml.Utils -> es.gob.afirma.signers.xml.Utils:
    java.util.logging.Logger LOGGER -> a
    java.lang.String addStyleSheetHeader(java.lang.String,java.lang.String,java.lang.String) -> a
    void addCustomTransforms(java.util.List,java.util.Properties,java.lang.String) -> addCustomTransforms
    java.util.List getObjectReferenceTransforms(org.w3c.dom.Node,java.lang.String) -> getObjectReferenceTransforms
    java.lang.String getTransformAlgorithm(org.w3c.dom.Node) -> a
    javax.xml.crypto.dsig.spec.TransformParameterSpec getTransformParameterSpec(org.w3c.dom.Node,java.lang.String) -> a
    void checkIllegalParams(java.lang.String,java.lang.String,java.net.URI,java.lang.String,boolean) -> checkIllegalParams
    java.lang.String guessXAdESNamespaceURL(org.w3c.dom.Node) -> guessXAdESNamespaceURL
    java.lang.String guessXAdESNamespacePrefix(org.w3c.dom.Element) -> guessXAdESNamespacePrefix
    java.lang.String guessXmlDSigNamespacePrefix(org.w3c.dom.Element) -> guessXmlDSigNamespacePrefix
    int countSubstring(java.lang.String,java.lang.String) -> countSubstring
    byte[] writeXML(org.w3c.dom.Node,java.util.Map,java.lang.String,java.lang.String) -> writeXML
    void writeXMLwithXALAN(java.io.Writer,org.w3c.dom.Node,java.lang.String) -> a
    es.gob.afirma.core.signers.AOSimpleSignInfo getSimpleSignInfoNode(java.lang.String,org.w3c.dom.Element) -> getSimpleSignInfoNode
    java.lang.String getStringInfoNode(org.w3c.dom.Element) -> getStringInfoNode
    java.security.cert.X509Certificate getCertificate(org.w3c.dom.Node) -> getCertificate
    java.lang.String getCounterSignerReferenceId(org.w3c.dom.Element,org.w3c.dom.NodeList) -> getCounterSignerReferenceId
    java.security.cert.X509Certificate createCert(java.lang.String) -> createCert
    javax.xml.crypto.dsig.XMLSignatureFactory getDOMFactory() -> getDOMFactory
    void installXmlDSigProvider(boolean) -> installXmlDSigProvider
es.gob.afirma.signers.xml.XMLConstants -> es.gob.afirma.signers.xml.XMLConstants:
    java.lang.String DSIGNNS -> DSIGNNS
    java.util.Map SIGN_ALGOS_URI -> SIGN_ALGOS_URI
    java.lang.String BASE64_ENCODING -> BASE64_ENCODING
    java.util.Map MESSAGEDIGEST_ALGOS_URI -> MESSAGEDIGEST_ALGOS_URI
    java.lang.String DEFAULT_MIMETYPE -> DEFAULT_MIMETYPE
    java.lang.String OBJURI -> OBJURI
es.gob.afirma.signers.xml.style.CannotDereferenceException -> es.gob.afirma.signers.xml.style.CannotDereferenceException:
es.gob.afirma.signers.xml.style.IsInnerlException -> es.gob.afirma.signers.xml.style.IsInnerlException:
es.gob.afirma.signers.xml.style.ReferenceIsNotXmlException -> es.gob.afirma.signers.xml.style.ReferenceIsNotXmlException:
es.gob.afirma.signers.xml.style.StyleException -> es.gob.afirma.signers.xml.style.StyleException:
es.gob.afirma.signers.xml.style.XmlStyle -> es.gob.afirma.signers.xml.style.XmlStyle:
    java.util.logging.Logger LOGGER -> a
    org.w3c.dom.Element element -> b
    java.lang.String type -> c
    java.lang.String href -> d
    java.lang.String encoding -> e
    void setStyleElement(org.w3c.dom.Element) -> setStyleElement
    org.w3c.dom.Element getStyleElement() -> getStyleElement
    java.lang.String getStyleType() -> getStyleType
    java.lang.String getStyleHref() -> getStyleHref
    java.lang.String getStyleEncoding() -> getStyleEncoding
    java.util.Properties getStyleSheetHeader(java.lang.String) -> a
    org.w3c.dom.Document dereferenceStyleSheet(java.lang.String,boolean) -> a
es.gob.afirma.signers.xml.style.XmlStyleMessages -> es.gob.afirma.signers.xml.style.a:
    java.util.ResourceBundle RESOURCE_BUNDLE -> a
    java.lang.String getString(java.lang.String) -> a
    java.lang.String getString(java.lang.String,java.lang.String) -> a
es.gob.afirma.signers.xmldsig.AOXMLDSigSigner -> es.gob.afirma.signers.xmldsig.AOXMLDSigSigner:
    java.util.logging.Logger LOGGER -> a
    java.lang.String algo -> b
    org.w3c.dom.Document doc -> c
    byte[] sign(byte[],java.lang.String,java.security.PrivateKey,java.security.cert.Certificate[],java.util.Properties) -> sign
    boolean isDetached(org.w3c.dom.Element) -> a
    boolean isEnveloped(org.w3c.dom.Element) -> b
    boolean isEnveloping(org.w3c.dom.Element) -> c
    byte[] getData(byte[]) -> getData
    byte[] cosign(byte[],byte[],java.lang.String,java.security.PrivateKey,java.security.cert.Certificate[],java.util.Properties) -> cosign
    byte[] cosign(byte[],java.lang.String,java.security.PrivateKey,java.security.cert.Certificate[],java.util.Properties) -> cosign
    byte[] countersign(byte[],java.lang.String,es.gob.afirma.core.signers.CounterSignTarget,java.lang.Object[],java.security.PrivateKey,java.security.cert.Certificate[],java.util.Properties) -> countersign
    void countersignTree(org.w3c.dom.Element,java.security.PrivateKey,java.security.cert.Certificate[],boolean,java.lang.String,java.lang.String,java.lang.String) -> a
    void countersignLeafs(org.w3c.dom.Element,java.security.PrivateKey,java.security.cert.Certificate[],boolean,java.lang.String,java.lang.String,java.lang.String) -> b
    void countersignNodes(org.w3c.dom.Element,java.lang.Object[],java.security.PrivateKey,java.security.cert.Certificate[],boolean,java.lang.String,java.lang.String,java.lang.String) -> a
    void addSubNodes(java.lang.String,org.w3c.dom.NodeList,java.lang.String[],java.util.List) -> a
    void countersignSigners(org.w3c.dom.Element,java.lang.Object[],java.security.PrivateKey,java.security.cert.Certificate[],boolean,java.lang.String,java.lang.String,java.lang.String) -> b
    void cs(org.w3c.dom.Element,java.security.PrivateKey,java.security.cert.Certificate[],boolean,java.lang.String,java.lang.String,java.lang.String) -> c
    es.gob.afirma.core.util.tree.AOTreeModel getSignersStructure(byte[],boolean) -> getSignersStructure
    es.gob.afirma.core.util.tree.AOTreeNode[] generaArbol(int,int,es.gob.afirma.core.util.tree.AOTreeNode[],java.lang.String[],java.lang.String[]) -> a
    boolean isSign(byte[]) -> isSign
    boolean isValidDataFile(byte[]) -> isValidDataFile
    java.lang.String getSignedName(java.lang.String,java.lang.String) -> getSignedName
    org.w3c.dom.Document insertarNodoAfirma(org.w3c.dom.Document) -> a
    es.gob.afirma.core.signers.AOSignInfo getSignInfo(byte[]) -> getSignInfo
    void writeXML(java.io.Writer,org.w3c.dom.Node) -> a
    org.w3c.dom.Element searchDataElement(java.lang.String,org.w3c.dom.Element) -> a
es.gob.afirma.signers.xmldsig.XmlDSigUtil -> es.gob.afirma.signers.xmldsig.a:
    java.util.List cleanReferencesList(java.util.List) -> a
es.gob.afirma.ui.core.jse.AWTUIManager -> es.gob.afirma.ui.core.jse.AWTUIManager:
    java.io.File saveDataToFile(byte[],java.lang.String,java.lang.String,java.lang.String,java.lang.String[],java.lang.String,java.lang.Object) -> saveDataToFile
    java.io.File[] getLoadFiles(java.lang.String,java.lang.String,java.lang.String,java.lang.String[],java.lang.String,boolean,boolean,java.lang.Object,java.lang.Object) -> getLoadFiles
    boolean isJava7() -> a
es.gob.afirma.ui.core.jse.AWTUIManager$1 -> es.gob.afirma.ui.core.jse.a:
    java.lang.String[] val$exts -> a
    es.gob.afirma.ui.core.jse.AWTUIManager this$0 -> b
    boolean accept(java.io.File,java.lang.String) -> accept
es.gob.afirma.ui.core.jse.AWTUIManager$2 -> es.gob.afirma.ui.core.jse.b:
    java.lang.String[] val$extensions -> a
    es.gob.afirma.ui.core.jse.AWTUIManager this$0 -> b
    boolean accept(java.io.File,java.lang.String) -> accept
es.gob.afirma.ui.core.jse.FileExtensionFilter -> es.gob.afirma.ui.core.jse.c:
    java.lang.String[] exts -> a
    java.lang.String desc -> b
    java.lang.String getDescription() -> getDescription
    boolean accept(java.io.File) -> accept
es.gob.afirma.ui.core.jse.JSEUIManager -> es.gob.afirma.ui.core.jse.JSEUIManager:
    java.util.logging.Logger LOGGER -> LOGGER
    java.util.prefs.Preferences preferences -> a
    java.lang.String PREFERENCE_DIRECTORY -> PREFERENCE_DIRECTORY
    java.lang.String get(java.lang.String,java.lang.String) -> get
    void put(java.lang.String,java.lang.String) -> put
    char[] getPassword(java.lang.String,java.lang.Object) -> getPassword
    char[] getPassword(java.lang.String,java.lang.Object,java.lang.String,boolean,java.lang.Object) -> getPassword
    java.lang.Object showInputDialog(java.lang.Object,java.lang.Object,java.lang.String,int,java.lang.Object,java.lang.Object[],java.lang.Object) -> showInputDialog
    java.lang.String showCertificateSelectionDialog(java.lang.Object,es.gob.afirma.core.ui.KeyStoreDialogManager) -> showCertificateSelectionDialog
    int showConfirmDialog(java.lang.Object,java.lang.Object,java.lang.String,int,int) -> showConfirmDialog
    void showMessageDialog(java.lang.Object,java.lang.Object,java.lang.String,int) -> showMessageDialog
    void showMessageDialog(java.lang.Object,java.lang.Object,java.lang.String,int,java.lang.Object) -> showMessageDialog
    int getPlainMessageCode() -> getPlainMessageCode
    int getYesNoOptionCode() -> getYesNoOptionCode
    int getWarningMessageCode() -> getWarningMessageCode
    int getYesOptionCode() -> getYesOptionCode
    int getNoOptionCode() -> getNoOptionCode
    int getOkCancelOptionCode() -> getOkCancelOptionCode
    int getOkOptionCode() -> getOkOptionCode
    int getInformationMessageCode() -> getInformationMessageCode
    int getErrorMessageCode() -> getErrorMessageCode
    int getQuestionMessageCode() -> getQuestionMessageCode
    java.io.File[] getLoadFiles(java.lang.String,java.lang.String,java.lang.String,java.lang.String[],java.lang.String,boolean,boolean,java.lang.Object,java.lang.Object) -> getLoadFiles
    java.io.File saveDataToFile(byte[],java.lang.String,java.lang.String,java.lang.String,java.lang.String[],java.lang.String,java.lang.Object) -> saveDataToFile
    void configureDefaultDir(javax.swing.JFileChooser,java.lang.String,java.lang.String) -> a
    void showErrorMessage(java.lang.Object,java.lang.Object,java.lang.String,int) -> showErrorMessage
es.gob.afirma.ui.core.jse.JSEUIManager$1 -> es.gob.afirma.ui.core.jse.d:
    javax.swing.JPasswordField val$pwd -> a
    es.gob.afirma.ui.core.jse.JSEUIManager this$0 -> b
    void selectInitialValue() -> selectInitialValue
es.gob.afirma.ui.core.jse.JSEUIManager$2 -> es.gob.afirma.ui.core.jse.e:
    java.lang.Object val$icon -> a
    es.gob.afirma.ui.core.jse.JSEUIManager this$0 -> b
    javax.swing.JDialog createDialog(java.awt.Component) -> createDialog
es.gob.afirma.ui.core.jse.JSEUIManager$ExtFilter -> es.gob.afirma.ui.core.jse.f:
    java.lang.String[] extensions -> a
    java.lang.String description -> b
    boolean accept(java.io.File) -> accept
    java.lang.String getDescription() -> getDescription
    java.lang.String getExtension(java.io.File) -> a
es.gob.afirma.ui.core.jse.JSEUIManager$JTextFieldASCIIFilter -> es.gob.afirma.ui.core.jse.JSEUIManager$JTextFieldASCIIFilter:
    boolean beep -> a
    void insertString(int,java.lang.String,javax.swing.text.AttributeSet) -> insertString
es.gob.afirma.ui.core.jse.JSEUIManager$JTextFieldFilter -> es.gob.afirma.ui.core.jse.g:
    java.lang.String acceptedChars -> a
    boolean beep -> b
    void insertString(int,java.lang.String,javax.swing.text.AttributeSet) -> insertString
es.gob.afirma.ui.core.jse.JSEUIMessages -> es.gob.afirma.ui.core.jse.h:
    java.util.ResourceBundle RESOURCE_BUNDLE -> a
    java.lang.String getString(java.lang.String) -> a
    java.lang.String getString(java.lang.String,java.lang.String) -> a
es.gob.afirma.ui.core.jse.JSEUtils -> es.gob.afirma.ui.core.jse.JSEUtils:
    javax.swing.tree.DefaultTreeModel convertToSwingModel(es.gob.afirma.core.util.tree.AOTreeModel) -> convertToSwingModel
es.gob.afirma.ui.core.jse.certificateselection.CertificateIconManager -> es.gob.afirma.ui.core.jse.certificateselection.a:
    javax.swing.ImageIcon ICON_CNP_NORMAL -> a
    javax.swing.ImageIcon ICON_CNP_WARNING -> b
    javax.swing.ImageIcon ICON_CNP_ERROR -> c
    javax.swing.ImageIcon ICON_DNIE_NORMAL -> d
    javax.swing.ImageIcon ICON_DNIE_WARNING -> e
    javax.swing.ImageIcon ICON_DNIE_ERROR -> f
    javax.swing.ImageIcon ICON_OTHER_NORMAL -> g
    javax.swing.ImageIcon ICON_OTHER_WARNING -> h
    javax.swing.ImageIcon ICON_OTHER_ERROR -> i
    javax.swing.ImageIcon ICON_FNMT_NORMAL -> j
    javax.swing.ImageIcon ICON_FNMT_WARNING -> k
    javax.swing.ImageIcon ICON_FNMT_ERROR -> l
    boolean isDNIeCert(java.security.cert.X509Certificate) -> d
    boolean isCnpCert(java.security.cert.X509Certificate) -> e
    boolean isFnmtCert(java.security.cert.X509Certificate) -> f
    javax.swing.ImageIcon getNormalIcon(java.security.cert.X509Certificate) -> a
    javax.swing.ImageIcon getWarningIcon(java.security.cert.X509Certificate) -> b
    javax.swing.ImageIcon getErrorIcon(java.security.cert.X509Certificate) -> c
es.gob.afirma.ui.core.jse.certificateselection.CertificateSelectionDialog -> es.gob.afirma.ui.core.jse.certificateselection.CertificateSelectionDialog:
    java.util.logging.Logger LOGGER -> a
    es.gob.afirma.ui.core.jse.certificateselection.CertificateSelectionPanel csd -> b
    javax.swing.JOptionPane optionPane -> c
    java.awt.Component parent -> d
    es.gob.afirma.core.ui.KeyStoreDialogManager ksdm -> e
    boolean disableSelection -> f
    java.util.Comparator CERT_NAME_COMPARATOR -> g
    java.lang.String showDialog() -> showDialog
    void mouseClicked(java.awt.event.MouseEvent) -> mouseClicked
    void refresh() -> refresh
    void refreshDialog() -> a
    void changeKeyStore(es.gob.afirma.core.keystores.KeyStoreManager) -> changeKeyStore
es.gob.afirma.ui.core.jse.certificateselection.CertificateSelectionDialog$1 -> es.gob.afirma.ui.core.jse.certificateselection.b:
    int compare(es.gob.afirma.core.keystores.NameCertificateBean,es.gob.afirma.core.keystores.NameCertificateBean) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
es.gob.afirma.ui.core.jse.certificateselection.CertificateSelectionDialog$CertOptionPane -> es.gob.afirma.ui.core.jse.certificateselection.c:
    es.gob.afirma.ui.core.jse.certificateselection.CertificateSelectionPanel selectionPanel -> a
    void selectInitialValue() -> selectInitialValue
es.gob.afirma.ui.core.jse.certificateselection.CertificateSelectionDialogMessages -> es.gob.afirma.ui.core.jse.certificateselection.d:
    java.util.ResourceBundle RESOURCE_BUNDLE -> a
    java.lang.String getString(java.lang.String) -> a
    java.lang.String getString(java.lang.String,java.lang.String[]) -> a
es.gob.afirma.ui.core.jse.certificateselection.CertificateSelectionDispatcherListener -> es.gob.afirma.ui.core.jse.certificateselection.e:
    java.awt.Component parent -> a
    es.gob.afirma.ui.core.jse.certificateselection.CertificateSelectionDialog selectionDialog -> b
    boolean dispatchKeyEvent(java.awt.event.KeyEvent) -> dispatchKeyEvent
es.gob.afirma.ui.core.jse.certificateselection.CertificateSelectionPanel -> es.gob.afirma.ui.core.jse.certificateselection.f:
    java.awt.Font TITLE_FONT -> b
    java.awt.Font TEXT_FONT -> c
    javax.swing.JList certList -> d
    javax.swing.JScrollPane sPane -> a
    int selectedIndex -> e
    es.gob.afirma.core.keystores.NameCertificateBean[] certificateBeans -> f
    void createUI(es.gob.afirma.ui.core.jse.certificateselection.CertificateSelectionDialog,java.lang.String,java.lang.String,boolean,boolean) -> a
    void refresh(es.gob.afirma.core.keystores.NameCertificateBean[]) -> a
    void selectCertificateList() -> a
    java.lang.String getSelectedCertificateAlias() -> b
    void addCertificateListMouseListener(java.awt.event.MouseListener) -> a
    es.gob.afirma.ui.core.jse.certificateselection.CertificateSelectionPanel$CertificateLine createCertLine(java.lang.String,java.security.cert.X509Certificate) -> a
    void valueChanged(javax.swing.event.ListSelectionEvent) -> valueChanged
es.gob.afirma.ui.core.jse.certificateselection.CertificateSelectionPanel$1 -> es.gob.afirma.ui.core.jse.certificateselection.g:
    es.gob.afirma.ui.core.jse.certificateselection.CertificateSelectionDialog val$selectionDialog -> a
    es.gob.afirma.ui.core.jse.certificateselection.CertificateSelectionPanel this$0 -> b
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
es.gob.afirma.ui.core.jse.certificateselection.CertificateSelectionPanel$2 -> es.gob.afirma.ui.core.jse.certificateselection.h:
    es.gob.afirma.ui.core.jse.certificateselection.CertificateSelectionDialog val$selectionDialog -> a
    es.gob.afirma.ui.core.jse.certificateselection.CertificateSelectionPanel this$0 -> b
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
es.gob.afirma.ui.core.jse.certificateselection.CertificateSelectionPanel$3 -> es.gob.afirma.ui.core.jse.certificateselection.i:
    es.gob.afirma.ui.core.jse.certificateselection.CertificateSelectionPanel this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
es.gob.afirma.ui.core.jse.certificateselection.CertificateSelectionPanel$CertLinkMouseListener -> es.gob.afirma.ui.core.jse.certificateselection.j:
    boolean entered -> b
    es.gob.afirma.ui.core.jse.certificateselection.CertificateSelectionPanel this$0 -> a
    void mouseClicked(java.awt.event.MouseEvent) -> mouseClicked
    void mouseMoved(java.awt.event.MouseEvent) -> mouseMoved
es.gob.afirma.ui.core.jse.certificateselection.CertificateSelectionPanel$CertListCellRendered -> es.gob.afirma.ui.core.jse.certificateselection.k:
    java.awt.Component getListCellRendererComponent(javax.swing.JList,java.lang.Object,int,boolean,boolean) -> getListCellRendererComponent
es.gob.afirma.ui.core.jse.certificateselection.CertificateSelectionPanel$CertificateLine -> es.gob.afirma.ui.core.jse.certificateselection.l:
    java.awt.Font SUBJECT_FONT -> a
    java.awt.Font DETAILS_FONT -> b
    javax.swing.JLabel propertiesLink -> c
    java.lang.String friendlyName -> d
    java.security.cert.X509Certificate cert -> e
    javax.swing.ImageIcon getIcon(java.security.cert.X509Certificate) -> a
    java.security.cert.X509Certificate getCertificate() -> a
    java.lang.String toString() -> toString
    void createUI() -> c
    java.lang.String formatDate(java.util.Date) -> a
    java.awt.Rectangle getCertificateLinkBounds() -> b
es.gob.afirma.ui.core.jse.certificateselection.CertificateUtils -> es.gob.afirma.ui.core.jse.certificateselection.m:
    void openCert(java.awt.Component,java.security.cert.X509Certificate) -> a
    boolean saveFile(java.io.File,byte[]) -> a
    java.io.File saveTemp(byte[],java.lang.String) -> a
es.gob.afirma.ui.core.jse.certificateselection.UtilActions -> es.gob.afirma.ui.core.jse.certificateselection.n:
    java.util.logging.Logger LOGGER -> a
    java.lang.String HELP_URI -> b
    java.lang.String[] EXTS -> c
    java.lang.String EXTS_DESC -> d
    void doHelp() -> a
    void doRefresh(es.gob.afirma.ui.core.jse.certificateselection.CertificateSelectionDialog,java.awt.Component) -> a
    void doOpen(es.gob.afirma.ui.core.jse.certificateselection.CertificateSelectionDialog,java.lang.Object) -> a
es.gob.jmulticard.CryptoHelper -> es.gob.jmulticard.CryptoHelper:
    byte[] addPkcs1PaddingForPrivateKeyOperation(byte[],int) -> addPkcs1PaddingForPrivateKeyOperation
    byte[] digest(es.gob.jmulticard.CryptoHelper$DigestAlgorithm,byte[]) -> digest
    byte[] desedeEncrypt(byte[],byte[]) -> desedeEncrypt
    byte[] desedeDecrypt(byte[],byte[]) -> desedeDecrypt
    byte[] desEncrypt(byte[],byte[]) -> desEncrypt
    byte[] desDecrypt(byte[],byte[]) -> desDecrypt
    byte[] aesDecrypt(byte[],byte[],byte[]) -> aesDecrypt
    byte[] aesEncrypt(byte[],byte[],byte[]) -> aesEncrypt
    byte[] rsaDecrypt(byte[],java.security.Key) -> rsaDecrypt
    byte[] rsaEncrypt(byte[],java.security.Key) -> rsaEncrypt
    java.security.cert.Certificate generateCertificate(byte[]) -> generateCertificate
    byte[] generateRandomBytes(int) -> generateRandomBytes
    java.security.KeyPair generateEcKeyPair(es.gob.jmulticard.CryptoHelper$EcCurve) -> generateEcKeyPair
    byte[] doAesCmac(byte[],byte[]) -> doAesCmac
    byte[] doEcDh(java.security.Key,byte[],es.gob.jmulticard.CryptoHelper$EcCurve) -> doEcDh
    java.security.spec.AlgorithmParameterSpec getEcPoint(byte[],byte[],es.gob.jmulticard.CryptoHelper$EcCurve) -> getEcPoint
es.gob.jmulticard.CryptoHelper$DigestAlgorithm -> es.gob.jmulticard.CryptoHelper$DigestAlgorithm:
    es.gob.jmulticard.CryptoHelper$DigestAlgorithm SHA1 -> SHA1
    es.gob.jmulticard.CryptoHelper$DigestAlgorithm SHA256 -> SHA256
    es.gob.jmulticard.CryptoHelper$DigestAlgorithm SHA384 -> SHA384
    es.gob.jmulticard.CryptoHelper$DigestAlgorithm SHA512 -> SHA512
    java.lang.String name -> a
    es.gob.jmulticard.CryptoHelper$DigestAlgorithm[] ENUM$VALUES -> b
    java.lang.String toString() -> toString
    es.gob.jmulticard.CryptoHelper$DigestAlgorithm[] values() -> values
    es.gob.jmulticard.CryptoHelper$DigestAlgorithm valueOf(java.lang.String) -> valueOf
es.gob.jmulticard.CryptoHelper$EcCurve -> es.gob.jmulticard.CryptoHelper$EcCurve:
    es.gob.jmulticard.CryptoHelper$EcCurve BRAINPOOL_P256_R1 -> BRAINPOOL_P256_R1
    java.lang.String name -> a
    es.gob.jmulticard.CryptoHelper$EcCurve[] ENUM$VALUES -> b
    java.lang.String toString() -> toString
    es.gob.jmulticard.CryptoHelper$EcCurve[] values() -> values
    es.gob.jmulticard.CryptoHelper$EcCurve valueOf(java.lang.String) -> valueOf
es.gob.jmulticard.HexUtils -> es.gob.jmulticard.HexUtils:
    char[] HEX_CHARS -> a
    boolean arrayEquals(byte[],byte[]) -> arrayEquals
    boolean arrayEquals(byte[],int,int,byte[],int,int) -> arrayEquals
    short getShort(byte[],int) -> getShort
    int getUnsignedInt(byte[],int) -> getUnsignedInt
    java.lang.String hexify(byte[],boolean) -> hexify
    byte[] subArray(byte[],int,int) -> subArray
    byte[] xor(byte[],byte[]) -> xor
    byte[] intToByteArray(int) -> intToByteArray
    byte[] concatenateByteArrays(byte[][]) -> concatenateByteArrays
es.gob.jmulticard.JseCryptoHelper -> es.gob.jmulticard.JseCryptoHelper:
    java.util.logging.Logger LOGGER -> a
    byte[] digest(es.gob.jmulticard.CryptoHelper$DigestAlgorithm,byte[]) -> digest
    byte[] doDesede(byte[],byte[],int) -> a
    byte[] desedeEncrypt(byte[],byte[]) -> desedeEncrypt
    byte[] desedeDecrypt(byte[],byte[]) -> desedeDecrypt
    byte[] prepareDesedeKey(byte[]) -> a
    byte[] doDes(byte[],byte[],int) -> b
    byte[] desEncrypt(byte[],byte[]) -> desEncrypt
    byte[] desDecrypt(byte[],byte[]) -> desDecrypt
    byte[] doRsa(byte[],java.security.Key,int) -> a
    byte[] rsaDecrypt(byte[],java.security.Key) -> rsaDecrypt
    byte[] rsaEncrypt(byte[],java.security.Key) -> rsaEncrypt
    java.security.cert.Certificate generateCertificate(byte[]) -> generateCertificate
    byte[] generateRandomBytes(int) -> generateRandomBytes
    byte[] aesCrypt(byte[],byte[],byte[],int) -> a
    byte[] aesDecrypt(byte[],byte[],byte[]) -> aesDecrypt
    byte[] aesEncrypt(byte[],byte[],byte[]) -> aesEncrypt
    java.security.KeyPair generateEcKeyPair(es.gob.jmulticard.CryptoHelper$EcCurve) -> generateEcKeyPair
    byte[] doAesCmac(byte[],byte[]) -> doAesCmac
    byte[] doEcDh(java.security.Key,byte[],es.gob.jmulticard.CryptoHelper$EcCurve) -> doEcDh
    java.security.Key loadEcPublicKey(byte[],es.gob.jmulticard.CryptoHelper$EcCurve) -> a
    java.security.spec.AlgorithmParameterSpec getEcPoint(byte[],byte[],es.gob.jmulticard.CryptoHelper$EcCurve) -> getEcPoint
    java.math.BigInteger os2i(byte[]) -> b
    java.math.BigInteger os2i(byte[],int,int) -> a
    java.math.BigInteger computeAffineY(java.math.BigInteger,java.security.spec.ECParameterSpec) -> a
    org.spongycastle.math.ec.ECCurve toSpongyCastleECCurve(java.security.spec.ECParameterSpec) -> a
    java.math.BigInteger getPrime(java.security.spec.ECParameterSpec) -> b
    java.security.spec.ECParameterSpec mapNonceGMWithECDH(java.math.BigInteger,java.security.spec.ECPoint,java.security.spec.ECParameterSpec) -> a
    java.security.spec.ECPoint multiply(java.math.BigInteger,java.security.spec.ECPoint,java.security.spec.ECParameterSpec) -> b
    java.security.spec.ECPoint fromSpongyCastleECPoint(org.spongycastle.math.ec.ECPoint) -> a
    java.security.spec.ECPoint add(java.security.spec.ECPoint,java.security.spec.ECPoint,java.security.spec.ECParameterSpec) -> a
    org.spongycastle.math.ec.ECPoint toSpongyCastleECPoint(java.security.spec.ECPoint,java.security.spec.ECParameterSpec) -> a
es.gob.jmulticard.Messages -> es.gob.jmulticard.Messages:
    java.util.ResourceBundle bundle -> a
    java.lang.String getString(java.lang.String) -> getString
    java.lang.ClassLoader getCleanClassLoader() -> a
es.gob.jmulticard.apdu.Apdu -> es.gob.jmulticard.apdu.Apdu:
    byte[] apduBytes -> a
    byte[] getBytes() -> getBytes
    void setBytes(byte[]) -> setBytes
    java.lang.String toString() -> toString
es.gob.jmulticard.apdu.CommandApdu -> es.gob.jmulticard.apdu.CommandApdu:
    byte cla -> a
    byte ins -> b
    byte p1 -> c
    byte p2 -> d
    java.lang.Integer le -> e
    byte[] body -> f
    byte[] getBody(byte[]) -> a
    java.lang.Integer getLength(byte[]) -> b
    byte getCla() -> getCla
    byte[] getData() -> getData
    byte getIns() -> getIns
    java.lang.Integer getLe() -> getLe
    byte getP1() -> getP1
    byte getP2() -> getP2
    void setLe(int) -> setLe
es.gob.jmulticard.apdu.ResponseApdu -> es.gob.jmulticard.apdu.ResponseApdu:
    byte[] getData() -> getData
    es.gob.jmulticard.apdu.StatusWord getStatusWord() -> getStatusWord
    boolean isOk() -> isOk
es.gob.jmulticard.apdu.StatusWord -> es.gob.jmulticard.apdu.StatusWord:
    byte msb -> a
    byte lsb -> b
    byte getMsb() -> getMsb
    byte getLsb() -> getLsb
    byte[] getBytes() -> getBytes
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
es.gob.jmulticard.apdu.bit4id.stcm.VerifyApduCommand -> es.gob.jmulticard.apdu.bit4id.stcm.VerifyApduCommand:
    byte[] charArrayToByteArray(javax.security.auth.callback.PasswordCallback) -> a
es.gob.jmulticard.apdu.ceres.CeresVerifyApduCommand -> es.gob.jmulticard.apdu.ceres.CeresVerifyApduCommand:
    byte[] charArrayToByteArray(javax.security.auth.callback.PasswordCallback) -> a
es.gob.jmulticard.apdu.ceres.LoadDataApduCommand -> es.gob.jmulticard.apdu.ceres.LoadDataApduCommand:
es.gob.jmulticard.apdu.ceres.SignDataApduCommand -> es.gob.jmulticard.apdu.ceres.SignDataApduCommand:
es.gob.jmulticard.apdu.connection.ApduConnection -> es.gob.jmulticard.apdu.connection.ApduConnection:
    void setProtocol(es.gob.jmulticard.apdu.connection.ApduConnectionProtocol) -> setProtocol
    void open() -> open
    void close() -> close
    es.gob.jmulticard.apdu.ResponseApdu transmit(es.gob.jmulticard.apdu.CommandApdu) -> transmit
    byte[] reset() -> reset
    void addCardConnectionListener(es.gob.jmulticard.apdu.connection.CardConnectionListener) -> addCardConnectionListener
    void removeCardConnectionListener(es.gob.jmulticard.apdu.connection.CardConnectionListener) -> removeCardConnectionListener
    long[] getTerminals(boolean) -> getTerminals
    java.lang.String getTerminalInfo(int) -> getTerminalInfo
    void setTerminal(int) -> setTerminal
    boolean isOpen() -> isOpen
es.gob.jmulticard.apdu.connection.ApduConnectionException -> es.gob.jmulticard.apdu.connection.ApduConnectionException:
es.gob.jmulticard.apdu.connection.ApduConnectionOpenedInExclusiveModeException -> es.gob.jmulticard.apdu.connection.ApduConnectionOpenedInExclusiveModeException:
es.gob.jmulticard.apdu.connection.ApduConnectionProtocol -> es.gob.jmulticard.apdu.connection.ApduConnectionProtocol:
    es.gob.jmulticard.apdu.connection.ApduConnectionProtocol T0 -> T0
    es.gob.jmulticard.apdu.connection.ApduConnectionProtocol T1 -> T1
    es.gob.jmulticard.apdu.connection.ApduConnectionProtocol TCL -> TCL
    es.gob.jmulticard.apdu.connection.ApduConnectionProtocol ANY -> ANY
    int[] $SWITCH_TABLE$es$gob$jmulticard$apdu$connection$ApduConnectionProtocol -> a
    es.gob.jmulticard.apdu.connection.ApduConnectionProtocol[] ENUM$VALUES -> b
    java.lang.String toString() -> toString
    es.gob.jmulticard.apdu.connection.ApduConnectionProtocol[] values() -> values
    es.gob.jmulticard.apdu.connection.ApduConnectionProtocol valueOf(java.lang.String) -> valueOf
    int[] $SWITCH_TABLE$es$gob$jmulticard$apdu$connection$ApduConnectionProtocol() -> a
es.gob.jmulticard.apdu.connection.ApduEncrypter -> es.gob.jmulticard.apdu.connection.ApduEncrypter:
    byte TAG_DATA_TLV -> TAG_DATA_TLV
    int paddingLength -> paddingLength
    es.gob.jmulticard.apdu.connection.CipheredApdu protectAPDU(es.gob.jmulticard.apdu.CommandApdu,byte[],byte[],byte[],es.gob.jmulticard.CryptoHelper) -> protectAPDU
    byte[] encryptData(byte[],byte[],byte[],es.gob.jmulticard.CryptoHelper) -> encryptData
    byte[] addPadding7816(byte[],int) -> addPadding7816
    byte[] removePadding7816(byte[]) -> removePadding7816
    byte[] generateMac(byte[],byte[],byte[],es.gob.jmulticard.CryptoHelper) -> generateMac
    es.gob.jmulticard.apdu.ResponseApdu decryptResponseApdu(es.gob.jmulticard.apdu.ResponseApdu,byte[],byte[],byte[],es.gob.jmulticard.CryptoHelper) -> decryptResponseApdu
    void wipeByteArray(byte[]) -> a
    byte[] getCompleteDataBytes(java.lang.Integer,byte[]) -> a
    byte[] getDataTlv(byte[],byte[],byte[],es.gob.jmulticard.CryptoHelper,int) -> a
es.gob.jmulticard.apdu.connection.ApduEncrypterAes -> es.gob.jmulticard.apdu.connection.ApduEncrypterAes:
    java.util.logging.Logger LOGGER -> a
    byte[] encryptData(byte[],byte[],byte[],es.gob.jmulticard.CryptoHelper) -> encryptData
    byte[] generateMac(byte[],byte[],byte[],es.gob.jmulticard.CryptoHelper) -> generateMac
    es.gob.jmulticard.apdu.ResponseApdu decryptResponseApdu(es.gob.jmulticard.apdu.ResponseApdu,byte[],byte[],byte[],es.gob.jmulticard.CryptoHelper) -> decryptResponseApdu
es.gob.jmulticard.apdu.connection.ApduEncrypterDes -> es.gob.jmulticard.apdu.connection.ApduEncrypterDes:
    int getMacLength() -> getMacLength
    byte[] encryptData(byte[],byte[],byte[],es.gob.jmulticard.CryptoHelper) -> encryptData
    byte[] generateMac(byte[],byte[],byte[],es.gob.jmulticard.CryptoHelper) -> generateMac
    es.gob.jmulticard.apdu.ResponseApdu decryptResponseApdu(es.gob.jmulticard.apdu.ResponseApdu,byte[],byte[],byte[],es.gob.jmulticard.CryptoHelper) -> decryptResponseApdu
    void verifyMac(byte[],byte[],byte[],byte[],es.gob.jmulticard.CryptoHelper) -> a
es.gob.jmulticard.apdu.connection.ApduEncrypterDesMac8 -> es.gob.jmulticard.apdu.connection.ApduEncrypterDesMac8:
    int getMacLength() -> getMacLength
es.gob.jmulticard.apdu.connection.CardConnectionEvent -> es.gob.jmulticard.apdu.connection.CardConnectionEvent:
es.gob.jmulticard.apdu.connection.CardConnectionListener -> es.gob.jmulticard.apdu.connection.CardConnectionListener:
    void cardInserted(es.gob.jmulticard.apdu.connection.CardConnectionEvent) -> cardInserted
    void cardRemoved(es.gob.jmulticard.apdu.connection.CardConnectionEvent) -> cardRemoved
es.gob.jmulticard.apdu.connection.CardNotPresentException -> es.gob.jmulticard.apdu.connection.CardNotPresentException:
es.gob.jmulticard.apdu.connection.CipheredApdu -> es.gob.jmulticard.apdu.connection.CipheredApdu:
    byte[] mac -> a
    byte[] data -> b
    byte[] buildData(byte[],byte[]) -> a
    void setLe(int) -> setLe
es.gob.jmulticard.apdu.connection.LostChannelException -> es.gob.jmulticard.apdu.connection.LostChannelException:
es.gob.jmulticard.apdu.connection.NoReadersFoundException -> es.gob.jmulticard.apdu.connection.NoReadersFoundException:
es.gob.jmulticard.apdu.connection.UnavailableReaderException -> es.gob.jmulticard.apdu.connection.UnavailableReaderException:
es.gob.jmulticard.apdu.connection.cwa14890.CipheredApdu -> es.gob.jmulticard.apdu.connection.cwa14890.CipheredApdu:
    void setLe(int) -> setLe
es.gob.jmulticard.apdu.connection.cwa14890.Cwa14890Connection -> es.gob.jmulticard.apdu.connection.cwa14890.Cwa14890Connection:
    es.gob.jmulticard.apdu.connection.ApduConnection getSubConnection() -> getSubConnection
es.gob.jmulticard.apdu.connection.cwa14890.Cwa14890OneV1Connection -> es.gob.jmulticard.apdu.connection.cwa14890.Cwa14890OneV1Connection:
    es.gob.jmulticard.apdu.StatusWord INVALID_CRYPTO_CHECKSUM -> a
    byte[] SECURE_CHANNEL_KENC_AUX -> b
    byte[] SECURE_CHANNEL_KMAC_AUX -> c
    es.gob.jmulticard.CryptoHelper cryptoHelper -> cryptoHelper
    es.gob.jmulticard.card.cwa14890.Cwa14890Card card -> d
    es.gob.jmulticard.apdu.connection.ApduConnection subConnection -> subConnection
    byte[] kenc -> e
    byte[] kmac -> f
    byte[] ssc -> g
    boolean openState -> openState
    es.gob.jmulticard.apdu.connection.ApduEncrypter apduEncrypter -> apduEncrypter
    es.gob.jmulticard.card.cwa14890.Cwa14890PublicConstants pubConsts -> h
    es.gob.jmulticard.card.cwa14890.Cwa14890PrivateConstants privConsts -> i
    es.gob.jmulticard.apdu.connection.ApduEncrypter instantiateApduEncrypter() -> instantiateApduEncrypter
    void open() -> open
    byte[] generateKenc(byte[]) -> a
    byte[] generateKmac(byte[]) -> b
    byte[] generateSsc(byte[],byte[]) -> a
    byte[] internalAuthentication(byte[],java.security.interfaces.RSAPublicKey) -> a
    byte[] externalAuthentication(byte[],byte[],java.security.interfaces.RSAPublicKey) -> a
    byte[] getPaddedSerial() -> a
    void close() -> close
    es.gob.jmulticard.apdu.ResponseApdu transmit(es.gob.jmulticard.apdu.CommandApdu) -> transmit
    byte[] reset() -> reset
    void addCardConnectionListener(es.gob.jmulticard.apdu.connection.CardConnectionListener) -> addCardConnectionListener
    void removeCardConnectionListener(es.gob.jmulticard.apdu.connection.CardConnectionListener) -> removeCardConnectionListener
    long[] getTerminals(boolean) -> getTerminals
    java.lang.String getTerminalInfo(int) -> getTerminalInfo
    void setTerminal(int) -> setTerminal
    boolean isOpen() -> isOpen
    byte[] increment(byte[]) -> c
    es.gob.jmulticard.apdu.connection.ApduConnection getSubConnection() -> getSubConnection
    void setProtocol(es.gob.jmulticard.apdu.connection.ApduConnectionProtocol) -> setProtocol
es.gob.jmulticard.apdu.connection.cwa14890.Cwa14890OneV2Connection -> es.gob.jmulticard.apdu.connection.cwa14890.Cwa14890OneV2Connection:
    es.gob.jmulticard.apdu.connection.ApduEncrypter instantiateApduEncrypter() -> instantiateApduEncrypter
es.gob.jmulticard.apdu.connection.cwa14890.InvalidCryptographicChecksum -> es.gob.jmulticard.apdu.connection.cwa14890.InvalidCryptographicChecksum:
es.gob.jmulticard.apdu.connection.cwa14890.SecureChannelException -> es.gob.jmulticard.apdu.connection.cwa14890.SecureChannelException:
es.gob.jmulticard.apdu.dnie.ChangePINApduCommand -> es.gob.jmulticard.apdu.dnie.ChangePINApduCommand:
    byte[] buidData(byte[],byte[]) -> a
es.gob.jmulticard.apdu.dnie.GetChipInfoApduCommand -> es.gob.jmulticard.apdu.dnie.GetChipInfoApduCommand:
es.gob.jmulticard.apdu.dnie.MseSetSignatureKeyApduCommand -> es.gob.jmulticard.apdu.dnie.MseSetSignatureKeyApduCommand:
    byte[] buidData(byte[]) -> a
es.gob.jmulticard.apdu.dnie.RetriesLeftApduCommand -> es.gob.jmulticard.apdu.dnie.RetriesLeftApduCommand:
    byte[] getData() -> getData
es.gob.jmulticard.apdu.dnie.VerifyApduCommand -> es.gob.jmulticard.apdu.dnie.VerifyApduCommand:
    javax.security.auth.callback.PasswordCallback pwc -> a
    byte[] getData() -> getData
es.gob.jmulticard.apdu.gemalto.CheckVerifyRetriesLeftApduCommand -> es.gob.jmulticard.apdu.gemalto.CheckVerifyRetriesLeftApduCommand:
es.gob.jmulticard.apdu.gemalto.MseSetSignatureKeyApduCommand -> es.gob.jmulticard.apdu.gemalto.MseSetSignatureKeyApduCommand:
    byte[] buidData(es.gob.jmulticard.apdu.gemalto.MseSetSignatureKeyApduCommand$CryptographicMechanism,byte) -> a
es.gob.jmulticard.apdu.gemalto.MseSetSignatureKeyApduCommand$CryptographicMechanism -> es.gob.jmulticard.apdu.gemalto.MseSetSignatureKeyApduCommand$CryptographicMechanism:
    es.gob.jmulticard.apdu.gemalto.MseSetSignatureKeyApduCommand$CryptographicMechanism RSASSA_PSS_SHA1 -> RSASSA_PSS_SHA1
    es.gob.jmulticard.apdu.gemalto.MseSetSignatureKeyApduCommand$CryptographicMechanism RSASSA_PKCS1v1_5_SHA1 -> RSASSA_PKCS1v1_5_SHA1
    es.gob.jmulticard.apdu.gemalto.MseSetSignatureKeyApduCommand$CryptographicMechanism RSASSA_PKCS1v1_5_MD5 -> RSASSA_PKCS1v1_5_MD5
    byte value -> a
    es.gob.jmulticard.apdu.gemalto.MseSetSignatureKeyApduCommand$CryptographicMechanism[] ENUM$VALUES -> b
    byte getValue() -> getValue
    es.gob.jmulticard.apdu.gemalto.MseSetSignatureKeyApduCommand$CryptographicMechanism[] values() -> values
    es.gob.jmulticard.apdu.gemalto.MseSetSignatureKeyApduCommand$CryptographicMechanism valueOf(java.lang.String) -> valueOf
es.gob.jmulticard.apdu.gemalto.VerifyApduCommand -> es.gob.jmulticard.apdu.gemalto.VerifyApduCommand:
    javax.security.auth.callback.PasswordCallback pwc -> a
    byte[] getBytes() -> getBytes
es.gob.jmulticard.apdu.iso7816eight.EnvelopeDataApduCommand -> es.gob.jmulticard.apdu.iso7816eight.EnvelopeDataApduCommand:
es.gob.jmulticard.apdu.iso7816eight.PsoSignHashApduCommand -> es.gob.jmulticard.apdu.iso7816eight.PsoSignHashApduCommand:
es.gob.jmulticard.apdu.iso7816eight.PsoVerifyCertificateApduCommand -> es.gob.jmulticard.apdu.iso7816eight.PsoVerifyCertificateApduCommand:
es.gob.jmulticard.apdu.iso7816four.ExternalAuthenticateApduCommand -> es.gob.jmulticard.apdu.iso7816four.ExternalAuthenticateApduCommand:
es.gob.jmulticard.apdu.iso7816four.GeneralAuthenticateApduCommand -> es.gob.jmulticard.apdu.iso7816four.GeneralAuthenticateApduCommand:
es.gob.jmulticard.apdu.iso7816four.GetChallengeApduCommand -> es.gob.jmulticard.apdu.iso7816four.GetChallengeApduCommand:
es.gob.jmulticard.apdu.iso7816four.GetResponseApduCommand -> es.gob.jmulticard.apdu.iso7816four.GetResponseApduCommand:
es.gob.jmulticard.apdu.iso7816four.InternalAuthenticateApduCommand -> es.gob.jmulticard.apdu.iso7816four.InternalAuthenticateApduCommand:
    byte[] buildData(byte[],byte[]) -> a
es.gob.jmulticard.apdu.iso7816four.MseSetApduCommand -> es.gob.jmulticard.apdu.iso7816four.a:
    byte INS_MANAGE_ENVIROMENT -> INS_MANAGE_ENVIROMENT
    byte SET_FOR_AUTHENTICATION -> SET_FOR_AUTHENTICATION
es.gob.jmulticard.apdu.iso7816four.MseSetAuthenticationKeyApduCommand -> es.gob.jmulticard.apdu.iso7816four.MseSetAuthenticationKeyApduCommand:
    byte[] buidData(byte[],byte[]) -> a
es.gob.jmulticard.apdu.iso7816four.MseSetAuthenticationTemplateApduCommand -> es.gob.jmulticard.apdu.iso7816four.MseSetAuthenticationTemplateApduCommand:
es.gob.jmulticard.apdu.iso7816four.MseSetVerificationKeyApduCommand -> es.gob.jmulticard.apdu.iso7816four.MseSetVerificationKeyApduCommand:
es.gob.jmulticard.apdu.iso7816four.ReadBinaryApduCommand -> es.gob.jmulticard.apdu.iso7816four.ReadBinaryApduCommand:
es.gob.jmulticard.apdu.iso7816four.ReadRecordApduCommand -> es.gob.jmulticard.apdu.iso7816four.ReadRecordApduCommand:
    es.gob.jmulticard.apdu.StatusWord RECORD_NOT_FOUND -> RECORD_NOT_FOUND
es.gob.jmulticard.apdu.iso7816four.SelectDfByNameApduCommand -> es.gob.jmulticard.apdu.iso7816four.SelectDfByNameApduCommand:
es.gob.jmulticard.apdu.iso7816four.SelectFileApduResponse -> es.gob.jmulticard.apdu.iso7816four.SelectFileApduResponse:
    byte[] dfName -> a
    byte[] fileId -> b
    byte[] fileLength -> c
    void decode() -> c
    byte[] getBytesFromData(int,int) -> a
    byte[] getDfName() -> a
    byte[] getFileId() -> b
    int getFileLength() -> getFileLength
    boolean isOk() -> isOk
    java.lang.String toString() -> toString
es.gob.jmulticard.apdu.iso7816four.SelectFileByIdApduCommand -> es.gob.jmulticard.apdu.iso7816four.SelectFileByIdApduCommand:
es.gob.jmulticard.apdu.iso7816four.pace.MseSetPaceAlgorithmApduCommand -> es.gob.jmulticard.apdu.iso7816four.pace.MseSetPaceAlgorithmApduCommand:
es.gob.jmulticard.apdu.iso7816four.pace.MseSetPaceAlgorithmApduCommand$PaceAlgorithmOid -> es.gob.jmulticard.apdu.iso7816four.pace.MseSetPaceAlgorithmApduCommand$PaceAlgorithmOid:
    es.gob.jmulticard.apdu.iso7816four.pace.MseSetPaceAlgorithmApduCommand$PaceAlgorithmOid PACE_ECDH_GM_AES_CBC_CMAC128 -> PACE_ECDH_GM_AES_CBC_CMAC128
    byte[] oidBytes -> a
    es.gob.jmulticard.apdu.iso7816four.pace.MseSetPaceAlgorithmApduCommand$PaceAlgorithmOid[] ENUM$VALUES -> b
    byte[] getBytes() -> getBytes
    es.gob.jmulticard.apdu.iso7816four.pace.MseSetPaceAlgorithmApduCommand$PaceAlgorithmOid[] values() -> values
    es.gob.jmulticard.apdu.iso7816four.pace.MseSetPaceAlgorithmApduCommand$PaceAlgorithmOid valueOf(java.lang.String) -> valueOf
es.gob.jmulticard.apdu.iso7816four.pace.MseSetPaceAlgorithmApduCommand$PaceAlgorithmParam -> es.gob.jmulticard.apdu.iso7816four.pace.MseSetPaceAlgorithmApduCommand$PaceAlgorithmParam:
    es.gob.jmulticard.apdu.iso7816four.pace.MseSetPaceAlgorithmApduCommand$PaceAlgorithmParam BRAINPOOL_256_R1 -> BRAINPOOL_256_R1
    byte[] paramBytes -> a
    es.gob.jmulticard.apdu.iso7816four.pace.MseSetPaceAlgorithmApduCommand$PaceAlgorithmParam[] ENUM$VALUES -> b
    byte[] getBytes() -> getBytes
    es.gob.jmulticard.apdu.iso7816four.pace.MseSetPaceAlgorithmApduCommand$PaceAlgorithmParam[] values() -> values
    es.gob.jmulticard.apdu.iso7816four.pace.MseSetPaceAlgorithmApduCommand$PaceAlgorithmParam valueOf(java.lang.String) -> valueOf
es.gob.jmulticard.apdu.iso7816four.pace.MseSetPaceAlgorithmApduCommand$PacePasswordType -> es.gob.jmulticard.apdu.iso7816four.pace.MseSetPaceAlgorithmApduCommand$PacePasswordType:
    es.gob.jmulticard.apdu.iso7816four.pace.MseSetPaceAlgorithmApduCommand$PacePasswordType CAN -> CAN
    byte[] pwdTypeBytes -> a
    es.gob.jmulticard.apdu.iso7816four.pace.MseSetPaceAlgorithmApduCommand$PacePasswordType[] ENUM$VALUES -> b
    byte[] getBytes() -> getBytes
    es.gob.jmulticard.apdu.iso7816four.pace.MseSetPaceAlgorithmApduCommand$PacePasswordType[] values() -> values
    es.gob.jmulticard.apdu.iso7816four.pace.MseSetPaceAlgorithmApduCommand$PacePasswordType valueOf(java.lang.String) -> valueOf
es.gob.jmulticard.asn1.Asn1Exception -> es.gob.jmulticard.asn1.Asn1Exception:
es.gob.jmulticard.asn1.Asn1SyntaxException -> es.gob.jmulticard.asn1.Asn1SyntaxException:
es.gob.jmulticard.asn1.DecoderObject -> es.gob.jmulticard.asn1.DecoderObject:
    byte[] rawDerValue -> a
    byte[] getRawDerValue() -> getRawDerValue
    void setDerValue(byte[]) -> setDerValue
    byte[] getBytes() -> getBytes
    void decodeValue() -> decodeValue
    byte getDefaultTag() -> getDefaultTag
    void checkTag(byte) -> checkTag
es.gob.jmulticard.asn1.OptionalDecoderObjectElement -> es.gob.jmulticard.asn1.OptionalDecoderObjectElement:
    java.lang.Class elementType -> a
    boolean optional -> b
    java.lang.Class getElementType() -> getElementType
    boolean isOptional() -> isOptional
es.gob.jmulticard.asn1.Tlv -> es.gob.jmulticard.asn1.Tlv:
    byte tag -> a
    int length -> b
    byte[] bytes -> c
    int valueOffset -> d
    byte[] getBytes() -> getBytes
    int getLength() -> getLength
    byte getTag() -> getTag
    byte[] getValue() -> getValue
    es.gob.jmulticard.asn1.Tlv decode(java.io.ByteArrayInputStream) -> decode
es.gob.jmulticard.asn1.TlvException -> es.gob.jmulticard.asn1.TlvException:
es.gob.jmulticard.asn1.bertlv.BerParsingException -> es.gob.jmulticard.asn1.bertlv.BerParsingException:
es.gob.jmulticard.asn1.bertlv.BerTlv -> es.gob.jmulticard.asn1.bertlv.BerTlv:
    es.gob.jmulticard.asn1.bertlv.BerTlvIdentifier tag -> a
    int length -> b
    byte[] value -> c
    es.gob.jmulticard.asn1.bertlv.BerTlvIdentifier getTag() -> getTag
    byte[] getValue() -> getValue
    es.gob.jmulticard.asn1.bertlv.BerTlv getInstance(java.io.ByteArrayInputStream) -> getInstance
    void decode(java.io.ByteArrayInputStream) -> a
    java.lang.String toString() -> toString
es.gob.jmulticard.asn1.bertlv.BerTlvIdentifier -> es.gob.jmulticard.asn1.bertlv.BerTlvIdentifier:
    byte[] value -> a
    int getTagValue() -> getTagValue
    void decode(java.io.ByteArrayInputStream) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
es.gob.jmulticard.asn1.bertlv.BitManipulationHelper -> es.gob.jmulticard.asn1.bertlv.a:
    boolean getBitValue(int,int) -> a
    int setBitValue(int,int,boolean) -> a
    byte[] mergeArrays(byte[],byte[]) -> a
es.gob.jmulticard.asn1.der.BitString -> es.gob.jmulticard.asn1.der.BitString:
    es.gob.jmulticard.asn1.Tlv tlv -> a
    void decodeValue() -> decodeValue
    byte getDefaultTag() -> getDefaultTag
    byte[] getValue() -> getValue
es.gob.jmulticard.asn1.der.ContextSpecific -> es.gob.jmulticard.asn1.der.ContextSpecific:
    es.gob.jmulticard.asn1.DecoderObject object -> a
    java.lang.Class elementType -> b
    es.gob.jmulticard.asn1.DecoderObject getObject() -> getObject
    void decodeValue() -> decodeValue
    byte getDefaultTag() -> getDefaultTag
    void checkTag(byte) -> checkTag
es.gob.jmulticard.asn1.der.DerBoolean -> es.gob.jmulticard.asn1.der.DerBoolean:
    java.lang.Boolean booleanValue -> a
    void decodeValue() -> decodeValue
    byte getDefaultTag() -> getDefaultTag
    boolean getBooleanValue() -> getBooleanValue
es.gob.jmulticard.asn1.der.DerInteger -> es.gob.jmulticard.asn1.der.DerInteger:
    java.math.BigInteger value -> a
    void decodeValue() -> decodeValue
    java.math.BigInteger getIntegerValue() -> getIntegerValue
    byte getDefaultTag() -> getDefaultTag
    java.lang.String toString() -> toString
es.gob.jmulticard.asn1.der.Null -> es.gob.jmulticard.asn1.der.Null:
    void decodeValue() -> decodeValue
    byte getDefaultTag() -> getDefaultTag
    void setDerValue(byte[]) -> setDerValue
    byte[] getRawDerValue() -> getRawDerValue
    byte[] getBytes() -> getBytes
    void checkTag(byte) -> checkTag
es.gob.jmulticard.asn1.der.ObjectIdentifier -> es.gob.jmulticard.asn1.der.ObjectIdentifier:
    byte[] rawValue -> a
    void checkTag(byte) -> checkTag
    void decodeValue() -> decodeValue
    byte getDefaultTag() -> getDefaultTag
    java.lang.String toString() -> toString
es.gob.jmulticard.asn1.der.OctectString -> es.gob.jmulticard.asn1.der.OctectString:
    byte[] value -> a
    void decodeValue() -> decodeValue
    byte getDefaultTag() -> getDefaultTag
    byte[] getOctectStringByteValue() -> getOctectStringByteValue
es.gob.jmulticard.asn1.der.OidDictionary -> es.gob.jmulticard.asn1.der.a:
    java.util.Properties dic -> a
    java.lang.String getOidDescription(byte[]) -> a
es.gob.jmulticard.asn1.der.Record -> es.gob.jmulticard.asn1.der.Record:
    es.gob.jmulticard.asn1.OptionalDecoderObjectElement[] elementsTypes -> a
    java.util.List elements -> b
    int getElementCount() -> getElementCount
    es.gob.jmulticard.asn1.DecoderObject getElementAt(int) -> getElementAt
    void decodeValue() -> decodeValue
    byte getDefaultTag() -> getDefaultTag
es.gob.jmulticard.asn1.der.Sequence -> es.gob.jmulticard.asn1.der.Sequence:
    java.util.List elements -> a
    es.gob.jmulticard.asn1.OptionalDecoderObjectElement[] elementsTypes -> b
    int getElementCount() -> getElementCount
    void decodeValue() -> decodeValue
    byte getDefaultTag() -> getDefaultTag
    es.gob.jmulticard.asn1.DecoderObject getElementAt(int) -> getElementAt
es.gob.jmulticard.asn1.der.SequenceOf -> es.gob.jmulticard.asn1.der.SequenceOf:
    java.lang.Class elementsType -> a
    java.util.Vector sequenceObjects -> b
    void decodeValue() -> decodeValue
    byte getDefaultTag() -> getDefaultTag
    es.gob.jmulticard.asn1.DecoderObject getElementAt(int) -> getElementAt
    int getElementCount() -> getElementCount
es.gob.jmulticard.asn1.der.Set -> es.gob.jmulticard.asn1.der.Set:
    byte getDefaultTag() -> getDefaultTag
es.gob.jmulticard.asn1.der.Utf8String -> es.gob.jmulticard.asn1.der.Utf8String:
    java.lang.String stringValue -> a
    byte getDefaultTag() -> getDefaultTag
    void checkTag(byte) -> checkTag
    void decodeValue() -> decodeValue
    java.lang.String toString() -> toString
es.gob.jmulticard.asn1.der.pkcs1.AlgorithmIdentifer -> es.gob.jmulticard.asn1.der.pkcs1.AlgorithmIdentifer:
es.gob.jmulticard.asn1.der.pkcs1.DigestInfo -> es.gob.jmulticard.asn1.der.pkcs1.DigestInfo:
    byte[] SHA1_DIGESTINFO_HEADER -> a
    byte[] SHA256_DIGESTINFO_HEADER -> b
    byte[] SHA384_DIGESTINFO_HEADER -> c
    byte[] SHA512_DIGESTINFO_HEADER -> d
    int[] $SWITCH_TABLE$es$gob$jmulticard$CryptoHelper$DigestAlgorithm -> e
    byte[] getSha1DigestinfoHeader() -> getSha1DigestinfoHeader
    byte[] getSha256DigestinfoHeader() -> getSha256DigestinfoHeader
    byte[] getSha384DigestinfoHeader() -> getSha384DigestinfoHeader
    byte[] getSha512DigestinfoHeader() -> getSha512DigestinfoHeader
    byte[] encode(java.lang.String,byte[],es.gob.jmulticard.CryptoHelper) -> encode
    java.lang.String getNormalizedSigningAlgorithm(java.lang.String) -> a
    byte[] selectHeaderTemplate(es.gob.jmulticard.CryptoHelper$DigestAlgorithm) -> a
    es.gob.jmulticard.CryptoHelper$DigestAlgorithm getDigestAlgorithm(java.lang.String) -> b
    int[] $SWITCH_TABLE$es$gob$jmulticard$CryptoHelper$DigestAlgorithm() -> a
es.gob.jmulticard.asn1.der.pkcs15.AccessFlags -> es.gob.jmulticard.asn1.der.pkcs15.AccessFlags:
es.gob.jmulticard.asn1.der.pkcs15.Cdf -> es.gob.jmulticard.asn1.der.pkcs15.Cdf:
    int getCertificateCount() -> getCertificateCount
    java.lang.String getCertificateIssuerPrincipal(int) -> getCertificateIssuerPrincipal
    java.lang.String getCertificateSubjectPrincipal(int) -> getCertificateSubjectPrincipal
    java.math.BigInteger getCertificateSerialNumber(int) -> getCertificateSerialNumber
    byte[] getCertificateIdentifier(int) -> getCertificateIdentifier
    java.lang.String getCertificatePath(int) -> getCertificatePath
    java.lang.String getCertificateAlias(int) -> getCertificateAlias
    java.lang.String toString() -> toString
    byte[] getCertificateId(int) -> getCertificateId
es.gob.jmulticard.asn1.der.pkcs15.CertificateIssuerContextSpecific -> es.gob.jmulticard.asn1.der.pkcs15.CertificateIssuerContextSpecific:
    java.lang.String toString() -> toString
es.gob.jmulticard.asn1.der.pkcs15.CertificateObject -> es.gob.jmulticard.asn1.der.pkcs15.CertificateObject:
    java.lang.String getIssuer() -> a
    java.lang.String getSubject() -> b
    java.lang.String getPath() -> getPath
    byte[] getPathBytes() -> getPathBytes
    java.math.BigInteger getSerialNumber() -> c
    byte[] getIdentifier() -> getIdentifier
    java.lang.String getAlias() -> getAlias
    java.lang.String toString() -> toString
es.gob.jmulticard.asn1.der.pkcs15.CertificatesContextSpecific -> es.gob.jmulticard.asn1.der.pkcs15.CertificatesContextSpecific:
    es.gob.jmulticard.asn1.der.pkcs15.Path getCertificatesPath() -> getCertificatesPath
    void checkTag(byte) -> checkTag
es.gob.jmulticard.asn1.der.pkcs15.CommonCertificateAttributes -> es.gob.jmulticard.asn1.der.pkcs15.CommonCertificateAttributes:
    byte[] getId() -> getId
    java.lang.String toString() -> toString
es.gob.jmulticard.asn1.der.pkcs15.CommonKeyAttributes -> es.gob.jmulticard.asn1.der.pkcs15.CommonKeyAttributes:
    byte[] getIdentifier() -> getIdentifier
    es.gob.jmulticard.asn1.der.pkcs15.Reference getReference() -> getReference
es.gob.jmulticard.asn1.der.pkcs15.CommonObjectAttributes -> es.gob.jmulticard.asn1.der.pkcs15.CommonObjectAttributes:
    java.lang.String getLabel() -> getLabel
    byte[] getIdentifier() -> getIdentifier
es.gob.jmulticard.asn1.der.pkcs15.CommonObjectFlags -> es.gob.jmulticard.asn1.der.pkcs15.CommonObjectFlags:
es.gob.jmulticard.asn1.der.pkcs15.CommonPrivateKeyAttributesContextSpecific -> es.gob.jmulticard.asn1.der.pkcs15.CommonPrivateKeyAttributesContextSpecific:
    void checkTag(byte) -> checkTag
    java.lang.String toString() -> toString
es.gob.jmulticard.asn1.der.pkcs15.Identifier -> es.gob.jmulticard.asn1.der.pkcs15.Identifier:
es.gob.jmulticard.asn1.der.pkcs15.KeyUsageFlags -> es.gob.jmulticard.asn1.der.pkcs15.KeyUsageFlags:
es.gob.jmulticard.asn1.der.pkcs15.Odf -> es.gob.jmulticard.asn1.der.pkcs15.Odf:
    es.gob.jmulticard.asn1.der.pkcs15.Path getCertificatesPath() -> getCertificatesPath
es.gob.jmulticard.asn1.der.pkcs15.Path -> es.gob.jmulticard.asn1.der.pkcs15.Path:
    java.lang.String getPathString() -> a
    byte[] getPathBytes() -> getPathBytes
    java.lang.String toString() -> toString
es.gob.jmulticard.asn1.der.pkcs15.PathLength -> es.gob.jmulticard.asn1.der.pkcs15.PathLength:
    java.lang.Integer value -> a
    void decodeValue() -> decodeValue
    void checkTag(byte) -> checkTag
es.gob.jmulticard.asn1.der.pkcs15.Pkcs15Cdf -> es.gob.jmulticard.asn1.der.pkcs15.Pkcs15Cdf:
    int getCertificateCount() -> getCertificateCount
    java.lang.String getCertificatePath(int) -> getCertificatePath
    byte[] getCertificateId(int) -> getCertificateId
    void setDerValue(byte[]) -> setDerValue
es.gob.jmulticard.asn1.der.pkcs15.Pkcs15Object -> es.gob.jmulticard.asn1.der.pkcs15.Pkcs15Object:
    es.gob.jmulticard.asn1.der.pkcs15.CommonObjectAttributes getCommonObjectAttributes() -> d
    es.gob.jmulticard.asn1.DecoderObject getClassAttributes() -> getClassAttributes
    es.gob.jmulticard.asn1.DecoderObject getTypeAttributes() -> getTypeAttributes
es.gob.jmulticard.asn1.der.pkcs15.Pkcs15PrKdf -> es.gob.jmulticard.asn1.der.pkcs15.Pkcs15PrKdf:
    void setDerValue(byte[]) -> setDerValue
    int getKeyCount() -> getKeyCount
    byte[] getKeyId(int) -> getKeyId
    byte getKeyReference(int) -> getKeyReference
es.gob.jmulticard.asn1.der.pkcs15.PrKdf -> es.gob.jmulticard.asn1.der.pkcs15.PrKdf:
    int getKeyCount() -> getKeyCount
    byte[] getKeyIdentifier(int) -> getKeyIdentifier
    java.lang.String getKeyName(int) -> getKeyName
    java.lang.String getKeyPath(int) -> getKeyPath
    int getKeyLength(int) -> getKeyLength
    java.lang.String toString() -> toString
    byte getKeyReference(int) -> getKeyReference
    byte[] getKeyId(int) -> getKeyId
es.gob.jmulticard.asn1.der.pkcs15.PrivateKeyObject -> es.gob.jmulticard.asn1.der.pkcs15.PrivateKeyObject:
    byte[] getKeyIdentifier() -> getKeyIdentifier
    java.lang.String getKeyName() -> a
    java.lang.String getKeyPath() -> getKeyPath
    int getKeyLength() -> b
    java.lang.String toString() -> toString
    byte getKeyReference() -> getKeyReference
es.gob.jmulticard.asn1.der.pkcs15.PrivateKeysContextSpecific -> es.gob.jmulticard.asn1.der.pkcs15.PrivateKeysContextSpecific:
    void checkTag(byte) -> checkTag
es.gob.jmulticard.asn1.der.pkcs15.PrivateRsaKeyAttributes -> es.gob.jmulticard.asn1.der.pkcs15.PrivateRsaKeyAttributes:
    java.lang.String getPath() -> a
    int getKeyLength() -> b
es.gob.jmulticard.asn1.der.pkcs15.PrivateRsaKeyAttributesContextSpecific -> es.gob.jmulticard.asn1.der.pkcs15.PrivateRsaKeyAttributesContextSpecific:
    void checkTag(byte) -> checkTag
    java.lang.String toString() -> toString
    java.lang.String getPath() -> a
    int getKeyLength() -> b
es.gob.jmulticard.asn1.der.pkcs15.PublicKeysContextSpecific -> es.gob.jmulticard.asn1.der.pkcs15.PublicKeysContextSpecific:
    void checkTag(byte) -> checkTag
es.gob.jmulticard.asn1.der.pkcs15.Reference -> es.gob.jmulticard.asn1.der.pkcs15.Reference:
    int getItValue() -> getItValue
es.gob.jmulticard.asn1.der.pkcs15.SecretKeysContextSpecific -> es.gob.jmulticard.asn1.der.pkcs15.SecretKeysContextSpecific:
    void checkTag(byte) -> checkTag
es.gob.jmulticard.asn1.der.pkcs15.TrustedPublicKeysContextSpecific -> es.gob.jmulticard.asn1.der.pkcs15.TrustedPublicKeysContextSpecific:
    void checkTag(byte) -> checkTag
es.gob.jmulticard.asn1.der.pkcs15.X509CertificateAttributes -> es.gob.jmulticard.asn1.der.pkcs15.X509CertificateAttributes:
    java.lang.String getIssuer() -> a
    java.lang.String getSubject() -> b
    java.lang.String getPath() -> c
    byte[] getPathBytes() -> d
    java.math.BigInteger getSerialNumber() -> e
    es.gob.jmulticard.asn1.DecoderObject getObject(java.lang.Class) -> a
    java.lang.String toString() -> toString
es.gob.jmulticard.asn1.der.pkcs15.X509CertificateAttributesContextSpecific -> es.gob.jmulticard.asn1.der.pkcs15.X509CertificateAttributesContextSpecific:
    void checkTag(byte) -> checkTag
    java.lang.String toString() -> toString
    java.lang.String getIssuer() -> a
    java.lang.String getSubject() -> b
    java.lang.String getPath() -> c
    byte[] getPathBytes() -> d
    java.math.BigInteger getSerialNumber() -> e
es.gob.jmulticard.asn1.der.x509.AlgorithmIdentifier -> es.gob.jmulticard.asn1.der.x509.AlgorithmIdentifier:
es.gob.jmulticard.asn1.der.x509.AttributeTypeAndDistinguishedValue -> es.gob.jmulticard.asn1.der.x509.AttributeTypeAndDistinguishedValue:
    java.lang.String toString() -> toString
es.gob.jmulticard.asn1.der.x509.RdnSequence -> es.gob.jmulticard.asn1.der.x509.RdnSequence:
    java.lang.String toString() -> toString
es.gob.jmulticard.asn1.der.x509.RelativeDistinguishedName -> es.gob.jmulticard.asn1.der.x509.RelativeDistinguishedName:
    java.lang.String toString() -> toString
es.gob.jmulticard.asn1.der.x509.SubjectPublicKey -> es.gob.jmulticard.asn1.der.x509.SubjectPublicKey:
es.gob.jmulticard.asn1.der.x509.SubjectPublicKeyInfo -> es.gob.jmulticard.asn1.der.x509.SubjectPublicKeyInfo:
    byte[] getSubjectPublicKey() -> getSubjectPublicKey
es.gob.jmulticard.card.Atr -> es.gob.jmulticard.card.Atr:
    byte[] atrBytes -> a
    byte[] mask -> b
    java.lang.String toString() -> toString
    byte[] getBytes() -> getBytes
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    int hashCode(byte[]) -> a
es.gob.jmulticard.card.AuthenticationModeLockedException -> es.gob.jmulticard.card.AuthenticationModeLockedException:
es.gob.jmulticard.card.BadPinException -> es.gob.jmulticard.card.BadPinException:
    int retries -> a
    int getRemainingRetries() -> getRemainingRetries
es.gob.jmulticard.card.Card -> es.gob.jmulticard.card.Card:
es.gob.jmulticard.card.CardException -> es.gob.jmulticard.card.CardException:
es.gob.jmulticard.card.CryptoCard -> es.gob.jmulticard.card.CryptoCard:
    java.lang.String[] getAliases() -> getAliases
    java.security.cert.X509Certificate getCertificate(java.lang.String) -> getCertificate
    es.gob.jmulticard.card.PrivateKeyReference getPrivateKey(java.lang.String) -> getPrivateKey
    byte[] sign(byte[],java.lang.String,es.gob.jmulticard.card.PrivateKeyReference) -> sign
    byte[] changePIN(java.lang.String,java.lang.String) -> changePIN
es.gob.jmulticard.card.CryptoCardException -> es.gob.jmulticard.card.CryptoCardException:
es.gob.jmulticard.card.InvalidCardException -> es.gob.jmulticard.card.InvalidCardException:
    es.gob.jmulticard.card.Atr atr -> a
    java.lang.String name -> b
    byte[] badAtr -> c
    es.gob.jmulticard.card.Atr getExpectedAtr() -> getExpectedAtr
    java.lang.String getExpectedCardName() -> getExpectedCardName
    byte[] getFoundAtr() -> getFoundAtr
es.gob.jmulticard.card.Location -> es.gob.jmulticard.card.Location:
    java.util.Vector path -> a
    java.util.Map HEXBYTES -> b
    es.gob.jmulticard.card.Location getChild() -> getChild
    byte[] getFile() -> getFile
    byte[] getLastFilePath() -> getLastFilePath
    void checkValidPath(java.lang.String) -> a
    void init(java.lang.String) -> b
    java.lang.String toString() -> toString
es.gob.jmulticard.card.PinException -> es.gob.jmulticard.card.PinException:
es.gob.jmulticard.card.PrivateKeyReference -> es.gob.jmulticard.card.PrivateKeyReference:
es.gob.jmulticard.card.SmartCard -> es.gob.jmulticard.card.SmartCard:
    byte cla -> a
    es.gob.jmulticard.apdu.connection.ApduConnection connection -> b
    es.gob.jmulticard.apdu.connection.ApduConnection getConnection() -> getConnection
    es.gob.jmulticard.apdu.ResponseApdu sendArbitraryApdu(es.gob.jmulticard.apdu.CommandApdu) -> sendArbitraryApdu
    void setConnection(es.gob.jmulticard.apdu.connection.ApduConnection) -> setConnection
    byte getCla() -> getCla
    java.lang.String getCardName() -> getCardName
es.gob.jmulticard.card.bit4id.stcm.StCard -> es.gob.jmulticard.card.bit4id.stcm.StCard:
    byte CLA -> a
    void connect(es.gob.jmulticard.apdu.connection.ApduConnection) -> a
    java.lang.String[] getAliases() -> getAliases
    java.security.cert.X509Certificate getCertificate(java.lang.String) -> getCertificate
    es.gob.jmulticard.card.PrivateKeyReference getPrivateKey(java.lang.String) -> getPrivateKey
    byte[] sign(byte[],java.lang.String,es.gob.jmulticard.card.PrivateKeyReference) -> sign
    void selectMasterFile() -> selectMasterFile
    void verifyPin(javax.security.auth.callback.PasswordCallback) -> verifyPin
    java.lang.String getCardName() -> getCardName
    byte[] changePIN(java.lang.String,java.lang.String) -> changePIN
es.gob.jmulticard.card.cardos.CardOS -> es.gob.jmulticard.card.cardos.CardOS:
    byte[] ATR_MASK -> a
    es.gob.jmulticard.card.Atr ATR -> b
    byte[] PKCS15_NAME -> c
    byte CLA -> d
    java.util.logging.Logger LOGGER -> e
    java.util.Map certificatesByAlias -> f
    void connect(es.gob.jmulticard.apdu.connection.ApduConnection) -> a
    void preloadCertificates() -> a
    java.lang.String getCardName() -> getCardName
    java.lang.String[] getAliases() -> getAliases
    java.security.cert.X509Certificate getCertificate(java.lang.String) -> getCertificate
    void selectMasterFile() -> selectMasterFile
    java.lang.String toString() -> toString
    es.gob.jmulticard.card.PrivateKeyReference getPrivateKey(java.lang.String) -> getPrivateKey
    byte[] sign(byte[],java.lang.String,es.gob.jmulticard.card.PrivateKeyReference) -> sign
    void verifyPin(javax.security.auth.callback.PasswordCallback) -> verifyPin
    byte[] changePIN(java.lang.String,java.lang.String) -> changePIN
es.gob.jmulticard.card.cwa14890.Cwa14890Card -> es.gob.jmulticard.card.cwa14890.Cwa14890Card:
    void verifyCaIntermediateIcc() -> verifyCaIntermediateIcc
    void verifyIcc() -> verifyIcc
    byte[] getIccCertEncoded() -> getIccCertEncoded
    void verifyIfdCertificateChain(es.gob.jmulticard.card.cwa14890.Cwa14890PublicConstants) -> verifyIfdCertificateChain
    byte[] getInternalAuthenticateMessage(byte[],byte[]) -> getInternalAuthenticateMessage
    boolean externalAuthentication(byte[]) -> externalAuthentication
    void setKeysToAuthentication(byte[],byte[]) -> setKeysToAuthentication
    byte[] getChallenge() -> getChallenge
    byte[] getSerialNumber() -> getSerialNumber
    byte[] getRefIccPrivateKey(es.gob.jmulticard.card.cwa14890.Cwa14890PublicConstants) -> getRefIccPrivateKey
    byte[] getChrCCvIfd(es.gob.jmulticard.card.cwa14890.Cwa14890PublicConstants) -> getChrCCvIfd
    java.security.interfaces.RSAPrivateKey getIfdPrivateKey(es.gob.jmulticard.card.cwa14890.Cwa14890PrivateConstants) -> getIfdPrivateKey
    int getIfdKeyLength(es.gob.jmulticard.card.cwa14890.Cwa14890PublicConstants) -> getIfdKeyLength
es.gob.jmulticard.card.cwa14890.Cwa14890PrivateConstants -> es.gob.jmulticard.card.cwa14890.Cwa14890PrivateConstants:
    java.security.interfaces.RSAPrivateKey getIfdPrivateKey() -> getIfdPrivateKey
es.gob.jmulticard.card.cwa14890.Cwa14890PublicConstants -> es.gob.jmulticard.card.cwa14890.Cwa14890PublicConstants:
    byte[] getRefCCvCaPublicKey() -> getRefCCvCaPublicKey
    byte[] getCCvCa() -> getCCvCa
    byte[] getChrCCvCa() -> getChrCCvCa
    byte[] getRefIccPrivateKey() -> getRefIccPrivateKey
    byte[] getCCvIfd() -> getCCvIfd
    byte[] getChrCCvIfd() -> getChrCCvIfd
    java.security.PublicKey getCaComponentPublicKey() -> getCaComponentPublicKey
    int getIfdKeyLength() -> getIfdKeyLength
es.gob.jmulticard.card.dnie.BurnedDnieCardException -> es.gob.jmulticard.card.dnie.BurnedDnieCardException:
es.gob.jmulticard.card.dnie.CancelledSignOperationException -> es.gob.jmulticard.card.dnie.CancelledSignOperationException:
es.gob.jmulticard.card.dnie.CustomAuthorizeCallback -> es.gob.jmulticard.card.dnie.CustomAuthorizeCallback:
    boolean authorized -> a
    boolean isAuthorized() -> isAuthorized
    void setAuthorized(boolean) -> setAuthorized
es.gob.jmulticard.card.dnie.CustomTextInputCallback -> es.gob.jmulticard.card.dnie.CustomTextInputCallback:
    java.lang.String inputText -> a
    void setText(java.lang.String) -> setText
    java.lang.String getText() -> getText
es.gob.jmulticard.card.dnie.Dni -> es.gob.jmulticard.card.dnie.Dni:
es.gob.jmulticard.card.dnie.Dnie -> es.gob.jmulticard.card.dnie.Dnie:
    java.util.logging.Logger LOGGER -> LOGGER
    javax.security.auth.callback.CallbackHandler callh -> a
    java.lang.String[] aliases -> b
    java.security.cert.CertificateFactory certFactory -> c
    boolean PIN_AUTO_RETRY -> d
    byte[] CERT_ICC_FILE_ID -> e
    es.gob.jmulticard.card.Location CDF_LOCATION -> f
    es.gob.jmulticard.card.Location PRKDF_LOCATION -> g
    java.security.cert.X509Certificate authCert -> h
    java.security.cert.X509Certificate signCert -> i
    java.security.cert.X509Certificate cyphCert -> j
    java.security.cert.X509Certificate signAliasCert -> k
    java.security.cert.X509Certificate intermediateCaCert -> l
    es.gob.jmulticard.card.Location authCertPath -> m
    es.gob.jmulticard.card.Location signCertPath -> n
    es.gob.jmulticard.card.Location cyphCertPath -> o
    es.gob.jmulticard.card.Location signAliasCertPath -> p
    es.gob.jmulticard.card.dnie.DniePrivateKeyReference authKeyRef -> q
    es.gob.jmulticard.card.dnie.DniePrivateKeyReference signKeyRef -> r
    es.gob.jmulticard.card.dnie.DniePrivateKeyReference cyphKeyRef -> s
    es.gob.jmulticard.card.dnie.DniePrivateKeyReference signAliasKeyRef -> t
    es.gob.jmulticard.CryptoHelper cryptoHelper -> u
    javax.security.auth.callback.PasswordCallback passwordCallback -> v
    es.gob.jmulticard.card.cwa14890.Cwa14890PublicConstants getCwa14890PublicConstants() -> getCwa14890PublicConstants
    es.gob.jmulticard.card.cwa14890.Cwa14890PrivateConstants getCwa14890PrivateConstants() -> getCwa14890PrivateConstants
    es.gob.jmulticard.CryptoHelper getCryptoHelper() -> getCryptoHelper
    javax.security.auth.callback.PasswordCallback getPasswordCallback() -> getPasswordCallback
    void connect(es.gob.jmulticard.apdu.connection.ApduConnection) -> connect
    void loadKeyReferences() -> a
    byte[] getSerialNumber() -> getSerialNumber
    java.lang.String getCardName() -> getCardName
    java.lang.String[] getAliases() -> getAliases
    void preloadCertificates() -> b
    java.security.cert.X509Certificate getCertificate(java.lang.String) -> getCertificate
    void verifyCaIntermediateIcc() -> verifyCaIntermediateIcc
    void verifyIcc() -> verifyIcc
    byte[] getIccCertEncoded() -> getIccCertEncoded
    void verifyIfdCertificateChain(es.gob.jmulticard.card.cwa14890.Cwa14890PublicConstants) -> verifyIfdCertificateChain
    byte[] getRefIccPrivateKey(es.gob.jmulticard.card.cwa14890.Cwa14890PublicConstants) -> getRefIccPrivateKey
    byte[] getChrCCvIfd(es.gob.jmulticard.card.cwa14890.Cwa14890PublicConstants) -> getChrCCvIfd
    java.security.interfaces.RSAPrivateKey getIfdPrivateKey(es.gob.jmulticard.card.cwa14890.Cwa14890PrivateConstants) -> getIfdPrivateKey
    void setKeysToAuthentication(byte[],byte[]) -> setKeysToAuthentication
    byte[] getInternalAuthenticateMessage(byte[],byte[]) -> getInternalAuthenticateMessage
    boolean externalAuthentication(byte[]) -> externalAuthentication
    es.gob.jmulticard.card.PrivateKeyReference getPrivateKey(java.lang.String) -> getPrivateKey
    byte[] sign(byte[],java.lang.String,es.gob.jmulticard.card.PrivateKeyReference) -> sign
    byte[] signInternal(byte[],java.lang.String,es.gob.jmulticard.card.PrivateKeyReference) -> signInternal
    byte[] signOperation(byte[],java.lang.String,es.gob.jmulticard.card.PrivateKeyReference) -> signOperation
    void openSecureChannelIfNotAlreadyOpened() -> openSecureChannelIfNotAlreadyOpened
    int getPinRetriesLeft() -> c
    javax.security.auth.callback.PasswordCallback getInternalPasswordCallback() -> getInternalPasswordCallback
    java.security.cert.X509Certificate loadCertificate(es.gob.jmulticard.card.Location) -> a
    void loadCertificatesInternal() -> loadCertificatesInternal
    void loadCertificates() -> loadCertificates
    void selectMasterFile() -> selectMasterFile
    byte[] deflate(byte[]) -> a
    boolean isSecurityChannelOpen() -> isSecurityChannelOpen
    void verifyPin(javax.security.auth.callback.PasswordCallback) -> verifyPin
    int getIfdKeyLength(es.gob.jmulticard.card.cwa14890.Cwa14890PublicConstants) -> getIfdKeyLength
    byte[] changePIN(java.lang.String,java.lang.String) -> changePIN
    void setCallbackHandler(javax.security.auth.callback.CallbackHandler) -> setCallbackHandler
    void setPasswordCallback(javax.security.auth.callback.PasswordCallback) -> setPasswordCallback
es.gob.jmulticard.card.dnie.Dnie3 -> es.gob.jmulticard.card.dnie.Dnie3:
    es.gob.jmulticard.card.Location FILE_DG01_LOCATION_MRZ -> a
    es.gob.jmulticard.card.Location FILE_DG02_LOCATION_PHOTO -> b
    es.gob.jmulticard.card.Location FILE_DG07_LOCATION_SIGN -> c
    es.gob.jmulticard.apdu.connection.ApduConnection rawConnection -> rawConnection
    byte[] getSubjectPhotoAsJpeg2k() -> getSubjectPhotoAsJpeg2k
    es.gob.jmulticard.card.dnie.Dnie3Dg01Mrz getMrz() -> getMrz
    byte[] getSubjectSignatureImageAsJpen2k() -> getSubjectSignatureImageAsJpen2k
    byte[] extractImage(byte[]) -> a
    es.gob.jmulticard.apdu.connection.ApduConnection openUserChannel() -> openUserChannel
    void openSecureChannelIfNotAlreadyOpened() -> openSecureChannelIfNotAlreadyOpened
    byte[] signInternal(byte[],java.lang.String,es.gob.jmulticard.card.PrivateKeyReference) -> signInternal
    void loadCertificates() -> loadCertificates
    byte[] sign(byte[],java.lang.String,es.gob.jmulticard.card.PrivateKeyReference) -> sign
es.gob.jmulticard.card.dnie.Dnie3Dg01Mrz -> es.gob.jmulticard.card.dnie.Dnie3Dg01Mrz:
    byte[] rawData -> a
    java.lang.String name -> b
    java.lang.String surname -> c
    java.lang.String dateOfBirth -> d
    java.lang.String nationality -> e
    java.lang.String sex -> f
    java.lang.String dateOfExpiry -> g
    java.lang.String docNumber -> h
    java.lang.String docType -> i
    java.lang.String issuer -> j
    java.lang.String optData -> k
    java.text.SimpleDateFormat SDFORMAT -> l
    java.util.Properties countryNames -> m
    byte[] getBytes() -> getBytes
    java.lang.String getName() -> getName
    java.lang.String getSurname() -> getSurname
    java.util.Date getDateOfBirth() -> getDateOfBirth
    java.lang.String getNationality() -> getNationality
    es.gob.jmulticard.card.dnie.Dnie3Dg01Mrz$Gender getSex() -> getSex
    java.util.Date getDateOfExpiry() -> getDateOfExpiry
    java.lang.String getDocNumber() -> getDocNumber
    java.lang.String getIssuer() -> getIssuer
    java.lang.String getOptData() -> getOptData
    java.lang.String getDocType() -> getDocType
es.gob.jmulticard.card.dnie.Dnie3Dg01Mrz$Gender -> es.gob.jmulticard.card.dnie.Dnie3Dg01Mrz$Gender:
    es.gob.jmulticard.card.dnie.Dnie3Dg01Mrz$Gender MALE -> MALE
    es.gob.jmulticard.card.dnie.Dnie3Dg01Mrz$Gender FEMALE -> FEMALE
    java.lang.String desc -> a
    es.gob.jmulticard.card.dnie.Dnie3Dg01Mrz$Gender[] ENUM$VALUES -> b
    java.lang.String toString() -> toString
    es.gob.jmulticard.card.dnie.Dnie3Dg01Mrz$Gender getGender(java.lang.String) -> a
    es.gob.jmulticard.card.dnie.Dnie3Dg01Mrz$Gender[] values() -> values
    es.gob.jmulticard.card.dnie.Dnie3Dg01Mrz$Gender valueOf(java.lang.String) -> valueOf
es.gob.jmulticard.card.dnie.Dnie3PinCwa14890Constants -> es.gob.jmulticard.card.dnie.a:
    byte[] REF_C_CV_CA_PUBLIC_KEY -> a
    byte[] C_CV_CA -> b
    byte[] CHR_C_CV_CA -> c
    byte[] REF_ICC_PRIVATE_KEY -> d
    byte[] C_CV_IFD -> e
    byte[] CHR_C_CV_IFD -> f
    java.security.interfaces.RSAPrivateKey IFD_PRIVATE_KEY -> g
    java.security.PublicKey CA_COMPONENT_PUBLIC_KEY -> h
    byte[] getRefCCvCaPublicKey() -> getRefCCvCaPublicKey
    byte[] getCCvCa() -> getCCvCa
    byte[] getChrCCvCa() -> getChrCCvCa
    byte[] getRefIccPrivateKey() -> getRefIccPrivateKey
    byte[] getCCvIfd() -> getCCvIfd
    byte[] getChrCCvIfd() -> getChrCCvIfd
    java.security.interfaces.RSAPrivateKey getIfdPrivateKey() -> getIfdPrivateKey
    java.security.PublicKey getCaComponentPublicKey() -> getCaComponentPublicKey
    int getIfdKeyLength() -> getIfdKeyLength
es.gob.jmulticard.card.dnie.Dnie3PinCwa14890Constants$1 -> es.gob.jmulticard.card.dnie.Dnie3PinCwa14890Constants$1:
    java.math.BigInteger ifdModulus -> a
    java.math.BigInteger ifdPrivateExponent -> b
    byte[] encoded -> c
    java.math.BigInteger getModulus() -> getModulus
    java.lang.String getFormat() -> getFormat
    byte[] getEncoded() -> getEncoded
    java.lang.String getAlgorithm() -> getAlgorithm
    java.math.BigInteger getPrivateExponent() -> getPrivateExponent
es.gob.jmulticard.card.dnie.Dnie3PinCwa14890Constants$2 -> es.gob.jmulticard.card.dnie.Dnie3PinCwa14890Constants$2:
    byte[] encoded -> a
    java.lang.String getFormat() -> getFormat
    byte[] getEncoded() -> getEncoded
    java.lang.String getAlgorithm() -> getAlgorithm
es.gob.jmulticard.card.dnie.Dnie3UsrCwa14890Constants -> es.gob.jmulticard.card.dnie.b:
    byte[] REF_C_CV_CA_PUBLIC_KEY -> c
    byte[] C_CV_CA -> d
    byte[] CHR_C_CV_CA -> e
    byte[] REF_ICC_PRIVATE_KEY -> f
    byte[] C_CV_IFD -> a
    byte[] CHR_C_CV_IFD -> b
    java.security.interfaces.RSAPrivateKey IFD_PRIVATE_KEY -> g
    java.security.PublicKey CA_COMPONENT_PUBLIC_KEY -> h
    byte[] getRefCCvCaPublicKey() -> getRefCCvCaPublicKey
    byte[] getCCvCa() -> getCCvCa
    byte[] getChrCCvCa() -> getChrCCvCa
    byte[] getRefIccPrivateKey() -> getRefIccPrivateKey
    byte[] getCCvIfd() -> getCCvIfd
    byte[] getChrCCvIfd() -> getChrCCvIfd
    java.security.interfaces.RSAPrivateKey getIfdPrivateKey() -> getIfdPrivateKey
    java.security.PublicKey getCaComponentPublicKey() -> getCaComponentPublicKey
    int getIfdKeyLength() -> getIfdKeyLength
es.gob.jmulticard.card.dnie.Dnie3UsrCwa14890Constants$1 -> es.gob.jmulticard.card.dnie.Dnie3UsrCwa14890Constants$1:
    java.math.BigInteger ifdModulus -> a
    java.math.BigInteger ifdPrivateExponent -> b
    byte[] encoded -> c
    java.math.BigInteger getModulus() -> getModulus
    java.lang.String getFormat() -> getFormat
    byte[] getEncoded() -> getEncoded
    java.lang.String getAlgorithm() -> getAlgorithm
    java.math.BigInteger getPrivateExponent() -> getPrivateExponent
es.gob.jmulticard.card.dnie.Dnie3UsrCwa14890Constants$2 -> es.gob.jmulticard.card.dnie.Dnie3UsrCwa14890Constants$2:
    byte[] encoded -> a
    java.lang.String getFormat() -> getFormat
    byte[] getEncoded() -> getEncoded
    java.lang.String getAlgorithm() -> getAlgorithm
es.gob.jmulticard.card.dnie.DnieCardException -> es.gob.jmulticard.card.dnie.DnieCardException:
    es.gob.jmulticard.apdu.StatusWord returnCode -> a
    es.gob.jmulticard.apdu.StatusWord getStatusWord() -> getStatusWord
es.gob.jmulticard.card.dnie.DnieCwa14890Constants -> es.gob.jmulticard.card.dnie.c:
    byte[] REF_C_CV_CA_PUBLIC_KEY -> a
    byte[] C_CV_CA -> b
    byte[] CHR_C_CV_CA -> c
    byte[] REF_ICC_PRIVATE_KEY -> d
    byte[] C_CV_IFD -> e
    byte[] CHR_C_CV_IFD -> f
    java.security.interfaces.RSAPrivateKey IFD_PRIVATE_KEY -> g
    java.security.PublicKey CA_COMPONENT_PUBLIC_KEY -> h
    byte[] getRefCCvCaPublicKey() -> getRefCCvCaPublicKey
    byte[] getCCvCa() -> getCCvCa
    byte[] getChrCCvCa() -> getChrCCvCa
    byte[] getRefIccPrivateKey() -> getRefIccPrivateKey
    byte[] getCCvIfd() -> getCCvIfd
    byte[] getChrCCvIfd() -> getChrCCvIfd
    java.security.interfaces.RSAPrivateKey getIfdPrivateKey() -> getIfdPrivateKey
    java.security.PublicKey getCaComponentPublicKey() -> getCaComponentPublicKey
    int getIfdKeyLength() -> getIfdKeyLength
es.gob.jmulticard.card.dnie.DnieCwa14890Constants$1 -> es.gob.jmulticard.card.dnie.DnieCwa14890Constants$1:
    java.math.BigInteger ifdModulus -> a
    java.math.BigInteger ifdPrivateExponent -> b
    byte[] encoded -> c
    java.math.BigInteger getModulus() -> getModulus
    java.lang.String getFormat() -> getFormat
    byte[] getEncoded() -> getEncoded
    java.lang.String getAlgorithm() -> getAlgorithm
    java.math.BigInteger getPrivateExponent() -> getPrivateExponent
es.gob.jmulticard.card.dnie.DnieCwa14890Constants$2 -> es.gob.jmulticard.card.dnie.DnieCwa14890Constants$2:
    byte[] encoded -> a
    java.lang.String getFormat() -> getFormat
    byte[] getEncoded() -> getEncoded
    java.lang.String getAlgorithm() -> getAlgorithm
es.gob.jmulticard.card.dnie.DnieFactory -> es.gob.jmulticard.card.dnie.DnieFactory:
    java.util.logging.Logger LOGGER -> a
    byte[] ATR_MASK -> b
    byte[] ATR_NFC_MASK -> c
    es.gob.jmulticard.card.Atr ATR_NFC -> d
    es.gob.jmulticard.card.Atr ATR -> e
    es.gob.jmulticard.card.Atr ATR_TIF -> f
    es.gob.jmulticard.card.dnie.Dnie getDnie(es.gob.jmulticard.apdu.connection.ApduConnection,javax.security.auth.callback.PasswordCallback,es.gob.jmulticard.CryptoHelper,javax.security.auth.callback.CallbackHandler) -> getDnie
es.gob.jmulticard.card.dnie.DnieNFC -> es.gob.jmulticard.card.dnie.DnieNFC:
    java.lang.String can -> a
    es.gob.jmulticard.apdu.connection.ApduConnection paceConnection(es.gob.jmulticard.apdu.connection.ApduConnection,javax.security.auth.callback.CallbackHandler) -> a
    es.gob.jmulticard.apdu.connection.ApduConnection paceConnection(es.gob.jmulticard.apdu.connection.ApduConnection,java.lang.String) -> a
    void openSecureChannelIfNotAlreadyOpened() -> openSecureChannelIfNotAlreadyOpened
    byte[] sign(byte[],java.lang.String,es.gob.jmulticard.card.PrivateKeyReference) -> sign
    void resetCard() -> a
es.gob.jmulticard.card.dnie.DniePrivateKeyReference -> es.gob.jmulticard.card.dnie.DniePrivateKeyReference:
    es.gob.jmulticard.card.CryptoCard dnieCard -> a
    byte[] identifier -> b
    es.gob.jmulticard.card.Location keyPath -> c
    java.lang.String label -> d
    es.gob.jmulticard.card.CryptoCard getDnieCard() -> getDnieCard
    byte[] getIdentifier() -> getIdentifier
    es.gob.jmulticard.card.Location getKeyPath() -> getKeyPath
    java.lang.String getLabel() -> getLabel
es.gob.jmulticard.card.dnie.Tif -> es.gob.jmulticard.card.dnie.Tif:
    byte[] changePIN(java.lang.String,java.lang.String) -> changePIN
es.gob.jmulticard.card.dnie.TifCwa14890Constants -> es.gob.jmulticard.card.dnie.d:
    byte[] REF_C_CV_CA_PUBLIC_KEY -> a
    byte[] C_CV_CA -> b
    byte[] CHR_C_CV_CA -> c
    byte[] REF_ICC_PRIVATE_KEY -> d
    byte[] C_CV_IFD -> e
    byte[] CHR_C_CV_IFD -> f
    java.security.interfaces.RSAPrivateKey IFD_PRIVATE_KEY -> g
    java.security.PublicKey CA_COMPONENT_PUBLIC_KEY -> h
    byte[] getRefCCvCaPublicKey() -> getRefCCvCaPublicKey
    byte[] getCCvCa() -> getCCvCa
    byte[] getChrCCvCa() -> getChrCCvCa
    byte[] getRefIccPrivateKey() -> getRefIccPrivateKey
    byte[] getCCvIfd() -> getCCvIfd
    byte[] getChrCCvIfd() -> getChrCCvIfd
    java.security.interfaces.RSAPrivateKey getIfdPrivateKey() -> getIfdPrivateKey
    java.security.PublicKey getCaComponentPublicKey() -> getCaComponentPublicKey
    int getIfdKeyLength() -> getIfdKeyLength
es.gob.jmulticard.card.dnie.TifCwa14890Constants$1 -> es.gob.jmulticard.card.dnie.TifCwa14890Constants$1:
    java.math.BigInteger ifdModulus -> a
    java.math.BigInteger ifdPrivateExponent -> b
    byte[] encoded -> c
    java.math.BigInteger getModulus() -> getModulus
    java.lang.String getFormat() -> getFormat
    byte[] getEncoded() -> getEncoded
    java.lang.String getAlgorithm() -> getAlgorithm
    java.math.BigInteger getPrivateExponent() -> getPrivateExponent
es.gob.jmulticard.card.dnie.TifCwa14890Constants$2 -> es.gob.jmulticard.card.dnie.TifCwa14890Constants$2:
    byte[] encoded -> a
    java.lang.String getFormat() -> getFormat
    byte[] getEncoded() -> getEncoded
    java.lang.String getAlgorithm() -> getAlgorithm
es.gob.jmulticard.card.fnmt.ceres.Ceres -> es.gob.jmulticard.card.fnmt.ceres.Ceres:
    byte[] ATR_MASK_TC -> a
    es.gob.jmulticard.card.Atr ATR_TC -> b
    byte[] ATR_MASK_ST -> c
    es.gob.jmulticard.card.Atr ATR_ST -> d
    byte[] ATR_MASK_SLE_FN20 -> e
    es.gob.jmulticard.card.Atr ATR_SLE_FN20 -> f
    byte[] ATR_MASK_SLE_FN19 -> g
    es.gob.jmulticard.card.Atr ATR_SLE_FN19 -> h
    es.gob.jmulticard.CryptoHelper cryptoHelper -> i
    es.gob.jmulticard.card.Location CDF_LOCATION -> j
    es.gob.jmulticard.card.Location PRKDF_LOCATION -> k
    java.util.Map certs -> l
    java.util.Map aliasByCertAndKeyId -> m
    java.util.Map keys -> n
    javax.security.auth.callback.PasswordCallback passwordCallback -> o
    boolean authenticated -> p
    javax.security.auth.callback.CallbackHandler callh -> q
    void setPasswordCallback(javax.security.auth.callback.PasswordCallback) -> setPasswordCallback
    void checkAtr(byte[]) -> a
    void connect(es.gob.jmulticard.apdu.connection.ApduConnection) -> connect
    void preload() -> a
    void hideCertsWithoutKey() -> b
    java.lang.String[] getAliases() -> getAliases
    java.security.cert.X509Certificate getCertificate(java.lang.String) -> getCertificate
    es.gob.jmulticard.card.PrivateKeyReference getPrivateKey(java.lang.String) -> getPrivateKey
    byte[] sign(byte[],java.lang.String,es.gob.jmulticard.card.PrivateKeyReference) -> sign
    void loadData(int,byte[]) -> a
    void selectMasterFile() -> selectMasterFile
    void verifyPin(javax.security.auth.callback.PasswordCallback) -> verifyPin
    javax.security.auth.callback.PasswordCallback getInternalPasswordCallback() -> getInternalPasswordCallback
    int getPinRetriesLeft() -> c
    java.lang.String getCardName() -> getCardName
    byte[] deflate(byte[]) -> b
    byte[] changePIN(java.lang.String,java.lang.String) -> changePIN
    javax.security.auth.callback.CallbackHandler getCallbackHandler() -> getCallbackHandler
    void setCallbackHandler(javax.security.auth.callback.CallbackHandler) -> setCallbackHandler
es.gob.jmulticard.card.fnmt.ceres.CeresPrivateKeyReference -> es.gob.jmulticard.card.fnmt.ceres.CeresPrivateKeyReference:
    byte reference -> a
    int keySize -> b
    byte getKeyReference() -> getKeyReference
    int getKeyBitSize() -> getKeyBitSize
    java.lang.String toString() -> toString
es.gob.jmulticard.card.fnmt.ceres.asn1.CeresCdf -> es.gob.jmulticard.card.fnmt.ceres.asn1.CeresCdf:
    int getCertificateCount() -> getCertificateCount
    byte[] getCertificateId(int) -> getCertificateId
    java.lang.String getCertificatePath(int) -> getCertificatePath
    java.lang.String toString() -> toString
es.gob.jmulticard.card.fnmt.ceres.asn1.CeresCertificateObject -> es.gob.jmulticard.card.fnmt.ceres.asn1.CeresCertificateObject:
    java.lang.String getPath() -> getPath
    byte[] getIdentifier() -> getIdentifier
    java.lang.String toString() -> toString
es.gob.jmulticard.card.fnmt.ceres.asn1.CeresCommonPrivateKeyAttributesContextSpecific -> es.gob.jmulticard.card.fnmt.ceres.asn1.CeresCommonPrivateKeyAttributesContextSpecific:
    void checkTag(byte) -> checkTag
    java.lang.String toString() -> toString
es.gob.jmulticard.card.fnmt.ceres.asn1.CeresPrKdf -> es.gob.jmulticard.card.fnmt.ceres.asn1.CeresPrKdf:
    int getKeyCount() -> getKeyCount
    java.lang.String getKeyPath(int) -> getKeyPath
    byte[] getKeyId(int) -> getKeyId
    byte getKeyReference(int) -> getKeyReference
    java.lang.String toString() -> toString
es.gob.jmulticard.card.fnmt.ceres.asn1.CeresPrivateKeyObject -> es.gob.jmulticard.card.fnmt.ceres.asn1.CeresPrivateKeyObject:
    byte[] getKeyIdentifier() -> getKeyIdentifier
    byte getKeyReference() -> getKeyReference
    java.lang.String getKeyPath() -> getKeyPath
    java.lang.String toString() -> toString
es.gob.jmulticard.card.fnmt.ceres.asn1.CeresPrivateRsaKeyAttributesContextSpecific -> es.gob.jmulticard.card.fnmt.ceres.asn1.CeresPrivateRsaKeyAttributesContextSpecific:
    void checkTag(byte) -> checkTag
    java.lang.String toString() -> toString
    java.lang.String getPath() -> a
es.gob.jmulticard.card.fnmt.ceres.asn1.CeresX509CertificateAttributesContextSpecific -> es.gob.jmulticard.card.fnmt.ceres.asn1.CeresX509CertificateAttributesContextSpecific:
    void checkTag(byte) -> checkTag
    java.lang.String toString() -> toString
    java.lang.String getPath() -> a
es.gob.jmulticard.card.gemalto.tuir5.TuiPrivateKeyReference -> es.gob.jmulticard.card.gemalto.tuir5.TuiPrivateKeyReference:
    byte keyIndex -> a
    java.lang.String toString() -> toString
es.gob.jmulticard.card.gemalto.tuir5.TuiR5 -> es.gob.jmulticard.card.gemalto.tuir5.TuiR5:
    byte[] ATR_MASK -> a
    es.gob.jmulticard.card.Atr ATR -> b
    byte[][] APPLETS_AIDS -> c
    es.gob.jmulticard.card.Location CDF_LOCATION -> d
    byte CLA -> e
    java.util.logging.Logger LOGGER -> f
    javax.security.auth.callback.PasswordCallback passwordCallback -> g
    java.util.Map certificatesByAlias -> h
    void connect(es.gob.jmulticard.apdu.connection.ApduConnection) -> a
    void preloadCertificates() -> a
    void selectPkcs15Applet() -> b
    java.lang.String[] getAliases() -> getAliases
    java.security.cert.X509Certificate getCertificate(java.lang.String) -> getCertificate
    es.gob.jmulticard.card.PrivateKeyReference getPrivateKey(java.lang.String) -> getPrivateKey
    byte[] sign(byte[],java.lang.String,es.gob.jmulticard.card.PrivateKeyReference) -> sign
    void selectMasterFile() -> selectMasterFile
    java.lang.String getCardName() -> getCardName
    void verifyPin(javax.security.auth.callback.PasswordCallback) -> verifyPin
    java.lang.String toString() -> toString
    byte[] changePIN(java.lang.String,java.lang.String) -> changePIN
es.gob.jmulticard.card.iso7816eight.Iso7816EightCard -> es.gob.jmulticard.card.iso7816eight.Iso7816EightCard:
    void verifyCertificate(byte[]) -> verifyCertificate
es.gob.jmulticard.card.iso7816four.FileNotFoundException -> es.gob.jmulticard.card.iso7816four.FileNotFoundException:
    byte[] id -> a
    es.gob.jmulticard.apdu.StatusWord FILE_NOT_FOUND_RETURN_CODE -> b
    byte[] getFileId() -> getFileId
es.gob.jmulticard.card.iso7816four.Iso7816FourCard -> es.gob.jmulticard.card.iso7816four.Iso7816FourCard:
    es.gob.jmulticard.apdu.StatusWord UNSATISFIED_SECURITY_STATE -> a
    es.gob.jmulticard.apdu.StatusWord EOF_REACHED -> b
    es.gob.jmulticard.apdu.StatusWord OFFSET_OUTSIDE_EF -> c
    java.util.logging.Logger LOGGER -> d
    es.gob.jmulticard.apdu.ResponseApdu readBinary(byte,byte,byte) -> a
    java.util.List readAllRecords() -> readAllRecords
    byte[] readBinaryComplete(int) -> readBinaryComplete
    void selectFileByName(java.lang.String) -> selectFileByName
    void selectFileByName(byte[]) -> selectFileByName
    int selectFileById(byte[]) -> selectFileById
    byte[] selectFileByIdAndRead(byte[]) -> selectFileByIdAndRead
    int selectFileByLocation(es.gob.jmulticard.card.Location) -> selectFileByLocation
    byte[] selectFileByLocationAndRead(es.gob.jmulticard.card.Location) -> selectFileByLocationAndRead
    void selectMasterFile() -> selectMasterFile
    void setPublicKeyToVerification(byte[]) -> setPublicKeyToVerification
    byte[] getChallenge() -> getChallenge
    void verifyPin(javax.security.auth.callback.PasswordCallback) -> verifyPin
es.gob.jmulticard.card.iso7816four.Iso7816FourCardException -> es.gob.jmulticard.card.iso7816four.Iso7816FourCardException:
    java.util.Hashtable ERRORS -> a
    es.gob.jmulticard.apdu.StatusWord returnCode -> b
    es.gob.jmulticard.apdu.StatusWord getStatusWord() -> getStatusWord
es.gob.jmulticard.card.iso7816four.OffsetOutsideEfException -> es.gob.jmulticard.card.iso7816four.OffsetOutsideEfException:
es.gob.jmulticard.card.iso7816four.RequiredSecurityStateNotSatisfiedException -> es.gob.jmulticard.card.iso7816four.RequiredSecurityStateNotSatisfiedException:
es.gob.jmulticard.card.pace.InvalidCanException -> es.gob.jmulticard.card.pace.InvalidCanException:
es.gob.jmulticard.card.pace.PaceChannelHelper -> es.gob.jmulticard.card.pace.PaceChannelHelper:
    java.util.logging.Logger LOGGER -> a
    byte[] CAN_PADDING -> b
    byte[] KENC_PADDING -> c
    byte[] KMAC_PADDING -> d
    byte[] MAC_PADDING -> e
    byte[] MAC2_PADDING -> f
    es.gob.jmulticard.de.tsenger.androsmex.iso7816.SecureMessaging openPaceChannel(byte,java.lang.String,es.gob.jmulticard.apdu.connection.ApduConnection,es.gob.jmulticard.CryptoHelper) -> openPaceChannel
    byte[] bigIntToByteArray(java.math.BigInteger) -> a
    byte[] unwrapEcKey(byte[]) -> a
    org.spongycastle.math.ec.ECPoint byteArrayToECPoint(byte[],org.spongycastle.math.ec.ECCurve$Fp) -> a
es.gob.jmulticard.card.pace.PaceConnection -> es.gob.jmulticard.card.pace.PaceConnection:
    es.gob.jmulticard.apdu.StatusWord INVALID_CRYPTO_CHECKSUM -> a
    es.gob.jmulticard.de.tsenger.androsmex.iso7816.SecureMessaging sm -> b
    void open() -> open
    es.gob.jmulticard.apdu.ResponseApdu transmit(es.gob.jmulticard.apdu.CommandApdu) -> transmit
es.gob.jmulticard.card.pace.PaceException -> es.gob.jmulticard.card.pace.PaceException:
es.gob.jmulticard.de.tsenger.androsmex.crypto.AmAESCrypto -> es.gob.jmulticard.de.tsenger.androsmex.crypto.AmAESCrypto:
    byte[] keyBytes -> c
    org.spongycastle.crypto.params.KeyParameter keyP -> d
    byte[] IV -> e
    byte[] sscBytes -> f
    int blockSize -> blockSize
    void initCiphers(byte[],byte[]) -> a
    void init(byte[],byte[]) -> init
    byte[] getMAC(byte[]) -> getMAC
    byte[] getMAC(byte[],byte[]) -> getMAC
    byte[] decryptBlock(byte[],byte[]) -> decryptBlock
    byte[] encryptBlock(byte[],byte[]) -> encryptBlock
    int getBlockSize() -> getBlockSize
es.gob.jmulticard.de.tsenger.androsmex.crypto.AmCryptoException -> es.gob.jmulticard.de.tsenger.androsmex.crypto.AmCryptoException:
es.gob.jmulticard.de.tsenger.androsmex.crypto.AmCryptoProvider -> es.gob.jmulticard.de.tsenger.androsmex.crypto.AmCryptoProvider:
    org.spongycastle.crypto.paddings.PaddedBufferedBlockCipher encryptCipher -> encryptCipher
    org.spongycastle.crypto.paddings.PaddedBufferedBlockCipher decryptCipher -> decryptCipher
    byte[] buf -> a
    byte[] obuf -> b
    void init(byte[],byte[]) -> init
    int getBlockSize() -> getBlockSize
    byte[] decryptBlock(byte[],byte[]) -> decryptBlock
    byte[] getMAC(byte[],byte[]) -> getMAC
    byte[] getMAC(byte[]) -> getMAC
    byte[] encrypt(byte[]) -> encrypt
    byte[] decrypt(byte[]) -> decrypt
    byte[] addPadding(byte[]) -> addPadding
    byte[] removePadding(byte[]) -> removePadding
es.gob.jmulticard.de.tsenger.androsmex.crypto.AmDESCrypto -> es.gob.jmulticard.de.tsenger.androsmex.crypto.AmDESCrypto:
    int blockSize -> blockSize
    byte[] keyBytes -> c
    org.spongycastle.crypto.params.KeyParameter keyP -> d
    byte[] IV -> e
    byte[] sscBytes -> f
    void initCiphers(byte[],byte[]) -> a
    void init(byte[],byte[]) -> init
    byte[] getMAC(byte[]) -> getMAC
    byte[] decryptBlock(byte[],byte[]) -> decryptBlock
    byte[] getMAC(byte[],byte[]) -> getMAC
    int getBlockSize() -> getBlockSize
es.gob.jmulticard.de.tsenger.androsmex.iso7816.DO87 -> es.gob.jmulticard.de.tsenger.androsmex.iso7816.a:
    byte[] value_ -> a
    byte[] data -> b
    org.spongycastle.asn1.DERTaggedObject to -> c
    byte[] addOne(byte[]) -> b
    byte[] removeOne(byte[]) -> c
    void fromByteArray(byte[]) -> a
    byte[] getEncoded() -> a
    byte[] getData() -> b
es.gob.jmulticard.de.tsenger.androsmex.iso7816.DO8E -> es.gob.jmulticard.de.tsenger.androsmex.iso7816.b:
    byte[] data -> a
    org.spongycastle.asn1.DERTaggedObject to -> b
    void fromByteArray(byte[]) -> a
    byte[] getEncoded() -> a
    byte[] getData() -> b
es.gob.jmulticard.de.tsenger.androsmex.iso7816.DO97 -> es.gob.jmulticard.de.tsenger.androsmex.iso7816.c:
    byte[] data -> a
    org.spongycastle.asn1.DERTaggedObject to -> b
    byte[] getEncoded() -> a
es.gob.jmulticard.de.tsenger.androsmex.iso7816.DO99 -> es.gob.jmulticard.de.tsenger.androsmex.iso7816.d:
    byte[] data -> a
    org.spongycastle.asn1.DERTaggedObject to -> b
    void fromByteArray(byte[]) -> a
    byte[] getEncoded() -> a
    byte[] getData() -> b
es.gob.jmulticard.de.tsenger.androsmex.iso7816.SecureMessaging -> es.gob.jmulticard.de.tsenger.androsmex.iso7816.SecureMessaging:
    byte[] kenc -> a
    byte[] kmac -> b
    byte[] ssc -> c
    es.gob.jmulticard.de.tsenger.androsmex.crypto.AmCryptoProvider crypto -> d
    es.gob.jmulticard.apdu.CommandApdu wrap(es.gob.jmulticard.apdu.CommandApdu) -> wrap
    es.gob.jmulticard.apdu.ResponseApdu unwrap(es.gob.jmulticard.apdu.ResponseApdu) -> unwrap
    es.gob.jmulticard.de.tsenger.androsmex.iso7816.DO87 buildDO87(byte[]) -> a
    es.gob.jmulticard.de.tsenger.androsmex.iso7816.DO8E buildDO8E(byte[],es.gob.jmulticard.de.tsenger.androsmex.iso7816.DO87,es.gob.jmulticard.de.tsenger.androsmex.iso7816.DO97) -> a
    es.gob.jmulticard.de.tsenger.androsmex.iso7816.DO97 buildDO97(int) -> a
    byte getAPDUStructure(es.gob.jmulticard.apdu.CommandApdu) -> a
    void incrementAtIndex(byte[],int) -> a
es.gob.jmulticard.de.tsenger.androsmex.iso7816.SecureMessagingException -> es.gob.jmulticard.de.tsenger.androsmex.iso7816.SecureMessagingException:
es.gob.jmulticard.de.tsenger.androsmex.tools.HexString -> es.gob.jmulticard.de.tsenger.androsmex.tools.HexString:
    char[] kHexChars -> a
    java.lang.String stringToHex(java.lang.String) -> stringToHex
    java.lang.String bufferToHex(byte[]) -> bufferToHex
    java.lang.String bufferToHex(byte[],int,int) -> bufferToHex
    java.lang.String hexToString(java.lang.String) -> hexToString
    byte[] hexToBuffer(java.lang.String) -> hexToBuffer
    void appendHexPair(byte,java.lang.StringBuffer) -> a
es.gob.jmulticard.jse.provider.BadPasswordProviderException -> es.gob.jmulticard.jse.provider.BadPasswordProviderException:
es.gob.jmulticard.jse.provider.DnieKeyStoreImpl -> es.gob.jmulticard.jse.provider.DnieKeyStoreImpl:
    es.gob.jmulticard.card.dnie.Dnie cryptoCard -> a
    java.util.List aliases -> b
    java.util.Enumeration engineAliases() -> engineAliases
    boolean engineContainsAlias(java.lang.String) -> engineContainsAlias
    void engineDeleteEntry(java.lang.String) -> engineDeleteEntry
    java.security.cert.Certificate engineGetCertificate(java.lang.String) -> engineGetCertificate
    java.lang.String engineGetCertificateAlias(java.security.cert.Certificate) -> engineGetCertificateAlias
    java.security.cert.Certificate[] engineGetCertificateChain(java.lang.String) -> engineGetCertificateChain
    java.util.Date engineGetCreationDate(java.lang.String) -> engineGetCreationDate
    java.security.Key engineGetKey(java.lang.String,char[]) -> engineGetKey
    java.security.KeyStore$Entry engineGetEntry(java.lang.String,java.security.KeyStore$ProtectionParameter) -> engineGetEntry
    boolean engineIsCertificateEntry(java.lang.String) -> engineIsCertificateEntry
    boolean engineIsKeyEntry(java.lang.String) -> engineIsKeyEntry
    void engineLoad(java.security.KeyStore$LoadStoreParameter) -> engineLoad
    void engineLoad(java.io.InputStream,char[]) -> engineLoad
    void engineSetCertificateEntry(java.lang.String,java.security.cert.Certificate) -> engineSetCertificateEntry
    void engineSetKeyEntry(java.lang.String,byte[],java.security.cert.Certificate[]) -> engineSetKeyEntry
    void engineSetKeyEntry(java.lang.String,java.security.Key,char[],java.security.cert.Certificate[]) -> engineSetKeyEntry
    int engineSize() -> engineSize
    void engineStore(java.io.OutputStream,char[]) -> engineStore
    boolean engineEntryInstanceOf(java.lang.String,java.lang.Class) -> engineEntryInstanceOf
es.gob.jmulticard.jse.provider.DnieKeyStoreImpl$CachePasswordCallback -> es.gob.jmulticard.jse.provider.a:
es.gob.jmulticard.jse.provider.DniePasswordCallback -> es.gob.jmulticard.jse.provider.b:
    java.security.KeyStore$PasswordProtection passp -> a
    char[] getPassword() -> getPassword
es.gob.jmulticard.jse.provider.DniePrivateKey -> es.gob.jmulticard.jse.provider.DniePrivateKey:
    es.gob.jmulticard.card.CryptoCard dnie -> a
    byte[] id -> b
    es.gob.jmulticard.card.Location path -> c
    java.lang.String name -> d
    java.lang.String getAlgorithm() -> getAlgorithm
    es.gob.jmulticard.card.CryptoCard getCryptoCard() -> a
    byte[] getEncoded() -> getEncoded
    java.lang.String getFormat() -> getFormat
    byte[] getId() -> b
    java.math.BigInteger getModulus() -> getModulus
    es.gob.jmulticard.card.Location getPath() -> c
    java.math.BigInteger getPrivateExponent() -> getPrivateExponent
    java.lang.String toString() -> toString
es.gob.jmulticard.jse.provider.DnieProvider -> es.gob.jmulticard.jse.provider.DnieProvider:
    es.gob.jmulticard.apdu.connection.ApduConnection defaultConnection -> a
    es.gob.jmulticard.apdu.connection.ApduConnection getDefaultApduConnection() -> a
es.gob.jmulticard.jse.provider.DnieSignatureImpl -> es.gob.jmulticard.jse.provider.DnieSignatureImpl:
    java.io.ByteArrayOutputStream data -> a
    java.security.Signature signatureVerifier -> b
    es.gob.jmulticard.jse.provider.DniePrivateKey privateKey -> c
    java.lang.String signatureAlgo -> d
    java.lang.Object engineGetParameter(java.lang.String) -> engineGetParameter
    void engineInitSign(java.security.PrivateKey) -> engineInitSign
    void engineInitVerify(java.security.PublicKey) -> engineInitVerify
    void engineSetParameter(java.lang.String,java.lang.Object) -> engineSetParameter
    byte[] engineSign() -> engineSign
    void engineUpdate(byte) -> engineUpdate
    void engineUpdate(byte[],int,int) -> engineUpdate
    boolean engineVerify(byte[]) -> engineVerify
es.gob.jmulticard.jse.provider.DnieSignatureImpl$Sha1 -> es.gob.jmulticard.jse.provider.DnieSignatureImpl$Sha1:
es.gob.jmulticard.jse.provider.DnieSignatureImpl$Sha256 -> es.gob.jmulticard.jse.provider.DnieSignatureImpl$Sha256:
es.gob.jmulticard.jse.provider.DnieSignatureImpl$Sha384 -> es.gob.jmulticard.jse.provider.DnieSignatureImpl$Sha384:
es.gob.jmulticard.jse.provider.DnieSignatureImpl$Sha512 -> es.gob.jmulticard.jse.provider.DnieSignatureImpl$Sha512:
es.gob.jmulticard.jse.provider.JseCryptoHelper -> es.gob.jmulticard.jse.provider.JseCryptoHelper:
    java.util.logging.Logger LOGGER -> a
    byte[] digest(es.gob.jmulticard.CryptoHelper$DigestAlgorithm,byte[]) -> digest
    byte[] doDesede(byte[],byte[],int) -> a
    byte[] desedeEncrypt(byte[],byte[]) -> desedeEncrypt
    byte[] desedeDecrypt(byte[],byte[]) -> desedeDecrypt
    byte[] prepareDesedeKey(byte[]) -> a
    byte[] doDes(byte[],byte[],int) -> b
    byte[] desEncrypt(byte[],byte[]) -> desEncrypt
    byte[] desDecrypt(byte[],byte[]) -> desDecrypt
    byte[] doRsa(byte[],java.security.Key,int) -> a
    byte[] rsaDecrypt(byte[],java.security.Key) -> rsaDecrypt
    byte[] rsaEncrypt(byte[],java.security.Key) -> rsaEncrypt
    java.security.cert.Certificate generateCertificate(byte[]) -> generateCertificate
    byte[] generateRandomBytes(int) -> generateRandomBytes
    byte[] aesCrypt(byte[],byte[],byte[],int) -> a
    byte[] aesDecrypt(byte[],byte[],byte[]) -> aesDecrypt
    byte[] aesEncrypt(byte[],byte[],byte[]) -> aesEncrypt
    java.security.KeyPair generateEcKeyPair(es.gob.jmulticard.CryptoHelper$EcCurve) -> generateEcKeyPair
    byte[] doAesCmac(byte[],byte[]) -> doAesCmac
    byte[] doEcDh(java.security.Key,byte[],es.gob.jmulticard.CryptoHelper$EcCurve) -> doEcDh
    java.security.Key loadEcPublicKey(byte[],es.gob.jmulticard.CryptoHelper$EcCurve) -> a
    java.security.spec.AlgorithmParameterSpec getEcPoint(byte[],byte[],es.gob.jmulticard.CryptoHelper$EcCurve) -> getEcPoint
    java.math.BigInteger os2i(byte[]) -> b
    java.math.BigInteger os2i(byte[],int,int) -> a
    java.math.BigInteger computeAffineY(java.math.BigInteger,java.security.spec.ECParameterSpec) -> a
    org.spongycastle.math.ec.ECCurve toBouncyCastleECCurve(java.security.spec.ECParameterSpec) -> a
    java.math.BigInteger getPrime(java.security.spec.ECParameterSpec) -> b
    java.security.spec.ECParameterSpec mapNonceGMWithECDH(java.math.BigInteger,java.security.spec.ECPoint,java.security.spec.ECParameterSpec) -> a
    java.security.spec.ECPoint multiply(java.math.BigInteger,java.security.spec.ECPoint,java.security.spec.ECParameterSpec) -> b
    java.security.spec.ECPoint fromBouncyCastleECPoint(org.spongycastle.math.ec.ECPoint) -> a
    java.security.spec.ECPoint add(java.security.spec.ECPoint,java.security.spec.ECPoint,java.security.spec.ECParameterSpec) -> a
    org.spongycastle.math.ec.ECPoint toBouncyCastleECPoint(java.security.spec.ECPoint,java.security.spec.ECParameterSpec) -> a
es.gob.jmulticard.jse.provider.SignatureAuthException -> es.gob.jmulticard.jse.provider.SignatureAuthException:
es.gob.jmulticard.jse.provider.ceres.CeresKeyStoreImpl -> es.gob.jmulticard.jse.provider.ceres.CeresKeyStoreImpl:
    java.util.List userCertAliases -> a
    es.gob.jmulticard.card.fnmt.ceres.Ceres cryptoCard -> b
    void loadAliases() -> a
    java.util.Enumeration engineAliases() -> engineAliases
    boolean engineContainsAlias(java.lang.String) -> engineContainsAlias
    void engineDeleteEntry(java.lang.String) -> engineDeleteEntry
    java.security.cert.Certificate engineGetCertificate(java.lang.String) -> engineGetCertificate
    java.lang.String engineGetCertificateAlias(java.security.cert.Certificate) -> engineGetCertificateAlias
    java.security.cert.Certificate[] engineGetCertificateChain(java.lang.String) -> engineGetCertificateChain
    java.util.Date engineGetCreationDate(java.lang.String) -> engineGetCreationDate
    java.security.Key engineGetKey(java.lang.String,char[]) -> engineGetKey
    java.security.KeyStore$Entry engineGetEntry(java.lang.String,java.security.KeyStore$ProtectionParameter) -> engineGetEntry
    boolean engineIsCertificateEntry(java.lang.String) -> engineIsCertificateEntry
    boolean engineIsKeyEntry(java.lang.String) -> engineIsKeyEntry
    es.gob.jmulticard.apdu.connection.ApduConnection getApduConnection() -> b
    void engineLoad(java.security.KeyStore$LoadStoreParameter) -> engineLoad
    void engineLoad(java.io.InputStream,char[]) -> engineLoad
    void engineSetCertificateEntry(java.lang.String,java.security.cert.Certificate) -> engineSetCertificateEntry
    void engineSetKeyEntry(java.lang.String,byte[],java.security.cert.Certificate[]) -> engineSetKeyEntry
    void engineSetKeyEntry(java.lang.String,java.security.Key,char[],java.security.cert.Certificate[]) -> engineSetKeyEntry
    int engineSize() -> engineSize
    void engineStore(java.io.OutputStream,char[]) -> engineStore
    boolean engineEntryInstanceOf(java.lang.String,java.lang.Class) -> engineEntryInstanceOf
es.gob.jmulticard.jse.provider.ceres.CeresKeyStoreImpl$CachePasswordCallback -> es.gob.jmulticard.jse.provider.ceres.a:
es.gob.jmulticard.jse.provider.ceres.CeresPasswordCallback -> es.gob.jmulticard.jse.provider.ceres.b:
    java.security.KeyStore$PasswordProtection passp -> a
    char[] getPassword() -> getPassword
es.gob.jmulticard.jse.provider.ceres.CeresPrivateKey -> es.gob.jmulticard.jse.provider.ceres.CeresPrivateKey:
    es.gob.jmulticard.card.fnmt.ceres.Ceres ceres -> a
    es.gob.jmulticard.card.fnmt.ceres.CeresPrivateKeyReference keyRef -> b
    java.math.BigInteger modulus -> c
    java.lang.String getAlgorithm() -> getAlgorithm
    es.gob.jmulticard.card.CryptoCard getCryptoCard() -> a
    byte[] getEncoded() -> getEncoded
    java.lang.String getFormat() -> getFormat
    es.gob.jmulticard.card.fnmt.ceres.CeresPrivateKeyReference getReference() -> b
    java.math.BigInteger getModulus() -> getModulus
    java.math.BigInteger getPrivateExponent() -> getPrivateExponent
    java.lang.String toString() -> toString
es.gob.jmulticard.jse.provider.ceres.CeresProvider -> es.gob.jmulticard.jse.provider.ceres.CeresProvider:
    es.gob.jmulticard.apdu.connection.ApduConnection defaultConnection -> a
    es.gob.jmulticard.apdu.connection.ApduConnection getDefaultApduConnection() -> a
es.gob.jmulticard.jse.provider.ceres.CeresSignatureImpl -> es.gob.jmulticard.jse.provider.ceres.CeresSignatureImpl:
    java.io.ByteArrayOutputStream data -> a
    java.security.Signature signatureVerifier -> b
    es.gob.jmulticard.jse.provider.ceres.CeresPrivateKey privateKey -> c
    java.lang.String signatureAlgo -> d
    java.lang.Object engineGetParameter(java.lang.String) -> engineGetParameter
    void engineInitSign(java.security.PrivateKey) -> engineInitSign
    void engineInitVerify(java.security.PublicKey) -> engineInitVerify
    void engineSetParameter(java.lang.String,java.lang.Object) -> engineSetParameter
    byte[] engineSign() -> engineSign
    void engineUpdate(byte) -> engineUpdate
    void engineUpdate(byte[],int,int) -> engineUpdate
    boolean engineVerify(byte[]) -> engineVerify
es.gob.jmulticard.jse.provider.ceres.CeresSignatureImpl$Sha1 -> es.gob.jmulticard.jse.provider.ceres.CeresSignatureImpl$Sha1:
es.gob.jmulticard.jse.provider.ceres.CeresSignatureImpl$Sha256 -> es.gob.jmulticard.jse.provider.ceres.CeresSignatureImpl$Sha256:
es.gob.jmulticard.jse.provider.ceres.CeresSignatureImpl$Sha384 -> es.gob.jmulticard.jse.provider.ceres.CeresSignatureImpl$Sha384:
es.gob.jmulticard.jse.provider.ceres.CeresSignatureImpl$Sha512 -> es.gob.jmulticard.jse.provider.ceres.CeresSignatureImpl$Sha512:
es.gob.jmulticard.jse.smartcardio.SmartcardIoConnection -> es.gob.jmulticard.jse.smartcardio.SmartcardIoConnection:
    java.util.logging.Logger LOGGER -> a
    int terminalNumber -> b
    javax.smartcardio.CardChannel canal -> c
    javax.smartcardio.Card card -> d
    boolean exclusive -> e
    es.gob.jmulticard.apdu.connection.ApduConnectionProtocol protocol -> f
    void addCardConnectionListener(es.gob.jmulticard.apdu.connection.CardConnectionListener) -> addCardConnectionListener
    void close() -> close
    java.lang.String getTerminalInfo(int) -> getTerminalInfo
    long[] getTerminals(boolean) -> getTerminals
    boolean isOpen() -> isOpen
    void open() -> open
    void removeCardConnectionListener(es.gob.jmulticard.apdu.connection.CardConnectionListener) -> removeCardConnectionListener
    byte[] reset() -> reset
    void setExclusiveUse(boolean) -> setExclusiveUse
    void setProtocol(es.gob.jmulticard.apdu.connection.ApduConnectionProtocol) -> setProtocol
    void setTerminal(int) -> setTerminal
    es.gob.jmulticard.apdu.ResponseApdu transmit(es.gob.jmulticard.apdu.CommandApdu) -> transmit
    es.gob.jmulticard.apdu.connection.ApduConnectionProtocol getProtocol() -> getProtocol
    boolean isExclusiveUse() -> isExclusiveUse
es.gob.jmulticard.ui.passwordcallback.CancelledOperationException -> es.gob.jmulticard.ui.passwordcallback.CancelledOperationException:
es.gob.jmulticard.ui.passwordcallback.DialogBuilder -> es.gob.jmulticard.ui.passwordcallback.DialogBuilder:
    boolean headless -> a
    void setHeadLess(boolean) -> a
    void showSignatureConfirmDialog(es.gob.jmulticard.card.dnie.CustomAuthorizeCallback) -> showSignatureConfirmDialog
    int getConsoleConfirm(java.io.Console,es.gob.jmulticard.card.dnie.CustomAuthorizeCallback) -> a
es.gob.jmulticard.ui.passwordcallback.DialogBuilder$1 -> es.gob.jmulticard.ui.passwordcallback.DialogBuilder$1:
    java.lang.Void run() -> a
    java.lang.Object run() -> run
es.gob.jmulticard.ui.passwordcallback.Messages -> es.gob.jmulticard.ui.passwordcallback.Messages:
    java.util.ResourceBundle bundle -> a
    java.lang.String getString(java.lang.String) -> getString
es.gob.jmulticard.ui.passwordcallback.NoConsoleException -> es.gob.jmulticard.ui.passwordcallback.NoConsoleException:
es.gob.jmulticard.ui.passwordcallback.PasswordCallbackManager -> es.gob.jmulticard.ui.passwordcallback.PasswordCallbackManager:
    java.awt.Component dialogOwner -> a
    void setDialogOwner(java.lang.Object) -> setDialogOwner
    java.awt.Component getDialogOwner() -> getDialogOwner
es.gob.jmulticard.ui.passwordcallback.gui.CeresCallbackHandler -> es.gob.jmulticard.ui.passwordcallback.gui.CeresCallbackHandler:
    java.util.logging.Logger LOGGER -> a
    void handle(javax.security.auth.callback.Callback[]) -> handle
es.gob.jmulticard.ui.passwordcallback.gui.CommonPasswordCallback -> es.gob.jmulticard.ui.passwordcallback.gui.CommonPasswordCallback:
    boolean headless -> a
    boolean isDnie -> b
    java.lang.String title -> c
    void setHeadLess(boolean) -> a
    char[] getPassword() -> getPassword
es.gob.jmulticard.ui.passwordcallback.gui.CommonPasswordCallback$1 -> es.gob.jmulticard.ui.passwordcallback.gui.CommonPasswordCallback$1:
    java.lang.Void run() -> a
    java.lang.Object run() -> run
es.gob.jmulticard.ui.passwordcallback.gui.ConsolePasswordCallback -> es.gob.jmulticard.ui.passwordcallback.gui.a:
    java.lang.String prompt -> a
    java.lang.String removeHTML(java.lang.String) -> a
    char[] getPassword() -> getPassword
es.gob.jmulticard.ui.passwordcallback.gui.Constants -> es.gob.jmulticard.ui.passwordcallback.gui.b:
    javax.swing.ImageIcon IMAGEICON_MAXIMIZE -> a
    javax.swing.ImageIcon IMAGEICONRESTORE -> b
es.gob.jmulticard.ui.passwordcallback.gui.CustomDialogCeres -> es.gob.jmulticard.ui.passwordcallback.gui.CustomDialogCeres:
    es.gob.jmulticard.ui.passwordcallback.gui.InfoLabel infoLabel -> a
    javax.swing.JPanel buttonsPanel -> b
    javax.swing.JPanel accessibilityButtonsPanel -> c
    javax.swing.JPanel mainPanel -> d
    es.gob.jmulticard.ui.passwordcallback.gui.JSecurePasswordLabel component -> e
    es.gob.jmulticard.ui.passwordcallback.gui.IconLabel iconLabel -> iconLabel
    javax.swing.JButton okButton -> f
    javax.swing.JButton noButton -> g
    javax.swing.JButton cancelButton -> h
    javax.swing.JButton restoreButton -> i
    javax.swing.JButton maximizeButton -> j
    int answer -> k
    java.lang.String cancellText -> l
    es.gob.jmulticard.ui.passwordcallback.gui.JSecurePasswordLabel getComponent() -> a
    javax.swing.JButton getOkButton() -> b
    javax.swing.JButton getNoButton() -> c
    javax.swing.JButton getCancelButton() -> d
    javax.swing.JButton getRestoreButton() -> e
    javax.swing.JButton getMaximizeButton() -> f
    int getInitialX(int) -> e
    int getInitialY(int) -> f
    void initComponents(java.lang.String,java.lang.String,boolean) -> initComponents
    void setIconLabel() -> setIconLabel
    void createAccessibilityButtonsPanel() -> s
    void createMainButtonsPanel() -> g
    int showConfirmDialog(java.awt.Component,boolean,java.lang.String,java.lang.String,int) -> showConfirmDialog
    char[] showInputPasswordDialog(java.awt.Component,boolean,java.lang.String,int,java.lang.String) -> showInputPasswordDialog
    javax.swing.JButton getButton(java.lang.String,int) -> a
    int getMinimumRelation() -> getMinimumRelation
    int getAnswer() -> t
    void maximizarActionPerformed() -> h
    void restaurarActionPerformed() -> i
    es.gob.jmulticard.ui.passwordcallback.gui.CustomDialogCeres getInstanceCustomDialog(java.awt.Component,boolean,java.lang.String,java.lang.String,boolean) -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
es.gob.jmulticard.ui.passwordcallback.gui.CustomDialogCeres$1 -> es.gob.jmulticard.ui.passwordcallback.gui.c:
    es.gob.jmulticard.ui.passwordcallback.gui.CustomDialogCeres this$0 -> a
    javax.swing.JWindow val$tip -> b
    javax.swing.JLabel val$tipText -> c
    void focusLost(java.awt.event.FocusEvent) -> focusLost
    void focusGained(java.awt.event.FocusEvent) -> focusGained
es.gob.jmulticard.ui.passwordcallback.gui.CustomDialogCeres$10 -> es.gob.jmulticard.ui.passwordcallback.gui.d:
    void keyTyped(java.awt.event.KeyEvent) -> keyTyped
    void keyReleased(java.awt.event.KeyEvent) -> keyReleased
    void keyPressed(java.awt.event.KeyEvent) -> keyPressed
es.gob.jmulticard.ui.passwordcallback.gui.CustomDialogCeres$2 -> es.gob.jmulticard.ui.passwordcallback.gui.e:
    es.gob.jmulticard.ui.passwordcallback.gui.CustomDialogCeres this$0 -> a
    void keyTyped(java.awt.event.KeyEvent) -> keyTyped
    void keyReleased(java.awt.event.KeyEvent) -> keyReleased
    void keyPressed(java.awt.event.KeyEvent) -> keyPressed
es.gob.jmulticard.ui.passwordcallback.gui.CustomDialogCeres$3 -> es.gob.jmulticard.ui.passwordcallback.gui.f:
    es.gob.jmulticard.ui.passwordcallback.gui.CustomDialogCeres this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
es.gob.jmulticard.ui.passwordcallback.gui.CustomDialogCeres$4 -> es.gob.jmulticard.ui.passwordcallback.gui.g:
    es.gob.jmulticard.ui.passwordcallback.gui.CustomDialogCeres this$0 -> a
    void keyTyped(java.awt.event.KeyEvent) -> keyTyped
    void keyReleased(java.awt.event.KeyEvent) -> keyReleased
    void keyPressed(java.awt.event.KeyEvent) -> keyPressed
es.gob.jmulticard.ui.passwordcallback.gui.CustomDialogCeres$5 -> es.gob.jmulticard.ui.passwordcallback.gui.h:
    es.gob.jmulticard.ui.passwordcallback.gui.CustomDialogCeres this$0 -> a
    javax.swing.JWindow val$tip -> b
    javax.swing.JLabel val$tipText -> c
    void focusLost(java.awt.event.FocusEvent) -> focusLost
    void focusGained(java.awt.event.FocusEvent) -> focusGained
es.gob.jmulticard.ui.passwordcallback.gui.CustomDialogCeres$6 -> es.gob.jmulticard.ui.passwordcallback.gui.i:
    es.gob.jmulticard.ui.passwordcallback.gui.CustomDialogCeres this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
es.gob.jmulticard.ui.passwordcallback.gui.CustomDialogCeres$7 -> es.gob.jmulticard.ui.passwordcallback.gui.j:
    es.gob.jmulticard.ui.passwordcallback.gui.CustomDialogCeres this$0 -> a
    void keyTyped(java.awt.event.KeyEvent) -> keyTyped
    void keyReleased(java.awt.event.KeyEvent) -> keyReleased
    void keyPressed(java.awt.event.KeyEvent) -> keyPressed
es.gob.jmulticard.ui.passwordcallback.gui.CustomDialogCeres$8 -> es.gob.jmulticard.ui.passwordcallback.gui.k:
    es.gob.jmulticard.ui.passwordcallback.gui.CustomDialogCeres val$customDialog -> a
    void keyTyped(java.awt.event.KeyEvent) -> keyTyped
    void keyReleased(java.awt.event.KeyEvent) -> keyReleased
    void keyPressed(java.awt.event.KeyEvent) -> keyPressed
es.gob.jmulticard.ui.passwordcallback.gui.CustomDialogCeres$9 -> es.gob.jmulticard.ui.passwordcallback.gui.l:
    es.gob.jmulticard.ui.passwordcallback.gui.CustomDialogCeres val$customDialog -> a
    void keyTyped(java.awt.event.KeyEvent) -> keyTyped
    void keyReleased(java.awt.event.KeyEvent) -> keyReleased
    void keyPressed(java.awt.event.KeyEvent) -> keyPressed
es.gob.jmulticard.ui.passwordcallback.gui.CustomDialogCeres$ButtonAbstractAction -> es.gob.jmulticard.ui.passwordcallback.gui.m:
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
es.gob.jmulticard.ui.passwordcallback.gui.CustomDialogDnie -> es.gob.jmulticard.ui.passwordcallback.gui.CustomDialogDnie:
    es.gob.jmulticard.ui.passwordcallback.gui.InfoLabel infoLabel -> a
    javax.swing.JPanel buttonsPanel -> b
    javax.swing.JPanel accessibilityButtonsPanel -> c
    javax.swing.JPanel mainPanel -> d
    es.gob.jmulticard.ui.passwordcallback.gui.JSecurePasswordLabel component -> e
    es.gob.jmulticard.ui.passwordcallback.gui.IconLabel iconLabel -> iconLabel
    javax.swing.JButton okButton -> f
    javax.swing.JButton noButton -> g
    javax.swing.JButton cancelButton -> h
    javax.swing.JButton restoreButton -> i
    javax.swing.JButton maximizeButton -> j
    int answer -> k
    java.lang.String cancellText -> l
    es.gob.jmulticard.ui.passwordcallback.gui.JSecurePasswordLabel getComponent() -> a
    javax.swing.JButton getOkButton() -> b
    javax.swing.JButton getNoButton() -> c
    javax.swing.JButton getCancelButton() -> d
    javax.swing.JButton getRestoreButton() -> e
    javax.swing.JButton getMaximizeButton() -> f
    int getInitialX(int) -> e
    int getInitialY(int) -> f
    void initComponents(java.lang.String,java.lang.String,boolean) -> initComponents
    void setIconLabel() -> setIconLabel
    void createAccessibilityButtonsPanel() -> s
    void createMainButtonsPanel() -> g
    int showConfirmDialog(java.awt.Component,boolean,java.lang.String,java.lang.String,int) -> showConfirmDialog
    char[] showInputPasswordDialog(java.awt.Component,boolean,java.lang.String,int,java.lang.String) -> showInputPasswordDialog
    javax.swing.JButton getButton(java.lang.String,int) -> a
    int getMinimumRelation() -> getMinimumRelation
    int getAnswer() -> t
    void maximizarActionPerformed() -> h
    void restaurarActionPerformed() -> i
    es.gob.jmulticard.ui.passwordcallback.gui.CustomDialogDnie getInstanceCustomDialog(java.awt.Component,boolean,java.lang.String,java.lang.String,boolean) -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
es.gob.jmulticard.ui.passwordcallback.gui.CustomDialogDnie$1 -> es.gob.jmulticard.ui.passwordcallback.gui.n:
    es.gob.jmulticard.ui.passwordcallback.gui.CustomDialogDnie this$0 -> a
    javax.swing.JWindow val$tip -> b
    javax.swing.JLabel val$tipText -> c
    void focusLost(java.awt.event.FocusEvent) -> focusLost
    void focusGained(java.awt.event.FocusEvent) -> focusGained
es.gob.jmulticard.ui.passwordcallback.gui.CustomDialogDnie$10 -> es.gob.jmulticard.ui.passwordcallback.gui.o:
    void keyTyped(java.awt.event.KeyEvent) -> keyTyped
    void keyReleased(java.awt.event.KeyEvent) -> keyReleased
    void keyPressed(java.awt.event.KeyEvent) -> keyPressed
es.gob.jmulticard.ui.passwordcallback.gui.CustomDialogDnie$2 -> es.gob.jmulticard.ui.passwordcallback.gui.p:
    es.gob.jmulticard.ui.passwordcallback.gui.CustomDialogDnie this$0 -> a
    void keyTyped(java.awt.event.KeyEvent) -> keyTyped
    void keyReleased(java.awt.event.KeyEvent) -> keyReleased
    void keyPressed(java.awt.event.KeyEvent) -> keyPressed
es.gob.jmulticard.ui.passwordcallback.gui.CustomDialogDnie$3 -> es.gob.jmulticard.ui.passwordcallback.gui.q:
    es.gob.jmulticard.ui.passwordcallback.gui.CustomDialogDnie this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
es.gob.jmulticard.ui.passwordcallback.gui.CustomDialogDnie$4 -> es.gob.jmulticard.ui.passwordcallback.gui.r:
    es.gob.jmulticard.ui.passwordcallback.gui.CustomDialogDnie this$0 -> a
    void keyTyped(java.awt.event.KeyEvent) -> keyTyped
    void keyReleased(java.awt.event.KeyEvent) -> keyReleased
    void keyPressed(java.awt.event.KeyEvent) -> keyPressed
es.gob.jmulticard.ui.passwordcallback.gui.CustomDialogDnie$5 -> es.gob.jmulticard.ui.passwordcallback.gui.s:
    es.gob.jmulticard.ui.passwordcallback.gui.CustomDialogDnie this$0 -> a
    javax.swing.JWindow val$tip -> b
    javax.swing.JLabel val$tipText -> c
    void focusLost(java.awt.event.FocusEvent) -> focusLost
    void focusGained(java.awt.event.FocusEvent) -> focusGained
es.gob.jmulticard.ui.passwordcallback.gui.CustomDialogDnie$6 -> es.gob.jmulticard.ui.passwordcallback.gui.t:
    es.gob.jmulticard.ui.passwordcallback.gui.CustomDialogDnie this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
es.gob.jmulticard.ui.passwordcallback.gui.CustomDialogDnie$7 -> es.gob.jmulticard.ui.passwordcallback.gui.u:
    es.gob.jmulticard.ui.passwordcallback.gui.CustomDialogDnie this$0 -> a
    void keyTyped(java.awt.event.KeyEvent) -> keyTyped
    void keyReleased(java.awt.event.KeyEvent) -> keyReleased
    void keyPressed(java.awt.event.KeyEvent) -> keyPressed
es.gob.jmulticard.ui.passwordcallback.gui.CustomDialogDnie$8 -> es.gob.jmulticard.ui.passwordcallback.gui.v:
    es.gob.jmulticard.ui.passwordcallback.gui.CustomDialogDnie val$customDialog -> a
    void keyTyped(java.awt.event.KeyEvent) -> keyTyped
    void keyReleased(java.awt.event.KeyEvent) -> keyReleased
    void keyPressed(java.awt.event.KeyEvent) -> keyPressed
es.gob.jmulticard.ui.passwordcallback.gui.CustomDialogDnie$9 -> es.gob.jmulticard.ui.passwordcallback.gui.w:
    es.gob.jmulticard.ui.passwordcallback.gui.CustomDialogDnie val$customDialog -> a
    void keyTyped(java.awt.event.KeyEvent) -> keyTyped
    void keyReleased(java.awt.event.KeyEvent) -> keyReleased
    void keyPressed(java.awt.event.KeyEvent) -> keyPressed
es.gob.jmulticard.ui.passwordcallback.gui.CustomDialogDnie$ButtonAbstractAction -> es.gob.jmulticard.ui.passwordcallback.gui.x:
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
es.gob.jmulticard.ui.passwordcallback.gui.DnieCallbackHandler -> es.gob.jmulticard.ui.passwordcallback.gui.DnieCallbackHandler:
    java.util.logging.Logger LOGGER -> a
    void handle(javax.security.auth.callback.Callback[]) -> handle
es.gob.jmulticard.ui.passwordcallback.gui.GeneralConfig -> es.gob.jmulticard.ui.passwordcallback.gui.y:
    boolean isBigFontSize() -> a
    boolean isFontBold() -> b
    boolean isHighContrast() -> c
    boolean isMaximized() -> d
    boolean isRemarked() -> e
es.gob.jmulticard.ui.passwordcallback.gui.IconLabel -> es.gob.jmulticard.ui.passwordcallback.gui.z:
    javax.swing.Icon icon -> a
    javax.swing.Icon originalIcon -> b
    java.awt.Dimension originalDimension -> c
    javax.swing.Icon getIcon() -> getIcon
    javax.swing.Icon getOriginalIcon() -> a
    void setIcon(javax.swing.Icon) -> setIcon
    void setOriginalIcon(javax.swing.Icon) -> a
    java.awt.Dimension getOriginalDimension() -> b
    void setOriginalDimension(java.awt.Dimension) -> a
es.gob.jmulticard.ui.passwordcallback.gui.InfoLabel -> es.gob.jmulticard.ui.passwordcallback.gui.A:
es.gob.jmulticard.ui.passwordcallback.gui.JAccessibilityCustomDialog -> es.gob.jmulticard.ui.passwordcallback.gui.B:
    int actualPositionX -> a
    int actualPositionY -> b
    int actualWidth -> c
    int actualHeight -> d
    boolean bigSizeDefault -> e
    boolean isInputDialog -> f
    int getMinimumRelation() -> getMinimumRelation
    int getActualPositionX() -> j
    void setActualPositionX(int) -> a
    int getActualPositionY() -> k
    void setActualPositionY(int) -> b
    int getActualWidth() -> l
    void setActualWidth(int) -> c
    int getActualHeight() -> m
    void setActualHeight(int) -> d
    boolean isBigSizeDefault() -> n
    int getInitialWidth() -> o
    int getInitialHeight() -> p
    int getMaxWidth() -> q
    int getMaxHeight() -> r
es.gob.jmulticard.ui.passwordcallback.gui.JSecurePasswordLabel -> es.gob.jmulticard.ui.passwordcallback.gui.C:
    int delay -> b
    char[] pass -> c
    int maxChars -> d
    int passwordLength -> a
    javax.swing.Timer timer -> e
    boolean showCursor -> f
    char[] getPass() -> a
    javax.swing.Timer getTimer() -> b
    int getMaxChars() -> c
    void updateText() -> d
    void clearPassword() -> e
    void clearPassword(int) -> a
    char[] getPassword() -> f
    int getPasswordLength() -> g
    void setShowCursor(boolean) -> a
    boolean getShowCursor() -> h
es.gob.jmulticard.ui.passwordcallback.gui.JSecurePasswordLabel$1 -> es.gob.jmulticard.ui.passwordcallback.gui.D:
    es.gob.jmulticard.ui.passwordcallback.gui.JSecurePasswordLabel this$0 -> a
    boolean isValid(char) -> a
    void keyTyped(java.awt.event.KeyEvent) -> keyTyped
    void keyPressed(java.awt.event.KeyEvent) -> keyPressed
es.gob.jmulticard.ui.passwordcallback.gui.JSecurePasswordLabel$2 -> es.gob.jmulticard.ui.passwordcallback.gui.E:
    es.gob.jmulticard.ui.passwordcallback.gui.JSecurePasswordLabel this$0 -> a
    void focusGained(java.awt.event.FocusEvent) -> focusGained
    void focusLost(java.awt.event.FocusEvent) -> focusLost
es.gob.jmulticard.ui.passwordcallback.gui.JSecurePasswordLabel$3 -> es.gob.jmulticard.ui.passwordcallback.gui.F:
    es.gob.jmulticard.ui.passwordcallback.gui.JSecurePasswordLabel this$0 -> a
    void mouseClicked(java.awt.event.MouseEvent) -> mouseClicked
es.gob.jmulticard.ui.passwordcallback.gui.JSecurePasswordLabel$4 -> es.gob.jmulticard.ui.passwordcallback.gui.G:
    es.gob.jmulticard.ui.passwordcallback.gui.JSecurePasswordLabel this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
es.gob.jmulticard.ui.passwordcallback.gui.RequestFocusListener -> es.gob.jmulticard.ui.passwordcallback.gui.H:
    boolean removeListener -> a
    void ancestorAdded(javax.swing.event.AncestorEvent) -> ancestorAdded
    void ancestorMoved(javax.swing.event.AncestorEvent) -> ancestorMoved
    void ancestorRemoved(javax.swing.event.AncestorEvent) -> ancestorRemoved
es.gob.jmulticard.ui.passwordcallback.gui.ResizingAdaptor -> es.gob.jmulticard.ui.passwordcallback.gui.I:
    es.gob.jmulticard.ui.passwordcallback.gui.JAccessibilityCustomDialog theCustomDialog -> a
    void componentResized(java.awt.event.ComponentEvent) -> componentResized
    void adjustFontSize(java.awt.Component[]) -> a
    float getImageResizeFactor(double) -> a
    java.awt.Image iconToImage(javax.swing.Icon) -> a
    java.awt.Image iconToImage(javax.swing.Icon,java.awt.Dimension) -> a
    void resizeImage(double,java.awt.Component,int,int,int) -> a
    void resizeImageButton(double,java.awt.Component) -> a
    float getFontSize() -> a
    boolean isResizable(java.awt.Component) -> a
    float getResizingFactorFrame() -> b
    float getResizingFactorFileChooser() -> c
    float getResizingFactorCustomDialog() -> d
es.gob.jmulticard.ui.passwordcallback.gui.UIPasswordCallback -> es.gob.jmulticard.ui.passwordcallback.gui.UIPasswordCallback:
    java.lang.String message -> a
    java.awt.Component parent -> b
    java.lang.String title -> c
    char[] getPassword() -> getPassword
es.gob.jmulticard.ui.passwordcallback.gui.UIPasswordCallback$1 -> es.gob.jmulticard.ui.passwordcallback.gui.J:
    es.gob.jmulticard.ui.passwordcallback.gui.UIPasswordCallback this$0 -> a
    javax.swing.JPasswordField val$pwd -> b
    void selectInitialValue() -> selectInitialValue
es.gob.jmulticard.ui.passwordcallback.gui.UIPasswordCallbackAccessibility -> es.gob.jmulticard.ui.passwordcallback.gui.UIPasswordCallbackAccessibility:
    java.lang.String message -> a
    int mnemonic -> b
    java.awt.Component parent -> c
    java.lang.String title -> d
    char[] getPassword() -> getPassword
es.gob.jmulticard.ui.passwordcallback.gui.UIPasswordCallbackAccessibilityCeres -> es.gob.jmulticard.ui.passwordcallback.gui.UIPasswordCallbackAccessibilityCeres:
    java.lang.String message -> a
    int mnemonic -> b
    java.awt.Component parent -> c
    java.lang.String title -> d
    char[] getPassword() -> getPassword
es.gob.jmulticard.ui.passwordcallback.gui.UIPasswordCallbackCan -> es.gob.jmulticard.ui.passwordcallback.gui.UIPasswordCallbackCan:
    java.lang.String message -> a
    java.awt.Component parent -> b
    java.lang.String title -> c
    char[] getPassword() -> getPassword
es.gob.jmulticard.ui.passwordcallback.gui.UIPasswordCallbackCan$1 -> es.gob.jmulticard.ui.passwordcallback.gui.K:
    es.gob.jmulticard.ui.passwordcallback.gui.UIPasswordCallbackCan this$0 -> a
    javax.swing.JPasswordField val$pwd -> b
    void selectInitialValue() -> selectInitialValue
es.gob.jmulticard.ui.passwordcallback.gui.Utils -> es.gob.jmulticard.ui.passwordcallback.gui.L:
    boolean HIGH_CONTRAST -> a
    boolean isHighContrast() -> a
    void remarcar(javax.swing.JComponent) -> a
    void setContrastColor(javax.swing.JComponent) -> b
    void setFontBold(javax.swing.JComponent) -> c
    java.lang.String remarkMnemonic(java.lang.String,int) -> a
    void showToolTip(boolean,javax.swing.JWindow,javax.swing.JButton,javax.swing.JLabel) -> a
es.gob.jmulticard.ui.passwordcallback.gui.Utils$1 -> es.gob.jmulticard.ui.passwordcallback.gui.M:
    javax.swing.JButton val$button -> a
    void focusLost(java.awt.event.FocusEvent) -> focusLost
    void focusGained(java.awt.event.FocusEvent) -> focusGained
es.gob.jmulticard.ui.passwordcallback.gui.Utils$2 -> es.gob.jmulticard.ui.passwordcallback.gui.N:
    javax.swing.JTextField val$textField -> a
    void focusLost(java.awt.event.FocusEvent) -> focusLost
    void focusGained(java.awt.event.FocusEvent) -> focusGained
es.gob.jmulticard.ui.passwordcallback.gui.Utils$3 -> es.gob.jmulticard.ui.passwordcallback.gui.O:
    javax.swing.JComboBox val$comboBox -> a
    void focusLost(java.awt.event.FocusEvent) -> focusLost
    void focusGained(java.awt.event.FocusEvent) -> focusGained
es.gob.jmulticard.ui.passwordcallback.gui.Utils$4 -> es.gob.jmulticard.ui.passwordcallback.gui.P:
    javax.swing.JLabel val$label -> a
    void focusLost(java.awt.event.FocusEvent) -> focusLost
    void focusGained(java.awt.event.FocusEvent) -> focusGained
es.gob.jmulticard.ui.passwordcallback.gui.Utils$5 -> es.gob.jmulticard.ui.passwordcallback.gui.Q:
    javax.swing.JCheckBox val$checkBox -> a
    void focusLost(java.awt.event.FocusEvent) -> focusLost
    void focusGained(java.awt.event.FocusEvent) -> focusGained
net.java.xades.security.xml.WrappedKeyStorePlace -> net.a.a.a.a.a:
    net.java.xades.security.xml.WrappedKeyStorePlace KEY_INFO -> a
    net.java.xades.security.xml.WrappedKeyStorePlace SIGNING_CERTIFICATE_PROPERTY -> b
    net.java.xades.security.xml.WrappedKeyStorePlace[] $VALUES -> c
    net.java.xades.security.xml.WrappedKeyStorePlace[] values() -> values
    net.java.xades.security.xml.WrappedKeyStorePlace valueOf(java.lang.String) -> valueOf
net.java.xades.security.xml.XAdES.ArchivalXAdESImpl -> net.a.a.a.a.a.a:
net.java.xades.security.xml.XAdES.BasicXAdESImpl -> net.a.a.a.a.a.b:
    boolean readOnlyMode -> a
    java.util.TreeMap data -> b
    org.w3c.dom.Element baseElement -> g
    org.w3c.dom.Document baseDocument -> h
    java.lang.String xadesPrefix -> c
    java.lang.String xadesNamespace -> d
    java.lang.String xmlSignaturePrefix -> e
    java.lang.String digestMethod -> f
    org.w3c.dom.Document getBaseDocument() -> a
    org.w3c.dom.Element getBaseElement() -> b
    java.lang.String getDigestMethod() -> c
    void setSigningTime(java.util.Date) -> a
    void setSigningCertificate(java.security.cert.X509Certificate) -> a
    void setSignatureProductionPlace(net.java.xades.security.xml.XAdES.SignatureProductionPlace) -> a
    void setSignerRole(net.java.xades.security.xml.XAdES.SignerRole) -> a
    void setDataObjectFormats(java.util.List) -> a
    void setCommitmentTypeIndications(java.util.List) -> b
    net.java.xades.security.xml.XAdES.SignedSignatureProperties getSignedSignatureProperties(net.java.xades.security.xml.XAdES.QualifyingProperties) -> a
    net.java.xades.security.xml.XAdES.SignedDataObjectProperties getSignedDataObjectProperties(net.java.xades.security.xml.XAdES.QualifyingProperties) -> b
    net.java.xades.security.xml.XAdES.UnsignedSignatureProperties getUnsignedSignatureProperties(net.java.xades.security.xml.XAdES.QualifyingProperties) -> c
    void marshalQualifyingProperties(net.java.xades.security.xml.XAdES.QualifyingProperties,java.lang.String,java.util.List) -> a
    java.lang.String getXadesPrefix() -> d
    java.lang.String getXmlSignaturePrefix() -> e
    java.lang.String getXadesNamespace() -> f
net.java.xades.security.xml.XAdES.Cert -> net.a.a.a.a.a.c:
    net.java.xades.security.xml.XAdES.CertDigest certDigest -> d
    net.java.xades.security.xml.XAdES.IssuerSerial issuerSerial -> e
net.java.xades.security.xml.XAdES.CertDigest -> net.a.a.a.a.a.d:
net.java.xades.security.xml.XAdES.CertRefs -> net.a.a.a.a.a.e:
    java.util.List certs -> d
net.java.xades.security.xml.XAdES.CommitmentTypeId -> net.a.a.a.a.a.f:
    java.lang.String getIdentifier() -> a
    java.lang.String getQualifier() -> b
    java.lang.String getDescription() -> c
    java.util.ArrayList getDocumentationReferences() -> d
net.java.xades.security.xml.XAdES.CommitmentTypeIdDetails -> net.a.a.a.a.a.g:
net.java.xades.security.xml.XAdES.CommitmentTypeIdImpl -> net.a.a.a.a.a.h:
    java.lang.String qualifier -> a
    java.lang.String identifier -> b
    java.lang.String description -> c
    java.util.ArrayList documentationReferences -> d
    java.lang.String getQualifier() -> b
    java.lang.String getIdentifier() -> a
    java.lang.String getDescription() -> c
    java.util.ArrayList getDocumentationReferences() -> d
net.java.xades.security.xml.XAdES.CommitmentTypeIndication -> net.a.a.a.a.a.i:
    net.java.xades.security.xml.XAdES.CommitmentTypeId getCommitmentTypeId() -> a
    java.lang.String getObjectReference() -> b
    java.util.ArrayList getCommitmentTypeQualifiers() -> c
net.java.xades.security.xml.XAdES.CommitmentTypeIndicationDetails -> net.a.a.a.a.a.j:
net.java.xades.security.xml.XAdES.CommitmentTypeIndicationImpl -> net.a.a.a.a.a.k:
    net.java.xades.security.xml.XAdES.CommitmentTypeId commitmentTypeId -> a
    java.lang.String objectReference -> b
    java.util.ArrayList commitmentTypeQualifiers -> c
    net.java.xades.security.xml.XAdES.CommitmentTypeId getCommitmentTypeId() -> a
    java.lang.String getObjectReference() -> b
    java.util.ArrayList getCommitmentTypeQualifiers() -> c
net.java.xades.security.xml.XAdES.CompleteCertificateRefs -> net.a.a.a.a.a.l:
net.java.xades.security.xml.XAdES.CompleteCertificateRefsImpl -> net.a.a.a.a.a.m:
    net.java.xades.security.xml.XAdES.CertRefs certRefs -> d
net.java.xades.security.xml.XAdES.CompleteValidationXAdESImpl -> net.a.a.a.a.a.n:
net.java.xades.security.xml.XAdES.DataObjectFormat -> net.a.a.a.a.a.o:
    java.lang.String getDescription() -> a
    net.java.xades.security.xml.XAdES.ObjectIdentifier getObjectIdentifier() -> b
    java.lang.String getMimeType() -> c
    java.lang.String getEncoding() -> d
    java.lang.String getObjectReference() -> e
net.java.xades.security.xml.XAdES.DataObjectFormatDetails -> net.a.a.a.a.a.p:
net.java.xades.security.xml.XAdES.DataObjectFormatImpl -> net.a.a.a.a.a.q:
    java.lang.String description -> a
    net.java.xades.security.xml.XAdES.ObjectIdentifier objectIdentifier -> b
    java.lang.String mimeType -> c
    java.lang.String encoding -> d
    java.lang.String objectReference -> e
    java.lang.String getDescription() -> a
    net.java.xades.security.xml.XAdES.ObjectIdentifier getObjectIdentifier() -> b
    java.lang.String getMimeType() -> c
    java.lang.String getEncoding() -> d
    java.lang.String getObjectReference() -> e
net.java.xades.security.xml.XAdES.DigestAlgAndValue -> net.a.a.a.a.a.r:
net.java.xades.security.xml.XAdES.ExplicitPolicyXAdESImpl -> net.a.a.a.a.a.s:
    void setSignaturePolicyIdentifier(net.java.xades.security.xml.XAdES.SignaturePolicyIdentifier) -> a
net.java.xades.security.xml.XAdES.ExtendedLongXAdESImpl -> net.a.a.a.a.a.t:
net.java.xades.security.xml.XAdES.ExtendedXAdESImpl -> net.a.a.a.a.a.u:
net.java.xades.security.xml.XAdES.IssuerSerial -> net.a.a.a.a.a.v:
net.java.xades.security.xml.XAdES.ObjectIdentifier -> net.a.a.a.a.a.w:
    java.lang.String getQualifier() -> a
    java.lang.String getIdentifier() -> b
    java.lang.String getDescription() -> c
    java.util.ArrayList getDocumentationReferences() -> d
net.java.xades.security.xml.XAdES.ObjectIdentifierDetails -> net.a.a.a.a.a.x:
net.java.xades.security.xml.XAdES.ObjectIdentifierImpl -> net.a.a.a.a.a.y:
    java.lang.String qualifier -> a
    java.lang.String identifier -> b
    java.lang.String description -> c
    java.util.ArrayList documentationReferences -> d
    java.lang.String getQualifier() -> a
    java.lang.String getIdentifier() -> b
    java.lang.String getDescription() -> c
    java.util.ArrayList getDocumentationReferences() -> d
net.java.xades.security.xml.XAdES.QualifyingProperties -> net.a.a.a.a.a.z:
    java.lang.String signatureIdPrefix -> d
    net.java.xades.security.xml.XAdES.SignedProperties signedProperties -> e
    net.java.xades.security.xml.XAdES.UnsignedProperties unsignedProperties -> f
    org.w3c.dom.Document document -> g
    net.java.xades.security.xml.XAdES.SignedProperties getSignedProperties() -> a
    net.java.xades.security.xml.XAdES.UnsignedProperties getUnsignedProperties() -> b
net.java.xades.security.xml.XAdES.SignaturePolicyIdentifier -> net.a.a.a.a.a.A:
    boolean isImplied() -> a
    java.lang.String getIdentifier() -> b
    void setIdentifier(java.lang.String,java.lang.String,java.lang.String) -> a
    java.lang.String getHashBase64() -> c
    java.lang.String getHashAlgorithm() -> d
    java.lang.String getDescription() -> e
    void setDescription(java.lang.String) -> a
    java.lang.String getQualifier() -> f
    void setQualifier(java.lang.String) -> b
net.java.xades.security.xml.XAdES.SignaturePolicyIdentifierDetails -> net.a.a.a.a.a.B:
net.java.xades.security.xml.XAdES.SignaturePolicyIdentifierImpl -> net.a.a.a.a.a.C:
    boolean implied -> a
    java.lang.String sigPolicyId -> b
    java.lang.String description -> c
    java.lang.String sigPolicyQualifierSPURI -> d
    java.lang.String sigPolicyHashBase64 -> e
    java.lang.String sigPolicyHashHashAlgorithm -> f
    byte[] inputStreamToByteArray(java.io.InputStream) -> a
    void setIdentifier(java.lang.String,java.lang.String,java.lang.String) -> a
    boolean isImplied() -> a
    java.lang.String getIdentifier() -> b
    java.lang.String getHashBase64() -> c
    java.lang.String getDescription() -> e
    void setDescription(java.lang.String) -> a
    java.lang.String getQualifier() -> f
    void setQualifier(java.lang.String) -> b
    java.lang.String getHashAlgorithm() -> d
net.java.xades.security.xml.XAdES.SignatureProductionPlace -> net.a.a.a.a.a.D:
    java.lang.String getCity() -> a
    java.lang.String getStateOrProvince() -> b
    java.lang.String getPostalCode() -> c
    java.lang.String getCountryName() -> d
net.java.xades.security.xml.XAdES.SignatureProductionPlaceDetails -> net.a.a.a.a.a.E:
net.java.xades.security.xml.XAdES.SignatureProductionPlaceImpl -> net.a.a.a.a.a.F:
    java.lang.String city -> a
    java.lang.String stateOrProvince -> b
    java.lang.String postalCode -> c
    java.lang.String countryName -> d
    java.lang.String getCity() -> a
    java.lang.String getStateOrProvince() -> b
    java.lang.String getPostalCode() -> c
    java.lang.String getCountryName() -> d
net.java.xades.security.xml.XAdES.SignedDataObjectProperties -> net.a.a.a.a.a.G:
    org.w3c.dom.Document document -> d
    void setDataObjectFormat(java.util.ArrayList) -> a
    void setCommitmentTypeIndications(java.util.List) -> a
net.java.xades.security.xml.XAdES.SignedProperties -> net.a.a.a.a.a.H:
    net.java.xades.security.xml.XAdES.SignedSignatureProperties signedSignatureProperties -> d
    net.java.xades.security.xml.XAdES.SignedDataObjectProperties signedDataObjectProperties -> e
    org.w3c.dom.Document document -> f
    net.java.xades.security.xml.XAdES.SignedSignatureProperties getSignedSignatureProperties() -> a
    net.java.xades.security.xml.XAdES.SignedDataObjectProperties getSignedDataObjectProperties() -> b
net.java.xades.security.xml.XAdES.SignedSignatureProperties -> net.a.a.a.a.a.I:
    org.w3c.dom.Document document -> d
    void setSigningTime() -> a
    void setSigningTime(java.util.Date) -> a
    void setSigner(net.java.xades.security.xml.XAdES.Signer) -> a
    void setSigningCertificate(net.java.xades.security.xml.XAdES.SigningCertificate) -> a
    void setSignerRole(net.java.xades.security.xml.XAdES.SignerRole) -> a
    void setSignatureProductionPlace(net.java.xades.security.xml.XAdES.SignatureProductionPlace) -> a
    void setSignaturePolicyIdentifier(net.java.xades.security.xml.XAdES.SignaturePolicyIdentifier) -> a
net.java.xades.security.xml.XAdES.Signer -> net.a.a.a.a.a.J:
    java.lang.String getUserId() -> a
    java.lang.String getUsername() -> b
    java.lang.String getPersonName() -> c
net.java.xades.security.xml.XAdES.SignerDetails -> net.a.a.a.a.a.K:
net.java.xades.security.xml.XAdES.SignerRole -> net.a.a.a.a.a.L:
    java.util.ArrayList getCertifiedRole() -> a
    java.util.ArrayList getClaimedRole() -> b
    void addClaimedRole(java.lang.String) -> a
    void addCertifiedRole(java.lang.String) -> b
net.java.xades.security.xml.XAdES.SignerRoleDetails -> net.a.a.a.a.a.M:
net.java.xades.security.xml.XAdES.SignerRoleImpl -> net.a.a.a.a.a.N:
    java.util.ArrayList claimedRole -> a
    java.util.ArrayList certifiedRole -> b
    java.util.ArrayList getCertifiedRole() -> a
    java.util.ArrayList getClaimedRole() -> b
    void addClaimedRole(java.lang.String) -> a
    void addCertifiedRole(java.lang.String) -> b
net.java.xades.security.xml.XAdES.SigningCertificate -> net.a.a.a.a.a.O:
    java.lang.String getDigestMethodAlgorithm() -> a
    java.lang.String getDigestValue() -> b
    java.lang.String getIssuerName() -> c
    java.math.BigInteger getX509SerialNumber() -> d
net.java.xades.security.xml.XAdES.SigningCertificateDetails -> net.a.a.a.a.a.P:
net.java.xades.security.xml.XAdES.SigningCertificateImpl -> net.a.a.a.a.a.Q:
    java.security.cert.X509Certificate certificate -> a
    java.lang.String digestMethod -> b
    java.lang.String getDigestMethodAlgorithm() -> a
    java.lang.String getDigestValue() -> b
    java.lang.String getIssuerName() -> c
    java.math.BigInteger getX509SerialNumber() -> d
net.java.xades.security.xml.XAdES.SigningTime -> net.a.a.a.a.a.R:
net.java.xades.security.xml.XAdES.TimestampXAdESImpl -> net.a.a.a.a.a.S:
net.java.xades.security.xml.XAdES.UnsignedProperties -> net.a.a.a.a.a.T:
    net.java.xades.security.xml.XAdES.UnsignedSignatureProperties unsignedSignatureProperties -> d
    org.w3c.dom.Document document -> e
    net.java.xades.security.xml.XAdES.UnsignedSignatureProperties getUnsignedSignatureProperties() -> a
net.java.xades.security.xml.XAdES.UnsignedSignatureProperties -> net.a.a.a.a.a.U:
    net.java.xades.security.xml.XAdES.CompleteCertificateRefs completeCertificateRefs -> d
    org.w3c.dom.Document document -> e
    net.java.xades.security.xml.XAdES.CompleteCertificateRefs getCompleteCertificateRefs() -> a
    void setCompleteCertificateRefs(java.util.Collection,java.lang.String) -> a
net.java.xades.security.xml.XAdES.XAdES -> net.a.a.a.a.a.V:
    net.java.xades.security.xml.XAdES.XAdES BES -> a
    net.java.xades.security.xml.XAdES.XAdES EPES -> b
    net.java.xades.security.xml.XAdES.XAdES T -> c
    net.java.xades.security.xml.XAdES.XAdES C -> d
    net.java.xades.security.xml.XAdES.XAdES X -> e
    net.java.xades.security.xml.XAdES.XAdES X_L -> f
    net.java.xades.security.xml.XAdES.XAdES A -> g
    java.lang.String nickname -> p
    java.lang.String contentsId -> q
    java.lang.String title -> r
    net.java.xades.security.xml.XAdES.XadesElementsEnumeration XAdES_ELEMENTS -> h
    net.java.xades.security.xml.XAdES.XadesElementsEnumeration XAdES_BES_ELEMENTS -> i
    net.java.xades.security.xml.XAdES.XadesElementsEnumeration XAdES_EPES_ELEMENTS -> j
    net.java.xades.security.xml.XAdES.XadesElementsEnumeration XAdES_T_ELEMENTS -> k
    net.java.xades.security.xml.XAdES.XadesElementsEnumeration XAdES_C_ELEMENTS -> l
    net.java.xades.security.xml.XAdES.XadesElementsEnumeration XAdES_X_ELEMENTS -> m
    net.java.xades.security.xml.XAdES.XadesElementsEnumeration XAdES_X_L_ELEMENTS -> n
    net.java.xades.security.xml.XAdES.XadesElementsEnumeration XAdES_A_ELEMENTS -> o
    net.java.xades.security.xml.XAdES.XAdES[] $VALUES -> s
    net.java.xades.security.xml.XAdES.XAdES[] values() -> values
    net.java.xades.security.xml.XAdES.XAdES valueOf(java.lang.String) -> valueOf
    net.java.xades.security.xml.XAdES.XAdES_BES newInstance(net.java.xades.security.xml.XAdES.XAdES,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.w3c.dom.Document,org.w3c.dom.Element) -> a
    void setDefinedIdAttributesAsDOMIds(org.w3c.dom.Document) -> a
net.java.xades.security.xml.XAdES.XAdES$Element -> net.a.a.a.a.a.W:
    net.java.xades.security.xml.XAdES.XAdES$Element OBJECT -> a
    net.java.xades.security.xml.XAdES.XAdES$Element QUALIFYING_PROPERTIES -> b
    net.java.xades.security.xml.XAdES.XAdES$Element SIGNED_PROPERTIES -> c
    net.java.xades.security.xml.XAdES.XAdES$Element SIGNED_SIGNATURE_PROPERTIES -> d
    net.java.xades.security.xml.XAdES.XAdES$Element SIGNING_TIME -> e
    net.java.xades.security.xml.XAdES.XAdES$Element SIGNING_CERTIFICATE -> f
    net.java.xades.security.xml.XAdES.XAdES$Element SIGNATURE_POLICY_IDENTIFIER -> g
    net.java.xades.security.xml.XAdES.XAdES$Element SIGNATURE_PRODUCTION_PLACE -> h
    net.java.xades.security.xml.XAdES.XAdES$Element SIGNER_ROLE -> i
    net.java.xades.security.xml.XAdES.XAdES$Element CLAIMED_ROLES -> j
    net.java.xades.security.xml.XAdES.XAdES$Element CERTIFIED_ROLES -> k
    net.java.xades.security.xml.XAdES.XAdES$Element SIGNER -> l
    net.java.xades.security.xml.XAdES.XAdES$Element SIGNER_DETAILS -> m
    net.java.xades.security.xml.XAdES.XAdES$Element SIGNED_DATA_OBJECT_PROPERTIES -> n
    net.java.xades.security.xml.XAdES.XAdES$Element DATA_OBJECT_FORMATS -> o
    net.java.xades.security.xml.XAdES.XAdES$Element COMMITMENT_TYPE_INDICATIONS -> p
    net.java.xades.security.xml.XAdES.XAdES$Element ALL_DATA_OBJECTS_TIMESTAMPS -> q
    net.java.xades.security.xml.XAdES.XAdES$Element INDIVIDUAL_DATA_OBJECTS_TIMESTAMPS -> r
    net.java.xades.security.xml.XAdES.XAdES$Element UNSIGNED_PROPERTIES -> s
    net.java.xades.security.xml.XAdES.XAdES$Element UNSIGNED_SIGNATURE_PROPERTIES -> t
    net.java.xades.security.xml.XAdES.XAdES$Element COUNTER_SIGNATURES -> u
    net.java.xades.security.xml.XAdES.XAdES$Element SIGNATURE_TIME_STAMP -> v
    net.java.xades.security.xml.XAdES.XAdES$Element COMPLETE_CERTIFICATE_REFS -> w
    net.java.xades.security.xml.XAdES.XAdES$Element COMPLETE_REVOCATION_REFS -> x
    net.java.xades.security.xml.XAdES.XAdES$Element ATTRIBUTE_CERTIFICATE_REFS -> y
    net.java.xades.security.xml.XAdES.XAdES$Element ATTRIBUTE_REVOCATION_REFS -> z
    net.java.xades.security.xml.XAdES.XAdES$Element QUALIFYING_PROPERTIES_REFERENCE -> A
    net.java.xades.security.xml.XAdES.XAdES xades -> B
    net.java.xades.util.ObjectId objectId -> C
    java.lang.String elementName -> D
    net.java.xades.util.OccursRequirement occursRequirement -> E
    net.java.xades.security.xml.XAdES.XadesElement parent -> F
    net.java.xades.security.xml.XAdES.XAdES$Element[] $VALUES -> G
    net.java.xades.security.xml.XAdES.XAdES$Element[] values() -> values
    net.java.xades.security.xml.XAdES.XAdES$Element valueOf(java.lang.String) -> valueOf
    net.java.xades.security.xml.XAdES.XAdES getXAdES() -> a
    net.java.xades.util.ObjectId getObjectId() -> b
    java.lang.String getElementName() -> c
    java.lang.String toString() -> toString
net.java.xades.security.xml.XAdES.XAdESStructure -> net.a.a.a.a.a.X:
    org.w3c.dom.Document baseDocument -> d
    java.lang.String xadesPrefix -> a
    java.lang.String xadesNamespace -> b
    java.lang.String xmlSignaturePrefix -> c
    org.w3c.dom.Element getElement() -> c
    java.lang.String getId() -> d
    void setAttributeNS(java.lang.String,java.lang.String,java.lang.String) -> a
    java.lang.String getAttribute(java.lang.String) -> a
    void setTextContent(java.lang.String) -> b
    org.w3c.dom.Element getChildElementNS(java.lang.String) -> c
    org.w3c.dom.Document getDocument() -> e
    org.w3c.dom.Element createElement(java.lang.String) -> d
    org.w3c.dom.Element createElementNS(java.lang.String,java.lang.String,java.lang.String) -> b
net.java.xades.security.xml.XAdES.XAdES_BES -> net.a.a.a.a.a.Y:
    org.w3c.dom.Element getBaseElement() -> b
    void setSigningTime(java.util.Date) -> a
    void setSigningCertificate(java.security.cert.X509Certificate) -> a
    void setSignatureProductionPlace(net.java.xades.security.xml.XAdES.SignatureProductionPlace) -> a
    void setSignerRole(net.java.xades.security.xml.XAdES.SignerRole) -> a
    void setDataObjectFormats(java.util.List) -> a
    void setCommitmentTypeIndications(java.util.List) -> b
    java.lang.String getXadesNamespace() -> f
    java.lang.String getDigestMethod() -> c
net.java.xades.security.xml.XAdES.XAdES_C -> net.a.a.a.a.a.Z:
net.java.xades.security.xml.XAdES.XAdES_EPES -> net.a.a.a.a.a.aa:
    void setSignaturePolicyIdentifier(net.java.xades.security.xml.XAdES.SignaturePolicyIdentifier) -> a
net.java.xades.security.xml.XAdES.XAdES_T -> net.a.a.a.a.a.ab:
net.java.xades.security.xml.XAdES.XAdES_X -> net.a.a.a.a.a.ac:
net.java.xades.security.xml.XAdES.XAdES_X_L -> net.a.a.a.a.a.ad:
net.java.xades.security.xml.XAdES.XMLAdvancedSignature -> net.a.a.a.a.a.ae:
    java.lang.String signedPropertiesTypeUrl -> b
    net.java.xades.security.xml.XAdES.BasicXAdESImpl xades -> c
    org.w3c.dom.Element baseElement -> d
    javax.xml.crypto.dsig.XMLSignatureFactory xmlSignatureFactory -> e
    javax.xml.crypto.dsig.DigestMethod digestMethod -> f
    java.lang.String xadesNamespace -> g
    net.java.xades.security.xml.XmlWrappedKeyInfo wrappedKeyInfo -> h
    java.util.List xmlObjects -> i
    java.util.List defaultXMLObjectItems -> j
    java.lang.String defaultXMLObjectId -> k
    java.lang.String defaultXMLObjectMimeType -> l
    java.lang.String defaultXMLObjectEncoding -> m
    javax.xml.crypto.dsig.XMLSignature signature -> n
    javax.xml.crypto.dsig.dom.DOMSignContext signContext -> o
    java.util.List qualifyingPropertiesReferences -> a
    org.w3c.dom.Element getBaseElement() -> a
    org.w3c.dom.Document getBaseDocument() -> b
    void setXadesNamespace(java.lang.String) -> b
    void setSignedPropertiesTypeUrl(java.lang.String) -> c
    void sign(java.security.cert.X509Certificate,java.security.PrivateKey,java.lang.String,java.util.List,java.lang.String) -> a
    net.java.xades.security.xml.WrappedKeyStorePlace getWrappedKeyStorePlace() -> c
    net.java.xades.security.xml.XmlWrappedKeyInfo getXmlWrappedKeyInfo() -> d
    java.util.List getXMLObjects() -> e
    java.lang.String getSignatureId(java.lang.String) -> d
    java.lang.String getSignatureValueId(java.lang.String) -> e
    java.lang.String getKeyInfoId(java.lang.String) -> f
    javax.xml.crypto.dsig.XMLSignatureFactory getXMLSignatureFactory() -> f
    javax.xml.crypto.dsig.Reference getReference(java.lang.String) -> g
    javax.xml.crypto.dsig.Reference getReference(java.lang.String,java.lang.String) -> a
    javax.xml.crypto.dsig.Reference getReference(java.lang.String,java.util.List,java.lang.String) -> a
    javax.xml.crypto.dsig.Reference getReference(java.lang.String,java.util.List,java.lang.String,java.lang.String) -> a
    java.util.List getReferences(java.util.List) -> a
    javax.xml.crypto.dsig.DigestMethod getDigestMethod() -> g
    void setDigestMethod(java.lang.String) -> h
    javax.xml.crypto.dsig.keyinfo.KeyInfo newKeyInfo(java.security.cert.X509Certificate,java.lang.String) -> a
    javax.xml.crypto.dsig.XMLObject newXMLObject(java.util.List) -> b
    javax.xml.crypto.dsig.XMLObject newXMLObject(java.util.List,java.lang.String) -> a
    javax.xml.crypto.dsig.XMLObject newXMLObject(java.util.List,java.lang.String,java.lang.String) -> a
    javax.xml.crypto.dsig.XMLObject newXMLObject(java.util.List,java.lang.String,java.lang.String,java.lang.String) -> a
    java.lang.String getDefaultXMLObjectId() -> h
    java.lang.String getDefaultXMLObjectMimeType() -> i
    java.lang.String getDefaultXMLObjectEncoding() -> j
    javax.xml.crypto.dsig.XMLObject addXMLObject(javax.xml.crypto.dsig.XMLObject) -> a
    net.java.xades.security.xml.XAdES.QualifyingProperties marshalQualifyingProperties(java.lang.String,java.lang.String,java.lang.String,java.util.List) -> a
    javax.xml.crypto.dsig.XMLObject marshalXMLSignature(java.lang.String,java.lang.String,java.lang.String,java.util.List) -> b
    java.util.List getQualifyingPropertiesReferences() -> k
net.java.xades.security.xml.XAdES.XadesElement -> net.a.a.a.a.a.af:
    net.java.xades.security.xml.XAdES.XAdES getXAdES() -> a
    net.java.xades.util.ObjectId getObjectId() -> b
net.java.xades.security.xml.XAdES.XadesElementsEnumeration -> net.a.a.a.a.a.ag:
net.java.xades.security.xml.XmlWrappedKeyInfo -> net.a.a.a.a.b:
    net.java.xades.security.xml.XmlWrappedKeyInfo PUBLIC_KEY -> a
    net.java.xades.security.xml.XmlWrappedKeyInfo CERTIFICATE -> b
    java.lang.String wrappedKeyInfoName -> c
    net.java.xades.security.xml.XmlWrappedKeyInfo[] $VALUES -> d
    net.java.xades.security.xml.XmlWrappedKeyInfo[] values() -> values
    net.java.xades.security.xml.XmlWrappedKeyInfo valueOf(java.lang.String) -> valueOf
    java.lang.String getWrappedKeyInfoName() -> a
    java.lang.String toString() -> toString
net.java.xades.util.Base64 -> net.a.a.b.a:
    byte[] _STANDARD_ALPHABET -> b
    byte[] _STANDARD_DECODABET -> c
    byte[] _URL_SAFE_ALPHABET -> d
    byte[] _URL_SAFE_DECODABET -> e
    byte[] _ORDERED_ALPHABET -> f
    byte[] _ORDERED_DECODABET -> g
    boolean $assertionsDisabled -> a
    byte[] getAlphabet(int) -> b
    byte[] getDecodabet(int) -> c
    byte[] encode3to4(byte[],byte[],int,int) -> b
    byte[] encode3to4(byte[],int,int,byte[],int,int) -> a
    java.lang.String encodeBytes(byte[]) -> a
    java.lang.String encodeBytes(byte[],int,int,int) -> a
    byte[] encodeBytesToBytes(byte[],int,int,int) -> b
    int decode4to3(byte[],int,byte[],int,int) -> b
    byte[] access$000(int) -> a
    int access$200(byte[],int,byte[],int,int) -> a
    byte[] access$300(byte[],byte[],int,int) -> a
net.java.xades.util.Base64$OutputStream -> net.a.a.b.b:
    boolean encode -> a
    int position -> b
    byte[] buffer -> c
    int bufferLength -> d
    int lineLength -> e
    boolean breakLines -> f
    byte[] b4 -> g
    boolean suspendEncoding -> h
    int options -> i
    byte[] decodabet -> j
    void write(int) -> write
    void write(byte[],int,int) -> write
    void flushBase64() -> a
    void close() -> close
net.java.xades.util.DOMOutputImpl -> net.a.a.b.c:
    java.io.Writer fCharStream -> a
    java.io.OutputStream fByteStream -> b
    java.lang.String fSystemId -> c
    java.lang.String fEncoding -> d
    java.io.Writer getCharacterStream() -> getCharacterStream
    void setCharacterStream(java.io.Writer) -> setCharacterStream
    java.io.OutputStream getByteStream() -> getByteStream
    void setByteStream(java.io.OutputStream) -> setByteStream
    java.lang.String getSystemId() -> getSystemId
    void setSystemId(java.lang.String) -> setSystemId
    java.lang.String getEncoding() -> getEncoding
    void setEncoding(java.lang.String) -> setEncoding
net.java.xades.util.ISO8601DateFormat -> net.a.a.b.d:
    java.lang.StringBuffer format(java.util.Date,java.lang.StringBuffer,java.text.FieldPosition) -> format
    java.util.Date parse(java.lang.String,java.text.ParsePosition) -> parse
net.java.xades.util.ObjectId -> net.a.a.b.e:
    int[] components -> a
    int hashCode -> b
    java.lang.String toString -> c
    boolean equals(java.lang.Object) -> equals
    int compareTo(net.java.xades.util.ObjectId) -> a
    int[] getComponents() -> a
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    int compareTo(java.lang.Object) -> compareTo
net.java.xades.util.OccursRequirement -> net.a.a.b.f:
    net.java.xades.util.OccursRequirement EXACTLY_ONE -> b
    net.java.xades.util.OccursRequirement ZERO_OR_ONE -> c
    net.java.xades.util.OccursRequirement ONE_OR_MORE -> d
    net.java.xades.util.OccursRequirement ZERO_OR_MORE -> e
net.java.xades.util.SystemUtils -> net.a.a.b.g:
    char[] HEX_DIGITS -> b
    char[] EMPTY_CHAR_ARRAY -> c
    java.text.DateFormat dateFormat -> d
    java.lang.String charsetName -> a
    java.text.DateFormat getDateFormatter() -> a
    java.lang.String formatDate(java.util.Date) -> a
net.java.xades.util.XMLUtils -> net.a.a.b.h:
    java.nio.charset.Charset charset -> a
    void writeXML(java.io.OutputStream,org.w3c.dom.Node,boolean) -> a
    void writeXML(java.io.Writer,org.w3c.dom.Node,boolean) -> a
    org.w3c.dom.Element getChildElementByTagNameNS(org.w3c.dom.Element,java.lang.String,java.lang.String) -> a
net.sf.jmimemagic.Magic -> net.sf.jmimemagic.Magic:
    boolean initialized -> a
    net.sf.jmimemagic.MagicParser magicParser -> b
    java.util.HashMap hintMap -> c
    void addHint(java.lang.String,net.sf.jmimemagic.MagicMatcher) -> a
    void initialize() -> initialize
    net.sf.jmimemagic.MagicMatch getMagicMatch(byte[]) -> getMagicMatch
    net.sf.jmimemagic.MagicMatch getMagicMatch(byte[],boolean) -> getMagicMatch
net.sf.jmimemagic.MagicDetector -> net.sf.jmimemagic.MagicDetector:
    java.lang.String getName() -> getName
    java.lang.String getDisplayName() -> getDisplayName
    java.lang.String getVersion() -> getVersion
    java.lang.String[] getHandledTypes() -> getHandledTypes
    java.lang.String[] getHandledExtensions() -> getHandledExtensions
    java.lang.String[] process(byte[],int,int,long,char,java.lang.String,java.util.Map) -> process
    java.lang.String[] process(java.io.File,int,int,long,char,java.lang.String,java.util.Map) -> process
net.sf.jmimemagic.MagicException -> net.sf.jmimemagic.MagicException:
net.sf.jmimemagic.MagicMatch -> net.sf.jmimemagic.MagicMatch:
    java.lang.String mimeType -> a
    java.lang.String extension -> b
    java.lang.String description -> c
    byte[] test -> d
    int offset -> e
    int length -> f
    java.lang.String type -> g
    long bitmask -> h
    char comparator -> i
    java.util.ArrayList subMatches -> j
    java.util.Map properties -> k
    void setMimeType(java.lang.String) -> a
    java.lang.String getMimeType() -> getMimeType
    void setExtension(java.lang.String) -> b
    java.lang.String getExtension() -> getExtension
    void setDescription(java.lang.String) -> c
    java.lang.String getDescription() -> getDescription
    void setTest(java.nio.ByteBuffer) -> setTest
    java.nio.ByteBuffer getTest() -> getTest
    void setOffset(int) -> setOffset
    int getOffset() -> getOffset
    void setLength(int) -> setLength
    int getLength() -> getLength
    void setType(java.lang.String) -> setType
    java.lang.String getType() -> getType
    void setBitmask(java.lang.String) -> setBitmask
    long getBitmask() -> getBitmask
    void setComparator(java.lang.String) -> setComparator
    char getComparator() -> getComparator
    void setProperties(java.util.Map) -> setProperties
    java.util.Map getProperties() -> getProperties
    void addSubMatch(net.sf.jmimemagic.MagicMatch) -> addSubMatch
    void setSubMatches(java.util.Collection) -> setSubMatches
    java.util.Collection getSubMatches() -> getSubMatches
    boolean descriptionMatches(java.lang.String) -> descriptionMatches
    boolean mimeTypeMatches(java.lang.String) -> mimeTypeMatches
    java.lang.Object clone() -> clone
net.sf.jmimemagic.MagicMatchNotFoundException -> net.sf.jmimemagic.MagicMatchNotFoundException:
net.sf.jmimemagic.MagicMatcher -> net.sf.jmimemagic.MagicMatcher:
    java.util.ArrayList subMatchers -> a
    net.sf.jmimemagic.MagicMatch match -> b
    void setMatch(net.sf.jmimemagic.MagicMatch) -> setMatch
    net.sf.jmimemagic.MagicMatch getMatch() -> getMatch
    boolean isValid() -> isValid
    void addSubMatcher(net.sf.jmimemagic.MagicMatcher) -> addSubMatcher
    void setSubMatchers(java.util.Collection) -> setSubMatchers
    java.util.Collection getSubMatchers() -> getSubMatchers
    net.sf.jmimemagic.MagicMatch test(java.io.File,boolean) -> test
    net.sf.jmimemagic.MagicMatch test(byte[],boolean) -> test
    boolean testInternal(byte[]) -> a
    boolean testByte(java.nio.ByteBuffer) -> a
    boolean testString(java.nio.ByteBuffer) -> b
    boolean testShort(java.nio.ByteBuffer) -> c
    boolean testLong(java.nio.ByteBuffer) -> d
    boolean testRegex(java.lang.String) -> b
    boolean testDetector(java.nio.ByteBuffer) -> e
    java.lang.String[] getDetectorExtensions() -> getDetectorExtensions
    short byteArrayToShort(java.nio.ByteBuffer) -> f
    long byteArrayToLong(java.nio.ByteBuffer) -> g
    java.lang.Object clone() -> clone
    java.lang.Class classForName(java.lang.String) -> a
    java.lang.ClassLoader getCleanClassLoader() -> a
net.sf.jmimemagic.MagicParseException -> net.sf.jmimemagic.MagicParseException:
net.sf.jmimemagic.MagicParser -> net.sf.jmimemagic.MagicParser:
    java.lang.String magicFile -> a
    boolean initialized -> b
    org.xml.sax.XMLReader parser -> c
    java.util.ArrayList stack -> d
    java.util.Collection matchers -> e
    net.sf.jmimemagic.MagicMatcher matcher -> f
    net.sf.jmimemagic.MagicMatch match -> g
    java.util.HashMap properties -> h
    java.lang.String finalValue -> i
    boolean isMimeType -> j
    boolean isExtension -> k
    boolean isDescription -> l
    boolean isTest -> m
    void initialize() -> initialize
    java.util.Collection getMatchers() -> getMatchers
    void startDocument() -> startDocument
    void endDocument() -> endDocument
    void processingInstruction(java.lang.String,java.lang.String) -> processingInstruction
    void characters(char[],int,int) -> characters
    void ignorableWhitespace(char[],int,int) -> ignorableWhitespace
    void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes) -> startElement
    void endElement(java.lang.String,java.lang.String,java.lang.String) -> endElement
    void warning(org.xml.sax.SAXParseException) -> warning
    void error(org.xml.sax.SAXParseException) -> error
    void fatalError(org.xml.sax.SAXParseException) -> fatalError
    java.nio.ByteBuffer convertOctals(java.lang.String) -> a
net.sf.jmimemagic.UnsupportedTypeException -> net.sf.jmimemagic.UnsupportedTypeException:
net.sf.jmimemagic.detectors.TextFileDetector -> net.sf.jmimemagic.detectors.TextFileDetector:
    java.lang.String getDisplayName() -> getDisplayName
    java.lang.String getVersion() -> getVersion
    java.lang.String[] getHandledExtensions() -> getHandledExtensions
    java.lang.String[] getHandledTypes() -> getHandledTypes
    java.lang.String getName() -> getName
    java.lang.String[] process(byte[],int,int,long,char,java.lang.String,java.util.Map) -> process
    java.lang.String[] process(java.io.File,int,int,long,char,java.lang.String,java.util.Map) -> process
nu.xom.ASCIIWriter -> a.a.a:
    boolean needsEscaping(char) -> a
nu.xom.Attribute -> a.a.b:
    java.lang.String localName -> a
    java.lang.String prefix -> b
    java.lang.String URI -> c
    java.lang.String value -> d
    nu.xom.Attribute$Type type -> e
    java.lang.String normalize(java.lang.String) -> a
    nu.xom.Attribute$Type getType() -> a
    boolean isXMLID() -> i
    void _setType(nu.xom.Attribute$Type) -> a
    java.lang.String getValue() -> b
    void _setValue(java.lang.String) -> b
    java.lang.String getLocalName() -> c
    void _setLocalName(java.lang.String) -> d
    java.lang.String getQualifiedName() -> d
    java.lang.String getNamespaceURI() -> a_
    java.lang.String getNamespacePrefix() -> f
    void _setNamespace(java.lang.String,java.lang.String) -> a
    nu.xom.Node getChild(int) -> a
    int getChildCount() -> g
    java.lang.String toString() -> toString
nu.xom.Attribute$Type -> a.a.c:
    nu.xom.Attribute$Type CDATA -> a
    nu.xom.Attribute$Type ID -> b
    nu.xom.Attribute$Type IDREF -> c
    nu.xom.Attribute$Type IDREFS -> d
    nu.xom.Attribute$Type NMTOKEN -> e
    nu.xom.Attribute$Type NMTOKENS -> f
    nu.xom.Attribute$Type NOTATION -> g
    nu.xom.Attribute$Type ENTITY -> h
    nu.xom.Attribute$Type ENTITIES -> i
    nu.xom.Attribute$Type ENUMERATION -> j
    nu.xom.Attribute$Type UNDECLARED -> k
    int type -> l
    java.lang.String getName() -> a
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
nu.xom.Builder -> a.a.d:
    double xercesVersion -> a
    java.lang.String[] parsers -> b
    java.lang.String fileURLPrefix -> c
    org.xml.sax.XMLReader findParser(boolean) -> a
    void setupParser(org.xml.sax.XMLReader,boolean) -> a
nu.xom.Builder$1 -> a.a.e:
nu.xom.Builder$NamespaceWellformednessRequired -> a.a.f:
    void warning(org.xml.sax.SAXParseException) -> warning
    void error(org.xml.sax.SAXParseException) -> error
    void fatalError(org.xml.sax.SAXParseException) -> fatalError
nu.xom.Builder$ValidityRequired -> a.a.g:
    nu.xom.ValidityException vexception -> a
    void warning(org.xml.sax.SAXParseException) -> warning
    void error(org.xml.sax.SAXParseException) -> error
    void fatalError(org.xml.sax.SAXParseException) -> fatalError
nu.xom.Comment -> a.a.h:
    java.lang.String data -> a
    java.lang.String getValue() -> b
    void _setValue(java.lang.String) -> a
    nu.xom.Node getChild(int) -> a
    int getChildCount() -> g
    java.lang.String toString() -> toString
    boolean isComment() -> b_
nu.xom.CycleException -> a.a.i:
nu.xom.DocType -> a.a.j:
    java.lang.String rootName -> a
    java.lang.String systemID -> b
    java.lang.String publicID -> c
    java.lang.String internalDTDSubset -> d
    java.lang.String getRootElementName() -> c
    void _setRootElementName(java.lang.String) -> d
    java.lang.String getInternalDTDSubset() -> d
    void setInternalDTDSubset(java.lang.String) -> a
    void fastSetInternalDTDSubset(java.lang.String) -> b
    java.lang.String getPublicID() -> e_
    void _setPublicID(java.lang.String) -> e
    java.lang.String getSystemID() -> f
    void _setSystemID(java.lang.String) -> f
    java.lang.String getValue() -> b
    nu.xom.Node getChild(int) -> a
    int getChildCount() -> g
    java.lang.String toString() -> toString
    boolean isDocType() -> h
    boolean isXMLPublicIDCharacter(char) -> a
nu.xom.Document -> a.a.k:
    void insertionAllowed(nu.xom.Node,int) -> a
    int getRootPosition() -> i
    nu.xom.DocType getDocType() -> c
    nu.xom.Element getRootElement() -> d
    java.lang.String getBaseURI() -> e
    nu.xom.Node removeChild(int) -> b
    java.lang.String getValue() -> b
    boolean isDocument() -> c_
    java.lang.String toString() -> toString
nu.xom.DocumentFragment -> a.a.l:
    void insertionAllowed(nu.xom.Node,int) -> a
    java.lang.String getValue() -> b
    boolean isDocumentFragment() -> d_
nu.xom.EBCDICWriter -> a.a.m:
    java.io.OutputStream raw -> a
    void write(int) -> write
nu.xom.Element -> a.a.n:
    java.lang.String localName -> e
    java.lang.String prefix -> f
    java.lang.String URI -> g
    nu.xom.Attribute[] attributes -> h
    int numAttributes -> i
    nu.xom.Namespaces namespaces -> a
    int[] grow(int[],int) -> a
    void addAttribute(nu.xom.Attribute) -> a
    void add(nu.xom.Attribute) -> c
    boolean remove(nu.xom.Attribute) -> d
    nu.xom.Attribute removeAttribute(nu.xom.Attribute) -> b
    nu.xom.Attribute getAttribute(java.lang.String,java.lang.String) -> a
    int getAttributeCount() -> d
    nu.xom.Attribute getAttribute(int) -> c
    java.lang.String getAttributeValue(java.lang.String,java.lang.String) -> b
    java.lang.String getQualifiedName() -> i
    java.lang.String getNamespacePrefix() -> j
    java.lang.String getNamespaceURI() -> k
    java.lang.String getNamespaceURI(java.lang.String) -> a
    java.lang.String getLocalNamespaceURI(java.lang.String) -> b
    void _setLocalName(java.lang.String) -> e
    void _setNamespaceURI(java.lang.String) -> f
    void _setNamespacePrefix(java.lang.String) -> g
    void insertionAllowed(nu.xom.Node,int) -> a
    void checkCycle(nu.xom.Node,nu.xom.ParentNode) -> a
    void addNamespaceDeclaration(java.lang.String,java.lang.String) -> c
    int getNamespaceDeclarationCount() -> l
    java.lang.String getNamespacePrefix(int) -> d
    java.util.Set getNamespacePrefixes() -> t
    java.lang.String getBaseURI() -> e
    java.lang.String getEntityURI() -> u
    boolean legalURI(java.lang.String) -> h
    java.lang.String getValue() -> b
    java.lang.String toString() -> toString
    boolean isElement() -> m
    void checkPrefixConflict(nu.xom.Attribute) -> e
nu.xom.GenericWriter -> a.a.o:
    java.io.ByteArrayOutputStream bout -> i
    java.io.OutputStreamWriter wout -> j
    boolean isJapanese -> k
    boolean needsEscaping(char) -> a
nu.xom.ISOArabicWriter -> a.a.p:
    boolean needsEscaping(char) -> a
nu.xom.ISOCyrillicWriter -> a.a.q:
    boolean needsEscaping(char) -> a
nu.xom.ISOGreekWriter -> a.a.r:
    boolean needsEscaping(char) -> a
nu.xom.ISOHebrewWriter -> a.a.s:
    boolean needsEscaping(char) -> a
nu.xom.ISOThaiWriter -> a.a.t:
    boolean needsEscaping(char) -> a
nu.xom.IllegalAddException -> a.a.u:
nu.xom.IllegalCharacterDataException -> a.a.v:
nu.xom.IllegalDataException -> a.a.w:
    java.lang.String data -> a
    void setData(java.lang.String) -> a
nu.xom.IllegalNameException -> a.a.x:
nu.xom.IllegalTargetException -> a.a.y:
nu.xom.JDK15XML1_0Parser -> a.a.z:
nu.xom.JaxenConnector -> a.a.A:
    nu.xom.jaxen.FunctionContext functionContext -> a
    java.util.List selectNodes(java.lang.Object) -> a
nu.xom.JaxenNavigator -> a.a.B:
nu.xom.Latin10Writer -> a.a.C:
    boolean needsEscaping(char) -> a
nu.xom.Latin1Writer -> a.a.D:
    boolean needsEscaping(char) -> a
nu.xom.Latin2Writer -> a.a.E:
    boolean needsEscaping(char) -> a
nu.xom.Latin3Writer -> a.a.F:
    boolean needsEscaping(char) -> a
nu.xom.Latin4Writer -> a.a.G:
    boolean needsEscaping(char) -> a
nu.xom.Latin5Writer -> a.a.H:
    boolean needsEscaping(char) -> a
nu.xom.Latin6Writer -> a.a.I:
    boolean needsEscaping(char) -> a
nu.xom.Latin7Writer -> a.a.J:
    boolean needsEscaping(char) -> a
nu.xom.Latin8Writer -> a.a.K:
    boolean needsEscaping(char) -> a
nu.xom.Latin9Writer -> a.a.L:
    boolean needsEscaping(char) -> a
nu.xom.MalformedURIException -> a.a.M:
nu.xom.MultipleParentException -> a.a.N:
nu.xom.Namespace -> a.a.O:
    java.lang.String prefix -> a
    java.lang.String uri -> b
    java.lang.String getPrefix() -> d
    java.lang.String getValue() -> b
    nu.xom.Node getChild(int) -> a
    int getChildCount() -> g
    java.lang.String toXML() -> i
    java.lang.String toString() -> toString
nu.xom.NamespaceConflictException -> a.a.P:
nu.xom.Namespaces -> a.a.Q:
    java.util.HashMap namespaces -> a
    java.util.ArrayList prefixes -> b
    void put(java.lang.String,java.lang.String) -> a
    java.lang.String getURI(java.lang.String) -> a
    java.util.ArrayList getPrefixes() -> a
    int size() -> b
    java.lang.String getPrefix(int) -> a
nu.xom.NoSuchAttributeException -> a.a.R:
nu.xom.Node -> a.a.S:
    nu.xom.ParentNode parent -> a
    nu.xom.jaxen.NamespaceContext emptyContext -> b
    java.lang.String getValue() -> b
    nu.xom.Document getDocument() -> n
    nu.xom.Node getRoot() -> o
    java.lang.String getBaseURI() -> e
    nu.xom.ParentNode getParent() -> p
    void setParent(nu.xom.ParentNode) -> a
    nu.xom.Node getChild(int) -> a
    int getChildCount() -> g
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    nu.xom.Nodes query(java.lang.String,nu.xom.XPathContext) -> a
    nu.xom.Nodes query(java.lang.String) -> c
    boolean isElement() -> m
    boolean isText() -> q
    boolean isComment() -> b_
    boolean isProcessingInstruction() -> r
    boolean isDocument() -> c_
    boolean isDocType() -> h
    boolean isDocumentFragment() -> d_
nu.xom.Node$1 -> a.a.T:
nu.xom.Node$EmptyNamespaceContext -> a.a.U:
nu.xom.NodeFactory -> a.a.V:
    nu.xom.Element makeRootElement(java.lang.String,java.lang.String) -> a
    nu.xom.Element startMakingElement(java.lang.String,java.lang.String) -> b
    nu.xom.Nodes finishMakingElement(nu.xom.Element) -> a
    nu.xom.Nodes makeAttribute(java.lang.String,java.lang.String,java.lang.String,nu.xom.Attribute$Type) -> a
    nu.xom.Nodes makeComment(java.lang.String) -> a
    nu.xom.Nodes makeDocType(java.lang.String,java.lang.String,java.lang.String) -> a
    nu.xom.Nodes makeText(java.lang.String) -> b
    nu.xom.Nodes makeProcessingInstruction(java.lang.String,java.lang.String) -> c
nu.xom.Nodes -> a.a.W:
    java.util.List nodes -> a
    int size() -> a
    nu.xom.Node get(int) -> a
    nu.xom.Node remove(int) -> b
    void append(nu.xom.Node) -> a
    boolean contains(nu.xom.Node) -> b
nu.xom.ParentNode -> a.a.X:
    nu.xom.Node[] children -> b
    int childCount -> c
    java.lang.String actualBaseURI -> d
    int getChildCount() -> g
    void insertChild(nu.xom.Node,int) -> b
    void _insertChild(nu.xom.Node,int) -> c
    void fastInsertChild(nu.xom.Node,int) -> d
    void checkCapacity(int) -> c
    void insertionAllowed(nu.xom.Node,int) -> a
    void appendChild(nu.xom.Node) -> a
    nu.xom.Node getChild(int) -> a
    int indexOf(nu.xom.Node) -> b
    nu.xom.Node removeChild(int) -> b
    void fillInBaseURI(nu.xom.Element) -> a
    java.lang.String getActualBaseURI() -> s
    void setActualBaseURI(java.lang.String) -> d
nu.xom.ParsingException -> a.a.Y:
    java.lang.Throwable cause -> a
    int lineNumber -> b
    int columnNumber -> c
    java.lang.String uri -> d
    boolean causeSet -> e
    java.lang.Throwable initCause(java.lang.Throwable) -> initCause
    java.lang.Throwable getCause() -> getCause
    java.lang.String toString() -> toString
nu.xom.ProcessingInstruction -> a.a.Z:
    java.lang.String target -> a
    java.lang.String data -> b
    java.lang.String getTarget() -> d
    void _setTarget(java.lang.String) -> a
    void _setValue(java.lang.String) -> b
    java.lang.String getValue() -> b
    nu.xom.Node getChild(int) -> a
    int getChildCount() -> g
    boolean isProcessingInstruction() -> r
    java.lang.String toString() -> toString
nu.xom.Serializer -> a.a.aa:
    nu.xom.TextWriter escaper -> a
    boolean preserveBaseURI -> b
    org.xml.sax.helpers.NamespaceSupport namespaces -> c
    void setOutputStream(java.io.OutputStream,java.lang.String) -> a
    void write(nu.xom.Document) -> a
    void writeXMLDeclaration() -> a
    void write(nu.xom.Element) -> a
    boolean hasNonTextChildren(nu.xom.Element) -> g
    void writeEndTag(nu.xom.Element) -> b
    void writeStartTag(nu.xom.Element) -> c
    void writeEmptyElementTag(nu.xom.Element) -> d
    void writeTagBeginning(nu.xom.Element) -> h
    void writeAttributes(nu.xom.Element) -> e
    void writeNamespaceDeclarations(nu.xom.Element) -> f
    void writeNamespaceDeclarationIfNecessary(java.lang.String,java.lang.String) -> b
    void writeNamespaceDeclaration(java.lang.String,java.lang.String) -> a
    void write(nu.xom.Attribute) -> a
    void write(nu.xom.Comment) -> a
    void write(nu.xom.ProcessingInstruction) -> a
    void write(nu.xom.Text) -> a
    boolean isBoundaryWhitespace(nu.xom.Text,java.lang.String) -> a
    void write(nu.xom.DocType) -> a
    void writeChild(nu.xom.Node) -> a
    void writeAttributeValue(java.lang.String) -> a
    void writeRaw(java.lang.String) -> b
    void breakLine() -> b
    void flush() -> c
    int getIndent() -> d
    void setLineSeparator(java.lang.String) -> c
nu.xom.Text -> a.a.ab:
    byte[] data -> a
    void _setValue(java.lang.String) -> b
    java.lang.String getValue() -> b
    nu.xom.Node getChild(int) -> a
    int getChildCount() -> g
    boolean isText() -> q
    java.lang.String toString() -> toString
    java.lang.String escapeLineBreaksAndTruncate(java.lang.String) -> a
    boolean isCDATASection() -> d
    boolean isEmpty() -> i
nu.xom.TextWriter -> a.a.ac:
    java.io.Writer out -> a
    java.lang.String encoding -> b
    java.lang.String lineSeparator -> i
    boolean lineSeparatorSet -> c
    boolean inDocType -> j
    int maxLength -> k
    int indent -> l
    java.lang.String indentString -> m
    int column -> d
    boolean preserveSpace -> n
    boolean normalize -> e
    boolean lastCharacterWasSpace -> f
    boolean skipFollowingLinefeed -> g
    char highSurrogate -> o
    boolean justBroke -> h
    int fakeIndents -> p
    void reset() -> a
    boolean isHighSurrogate(int) -> a
    boolean isLowSurrogate(int) -> b
    void writePCDATA(char) -> b
    void writeEscapedChar(char) -> f
    boolean adjustingWhiteSpace() -> l
    void writeAttributeValue(char) -> c
    void write(char) -> d
    void writeLineSeparator(char) -> g
    boolean needsBreak() -> m
    boolean justBroke() -> b
    void breakLine() -> c
    void escapeBreakLine() -> n
    void writeMarkup(char) -> e
    void writePCDATA(java.lang.String) -> a
    void writeAttributeValue(java.lang.String) -> b
    void writeMarkup(java.lang.String) -> c
    void writeUncheckedMarkup(java.lang.String) -> d
    java.lang.String normalize(java.lang.String) -> e
    boolean isIndenting() -> d
    void incrementIndent() -> e
    void decrementIndent() -> f
    java.lang.String getEncoding() -> g
    void setLineSeparator(java.lang.String) -> f
    void setInDocType(boolean) -> a
    int getIndent() -> h
    void flush() -> i
    boolean needsEscaping(char) -> a
    boolean isPreserveSpace() -> j
    void setPreserveSpace(boolean) -> b
    boolean getNFC() -> k
    void writeName(java.lang.String) -> g
nu.xom.TextWriterFactory -> a.a.ad:
    nu.xom.TextWriter getTextWriter(java.io.Writer,java.lang.String) -> a
nu.xom.UCSWriter -> a.a.ae:
    boolean needsEscaping(char) -> a
nu.xom.URIUtil -> a.a.af:
    boolean isOpaque(java.lang.String) -> a
    boolean isAbsolute(java.lang.String) -> b
    java.lang.String absolutize(java.lang.String,java.lang.String) -> a
    java.lang.String merge(nu.xom.URIUtil$ParsedURI,java.lang.String) -> a
    java.lang.String removeDotSegments(java.lang.String) -> c
    java.lang.String toURI(java.lang.String) -> d
    java.lang.String percentEscape(char) -> a
nu.xom.URIUtil$ParsedURI -> a.a.ag:
    java.lang.String scheme -> a
    java.lang.String schemeSpecificPart -> b
    java.lang.String query -> c
    java.lang.String fragment -> d
    java.lang.String authority -> e
    java.lang.String path -> f
    java.lang.String toString() -> toString
nu.xom.UnavailableCharacterException -> a.a.ah:
    char unavailableCharacter -> a
    java.lang.String encoding -> b
nu.xom.UnicodeUtil -> a.a.ai:
    int HI_SURROGATE_START -> b
    int HI_SURROGATE_END -> c
    int LOW_SURROGATE_START -> d
    java.util.Map compositions -> e
    java.lang.Class class$nu$xom$Verifier -> a
    boolean isHighSurrogate(char) -> b
    void loadCompositions() -> c
    void loadCompositions(java.lang.ClassLoader) -> a
    boolean isStarter(int) -> e
    int getCombiningClass(int) -> f
    int combineSurrogatePair(char,char) -> a
    java.lang.String makeSurrogatePair(int) -> g
    char getHighSurrogate(int) -> h
    char getLowSurrogate(int) -> i
    java.lang.String normalize(java.lang.String) -> a
    java.lang.String decomposeHangul(java.lang.String) -> c
    int composeCharacter(int,int) -> b
    java.lang.String decompose(int) -> j
    java.lang.String decomposeHangul(char) -> c
    java.lang.String composeHangul(java.lang.String) -> d
    java.lang.Class class$(java.lang.String) -> b
    boolean access$000(char) -> a
    java.lang.String access$100(int) -> a
    int access$200(int) -> b
    java.util.Map access$300() -> a
    void access$400() -> b
    boolean access$500(int) -> c
    int access$600(int,int) -> a
    java.lang.String access$700(int) -> d
nu.xom.UnicodeUtil$UnicodeString -> a.a.aj:
    int[] data -> a
    int size -> b
    nu.xom.UnicodeUtil$UnicodeString decompose() -> a
    nu.xom.UnicodeUtil$UnicodeString compose() -> b
    void append(java.lang.String) -> a
    void append(int) -> a
    java.lang.String toString() -> toString
    boolean isBlocked(int,int) -> a
nu.xom.UnicodeWriter -> a.a.ak:
    boolean needsEscaping(char) -> a
    void writeMarkup(java.lang.String) -> c
    void writeName(java.lang.String) -> g
    int getUnicodeLengthForMarkup(java.lang.String) -> h
    int getUnicodeLengthForName(java.lang.String) -> i
    void writeAttributeValue(java.lang.String) -> b
    int getUnicodeLengthForAttributeValue(java.lang.String) -> j
    void writePCDATA(java.lang.String) -> a
    int getUnicodeLengthForPCDATA(java.lang.String) -> k
nu.xom.UnsynchronizedBufferedWriter -> a.a.al:
    char[] buffer -> a
    int position -> b
    java.io.Writer out -> c
    void write(char[],int,int) -> write
    void write(java.lang.String) -> write
    void write(java.lang.String,int,int) -> write
    void write(int) -> write
    void flush() -> flush
    void flushInternal() -> a
    void close() -> close
nu.xom.ValidityException -> a.a.am:
    java.util.List saxExceptions -> a
    void addError(org.xml.sax.SAXParseException) -> a
nu.xom.Verifier -> a.a.an:
    byte[] flags -> b
    boolean[] C0Table -> c
    nu.xom.Verifier$URICache cache -> d
    org.xml.sax.XMLReader parser -> e
    java.lang.Class class$nu$xom$Verifier -> a
    void loadFlags(java.lang.ClassLoader) -> a
    void checkNCName(java.lang.String) -> a
    void throwIllegalNameException(java.lang.String,java.lang.String) -> a
    void throwIllegalCharacterDataException(java.lang.String,java.lang.String) -> b
    void throwMalformedURIException(java.lang.String,java.lang.String) -> c
    void checkPCDATA(java.lang.String) -> b
    void checkURIReference(java.lang.String) -> c
    void checkQuery(java.lang.String) -> i
    boolean isQueryCharacter(char) -> d
    void checkFragment(java.lang.String) -> j
    void checkPath(java.lang.String) -> k
    void checkAuthority(java.lang.String) -> l
    void checkHost(java.lang.String) -> m
    boolean isRegNameCharacter(char) -> e
    void checkPort(java.lang.String) -> n
    void checkUserInfo(java.lang.String) -> o
    void checkScheme(java.lang.String) -> p
    void checkIP6Address(java.lang.String) -> q
    void checkIP4Address(java.lang.String,java.lang.String) -> d
    void checkXMLName(java.lang.String) -> d
    boolean isXMLSpaceCharacter(char) -> a
    boolean isHexDigit(char) -> f
    void checkAbsoluteURIReference(java.lang.String) -> e
    boolean isAlpha(char) -> b
    boolean isSchemeCharacter(char) -> c
    boolean isPathCharacter(char) -> g
    boolean isUserInfoCharacter(char) -> h
    void checkAbsoluteURI(java.lang.String) -> f
    void checkInternalDTDSubset(java.lang.String) -> g
    java.lang.Class class$(java.lang.String) -> h
nu.xom.Verifier$1 -> a.a.ao:
    org.xml.sax.InputSource val$empty -> a
    org.xml.sax.InputSource resolveEntity(java.lang.String,java.lang.String) -> resolveEntity
nu.xom.Verifier$EmptyReader -> a.a.ap:
    int read(char[],int,int) -> read
    void close() -> close
nu.xom.Verifier$URICache -> a.a.aq:
    java.lang.String[] cache -> a
    int position -> b
    boolean contains(java.lang.String) -> a
    void put(java.lang.String) -> b
nu.xom.WellformednessException -> a.a.ar:
nu.xom.XML1_0Parser -> a.a.as:
nu.xom.XMLException -> a.a.at:
    java.lang.Throwable cause -> a
    boolean causeSet -> b
    java.lang.Throwable getCause() -> getCause
    java.lang.Throwable initCause(java.lang.Throwable) -> initCause
nu.xom.XPathContext -> a.a.au:
    java.util.Map namespaces -> a
    void addNamespace(java.lang.String,java.lang.String) -> a
    nu.xom.jaxen.NamespaceContext getJaxenContext() -> a
nu.xom.XPathContext$1 -> a.a.av:
nu.xom.XPathContext$JaxenNamespaceContext -> a.a.aw:
    nu.xom.XPathContext this$0 -> a
nu.xom.XPathException -> a.a.ax:
    java.lang.String expression -> a
    java.lang.Throwable cause -> b
    boolean causeSet -> c
    java.lang.Throwable getCause() -> getCause
    java.lang.Throwable initCause(java.lang.Throwable) -> initCause
    void setXPath(java.lang.String) -> a
    java.lang.String getXPath() -> a
nu.xom.XPathTypeException -> a.a.ay:
    java.lang.Object returnValue -> a
    java.lang.String getMessage() -> getMessage
nu.xom.canonical.CanonicalizationException -> a.a.a.a:
    java.lang.Throwable cause -> a
    boolean causeSet -> b
    java.lang.Throwable getCause() -> getCause
    java.lang.Throwable initCause(java.lang.Throwable) -> initCause
nu.xom.canonical.Canonicalizer -> a.a.a.b:
    boolean withComments -> a
    boolean exclusive -> b
    boolean v11 -> c
    nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer serializer -> d
    java.util.List inclusiveNamespacePrefixes -> e
    java.util.Comparator comparator -> f
    void write(nu.xom.Node) -> a
    void write(nu.xom.Nodes) -> a
    nu.xom.Nodes sort(nu.xom.Nodes) -> b
    java.lang.String joinURIReferences(java.lang.String,java.lang.String) -> b
    void sort(java.util.List,java.util.List,nu.xom.Nodes,nu.xom.ParentNode) -> a
    boolean access$100(nu.xom.canonical.Canonicalizer) -> a
    boolean access$200(nu.xom.canonical.Canonicalizer) -> b
    java.util.List access$300(nu.xom.canonical.Canonicalizer) -> c
    boolean access$400(nu.xom.canonical.Canonicalizer) -> d
    java.lang.String access$500(java.lang.String,java.lang.String) -> a
    java.util.Comparator access$600() -> a
nu.xom.canonical.Canonicalizer$1 -> a.a.a.c:
nu.xom.canonical.Canonicalizer$AttributeComparator -> a.a.a.d:
    int compare(java.lang.Object,java.lang.Object) -> compare
nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer -> a.a.a.e:
    nu.xom.Nodes nodes -> a
    org.xml.sax.helpers.NamespaceSupport inScope -> b
    nu.xom.XPathContext xmlcontext -> c
    nu.xom.canonical.Canonicalizer this$0 -> d
    void write(nu.xom.Document) -> a
    void write(nu.xom.Element) -> a
    int[] grow(int[],int) -> a
    void writeStartTag(nu.xom.Element,boolean) -> a
    void writeNamespaceDeclarations(java.util.SortedMap) -> a
    boolean needToDeclareNamespace(nu.xom.Element,java.lang.String,java.lang.String) -> a
    boolean visiblyUtilized(nu.xom.Element,java.lang.String,java.lang.String) -> b
    boolean noOutputAncestorUsesPrefix(nu.xom.Element,java.lang.String,java.lang.String) -> c
    int indexOf(nu.xom.Element) -> g
    void write(nu.xom.Attribute) -> a
    void writeEndTag(nu.xom.Element) -> b
    nu.xom.Attribute[] sortAttributes(nu.xom.Element) -> h
    java.util.List getOmittedBases(nu.xom.Element) -> i
    java.lang.String prepareAttributeValue(nu.xom.Attribute) -> b
    void write(nu.xom.Text) -> a
    void write(nu.xom.Comment) -> a
    void write(nu.xom.ProcessingInstruction) -> a
    void write(nu.xom.DocType) -> a
    void write(nu.xom.Node) -> b
    void write(nu.xom.Namespace) -> a
    nu.xom.Nodes access$702(nu.xom.canonical.Canonicalizer$CanonicalXMLSerializer,nu.xom.Nodes) -> a
nu.xom.canonical.URIJoiner -> a.a.a.f:
    java.lang.String absolutize(java.lang.String,java.lang.String) -> a
    java.lang.String merge(nu.xom.canonical.URIJoiner$ParsedURI,java.lang.String) -> a
    java.lang.String removeDotSegments(java.lang.String) -> a
nu.xom.canonical.URIJoiner$ParsedURI -> a.a.a.g:
    java.lang.String scheme -> a
    java.lang.String schemeSpecificPart -> b
    java.lang.String query -> c
    java.lang.String fragment -> d
    java.lang.String authority -> e
    java.lang.String path -> f
    java.lang.String toString() -> toString
nu.xom.converters.DOMConverter -> a.a.b.a:
    nu.xom.Nodes convert(org.w3c.dom.Node,nu.xom.NodeFactory) -> a
    nu.xom.Nodes convert(org.w3c.dom.Comment,nu.xom.NodeFactory) -> a
    nu.xom.Nodes convert(org.w3c.dom.Text,nu.xom.NodeFactory) -> a
    nu.xom.Nodes convert(org.w3c.dom.ProcessingInstruction,nu.xom.NodeFactory) -> a
    nu.xom.Nodes convert(org.w3c.dom.DocumentType,nu.xom.NodeFactory) -> a
    nu.xom.Element convert(org.w3c.dom.Element) -> a
    nu.xom.Nodes convert(org.w3c.dom.Element,nu.xom.NodeFactory) -> a
    nu.xom.Element makeElement(org.w3c.dom.Element,nu.xom.NodeFactory) -> b
nu.xom.jaxen.BaseXPath -> a.a.c.a:
    java.lang.String exprText -> a
    nu.xom.jaxen.expr.XPathExpr xpath -> b
    nu.xom.jaxen.ContextSupport support -> c
    nu.xom.jaxen.Navigator navigator -> d
    java.util.List selectNodes(java.lang.Object) -> a
    void setNamespaceContext(nu.xom.jaxen.NamespaceContext) -> a
    void setFunctionContext(nu.xom.jaxen.FunctionContext) -> a
    java.lang.String toString() -> toString
    nu.xom.jaxen.Context getContext(java.lang.Object) -> b
    nu.xom.jaxen.ContextSupport getContextSupport() -> a
    nu.xom.jaxen.Navigator getNavigator() -> b
    nu.xom.jaxen.FunctionContext createFunctionContext() -> c
    nu.xom.jaxen.NamespaceContext createNamespaceContext() -> d
    nu.xom.jaxen.VariableContext createVariableContext() -> e
    java.util.List selectNodesForContext(nu.xom.jaxen.Context) -> a
nu.xom.jaxen.Context -> a.a.c.b:
    nu.xom.jaxen.ContextSupport contextSupport -> a
    java.util.List nodeSet -> b
    int size -> c
    int position -> d
    void setNodeSet(java.util.List) -> a
nu.xom.jaxen.ContextSupport -> a.a.c.c:
    nu.xom.jaxen.FunctionContext functionContext -> a
    nu.xom.jaxen.NamespaceContext namespaceContext -> b
    nu.xom.jaxen.VariableContext variableContext -> c
    nu.xom.jaxen.Navigator navigator -> d
    void setNamespaceContext(nu.xom.jaxen.NamespaceContext) -> a
    void setFunctionContext(nu.xom.jaxen.FunctionContext) -> a
    void setVariableContext(nu.xom.jaxen.VariableContext) -> a
nu.xom.jaxen.DefaultNavigator -> a.a.c.d:
nu.xom.jaxen.Function -> a.a.c.e:
nu.xom.jaxen.FunctionContext -> a.a.c.f:
nu.xom.jaxen.JaxenException -> a.a.c.g:
    double javaVersion -> a
nu.xom.jaxen.JaxenHandler -> a.a.c.h:
    nu.xom.jaxen.expr.XPathFactory xpathFactory -> c
    nu.xom.jaxen.expr.XPathExpr xpath -> d
    boolean simplified -> a
    java.util.LinkedList stack -> b
    nu.xom.jaxen.expr.XPathExpr getXPathExpr() -> a
    nu.xom.jaxen.expr.XPathExpr getXPathExpr(boolean) -> a
nu.xom.jaxen.NamedAccessNavigator -> a.a.c.i:
nu.xom.jaxen.NamespaceContext -> a.a.c.j:
nu.xom.jaxen.Navigator -> a.a.c.k:
nu.xom.jaxen.QualifiedName -> a.a.c.l:
    java.lang.String namespaceURI -> a
    java.lang.String localName -> b
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
nu.xom.jaxen.SimpleFunctionContext -> a.a.c.m:
    java.util.HashMap functions -> a
    void registerFunction(java.lang.String,java.lang.String,nu.xom.jaxen.Function) -> a
nu.xom.jaxen.SimpleNamespaceContext -> a.a.c.n:
    java.util.Map namespaces -> a
nu.xom.jaxen.SimpleVariableContext -> a.a.c.o:
    java.util.Map variables -> a
nu.xom.jaxen.VariableContext -> a.a.c.p:
nu.xom.jaxen.XPathFunctionContext -> a.a.c.q:
    nu.xom.jaxen.XPathFunctionContext instance -> a
    nu.xom.jaxen.FunctionContext getInstance() -> a
    void registerXPathFunctions() -> b
    void registerXSLTFunctions() -> c
    void registerExtensionFunctions() -> d
nu.xom.jaxen.XPathSyntaxException -> a.a.c.r:
    java.lang.String xpath -> b
    int position -> c
nu.xom.jaxen.expr.DefaultXPathFactory -> a.a.c.a.a:
nu.xom.jaxen.expr.XPathExpr -> a.a.c.a.b:
    void simplify() -> a
    java.util.List asList(nu.xom.jaxen.Context) -> a
nu.xom.jaxen.expr.XPathFactory -> a.a.c.a.c:
nu.xom.jaxen.function.BooleanFunction -> a.a.c.b.a:
nu.xom.jaxen.function.CeilingFunction -> a.a.c.b.b:
nu.xom.jaxen.function.ConcatFunction -> a.a.c.b.c:
nu.xom.jaxen.function.ContainsFunction -> a.a.c.b.d:
nu.xom.jaxen.function.CountFunction -> a.a.c.b.e:
nu.xom.jaxen.function.FalseFunction -> a.a.c.b.f:
nu.xom.jaxen.function.FloorFunction -> a.a.c.b.g:
nu.xom.jaxen.function.IdFunction -> a.a.c.b.h:
nu.xom.jaxen.function.LangFunction -> a.a.c.b.i:
nu.xom.jaxen.function.LastFunction -> a.a.c.b.j:
nu.xom.jaxen.function.LocalNameFunction -> a.a.c.b.k:
nu.xom.jaxen.function.NameFunction -> a.a.c.b.l:
nu.xom.jaxen.function.NamespaceUriFunction -> a.a.c.b.m:
nu.xom.jaxen.function.NormalizeSpaceFunction -> a.a.c.b.n:
nu.xom.jaxen.function.NotFunction -> a.a.c.b.o:
nu.xom.jaxen.function.NumberFunction -> a.a.c.b.p:
    java.lang.Double NaN -> a
nu.xom.jaxen.function.PositionFunction -> a.a.c.b.q:
nu.xom.jaxen.function.RoundFunction -> a.a.c.b.r:
nu.xom.jaxen.function.StartsWithFunction -> a.a.c.b.s:
nu.xom.jaxen.function.StringFunction -> a.a.c.b.t:
    java.text.DecimalFormat format -> a
nu.xom.jaxen.function.StringLengthFunction -> a.a.c.b.u:
nu.xom.jaxen.function.SubstringAfterFunction -> a.a.c.b.v:
nu.xom.jaxen.function.SubstringBeforeFunction -> a.a.c.b.w:
nu.xom.jaxen.function.SubstringFunction -> a.a.c.b.x:
nu.xom.jaxen.function.SumFunction -> a.a.c.b.y:
nu.xom.jaxen.function.TranslateFunction -> a.a.c.b.z:
nu.xom.jaxen.function.TrueFunction -> a.a.c.b.A:
nu.xom.jaxen.function.ext.EndsWithFunction -> a.a.c.b.a.a:
nu.xom.jaxen.function.ext.EvaluateFunction -> a.a.c.b.a.b:
nu.xom.jaxen.function.ext.LocaleFunctionSupport -> a.a.c.b.a.c:
nu.xom.jaxen.function.ext.LowerFunction -> a.a.c.b.a.d:
nu.xom.jaxen.function.ext.UpperFunction -> a.a.c.b.a.e:
nu.xom.jaxen.function.xslt.DocumentFunction -> a.a.c.b.b.a:
nu.xom.jaxen.saxpath.SAXPathEventSource -> a.a.c.c.a:
    void setXPathHandler(nu.xom.jaxen.saxpath.XPathHandler) -> a
nu.xom.jaxen.saxpath.SAXPathException -> a.a.c.c.b:
    double javaVersion -> a
    java.lang.Throwable cause -> b
    boolean causeSet -> c
    java.lang.Throwable getCause() -> getCause
    java.lang.Throwable initCause(java.lang.Throwable) -> initCause
    void printStackTrace(java.io.PrintStream) -> printStackTrace
    void printStackTrace(java.io.PrintWriter) -> printStackTrace
nu.xom.jaxen.saxpath.XPathHandler -> a.a.c.c.c:
nu.xom.jaxen.saxpath.XPathReader -> a.a.c.c.d:
    void parse(java.lang.String) -> a
nu.xom.jaxen.saxpath.XPathSyntaxException -> a.a.c.c.e:
    java.lang.String xpath -> a
    int position -> b
    java.lang.String lineSeparator -> c
    int getPosition() -> a
    java.lang.String getXPath() -> b
    java.lang.String toString() -> toString
nu.xom.jaxen.saxpath.helpers.XPathReaderFactory -> a.a.c.c.a.a:
    java.lang.Class class$org$jaxen$saxpath$helpers$XPathReaderFactory -> a
    java.lang.Class class$org$jaxen$saxpath$XPathReader -> b
    nu.xom.jaxen.saxpath.XPathReader createReader() -> a
    nu.xom.jaxen.saxpath.XPathReader createReader(java.lang.String) -> a
    java.lang.Class class$(java.lang.String) -> b
nu.xom.jaxen.util.SingletonList -> a.a.c.d.a:
    java.lang.Object element -> a
    int size() -> size
    java.lang.Object get(int) -> get
org.apache.oro.text.GenericPatternCache -> org.a.a.a.a:
    org.apache.oro.text.regex.PatternCompiler _compiler -> a
    org.apache.oro.util.Cache _cache -> b
    org.apache.oro.text.regex.Pattern addPattern(java.lang.String,int) -> a
    org.apache.oro.text.regex.Pattern getPattern(java.lang.String,int) -> b
    int capacity() -> a
org.apache.oro.text.MalformedCachePatternException -> org.a.a.a.b:
org.apache.oro.text.PatternCache -> org.a.a.a.c:
    org.apache.oro.text.regex.Pattern getPattern(java.lang.String,int) -> b
    int capacity() -> a
org.apache.oro.text.PatternCacheLRU -> org.a.a.a.d:
org.apache.oro.text.perl.MalformedPerl5PatternException -> org.a.a.a.a.a:
org.apache.oro.text.perl.Perl5Util -> org.a.a.a.a.b:
    org.apache.oro.text.PatternCache __patternCache -> a
    org.apache.oro.util.Cache __expressionCache -> b
    org.apache.oro.text.regex.Perl5Matcher __matcher -> c
    org.apache.oro.text.regex.Pattern __matchPattern -> d
    org.apache.oro.text.regex.MatchResult __lastMatch -> e
    void __compilePatterns() -> a
    org.apache.oro.text.regex.Pattern __parseMatchExpression(java.lang.String) -> a
    boolean match(java.lang.String,char[]) -> a
    boolean match(java.lang.String,java.lang.String) -> a
    java.lang.String group(int) -> a
    java.lang.String toString() -> toString
org.apache.oro.text.regex.CharStringPointer -> org.a.a.a.b.a:
    int _offset -> a
    char[] _array -> b
    char _getValue() -> a
    char _getValue(int) -> a
    char _getValueRelative(int) -> b
    int _getLength() -> b
    int _getOffset() -> c
    void _setOffset(int) -> c
    boolean _isAtEnd() -> d
    char _increment(int) -> d
    char _increment() -> e
    char _decrement(int) -> e
    char _decrement() -> f
    char _postIncrement() -> g
    java.lang.String _toString(int) -> f
    java.lang.String toString() -> toString
org.apache.oro.text.regex.MalformedPatternException -> org.a.a.a.b.b:
org.apache.oro.text.regex.MatchResult -> org.a.a.a.b.c:
    java.lang.String group(int) -> a
org.apache.oro.text.regex.OpCode -> org.a.a.a.b.d:
    int[] _operandLength -> a
    char[] _opType -> b
    char[] _opLengthVaries -> c
    char[] _opLengthOne -> d
    int _getNextOffset(char[],int) -> a
    char _getArg1(char[],int) -> b
    char _getArg2(char[],int) -> c
    int _getOperand(int) -> a
    boolean _isInArray(char,char[],int) -> a
    int _getNextOperator(int) -> b
    int _getPrevOperator(int) -> c
    int _getNext(char[],int) -> d
    boolean _isWordCharacter(char) -> a
org.apache.oro.text.regex.Pattern -> org.a.a.a.b.e:
    int getOptions() -> a
org.apache.oro.text.regex.PatternCompiler -> org.a.a.a.b.f:
    org.apache.oro.text.regex.Pattern compile(java.lang.String,int) -> a
org.apache.oro.text.regex.Perl5Compiler -> org.a.a.a.b.g:
    org.apache.oro.text.regex.CharStringPointer __input -> a
    boolean __sawBackreference -> b
    char[] __modifierFlags -> c
    int __numParentheses -> d
    int __programSize -> e
    int __cost -> f
    char[] __program -> g
    java.util.HashMap __hashPOSIX -> h
    boolean __isSimpleRepetitionOp(char) -> a
    boolean __isComplexRepetitionOp(char[],int) -> b
    boolean __parseRepetition(char[],int) -> c
    int __parseHex(char[],int,int,int[]) -> a
    int __parseOctal(char[],int,int,int[]) -> b
    void __setModifierFlag(char[],char) -> a
    void __emitCode(char) -> b
    int __emitNode(char) -> c
    int __emitArgNode(char,char) -> a
    void __programInsertOperator(char,int) -> a
    void __programAddTail(int,int) -> a
    void __programAddOperatorTail(int,int) -> b
    char __getNextChar() -> a
    int __parseAlternation(int[]) -> a
    int __parseAtom(int[]) -> b
    int __parseUnicodeClass() -> b
    char __parsePOSIX(boolean[]) -> a
    int __parseBranch(int[]) -> c
    int __parseExpression(boolean,int[]) -> a
    org.apache.oro.text.regex.Pattern compile(char[],int) -> a
    org.apache.oro.text.regex.Pattern compile(java.lang.String,int) -> a
org.apache.oro.text.regex.Perl5MatchResult -> org.a.a.a.b.h:
    int _matchBeginOffset -> a
    int[] _beginGroupOffset -> b
    int[] _endGroupOffset -> c
    java.lang.String _match -> d
    java.lang.String group(int) -> a
    java.lang.String toString() -> toString
org.apache.oro.text.regex.Perl5Matcher -> org.a.a.a.b.i:
    boolean __multiline -> a
    boolean __lastSuccess -> b
    boolean __caseInsensitive -> c
    char __previousChar -> d
    char[] __input -> e
    char[] __originalInput -> f
    org.apache.oro.text.regex.Perl5Repetition __currentRep -> g
    int __numParentheses -> h
    int __bol -> i
    int __eol -> j
    int __currentOffset -> k
    int __endOffset -> l
    char[] __program -> m
    int __expSize -> n
    int __inputOffset -> o
    int __lastParen -> p
    int[] __beginMatchOffsets -> q
    int[] __endMatchOffsets -> r
    java.util.Stack __stack -> s
    org.apache.oro.text.regex.Perl5MatchResult __lastMatchResult -> t
    int __lastMatchInputEndOffset -> u
    boolean __compare(char[],int,char[],int,int) -> a
    int __findFirst(char[],int,int,char[]) -> a
    void __pushState(int) -> a
    void __popState() -> b
    void __initInterpreterGlobals(org.apache.oro.text.regex.Perl5Pattern,char[],int,int,int) -> a
    void __setLastMatchResult() -> c
    boolean __interpret(org.apache.oro.text.regex.Perl5Pattern,char[],int,int,int) -> b
    boolean __matchUnicodeClass(char,char[],int,char) -> a
    boolean __tryExpression(int) -> b
    int __repeat(int,int) -> a
    boolean __match(int) -> c
    char[] _toLower(char[]) -> a
    boolean matches(char[],org.apache.oro.text.regex.Pattern) -> a
    boolean matches(java.lang.String,org.apache.oro.text.regex.Pattern) -> a
    boolean contains(char[],org.apache.oro.text.regex.Pattern) -> b
    org.apache.oro.text.regex.MatchResult getMatch() -> a
org.apache.oro.text.regex.Perl5Pattern -> org.a.a.a.b.j:
    java.lang.String _expression -> a
    char[] _program -> b
    int _mustUtility -> c
    int _back -> d
    int _minLength -> e
    int _numParentheses -> f
    boolean _isCaseInsensitive -> g
    boolean _isExpensive -> h
    int _startClassOffset -> i
    int _anchor -> j
    int _options -> k
    char[] _mustString -> l
    char[] _startString -> m
    int getOptions() -> a
org.apache.oro.text.regex.Perl5Repetition -> org.a.a.a.b.k:
    int _parenFloor -> a
    int _numInstances -> b
    int _min -> c
    int _max -> d
    boolean _minMod -> e
    int _scan -> f
    int _next -> g
    int _lastLocation -> h
    org.apache.oro.text.regex.Perl5Repetition _lastRepetition -> i
org.apache.oro.util.Cache -> org.a.a.b.a:
    void addElement(java.lang.Object,java.lang.Object) -> a
    java.lang.Object getElement(java.lang.Object) -> a
    int capacity() -> a
org.apache.oro.util.CacheLRU -> org.a.a.b.b:
    int __head -> d
    int __tail -> e
    int[] __next -> f
    int[] __prev -> g
    void __moveToFront(int) -> a
    java.lang.Object getElement(java.lang.Object) -> a
    void addElement(java.lang.Object,java.lang.Object) -> a
org.apache.oro.util.GenericCache -> org.a.a.b.c:
    int _numEntries -> a
    org.apache.oro.util.GenericCacheEntry[] _cache -> b
    java.util.HashMap _table -> c
    java.lang.Object getElement(java.lang.Object) -> a
    int capacity() -> a
    boolean isFull() -> b
org.apache.oro.util.GenericCacheEntry -> org.a.a.b.d:
    int _index -> a
    java.lang.Object _value -> b
    java.lang.Object _key -> c
org.slf4j.ILoggerFactory -> org.b.a:
    org.slf4j.Logger getLogger(java.lang.String) -> a
org.slf4j.Logger -> org.b.b:
    void debug(java.lang.String) -> a
    void debug(java.lang.String,java.lang.Object[]) -> a
    void error(java.lang.String,java.lang.Object) -> a
    void error(java.lang.String,java.lang.Object,java.lang.Object) -> a
    void error(java.lang.String,java.lang.Throwable) -> a
org.slf4j.LoggerFactory -> org.b.c:
    int INITIALIZATION_STATE -> a
    org.slf4j.helpers.SubstituteLoggerFactory TEMP_FACTORY -> b
    org.slf4j.helpers.NOPLoggerFactory NOP_FALLBACK_FACTORY -> c
    java.lang.String[] API_COMPATIBILITY_LIST -> e
    java.lang.String STATIC_LOGGER_BINDER_PATH -> f
    java.lang.Class class$org$slf4j$LoggerFactory -> d
    void performInitialization() -> b
    void bind() -> c
    void failedBinding(java.lang.Throwable) -> a
    void emitSubstituteLoggerWarning() -> d
    void versionSanityCheck() -> e
    void singleImplementationSanityCheck() -> f
    org.slf4j.Logger getLogger(java.lang.String) -> a
    org.slf4j.Logger getLogger(java.lang.Class) -> a
    org.slf4j.ILoggerFactory getILoggerFactory() -> a
    java.lang.Class class$(java.lang.String) -> b
org.slf4j.helpers.MarkerIgnoringBase -> org.b.a.a:
    java.lang.String toString() -> toString
org.slf4j.helpers.NOPLogger -> org.b.a.b:
    org.slf4j.helpers.NOPLogger NOP_LOGGER -> a
    java.lang.String getName() -> a
    void debug(java.lang.String) -> a
    void debug(java.lang.String,java.lang.Object[]) -> a
    void error(java.lang.String,java.lang.Object) -> a
    void error(java.lang.String,java.lang.Object,java.lang.Object) -> a
    void error(java.lang.String,java.lang.Throwable) -> a
org.slf4j.helpers.NOPLoggerFactory -> org.b.a.c:
    org.slf4j.Logger getLogger(java.lang.String) -> a
org.slf4j.helpers.NamedLoggerBase -> org.b.a.d:
    java.lang.String name -> b
    java.lang.String getName() -> a
org.slf4j.helpers.SubstituteLoggerFactory -> org.b.a.e:
    java.util.List loggerNameList -> a
    org.slf4j.Logger getLogger(java.lang.String) -> a
    java.util.List getLoggerNameList() -> a
org.slf4j.helpers.Util -> org.b.a.f:
    void report(java.lang.String,java.lang.Throwable) -> a
    void report(java.lang.String) -> a
org.spongycastle.asn1.ASN1ApplicationSpecific -> org.spongycastle.asn1.a:
    boolean isConstructed -> a
    int tag -> b
    byte[] octets -> c
    org.spongycastle.asn1.ASN1ApplicationSpecific getInstance(java.lang.Object) -> a
    boolean isConstructed() -> a
    byte[] getContents() -> b
    int getApplicationTag() -> c
    org.spongycastle.asn1.ASN1Primitive getObject(int) -> a
    int encodedLength() -> d
    void encode(org.spongycastle.asn1.ASN1OutputStream) -> a
    boolean asn1Equals(org.spongycastle.asn1.ASN1Primitive) -> a
    int hashCode() -> hashCode
    byte[] replaceTagNumber(int,byte[]) -> a
org.spongycastle.asn1.ASN1ApplicationSpecificParser -> org.spongycastle.asn1.b:
org.spongycastle.asn1.ASN1BitString -> org.spongycastle.asn1.c:
    char[] table -> c
    byte[] data -> a
    int padBits -> b
    java.lang.String getString() -> b
    int intValue() -> c
    byte[] getOctets() -> e
    byte[] getBytes() -> f
    int getPadBits() -> g
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean asn1Equals(org.spongycastle.asn1.ASN1Primitive) -> a
    byte[] derForm(byte[],int) -> a
    org.spongycastle.asn1.ASN1BitString fromInputStream(int,java.io.InputStream) -> a
    org.spongycastle.asn1.ASN1Primitive toDERObject() -> h
    org.spongycastle.asn1.ASN1Primitive toDLObject() -> i
    void encode(org.spongycastle.asn1.ASN1OutputStream) -> a
org.spongycastle.asn1.ASN1Boolean -> org.spongycastle.asn1.d:
    byte[] TRUE_VALUE -> c
    byte[] FALSE_VALUE -> d
    byte[] value -> e
    org.spongycastle.asn1.ASN1Boolean FALSE -> a
    org.spongycastle.asn1.ASN1Boolean TRUE -> b
    org.spongycastle.asn1.ASN1Boolean getInstance(java.lang.Object) -> a
    org.spongycastle.asn1.ASN1Boolean getInstance(boolean) -> a
    org.spongycastle.asn1.ASN1Boolean getInstance(org.spongycastle.asn1.ASN1TaggedObject,boolean) -> a
    boolean isTrue() -> b
    boolean isConstructed() -> a
    int encodedLength() -> d
    void encode(org.spongycastle.asn1.ASN1OutputStream) -> a
    boolean asn1Equals(org.spongycastle.asn1.ASN1Primitive) -> a
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    org.spongycastle.asn1.ASN1Boolean fromOctetString(byte[]) -> a
org.spongycastle.asn1.ASN1Choice -> org.spongycastle.asn1.e:
org.spongycastle.asn1.ASN1Encodable -> org.spongycastle.asn1.f:
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.ASN1EncodableVector -> org.spongycastle.asn1.ASN1EncodableVector:
    java.util.Vector v -> a
    void add(org.spongycastle.asn1.ASN1Encodable) -> add
    void addAll(org.spongycastle.asn1.ASN1EncodableVector) -> addAll
    org.spongycastle.asn1.ASN1Encodable get(int) -> get
    int size() -> size
org.spongycastle.asn1.ASN1Enumerated -> org.spongycastle.asn1.g:
    byte[] bytes -> a
    org.spongycastle.asn1.ASN1Enumerated[] cache -> b
    org.spongycastle.asn1.ASN1Enumerated getInstance(java.lang.Object) -> a
    java.math.BigInteger getValue() -> b
    boolean isConstructed() -> a
    int encodedLength() -> d
    void encode(org.spongycastle.asn1.ASN1OutputStream) -> a
    boolean asn1Equals(org.spongycastle.asn1.ASN1Primitive) -> a
    int hashCode() -> hashCode
    org.spongycastle.asn1.ASN1Enumerated fromOctetString(byte[]) -> a
org.spongycastle.asn1.ASN1Exception -> org.spongycastle.asn1.h:
    java.lang.Throwable cause -> a
    java.lang.Throwable getCause() -> getCause
org.spongycastle.asn1.ASN1GeneralizedTime -> org.spongycastle.asn1.i:
    byte[] time -> a
    org.spongycastle.asn1.ASN1GeneralizedTime getInstance(java.lang.Object) -> a
    java.lang.String getTime() -> b
    java.lang.String calculateGMTOffset() -> e
    java.lang.String convert(int) -> a
    java.util.Date getDate() -> c
    boolean hasFractionalSeconds() -> f
    boolean isConstructed() -> a
    int encodedLength() -> d
    void encode(org.spongycastle.asn1.ASN1OutputStream) -> a
    boolean asn1Equals(org.spongycastle.asn1.ASN1Primitive) -> a
    int hashCode() -> hashCode
org.spongycastle.asn1.ASN1InputStream -> org.spongycastle.asn1.j:
    int limit -> a
    boolean lazyEvaluate -> b
    byte[][] tmpBuffers -> c
    int getLimit() -> a
    int readLength() -> b
    org.spongycastle.asn1.ASN1Primitive buildObject(int,int,int) -> a
    org.spongycastle.asn1.ASN1EncodableVector buildEncodableVector() -> c
    org.spongycastle.asn1.ASN1EncodableVector buildDEREncodableVector(org.spongycastle.asn1.DefiniteLengthInputStream) -> a
    org.spongycastle.asn1.ASN1Primitive readObject() -> d
    int readTagNumber(java.io.InputStream,int) -> a
    int readLength(java.io.InputStream,int) -> b
    byte[] getBuffer(org.spongycastle.asn1.DefiniteLengthInputStream,byte[][]) -> a
    char[] getBMPCharBuffer(org.spongycastle.asn1.DefiniteLengthInputStream) -> b
    org.spongycastle.asn1.ASN1Primitive createPrimitiveDERObject(int,org.spongycastle.asn1.DefiniteLengthInputStream,byte[][]) -> a
org.spongycastle.asn1.ASN1Integer -> org.spongycastle.asn1.k:
    byte[] bytes -> a
    org.spongycastle.asn1.ASN1Integer getInstance(java.lang.Object) -> a
    org.spongycastle.asn1.ASN1Integer getInstance(org.spongycastle.asn1.ASN1TaggedObject,boolean) -> a
    java.math.BigInteger getValue() -> b
    java.math.BigInteger getPositiveValue() -> c
    boolean isConstructed() -> a
    int encodedLength() -> d
    void encode(org.spongycastle.asn1.ASN1OutputStream) -> a
    int hashCode() -> hashCode
    boolean asn1Equals(org.spongycastle.asn1.ASN1Primitive) -> a
    java.lang.String toString() -> toString
org.spongycastle.asn1.ASN1Null -> org.spongycastle.asn1.l:
    int hashCode() -> hashCode
    boolean asn1Equals(org.spongycastle.asn1.ASN1Primitive) -> a
    void encode(org.spongycastle.asn1.ASN1OutputStream) -> a
    java.lang.String toString() -> toString
org.spongycastle.asn1.ASN1Object -> org.spongycastle.asn1.m:
    byte[] getEncoded() -> getEncoded
    byte[] getEncoded(java.lang.String) -> getEncoded
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    org.spongycastle.asn1.ASN1Primitive toASN1Object() -> toASN1Object
    boolean hasEncodedTagValue(java.lang.Object,int) -> hasEncodedTagValue
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.ASN1ObjectIdentifier -> org.spongycastle.asn1.ASN1ObjectIdentifier:
    java.lang.String identifier -> a
    byte[] body -> b
    java.util.Map pool -> c
    org.spongycastle.asn1.ASN1ObjectIdentifier getInstance(java.lang.Object) -> getInstance
    org.spongycastle.asn1.ASN1ObjectIdentifier getInstance(org.spongycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    java.lang.String getId() -> getId
    org.spongycastle.asn1.ASN1ObjectIdentifier branch(java.lang.String) -> branch
    boolean on(org.spongycastle.asn1.ASN1ObjectIdentifier) -> on
    void writeField(java.io.ByteArrayOutputStream,long) -> a
    void writeField(java.io.ByteArrayOutputStream,java.math.BigInteger) -> a
    void doOutput(java.io.ByteArrayOutputStream) -> a
    byte[] getBody() -> b
    boolean isConstructed() -> a
    int encodedLength() -> d
    void encode(org.spongycastle.asn1.ASN1OutputStream) -> a
    int hashCode() -> hashCode
    boolean asn1Equals(org.spongycastle.asn1.ASN1Primitive) -> a
    java.lang.String toString() -> toString
    boolean isValidBranchID(java.lang.String,int) -> a
    boolean isValidIdentifier(java.lang.String) -> a
    org.spongycastle.asn1.ASN1ObjectIdentifier intern() -> intern
    org.spongycastle.asn1.ASN1ObjectIdentifier fromOctetString(byte[]) -> a
org.spongycastle.asn1.ASN1ObjectIdentifier$OidHandle -> org.spongycastle.asn1.n:
    int key -> a
    byte[] enc -> b
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
org.spongycastle.asn1.ASN1OctetString -> org.spongycastle.asn1.o:
    byte[] string -> a
    org.spongycastle.asn1.ASN1OctetString getInstance(org.spongycastle.asn1.ASN1TaggedObject,boolean) -> a
    org.spongycastle.asn1.ASN1OctetString getInstance(java.lang.Object) -> a
    java.io.InputStream getOctetStream() -> b
    org.spongycastle.asn1.ASN1OctetStringParser parser() -> c
    byte[] getOctets() -> e
    int hashCode() -> hashCode
    boolean asn1Equals(org.spongycastle.asn1.ASN1Primitive) -> a
    org.spongycastle.asn1.ASN1Primitive getLoadedObject() -> getLoadedObject
    org.spongycastle.asn1.ASN1Primitive toDERObject() -> h
    org.spongycastle.asn1.ASN1Primitive toDLObject() -> i
    void encode(org.spongycastle.asn1.ASN1OutputStream) -> a
    java.lang.String toString() -> toString
org.spongycastle.asn1.ASN1OctetStringParser -> org.spongycastle.asn1.p:
    java.io.InputStream getOctetStream() -> b
org.spongycastle.asn1.ASN1OutputStream -> org.spongycastle.asn1.q:
    java.io.OutputStream os -> a
    void writeLength(int) -> a
    void write(int) -> b
    void write(byte[]) -> a
    void write(byte[],int,int) -> a
    void writeEncoded(int,byte[]) -> a
    void writeTag(int,int) -> a
    void writeEncoded(int,int,byte[]) -> a
    void writeObject(org.spongycastle.asn1.ASN1Encodable) -> a
    void writeImplicitObject(org.spongycastle.asn1.ASN1Primitive) -> a
    void close() -> a
    org.spongycastle.asn1.ASN1OutputStream getDERSubStream() -> b
    org.spongycastle.asn1.ASN1OutputStream getDLSubStream() -> c
org.spongycastle.asn1.ASN1OutputStream$ImplicitOutputStream -> org.spongycastle.asn1.r:
    boolean first -> b
    org.spongycastle.asn1.ASN1OutputStream this$0 -> a
    void write(int) -> b
org.spongycastle.asn1.ASN1ParsingException -> org.spongycastle.asn1.s:
    java.lang.Throwable cause -> a
    java.lang.Throwable getCause() -> getCause
org.spongycastle.asn1.ASN1Primitive -> org.spongycastle.asn1.ASN1Primitive:
    org.spongycastle.asn1.ASN1Primitive fromByteArray(byte[]) -> fromByteArray
    boolean equals(java.lang.Object) -> equals
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
    org.spongycastle.asn1.ASN1Primitive toDERObject() -> h
    org.spongycastle.asn1.ASN1Primitive toDLObject() -> i
    int hashCode() -> hashCode
    boolean isConstructed() -> a
    int encodedLength() -> d
    void encode(org.spongycastle.asn1.ASN1OutputStream) -> a
    boolean asn1Equals(org.spongycastle.asn1.ASN1Primitive) -> a
org.spongycastle.asn1.ASN1Sequence -> org.spongycastle.asn1.t:
    java.util.Vector seq -> a
    org.spongycastle.asn1.ASN1Sequence getInstance(java.lang.Object) -> a
    org.spongycastle.asn1.ASN1Sequence getInstance(org.spongycastle.asn1.ASN1TaggedObject,boolean) -> a
    org.spongycastle.asn1.ASN1Encodable[] toArray() -> b
    java.util.Enumeration getObjects() -> c
    org.spongycastle.asn1.ASN1SequenceParser parser() -> e
    org.spongycastle.asn1.ASN1Encodable getObjectAt(int) -> a
    int size() -> f
    int hashCode() -> hashCode
    boolean asn1Equals(org.spongycastle.asn1.ASN1Primitive) -> a
    org.spongycastle.asn1.ASN1Encodable getNext(java.util.Enumeration) -> a
    org.spongycastle.asn1.ASN1Primitive toDERObject() -> h
    org.spongycastle.asn1.ASN1Primitive toDLObject() -> i
    boolean isConstructed() -> a
    void encode(org.spongycastle.asn1.ASN1OutputStream) -> a
    java.lang.String toString() -> toString
    java.util.Iterator iterator() -> iterator
org.spongycastle.asn1.ASN1Sequence$1 -> org.spongycastle.asn1.u:
    int max -> c
    org.spongycastle.asn1.ASN1Sequence val$outer -> a
    org.spongycastle.asn1.ASN1Sequence this$0 -> b
    org.spongycastle.asn1.ASN1Primitive getLoadedObject() -> getLoadedObject
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.ASN1SequenceParser -> org.spongycastle.asn1.v:
org.spongycastle.asn1.ASN1Set -> org.spongycastle.asn1.ASN1Set:
    java.util.Vector set -> a
    boolean isSorted -> b
    org.spongycastle.asn1.ASN1Set getInstance(java.lang.Object) -> getInstance
    org.spongycastle.asn1.ASN1Set getInstance(org.spongycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    java.util.Enumeration getObjects() -> getObjects
    org.spongycastle.asn1.ASN1Encodable getObjectAt(int) -> getObjectAt
    int size() -> size
    org.spongycastle.asn1.ASN1Encodable[] toArray() -> toArray
    org.spongycastle.asn1.ASN1SetParser parser() -> parser
    int hashCode() -> hashCode
    org.spongycastle.asn1.ASN1Primitive toDERObject() -> h
    org.spongycastle.asn1.ASN1Primitive toDLObject() -> i
    boolean asn1Equals(org.spongycastle.asn1.ASN1Primitive) -> a
    org.spongycastle.asn1.ASN1Encodable getNext(java.util.Enumeration) -> a
    boolean lessThanOrEqual(byte[],byte[]) -> a
    byte[] getDEREncoded(org.spongycastle.asn1.ASN1Encodable) -> a
    void sort() -> sort
    boolean isConstructed() -> a
    void encode(org.spongycastle.asn1.ASN1OutputStream) -> a
    java.lang.String toString() -> toString
    java.util.Iterator iterator() -> iterator
org.spongycastle.asn1.ASN1Set$1 -> org.spongycastle.asn1.w:
    int max -> c
    org.spongycastle.asn1.ASN1Set val$outer -> a
    org.spongycastle.asn1.ASN1Set this$0 -> b
    org.spongycastle.asn1.ASN1Primitive getLoadedObject() -> getLoadedObject
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.ASN1SetParser -> org.spongycastle.asn1.x:
org.spongycastle.asn1.ASN1StreamParser -> org.spongycastle.asn1.y:
    java.io.InputStream _in -> a
    int _limit -> b
    byte[][] tmpBuffers -> c
    org.spongycastle.asn1.ASN1Encodable readIndef(int) -> a
    org.spongycastle.asn1.ASN1Primitive readTaggedObject(boolean,int) -> a
    org.spongycastle.asn1.ASN1Encodable readObject() -> a
    void set00Check(boolean) -> a
    org.spongycastle.asn1.ASN1EncodableVector readVector() -> b
org.spongycastle.asn1.ASN1String -> org.spongycastle.asn1.z:
    java.lang.String getString() -> b
org.spongycastle.asn1.ASN1TaggedObject -> org.spongycastle.asn1.ASN1TaggedObject:
    int tagNo -> a
    boolean empty -> b
    boolean explicit -> c
    org.spongycastle.asn1.ASN1Encodable obj -> d
    org.spongycastle.asn1.ASN1TaggedObject getInstance(org.spongycastle.asn1.ASN1TaggedObject,boolean) -> getInstance
    org.spongycastle.asn1.ASN1TaggedObject getInstance(java.lang.Object) -> getInstance
    boolean asn1Equals(org.spongycastle.asn1.ASN1Primitive) -> a
    int hashCode() -> hashCode
    int getTagNo() -> getTagNo
    boolean isExplicit() -> isExplicit
    boolean isEmpty() -> isEmpty
    org.spongycastle.asn1.ASN1Primitive getObject() -> getObject
    org.spongycastle.asn1.ASN1Encodable getObjectParser(int,boolean) -> getObjectParser
    org.spongycastle.asn1.ASN1Primitive getLoadedObject() -> getLoadedObject
    org.spongycastle.asn1.ASN1Primitive toDERObject() -> h
    org.spongycastle.asn1.ASN1Primitive toDLObject() -> i
    void encode(org.spongycastle.asn1.ASN1OutputStream) -> a
    java.lang.String toString() -> toString
org.spongycastle.asn1.ASN1TaggedObjectParser -> org.spongycastle.asn1.A:
org.spongycastle.asn1.ASN1UTCTime -> org.spongycastle.asn1.B:
    byte[] time -> a
    java.util.Date getDate() -> b
    java.util.Date getAdjustedDate() -> c
    java.lang.String getTime() -> e
    java.lang.String getAdjustedTime() -> f
    boolean isConstructed() -> a
    int encodedLength() -> d
    void encode(org.spongycastle.asn1.ASN1OutputStream) -> a
    boolean asn1Equals(org.spongycastle.asn1.ASN1Primitive) -> a
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
org.spongycastle.asn1.BERApplicationSpecific -> org.spongycastle.asn1.C:
    byte[] getEncodedVector(org.spongycastle.asn1.ASN1EncodableVector) -> a
    void encode(org.spongycastle.asn1.ASN1OutputStream) -> a
org.spongycastle.asn1.BERApplicationSpecificParser -> org.spongycastle.asn1.D:
    int tag -> a
    org.spongycastle.asn1.ASN1StreamParser parser -> b
    org.spongycastle.asn1.ASN1Primitive getLoadedObject() -> getLoadedObject
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.BERFactory -> org.spongycastle.asn1.E:
    org.spongycastle.asn1.BERSequence EMPTY_SEQUENCE -> a
    org.spongycastle.asn1.BERSet EMPTY_SET -> b
    org.spongycastle.asn1.BERSequence createSequence(org.spongycastle.asn1.ASN1EncodableVector) -> a
org.spongycastle.asn1.BEROctetString -> org.spongycastle.asn1.F:
    org.spongycastle.asn1.ASN1OctetString[] octs -> b
    byte[] toBytes(org.spongycastle.asn1.ASN1OctetString[]) -> a
    byte[] getOctets() -> e
    java.util.Enumeration getObjects() -> f
    java.util.Vector generateOcts() -> g
    boolean isConstructed() -> a
    int encodedLength() -> d
    void encode(org.spongycastle.asn1.ASN1OutputStream) -> a
    org.spongycastle.asn1.BEROctetString fromSequence(org.spongycastle.asn1.ASN1Sequence) -> a
    org.spongycastle.asn1.ASN1OctetString[] access$000(org.spongycastle.asn1.BEROctetString) -> a
org.spongycastle.asn1.BEROctetString$1 -> org.spongycastle.asn1.G:
    int counter -> a
    org.spongycastle.asn1.BEROctetString this$0 -> b
    boolean hasMoreElements() -> hasMoreElements
    java.lang.Object nextElement() -> nextElement
org.spongycastle.asn1.BEROctetStringParser -> org.spongycastle.asn1.H:
    org.spongycastle.asn1.ASN1StreamParser _parser -> a
    java.io.InputStream getOctetStream() -> b
    org.spongycastle.asn1.ASN1Primitive getLoadedObject() -> getLoadedObject
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.BEROutputStream -> org.spongycastle.asn1.I:
org.spongycastle.asn1.BERSequence -> org.spongycastle.asn1.J:
    int encodedLength() -> d
    void encode(org.spongycastle.asn1.ASN1OutputStream) -> a
org.spongycastle.asn1.BERSequenceParser -> org.spongycastle.asn1.K:
    org.spongycastle.asn1.ASN1StreamParser _parser -> a
    org.spongycastle.asn1.ASN1Primitive getLoadedObject() -> getLoadedObject
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.BERSet -> org.spongycastle.asn1.L:
    int encodedLength() -> d
    void encode(org.spongycastle.asn1.ASN1OutputStream) -> a
org.spongycastle.asn1.BERSetParser -> org.spongycastle.asn1.M:
    org.spongycastle.asn1.ASN1StreamParser _parser -> a
    org.spongycastle.asn1.ASN1Primitive getLoadedObject() -> getLoadedObject
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.BERTaggedObject -> org.spongycastle.asn1.N:
    boolean isConstructed() -> a
    int encodedLength() -> d
    void encode(org.spongycastle.asn1.ASN1OutputStream) -> a
org.spongycastle.asn1.BERTaggedObjectParser -> org.spongycastle.asn1.O:
    boolean _constructed -> a
    int _tagNumber -> b
    org.spongycastle.asn1.ASN1StreamParser _parser -> c
    org.spongycastle.asn1.ASN1Primitive getLoadedObject() -> getLoadedObject
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.ConstructedOctetStream -> org.spongycastle.asn1.P:
    org.spongycastle.asn1.ASN1StreamParser _parser -> a
    boolean _first -> b
    java.io.InputStream _currentStream -> c
    int read(byte[],int,int) -> read
    int read() -> read
org.spongycastle.asn1.DERApplicationSpecific -> org.spongycastle.asn1.Q:
    void encode(org.spongycastle.asn1.ASN1OutputStream) -> a
org.spongycastle.asn1.DERBMPString -> org.spongycastle.asn1.R:
    char[] string -> a
    java.lang.String getString() -> b
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean asn1Equals(org.spongycastle.asn1.ASN1Primitive) -> a
    boolean isConstructed() -> a
    int encodedLength() -> d
    void encode(org.spongycastle.asn1.ASN1OutputStream) -> a
org.spongycastle.asn1.DERBitString -> org.spongycastle.asn1.S:
    org.spongycastle.asn1.DERBitString getInstance(java.lang.Object) -> a
    org.spongycastle.asn1.DERBitString getInstance(org.spongycastle.asn1.ASN1TaggedObject,boolean) -> a
    boolean isConstructed() -> a
    int encodedLength() -> d
    void encode(org.spongycastle.asn1.ASN1OutputStream) -> a
    org.spongycastle.asn1.DERBitString fromOctetString(byte[]) -> a
org.spongycastle.asn1.DERExternal -> org.spongycastle.asn1.T:
    org.spongycastle.asn1.ASN1ObjectIdentifier directReference -> a
    org.spongycastle.asn1.ASN1Integer indirectReference -> b
    org.spongycastle.asn1.ASN1Primitive dataValueDescriptor -> c
    int encoding -> d
    org.spongycastle.asn1.ASN1Primitive externalContent -> e
    org.spongycastle.asn1.ASN1Primitive getObjFromVector(org.spongycastle.asn1.ASN1EncodableVector,int) -> a
    int hashCode() -> hashCode
    boolean isConstructed() -> a
    int encodedLength() -> d
    void encode(org.spongycastle.asn1.ASN1OutputStream) -> a
    boolean asn1Equals(org.spongycastle.asn1.ASN1Primitive) -> a
    org.spongycastle.asn1.ASN1Primitive getDataValueDescriptor() -> b
    org.spongycastle.asn1.ASN1ObjectIdentifier getDirectReference() -> c
    int getEncoding() -> e
    org.spongycastle.asn1.ASN1Primitive getExternalContent() -> f
    org.spongycastle.asn1.ASN1Integer getIndirectReference() -> g
    void setEncoding(int) -> a
org.spongycastle.asn1.DERExternalParser -> org.spongycastle.asn1.U:
    org.spongycastle.asn1.ASN1StreamParser _parser -> a
    org.spongycastle.asn1.ASN1Primitive getLoadedObject() -> getLoadedObject
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.DERFactory -> org.spongycastle.asn1.V:
    org.spongycastle.asn1.ASN1Sequence EMPTY_SEQUENCE -> a
    org.spongycastle.asn1.ASN1Set EMPTY_SET -> b
    org.spongycastle.asn1.ASN1Sequence createSequence(org.spongycastle.asn1.ASN1EncodableVector) -> a
    org.spongycastle.asn1.ASN1Set createSet(org.spongycastle.asn1.ASN1EncodableVector) -> b
org.spongycastle.asn1.DERGeneralString -> org.spongycastle.asn1.W:
    byte[] string -> a
    java.lang.String getString() -> b
    java.lang.String toString() -> toString
    boolean isConstructed() -> a
    int encodedLength() -> d
    void encode(org.spongycastle.asn1.ASN1OutputStream) -> a
    int hashCode() -> hashCode
    boolean asn1Equals(org.spongycastle.asn1.ASN1Primitive) -> a
org.spongycastle.asn1.DERGraphicString -> org.spongycastle.asn1.X:
    byte[] string -> a
    boolean isConstructed() -> a
    int encodedLength() -> d
    void encode(org.spongycastle.asn1.ASN1OutputStream) -> a
    int hashCode() -> hashCode
    boolean asn1Equals(org.spongycastle.asn1.ASN1Primitive) -> a
    java.lang.String getString() -> b
org.spongycastle.asn1.DERIA5String -> org.spongycastle.asn1.Y:
    byte[] string -> a
    org.spongycastle.asn1.DERIA5String getInstance(java.lang.Object) -> a
    org.spongycastle.asn1.DERIA5String getInstance(org.spongycastle.asn1.ASN1TaggedObject,boolean) -> a
    java.lang.String getString() -> b
    java.lang.String toString() -> toString
    boolean isConstructed() -> a
    int encodedLength() -> d
    void encode(org.spongycastle.asn1.ASN1OutputStream) -> a
    int hashCode() -> hashCode
    boolean asn1Equals(org.spongycastle.asn1.ASN1Primitive) -> a
    boolean isIA5String(java.lang.String) -> a
org.spongycastle.asn1.DERNull -> org.spongycastle.asn1.Z:
    org.spongycastle.asn1.DERNull INSTANCE -> a
    byte[] zeroBytes -> b
    boolean isConstructed() -> a
    int encodedLength() -> d
    void encode(org.spongycastle.asn1.ASN1OutputStream) -> a
org.spongycastle.asn1.DERNumericString -> org.spongycastle.asn1.aa:
    byte[] string -> a
    java.lang.String getString() -> b
    java.lang.String toString() -> toString
    boolean isConstructed() -> a
    int encodedLength() -> d
    void encode(org.spongycastle.asn1.ASN1OutputStream) -> a
    int hashCode() -> hashCode
    boolean asn1Equals(org.spongycastle.asn1.ASN1Primitive) -> a
org.spongycastle.asn1.DERObjectIdentifier -> org.spongycastle.asn1.DERObjectIdentifier:
org.spongycastle.asn1.DEROctetString -> org.spongycastle.asn1.ab:
    boolean isConstructed() -> a
    int encodedLength() -> d
    void encode(org.spongycastle.asn1.ASN1OutputStream) -> a
org.spongycastle.asn1.DEROctetStringParser -> org.spongycastle.asn1.ac:
    org.spongycastle.asn1.DefiniteLengthInputStream stream -> a
    java.io.InputStream getOctetStream() -> b
    org.spongycastle.asn1.ASN1Primitive getLoadedObject() -> getLoadedObject
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.DEROutputStream -> org.spongycastle.asn1.ad:
    void writeObject(org.spongycastle.asn1.ASN1Encodable) -> a
    org.spongycastle.asn1.ASN1OutputStream getDERSubStream() -> b
    org.spongycastle.asn1.ASN1OutputStream getDLSubStream() -> c
org.spongycastle.asn1.DERPrintableString -> org.spongycastle.asn1.ae:
    byte[] string -> a
    java.lang.String getString() -> b
    boolean isConstructed() -> a
    int encodedLength() -> d
    void encode(org.spongycastle.asn1.ASN1OutputStream) -> a
    int hashCode() -> hashCode
    boolean asn1Equals(org.spongycastle.asn1.ASN1Primitive) -> a
    java.lang.String toString() -> toString
    boolean isPrintableString(java.lang.String) -> a
org.spongycastle.asn1.DERSequence -> org.spongycastle.asn1.af:
    int bodyLength -> b
    int getBodyLength() -> g
    int encodedLength() -> d
    void encode(org.spongycastle.asn1.ASN1OutputStream) -> a
org.spongycastle.asn1.DERSequenceParser -> org.spongycastle.asn1.ag:
    org.spongycastle.asn1.ASN1StreamParser _parser -> a
    org.spongycastle.asn1.ASN1Primitive getLoadedObject() -> getLoadedObject
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.DERSet -> org.spongycastle.asn1.ah:
    int bodyLength -> a
    int getBodyLength() -> b
    int encodedLength() -> d
    void encode(org.spongycastle.asn1.ASN1OutputStream) -> a
org.spongycastle.asn1.DERSetParser -> org.spongycastle.asn1.ai:
    org.spongycastle.asn1.ASN1StreamParser _parser -> a
    org.spongycastle.asn1.ASN1Primitive getLoadedObject() -> getLoadedObject
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.DERT61String -> org.spongycastle.asn1.aj:
    byte[] string -> a
    java.lang.String getString() -> b
    java.lang.String toString() -> toString
    boolean isConstructed() -> a
    int encodedLength() -> d
    void encode(org.spongycastle.asn1.ASN1OutputStream) -> a
    boolean asn1Equals(org.spongycastle.asn1.ASN1Primitive) -> a
    int hashCode() -> hashCode
org.spongycastle.asn1.DERTaggedObject -> org.spongycastle.asn1.ak:
    byte[] ZERO_BYTES -> e
    boolean isConstructed() -> a
    int encodedLength() -> d
    void encode(org.spongycastle.asn1.ASN1OutputStream) -> a
org.spongycastle.asn1.DERUTCTime -> org.spongycastle.asn1.al:
org.spongycastle.asn1.DERUTF8String -> org.spongycastle.asn1.am:
    byte[] string -> a
    org.spongycastle.asn1.DERUTF8String getInstance(java.lang.Object) -> a
    java.lang.String getString() -> b
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean asn1Equals(org.spongycastle.asn1.ASN1Primitive) -> a
    boolean isConstructed() -> a
    int encodedLength() -> d
    void encode(org.spongycastle.asn1.ASN1OutputStream) -> a
org.spongycastle.asn1.DERUniversalString -> org.spongycastle.asn1.an:
    char[] table -> a
    byte[] string -> b
    java.lang.String getString() -> b
    java.lang.String toString() -> toString
    byte[] getOctets() -> c
    boolean isConstructed() -> a
    int encodedLength() -> d
    void encode(org.spongycastle.asn1.ASN1OutputStream) -> a
    boolean asn1Equals(org.spongycastle.asn1.ASN1Primitive) -> a
    int hashCode() -> hashCode
org.spongycastle.asn1.DERVideotexString -> org.spongycastle.asn1.ao:
    byte[] string -> a
    boolean isConstructed() -> a
    int encodedLength() -> d
    void encode(org.spongycastle.asn1.ASN1OutputStream) -> a
    int hashCode() -> hashCode
    boolean asn1Equals(org.spongycastle.asn1.ASN1Primitive) -> a
    java.lang.String getString() -> b
org.spongycastle.asn1.DERVisibleString -> org.spongycastle.asn1.ap:
    byte[] string -> a
    java.lang.String getString() -> b
    java.lang.String toString() -> toString
    boolean isConstructed() -> a
    int encodedLength() -> d
    void encode(org.spongycastle.asn1.ASN1OutputStream) -> a
    boolean asn1Equals(org.spongycastle.asn1.ASN1Primitive) -> a
    int hashCode() -> hashCode
org.spongycastle.asn1.DLBitString -> org.spongycastle.asn1.aq:
    boolean isConstructed() -> a
    int encodedLength() -> d
    void encode(org.spongycastle.asn1.ASN1OutputStream) -> a
org.spongycastle.asn1.DLOutputStream -> org.spongycastle.asn1.ar:
    void writeObject(org.spongycastle.asn1.ASN1Encodable) -> a
org.spongycastle.asn1.DLSequence -> org.spongycastle.asn1.as:
    int bodyLength -> b
    int getBodyLength() -> g
    int encodedLength() -> d
    void encode(org.spongycastle.asn1.ASN1OutputStream) -> a
org.spongycastle.asn1.DLSet -> org.spongycastle.asn1.at:
    int bodyLength -> a
    int getBodyLength() -> b
    int encodedLength() -> d
    void encode(org.spongycastle.asn1.ASN1OutputStream) -> a
org.spongycastle.asn1.DLTaggedObject -> org.spongycastle.asn1.au:
    byte[] ZERO_BYTES -> e
    boolean isConstructed() -> a
    int encodedLength() -> d
    void encode(org.spongycastle.asn1.ASN1OutputStream) -> a
org.spongycastle.asn1.DefiniteLengthInputStream -> org.spongycastle.asn1.av:
    byte[] EMPTY_BYTES -> b
    int _originalLength -> c
    int _remaining -> d
    int getRemaining() -> a
    int read() -> read
    int read(byte[],int,int) -> read
    byte[] toByteArray() -> b
org.spongycastle.asn1.InMemoryRepresentable -> org.spongycastle.asn1.aw:
    org.spongycastle.asn1.ASN1Primitive getLoadedObject() -> getLoadedObject
org.spongycastle.asn1.IndefiniteLengthInputStream -> org.spongycastle.asn1.ax:
    int _b1 -> b
    int _b2 -> c
    boolean _eofReached -> d
    boolean _eofOn00 -> e
    void setEofOn00(boolean) -> a
    boolean checkForEof() -> b
    int read(byte[],int,int) -> read
    int read() -> read
org.spongycastle.asn1.LazyConstructionEnumeration -> org.spongycastle.asn1.ay:
    org.spongycastle.asn1.ASN1InputStream aIn -> a
    java.lang.Object nextObj -> b
    boolean hasMoreElements() -> hasMoreElements
    java.lang.Object nextElement() -> nextElement
    java.lang.Object readObject() -> a
org.spongycastle.asn1.LazyEncodedSequence -> org.spongycastle.asn1.az:
    byte[] encoded -> b
    void parse() -> g
    org.spongycastle.asn1.ASN1Encodable getObjectAt(int) -> a
    java.util.Enumeration getObjects() -> c
    int size() -> f
    org.spongycastle.asn1.ASN1Primitive toDERObject() -> h
    org.spongycastle.asn1.ASN1Primitive toDLObject() -> i
    int encodedLength() -> d
    void encode(org.spongycastle.asn1.ASN1OutputStream) -> a
org.spongycastle.asn1.LimitedInputStream -> org.spongycastle.asn1.aA:
    java.io.InputStream _in -> a
    int _limit -> b
    int getRemaining() -> a
    void setParentEofDetect(boolean) -> b
org.spongycastle.asn1.OIDTokenizer -> org.spongycastle.asn1.aB:
    java.lang.String oid -> a
    int index -> b
    boolean hasMoreTokens() -> a
    java.lang.String nextToken() -> b
org.spongycastle.asn1.StreamUtil -> org.spongycastle.asn1.aC:
    long MAX_MEMORY -> a
    int findLimit(java.io.InputStream) -> a
    int calculateBodyLength(int) -> a
    int calculateTagLength(int) -> b
org.spongycastle.asn1.anssi.ANSSINamedCurves -> org.spongycastle.asn1.a.a:
    org.spongycastle.asn1.x9.X9ECParametersHolder FRP256v1 -> a
    java.util.Hashtable objIds -> b
    java.util.Hashtable curves -> c
    java.util.Hashtable names -> d
    org.spongycastle.math.ec.ECCurve configureCurve(org.spongycastle.math.ec.ECCurve) -> b
    java.math.BigInteger fromHex(java.lang.String) -> d
    void defineCurve(java.lang.String,org.spongycastle.asn1.ASN1ObjectIdentifier,org.spongycastle.asn1.x9.X9ECParametersHolder) -> a
    org.spongycastle.asn1.x9.X9ECParameters getByName(java.lang.String) -> a
    org.spongycastle.asn1.x9.X9ECParameters getByOID(org.spongycastle.asn1.ASN1ObjectIdentifier) -> a
    org.spongycastle.asn1.ASN1ObjectIdentifier getOID(java.lang.String) -> b
    java.util.Enumeration getNames() -> a
    java.math.BigInteger access$000(java.lang.String) -> c
    org.spongycastle.math.ec.ECCurve access$100(org.spongycastle.math.ec.ECCurve) -> a
org.spongycastle.asn1.anssi.ANSSINamedCurves$1 -> org.spongycastle.asn1.a.b:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.asn1.anssi.ANSSIObjectIdentifiers -> org.spongycastle.asn1.a.c:
    org.spongycastle.asn1.ASN1ObjectIdentifier FRP256v1 -> a
org.spongycastle.asn1.bsi.BSIObjectIdentifiers -> org.spongycastle.asn1.b.a:
    org.spongycastle.asn1.ASN1ObjectIdentifier bsi_de -> a
    org.spongycastle.asn1.ASN1ObjectIdentifier id_ecc -> b
    org.spongycastle.asn1.ASN1ObjectIdentifier ecdsa_plain_signatures -> c
    org.spongycastle.asn1.ASN1ObjectIdentifier ecdsa_plain_SHA1 -> d
    org.spongycastle.asn1.ASN1ObjectIdentifier ecdsa_plain_SHA224 -> e
    org.spongycastle.asn1.ASN1ObjectIdentifier ecdsa_plain_SHA256 -> f
    org.spongycastle.asn1.ASN1ObjectIdentifier ecdsa_plain_SHA384 -> g
    org.spongycastle.asn1.ASN1ObjectIdentifier ecdsa_plain_SHA512 -> h
    org.spongycastle.asn1.ASN1ObjectIdentifier ecdsa_plain_RIPEMD160 -> i
org.spongycastle.asn1.cmp.PKIFailureInfo -> org.spongycastle.asn1.c.a:
    java.lang.String toString() -> toString
org.spongycastle.asn1.cmp.PKIFreeText -> org.spongycastle.asn1.c.b:
    org.spongycastle.asn1.ASN1Sequence strings -> a
    org.spongycastle.asn1.cmp.PKIFreeText getInstance(java.lang.Object) -> a
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.cmp.PKIStatusInfo -> org.spongycastle.asn1.c.c:
    org.spongycastle.asn1.ASN1Integer status -> a
    org.spongycastle.asn1.cmp.PKIFreeText statusString -> b
    org.spongycastle.asn1.DERBitString failInfo -> c
    org.spongycastle.asn1.cmp.PKIStatusInfo getInstance(java.lang.Object) -> a
    java.math.BigInteger getStatus() -> a
    org.spongycastle.asn1.DERBitString getFailInfo() -> b
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.cms.Attribute -> org.spongycastle.asn1.cms.a:
    org.spongycastle.asn1.ASN1ObjectIdentifier attrType -> a
    org.spongycastle.asn1.ASN1Set attrValues -> b
    org.spongycastle.asn1.cms.Attribute getInstance(java.lang.Object) -> a
    org.spongycastle.asn1.ASN1ObjectIdentifier getAttrType() -> a
    org.spongycastle.asn1.ASN1Set getAttrValues() -> b
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.cms.AttributeTable -> org.spongycastle.asn1.cms.AttributeTable:
    java.util.Hashtable attributes -> a
    void addAttribute(org.spongycastle.asn1.ASN1ObjectIdentifier,org.spongycastle.asn1.cms.Attribute) -> a
    org.spongycastle.asn1.cms.Attribute get(org.spongycastle.asn1.ASN1ObjectIdentifier) -> get
    org.spongycastle.asn1.ASN1EncodableVector getAll(org.spongycastle.asn1.ASN1ObjectIdentifier) -> getAll
    int size() -> size
    java.util.Hashtable toHashtable() -> toHashtable
    org.spongycastle.asn1.ASN1EncodableVector toASN1EncodableVector() -> toASN1EncodableVector
    org.spongycastle.asn1.cms.Attributes toASN1Structure() -> toASN1Structure
    java.util.Hashtable copyTable(java.util.Hashtable) -> a
    org.spongycastle.asn1.cms.AttributeTable add(org.spongycastle.asn1.ASN1ObjectIdentifier,org.spongycastle.asn1.ASN1Encodable) -> add
    org.spongycastle.asn1.cms.AttributeTable remove(org.spongycastle.asn1.ASN1ObjectIdentifier) -> remove
org.spongycastle.asn1.cms.Attributes -> org.spongycastle.asn1.cms.b:
    org.spongycastle.asn1.ASN1Set attributes -> a
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.cms.AuthEnvelopedData -> org.spongycastle.asn1.cms.c:
    org.spongycastle.asn1.ASN1Integer version -> a
    org.spongycastle.asn1.cms.OriginatorInfo originatorInfo -> b
    org.spongycastle.asn1.ASN1Set recipientInfos -> c
    org.spongycastle.asn1.cms.EncryptedContentInfo authEncryptedContentInfo -> d
    org.spongycastle.asn1.ASN1Set authAttrs -> e
    org.spongycastle.asn1.ASN1OctetString mac -> f
    org.spongycastle.asn1.ASN1Set unauthAttrs -> g
    org.spongycastle.asn1.cms.AuthEnvelopedData getInstance(java.lang.Object) -> a
    org.spongycastle.asn1.cms.OriginatorInfo getOriginatorInfo() -> a
    org.spongycastle.asn1.ASN1Set getRecipientInfos() -> b
    org.spongycastle.asn1.cms.EncryptedContentInfo getAuthEncryptedContentInfo() -> c
    org.spongycastle.asn1.ASN1Set getAuthAttrs() -> d
    org.spongycastle.asn1.ASN1OctetString getMac() -> e
    org.spongycastle.asn1.ASN1Set getUnauthAttrs() -> f
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.cms.AuthenticatedData -> org.spongycastle.asn1.cms.d:
    org.spongycastle.asn1.ASN1Integer version -> a
    org.spongycastle.asn1.cms.OriginatorInfo originatorInfo -> b
    org.spongycastle.asn1.ASN1Set recipientInfos -> c
    org.spongycastle.asn1.x509.AlgorithmIdentifier macAlgorithm -> d
    org.spongycastle.asn1.x509.AlgorithmIdentifier digestAlgorithm -> e
    org.spongycastle.asn1.cms.ContentInfo encapsulatedContentInfo -> f
    org.spongycastle.asn1.ASN1Set authAttrs -> g
    org.spongycastle.asn1.ASN1OctetString mac -> h
    org.spongycastle.asn1.ASN1Set unauthAttrs -> i
    org.spongycastle.asn1.cms.AuthenticatedData getInstance(java.lang.Object) -> a
    org.spongycastle.asn1.ASN1Set getRecipientInfos() -> a
    org.spongycastle.asn1.cms.ContentInfo getEncapsulatedContentInfo() -> b
    org.spongycastle.asn1.ASN1Set getAuthAttrs() -> c
    org.spongycastle.asn1.ASN1OctetString getMac() -> d
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.cms.CCMParameters -> org.spongycastle.asn1.cms.e:
    byte[] nonce -> a
    int icvLen -> b
    org.spongycastle.asn1.cms.CCMParameters getInstance(java.lang.Object) -> a
    byte[] getNonce() -> a
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.cms.CMSAttributes -> org.spongycastle.asn1.cms.f:
    org.spongycastle.asn1.ASN1ObjectIdentifier contentType -> a
    org.spongycastle.asn1.ASN1ObjectIdentifier messageDigest -> b
    org.spongycastle.asn1.ASN1ObjectIdentifier signingTime -> c
    org.spongycastle.asn1.ASN1ObjectIdentifier counterSignature -> d
    org.spongycastle.asn1.ASN1ObjectIdentifier contentHint -> e
    org.spongycastle.asn1.ASN1ObjectIdentifier cmsAlgorithmProtect -> f
org.spongycastle.asn1.cms.CMSObjectIdentifiers -> org.spongycastle.asn1.cms.g:
    org.spongycastle.asn1.ASN1ObjectIdentifier data -> a
    org.spongycastle.asn1.ASN1ObjectIdentifier signedData -> b
    org.spongycastle.asn1.ASN1ObjectIdentifier envelopedData -> c
    org.spongycastle.asn1.ASN1ObjectIdentifier signedAndEnvelopedData -> d
    org.spongycastle.asn1.ASN1ObjectIdentifier digestedData -> e
    org.spongycastle.asn1.ASN1ObjectIdentifier encryptedData -> f
    org.spongycastle.asn1.ASN1ObjectIdentifier authenticatedData -> g
    org.spongycastle.asn1.ASN1ObjectIdentifier compressedData -> h
    org.spongycastle.asn1.ASN1ObjectIdentifier authEnvelopedData -> i
    org.spongycastle.asn1.ASN1ObjectIdentifier timestampedData -> j
    org.spongycastle.asn1.ASN1ObjectIdentifier id_ri -> k
    org.spongycastle.asn1.ASN1ObjectIdentifier id_ri_ocsp_response -> l
    org.spongycastle.asn1.ASN1ObjectIdentifier id_ri_scvp -> m
org.spongycastle.asn1.cms.CompressedData -> org.spongycastle.asn1.cms.h:
    org.spongycastle.asn1.ASN1Integer version -> a
    org.spongycastle.asn1.x509.AlgorithmIdentifier compressionAlgorithm -> b
    org.spongycastle.asn1.cms.ContentInfo encapContentInfo -> c
    org.spongycastle.asn1.cms.CompressedData getInstance(java.lang.Object) -> a
    org.spongycastle.asn1.cms.ContentInfo getEncapContentInfo() -> a
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.cms.ContentInfo -> org.spongycastle.asn1.cms.i:
    org.spongycastle.asn1.ASN1ObjectIdentifier contentType -> n
    org.spongycastle.asn1.ASN1Encodable content -> o
    org.spongycastle.asn1.cms.ContentInfo getInstance(java.lang.Object) -> a
    org.spongycastle.asn1.ASN1ObjectIdentifier getContentType() -> a
    org.spongycastle.asn1.ASN1Encodable getContent() -> b
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.cms.EncryptedContentInfo -> org.spongycastle.asn1.cms.j:
    org.spongycastle.asn1.ASN1ObjectIdentifier contentType -> a
    org.spongycastle.asn1.x509.AlgorithmIdentifier contentEncryptionAlgorithm -> b
    org.spongycastle.asn1.ASN1OctetString encryptedContent -> c
    org.spongycastle.asn1.cms.EncryptedContentInfo getInstance(java.lang.Object) -> a
    org.spongycastle.asn1.ASN1ObjectIdentifier getContentType() -> a
    org.spongycastle.asn1.x509.AlgorithmIdentifier getContentEncryptionAlgorithm() -> b
    org.spongycastle.asn1.ASN1OctetString getEncryptedContent() -> c
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.cms.EncryptedData -> org.spongycastle.asn1.cms.k:
    org.spongycastle.asn1.ASN1Integer version -> a
    org.spongycastle.asn1.cms.EncryptedContentInfo encryptedContentInfo -> b
    org.spongycastle.asn1.ASN1Set unprotectedAttrs -> c
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.cms.EnvelopedData -> org.spongycastle.asn1.cms.l:
    org.spongycastle.asn1.ASN1Integer version -> a
    org.spongycastle.asn1.cms.OriginatorInfo originatorInfo -> b
    org.spongycastle.asn1.ASN1Set recipientInfos -> c
    org.spongycastle.asn1.cms.EncryptedContentInfo encryptedContentInfo -> d
    org.spongycastle.asn1.ASN1Set unprotectedAttrs -> e
    org.spongycastle.asn1.cms.EnvelopedData getInstance(java.lang.Object) -> a
    org.spongycastle.asn1.cms.OriginatorInfo getOriginatorInfo() -> a
    org.spongycastle.asn1.ASN1Set getRecipientInfos() -> b
    org.spongycastle.asn1.cms.EncryptedContentInfo getEncryptedContentInfo() -> c
    org.spongycastle.asn1.ASN1Set getUnprotectedAttrs() -> d
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
    int calculateVersion(org.spongycastle.asn1.cms.OriginatorInfo,org.spongycastle.asn1.ASN1Set,org.spongycastle.asn1.ASN1Set) -> a
org.spongycastle.asn1.cms.GCMParameters -> org.spongycastle.asn1.cms.m:
    byte[] nonce -> a
    int icvLen -> b
    org.spongycastle.asn1.cms.GCMParameters getInstance(java.lang.Object) -> a
    byte[] getNonce() -> a
    int getIcvLen() -> b
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.cms.IssuerAndSerialNumber -> org.spongycastle.asn1.cms.n:
    org.spongycastle.asn1.x500.X500Name name -> a
    org.spongycastle.asn1.ASN1Integer serialNumber -> b
    org.spongycastle.asn1.cms.IssuerAndSerialNumber getInstance(java.lang.Object) -> a
    org.spongycastle.asn1.x500.X500Name getName() -> a
    org.spongycastle.asn1.ASN1Integer getSerialNumber() -> b
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.cms.KEKIdentifier -> org.spongycastle.asn1.cms.o:
    org.spongycastle.asn1.ASN1OctetString keyIdentifier -> a
    org.spongycastle.asn1.ASN1GeneralizedTime date -> b
    org.spongycastle.asn1.cms.OtherKeyAttribute other -> c
    org.spongycastle.asn1.cms.KEKIdentifier getInstance(java.lang.Object) -> a
    org.spongycastle.asn1.ASN1OctetString getKeyIdentifier() -> a
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.cms.KEKRecipientInfo -> org.spongycastle.asn1.cms.p:
    org.spongycastle.asn1.ASN1Integer version -> a
    org.spongycastle.asn1.cms.KEKIdentifier kekid -> b
    org.spongycastle.asn1.x509.AlgorithmIdentifier keyEncryptionAlgorithm -> c
    org.spongycastle.asn1.ASN1OctetString encryptedKey -> d
    org.spongycastle.asn1.cms.KEKRecipientInfo getInstance(org.spongycastle.asn1.ASN1TaggedObject,boolean) -> a
    org.spongycastle.asn1.cms.KEKRecipientInfo getInstance(java.lang.Object) -> a
    org.spongycastle.asn1.ASN1Integer getVersion() -> a
    org.spongycastle.asn1.cms.KEKIdentifier getKekid() -> b
    org.spongycastle.asn1.x509.AlgorithmIdentifier getKeyEncryptionAlgorithm() -> c
    org.spongycastle.asn1.ASN1OctetString getEncryptedKey() -> d
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.cms.KeyAgreeRecipientIdentifier -> org.spongycastle.asn1.cms.q:
    org.spongycastle.asn1.cms.IssuerAndSerialNumber issuerSerial -> a
    org.spongycastle.asn1.cms.RecipientKeyIdentifier rKeyID -> b
    org.spongycastle.asn1.cms.KeyAgreeRecipientIdentifier getInstance(java.lang.Object) -> a
    org.spongycastle.asn1.cms.IssuerAndSerialNumber getIssuerAndSerialNumber() -> a
    org.spongycastle.asn1.cms.RecipientKeyIdentifier getRKeyID() -> b
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.cms.KeyAgreeRecipientInfo -> org.spongycastle.asn1.cms.r:
    org.spongycastle.asn1.ASN1Integer version -> a
    org.spongycastle.asn1.cms.OriginatorIdentifierOrKey originator -> b
    org.spongycastle.asn1.ASN1OctetString ukm -> c
    org.spongycastle.asn1.x509.AlgorithmIdentifier keyEncryptionAlgorithm -> d
    org.spongycastle.asn1.ASN1Sequence recipientEncryptedKeys -> e
    org.spongycastle.asn1.cms.KeyAgreeRecipientInfo getInstance(org.spongycastle.asn1.ASN1TaggedObject,boolean) -> a
    org.spongycastle.asn1.cms.KeyAgreeRecipientInfo getInstance(java.lang.Object) -> a
    org.spongycastle.asn1.ASN1Integer getVersion() -> a
    org.spongycastle.asn1.cms.OriginatorIdentifierOrKey getOriginator() -> b
    org.spongycastle.asn1.ASN1OctetString getUserKeyingMaterial() -> c
    org.spongycastle.asn1.x509.AlgorithmIdentifier getKeyEncryptionAlgorithm() -> d
    org.spongycastle.asn1.ASN1Sequence getRecipientEncryptedKeys() -> e
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.cms.KeyTransRecipientInfo -> org.spongycastle.asn1.cms.s:
    org.spongycastle.asn1.ASN1Integer version -> a
    org.spongycastle.asn1.cms.RecipientIdentifier rid -> b
    org.spongycastle.asn1.x509.AlgorithmIdentifier keyEncryptionAlgorithm -> c
    org.spongycastle.asn1.ASN1OctetString encryptedKey -> d
    org.spongycastle.asn1.cms.KeyTransRecipientInfo getInstance(java.lang.Object) -> a
    org.spongycastle.asn1.ASN1Integer getVersion() -> a
    org.spongycastle.asn1.cms.RecipientIdentifier getRecipientIdentifier() -> b
    org.spongycastle.asn1.x509.AlgorithmIdentifier getKeyEncryptionAlgorithm() -> c
    org.spongycastle.asn1.ASN1OctetString getEncryptedKey() -> d
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.cms.OriginatorIdentifierOrKey -> org.spongycastle.asn1.cms.t:
    org.spongycastle.asn1.ASN1Encodable id -> a
    org.spongycastle.asn1.cms.OriginatorIdentifierOrKey getInstance(org.spongycastle.asn1.ASN1TaggedObject,boolean) -> a
    org.spongycastle.asn1.cms.OriginatorIdentifierOrKey getInstance(java.lang.Object) -> a
    org.spongycastle.asn1.cms.IssuerAndSerialNumber getIssuerAndSerialNumber() -> a
    org.spongycastle.asn1.x509.SubjectKeyIdentifier getSubjectKeyIdentifier() -> b
    org.spongycastle.asn1.cms.OriginatorPublicKey getOriginatorKey() -> c
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.cms.OriginatorInfo -> org.spongycastle.asn1.cms.u:
    org.spongycastle.asn1.ASN1Set certs -> a
    org.spongycastle.asn1.ASN1Set crls -> b
    org.spongycastle.asn1.cms.OriginatorInfo getInstance(org.spongycastle.asn1.ASN1TaggedObject,boolean) -> a
    org.spongycastle.asn1.cms.OriginatorInfo getInstance(java.lang.Object) -> a
    org.spongycastle.asn1.ASN1Set getCertificates() -> a
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.cms.OriginatorPublicKey -> org.spongycastle.asn1.cms.v:
    org.spongycastle.asn1.x509.AlgorithmIdentifier algorithm -> a
    org.spongycastle.asn1.DERBitString publicKey -> b
    org.spongycastle.asn1.cms.OriginatorPublicKey getInstance(org.spongycastle.asn1.ASN1TaggedObject,boolean) -> a
    org.spongycastle.asn1.cms.OriginatorPublicKey getInstance(java.lang.Object) -> a
    org.spongycastle.asn1.DERBitString getPublicKey() -> a
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.cms.OtherKeyAttribute -> org.spongycastle.asn1.cms.w:
    org.spongycastle.asn1.ASN1ObjectIdentifier keyAttrId -> a
    org.spongycastle.asn1.ASN1Encodable keyAttr -> b
    org.spongycastle.asn1.cms.OtherKeyAttribute getInstance(java.lang.Object) -> a
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.cms.OtherRecipientInfo -> org.spongycastle.asn1.cms.x:
    org.spongycastle.asn1.ASN1ObjectIdentifier oriType -> a
    org.spongycastle.asn1.ASN1Encodable oriValue -> b
    org.spongycastle.asn1.cms.OtherRecipientInfo getInstance(org.spongycastle.asn1.ASN1TaggedObject,boolean) -> a
    org.spongycastle.asn1.cms.OtherRecipientInfo getInstance(java.lang.Object) -> a
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.cms.PasswordRecipientInfo -> org.spongycastle.asn1.cms.y:
    org.spongycastle.asn1.ASN1Integer version -> a
    org.spongycastle.asn1.x509.AlgorithmIdentifier keyDerivationAlgorithm -> b
    org.spongycastle.asn1.x509.AlgorithmIdentifier keyEncryptionAlgorithm -> c
    org.spongycastle.asn1.ASN1OctetString encryptedKey -> d
    org.spongycastle.asn1.cms.PasswordRecipientInfo getInstance(org.spongycastle.asn1.ASN1TaggedObject,boolean) -> a
    org.spongycastle.asn1.cms.PasswordRecipientInfo getInstance(java.lang.Object) -> a
    org.spongycastle.asn1.ASN1Integer getVersion() -> a
    org.spongycastle.asn1.x509.AlgorithmIdentifier getKeyDerivationAlgorithm() -> b
    org.spongycastle.asn1.x509.AlgorithmIdentifier getKeyEncryptionAlgorithm() -> c
    org.spongycastle.asn1.ASN1OctetString getEncryptedKey() -> d
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.cms.RecipientEncryptedKey -> org.spongycastle.asn1.cms.z:
    org.spongycastle.asn1.cms.KeyAgreeRecipientIdentifier identifier -> a
    org.spongycastle.asn1.ASN1OctetString encryptedKey -> b
    org.spongycastle.asn1.cms.RecipientEncryptedKey getInstance(java.lang.Object) -> a
    org.spongycastle.asn1.cms.KeyAgreeRecipientIdentifier getIdentifier() -> a
    org.spongycastle.asn1.ASN1OctetString getEncryptedKey() -> b
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.cms.RecipientIdentifier -> org.spongycastle.asn1.cms.A:
    org.spongycastle.asn1.ASN1Encodable id -> a
    org.spongycastle.asn1.cms.RecipientIdentifier getInstance(java.lang.Object) -> a
    boolean isTagged() -> a
    org.spongycastle.asn1.ASN1Encodable getId() -> b
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.cms.RecipientInfo -> org.spongycastle.asn1.cms.B:
    org.spongycastle.asn1.ASN1Encodable info -> a
    org.spongycastle.asn1.cms.RecipientInfo getInstance(java.lang.Object) -> a
    org.spongycastle.asn1.ASN1Integer getVersion() -> a
    org.spongycastle.asn1.ASN1Encodable getInfo() -> b
    org.spongycastle.asn1.cms.KEKRecipientInfo getKEKInfo(org.spongycastle.asn1.ASN1TaggedObject) -> a
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.cms.RecipientKeyIdentifier -> org.spongycastle.asn1.cms.C:
    org.spongycastle.asn1.ASN1OctetString subjectKeyIdentifier -> a
    org.spongycastle.asn1.ASN1GeneralizedTime date -> b
    org.spongycastle.asn1.cms.OtherKeyAttribute other -> c
    org.spongycastle.asn1.cms.RecipientKeyIdentifier getInstance(org.spongycastle.asn1.ASN1TaggedObject,boolean) -> a
    org.spongycastle.asn1.cms.RecipientKeyIdentifier getInstance(java.lang.Object) -> a
    org.spongycastle.asn1.ASN1OctetString getSubjectKeyIdentifier() -> a
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.cms.SignedData -> org.spongycastle.asn1.cms.D:
    org.spongycastle.asn1.ASN1Integer VERSION_1 -> a
    org.spongycastle.asn1.ASN1Integer VERSION_3 -> b
    org.spongycastle.asn1.ASN1Integer VERSION_4 -> c
    org.spongycastle.asn1.ASN1Integer VERSION_5 -> d
    org.spongycastle.asn1.ASN1Integer version -> e
    org.spongycastle.asn1.ASN1Set digestAlgorithms -> f
    org.spongycastle.asn1.cms.ContentInfo contentInfo -> g
    org.spongycastle.asn1.ASN1Set certificates -> h
    org.spongycastle.asn1.ASN1Set crls -> i
    org.spongycastle.asn1.ASN1Set signerInfos -> j
    boolean certsBer -> k
    boolean crlsBer -> l
    org.spongycastle.asn1.cms.SignedData getInstance(java.lang.Object) -> a
    org.spongycastle.asn1.ASN1Integer calculateVersion(org.spongycastle.asn1.ASN1ObjectIdentifier,org.spongycastle.asn1.ASN1Set,org.spongycastle.asn1.ASN1Set,org.spongycastle.asn1.ASN1Set) -> a
    boolean checkForVersion3(org.spongycastle.asn1.ASN1Set) -> a
    org.spongycastle.asn1.ASN1Set getDigestAlgorithms() -> a
    org.spongycastle.asn1.cms.ContentInfo getEncapContentInfo() -> b
    org.spongycastle.asn1.ASN1Set getCertificates() -> c
    org.spongycastle.asn1.ASN1Set getSignerInfos() -> d
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.cms.SignerIdentifier -> org.spongycastle.asn1.cms.E:
    org.spongycastle.asn1.ASN1Encodable id -> a
    org.spongycastle.asn1.cms.SignerIdentifier getInstance(java.lang.Object) -> a
    boolean isTagged() -> a
    org.spongycastle.asn1.ASN1Encodable getId() -> b
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.cms.SignerInfo -> org.spongycastle.asn1.cms.F:
    org.spongycastle.asn1.ASN1Integer version -> a
    org.spongycastle.asn1.cms.SignerIdentifier sid -> b
    org.spongycastle.asn1.x509.AlgorithmIdentifier digAlgorithm -> c
    org.spongycastle.asn1.ASN1Set authenticatedAttributes -> d
    org.spongycastle.asn1.x509.AlgorithmIdentifier digEncryptionAlgorithm -> e
    org.spongycastle.asn1.ASN1OctetString encryptedDigest -> f
    org.spongycastle.asn1.ASN1Set unauthenticatedAttributes -> g
    org.spongycastle.asn1.cms.SignerInfo getInstance(java.lang.Object) -> a
    org.spongycastle.asn1.ASN1Integer getVersion() -> a
    org.spongycastle.asn1.cms.SignerIdentifier getSID() -> b
    org.spongycastle.asn1.ASN1Set getAuthenticatedAttributes() -> c
    org.spongycastle.asn1.x509.AlgorithmIdentifier getDigestAlgorithm() -> d
    org.spongycastle.asn1.ASN1OctetString getEncryptedDigest() -> e
    org.spongycastle.asn1.x509.AlgorithmIdentifier getDigestEncryptionAlgorithm() -> f
    org.spongycastle.asn1.ASN1Set getUnauthenticatedAttributes() -> g
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.cryptopro.CryptoProObjectIdentifiers -> org.spongycastle.asn1.d.a:
    org.spongycastle.asn1.ASN1ObjectIdentifier GOST_id -> a
    org.spongycastle.asn1.ASN1ObjectIdentifier gostR3411 -> b
    org.spongycastle.asn1.ASN1ObjectIdentifier gostR3411Hmac -> c
    org.spongycastle.asn1.ASN1ObjectIdentifier gostR28147_gcfb -> d
    org.spongycastle.asn1.ASN1ObjectIdentifier id_Gost28147_89_CryptoPro_A_ParamSet -> e
    org.spongycastle.asn1.ASN1ObjectIdentifier id_Gost28147_89_CryptoPro_B_ParamSet -> f
    org.spongycastle.asn1.ASN1ObjectIdentifier id_Gost28147_89_CryptoPro_C_ParamSet -> g
    org.spongycastle.asn1.ASN1ObjectIdentifier id_Gost28147_89_CryptoPro_D_ParamSet -> h
    org.spongycastle.asn1.ASN1ObjectIdentifier gostR3410_94 -> i
    org.spongycastle.asn1.ASN1ObjectIdentifier gostR3410_2001 -> j
    org.spongycastle.asn1.ASN1ObjectIdentifier gostR3411_94_with_gostR3410_94 -> k
    org.spongycastle.asn1.ASN1ObjectIdentifier gostR3411_94_with_gostR3410_2001 -> l
    org.spongycastle.asn1.ASN1ObjectIdentifier gostR3411_94_CryptoProParamSet -> m
    org.spongycastle.asn1.ASN1ObjectIdentifier gostR3410_94_CryptoPro_A -> n
    org.spongycastle.asn1.ASN1ObjectIdentifier gostR3410_94_CryptoPro_B -> o
    org.spongycastle.asn1.ASN1ObjectIdentifier gostR3410_94_CryptoPro_C -> p
    org.spongycastle.asn1.ASN1ObjectIdentifier gostR3410_94_CryptoPro_D -> q
    org.spongycastle.asn1.ASN1ObjectIdentifier gostR3410_94_CryptoPro_XchA -> r
    org.spongycastle.asn1.ASN1ObjectIdentifier gostR3410_94_CryptoPro_XchB -> s
    org.spongycastle.asn1.ASN1ObjectIdentifier gostR3410_94_CryptoPro_XchC -> t
    org.spongycastle.asn1.ASN1ObjectIdentifier gostR3410_2001_CryptoPro_A -> u
    org.spongycastle.asn1.ASN1ObjectIdentifier gostR3410_2001_CryptoPro_B -> v
    org.spongycastle.asn1.ASN1ObjectIdentifier gostR3410_2001_CryptoPro_C -> w
    org.spongycastle.asn1.ASN1ObjectIdentifier gostR3410_2001_CryptoPro_XchA -> x
    org.spongycastle.asn1.ASN1ObjectIdentifier gostR3410_2001_CryptoPro_XchB -> y
    org.spongycastle.asn1.ASN1ObjectIdentifier gost_ElSgDH3410_default -> z
    org.spongycastle.asn1.ASN1ObjectIdentifier gost_ElSgDH3410_1 -> A
org.spongycastle.asn1.cryptopro.ECGOST3410NamedCurves -> org.spongycastle.asn1.d.b:
    java.util.Hashtable objIds -> a
    java.util.Hashtable params -> b
    java.util.Hashtable names -> c
    org.spongycastle.crypto.params.ECDomainParameters getByOID(org.spongycastle.asn1.ASN1ObjectIdentifier) -> a
    org.spongycastle.crypto.params.ECDomainParameters getByName(java.lang.String) -> a
    java.lang.String getName(org.spongycastle.asn1.ASN1ObjectIdentifier) -> b
    org.spongycastle.asn1.ASN1ObjectIdentifier getOID(java.lang.String) -> b
org.spongycastle.asn1.cryptopro.GOST28147Parameters -> org.spongycastle.asn1.d.c:
    org.spongycastle.asn1.ASN1OctetString iv -> a
    org.spongycastle.asn1.ASN1ObjectIdentifier paramSet -> b
    org.spongycastle.asn1.cryptopro.GOST28147Parameters getInstance(java.lang.Object) -> a
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
    org.spongycastle.asn1.ASN1ObjectIdentifier getEncryptionParamSet() -> a
    byte[] getIV() -> b
org.spongycastle.asn1.cryptopro.GOST3410NamedParameters -> org.spongycastle.asn1.d.d:
    java.util.Hashtable objIds -> a
    java.util.Hashtable params -> b
    java.util.Hashtable names -> c
    org.spongycastle.asn1.cryptopro.GOST3410ParamSetParameters cryptoProA -> d
    org.spongycastle.asn1.cryptopro.GOST3410ParamSetParameters cryptoProB -> e
    org.spongycastle.asn1.cryptopro.GOST3410ParamSetParameters cryptoProXchA -> f
    org.spongycastle.asn1.cryptopro.GOST3410ParamSetParameters getByOID(org.spongycastle.asn1.ASN1ObjectIdentifier) -> a
    org.spongycastle.asn1.ASN1ObjectIdentifier getOID(java.lang.String) -> a
org.spongycastle.asn1.cryptopro.GOST3410ParamSetParameters -> org.spongycastle.asn1.d.e:
    int keySize -> a
    org.spongycastle.asn1.ASN1Integer p -> b
    org.spongycastle.asn1.ASN1Integer q -> c
    org.spongycastle.asn1.ASN1Integer a -> d
    java.math.BigInteger getP() -> a
    java.math.BigInteger getQ() -> b
    java.math.BigInteger getA() -> c
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.cryptopro.GOST3410PublicKeyAlgParameters -> org.spongycastle.asn1.d.f:
    org.spongycastle.asn1.ASN1ObjectIdentifier publicKeyParamSet -> a
    org.spongycastle.asn1.ASN1ObjectIdentifier digestParamSet -> b
    org.spongycastle.asn1.ASN1ObjectIdentifier encryptionParamSet -> c
    org.spongycastle.asn1.cryptopro.GOST3410PublicKeyAlgParameters getInstance(java.lang.Object) -> a
    org.spongycastle.asn1.ASN1ObjectIdentifier getPublicKeyParamSet() -> a
    org.spongycastle.asn1.ASN1ObjectIdentifier getDigestParamSet() -> b
    org.spongycastle.asn1.ASN1ObjectIdentifier getEncryptionParamSet() -> c
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.eac.EACObjectIdentifiers -> org.spongycastle.asn1.e.a:
    org.spongycastle.asn1.ASN1ObjectIdentifier bsi_de -> a
    org.spongycastle.asn1.ASN1ObjectIdentifier id_PK -> b
    org.spongycastle.asn1.ASN1ObjectIdentifier id_PK_DH -> c
    org.spongycastle.asn1.ASN1ObjectIdentifier id_PK_ECDH -> d
    org.spongycastle.asn1.ASN1ObjectIdentifier id_CA -> e
    org.spongycastle.asn1.ASN1ObjectIdentifier id_CA_DH -> f
    org.spongycastle.asn1.ASN1ObjectIdentifier id_CA_DH_3DES_CBC_CBC -> g
    org.spongycastle.asn1.ASN1ObjectIdentifier id_CA_ECDH -> h
    org.spongycastle.asn1.ASN1ObjectIdentifier id_CA_ECDH_3DES_CBC_CBC -> i
    org.spongycastle.asn1.ASN1ObjectIdentifier id_TA -> j
    org.spongycastle.asn1.ASN1ObjectIdentifier id_TA_RSA -> k
    org.spongycastle.asn1.ASN1ObjectIdentifier id_TA_RSA_v1_5_SHA_1 -> l
    org.spongycastle.asn1.ASN1ObjectIdentifier id_TA_RSA_v1_5_SHA_256 -> m
    org.spongycastle.asn1.ASN1ObjectIdentifier id_TA_RSA_PSS_SHA_1 -> n
    org.spongycastle.asn1.ASN1ObjectIdentifier id_TA_RSA_PSS_SHA_256 -> o
    org.spongycastle.asn1.ASN1ObjectIdentifier id_TA_RSA_v1_5_SHA_512 -> p
    org.spongycastle.asn1.ASN1ObjectIdentifier id_TA_RSA_PSS_SHA_512 -> q
    org.spongycastle.asn1.ASN1ObjectIdentifier id_TA_ECDSA -> r
    org.spongycastle.asn1.ASN1ObjectIdentifier id_TA_ECDSA_SHA_1 -> s
    org.spongycastle.asn1.ASN1ObjectIdentifier id_TA_ECDSA_SHA_224 -> t
    org.spongycastle.asn1.ASN1ObjectIdentifier id_TA_ECDSA_SHA_256 -> u
    org.spongycastle.asn1.ASN1ObjectIdentifier id_TA_ECDSA_SHA_384 -> v
    org.spongycastle.asn1.ASN1ObjectIdentifier id_TA_ECDSA_SHA_512 -> w
    org.spongycastle.asn1.ASN1ObjectIdentifier id_EAC_ePassport -> x
org.spongycastle.asn1.esf.CommitmentTypeIdentifier -> org.spongycastle.asn1.f.a:
    org.spongycastle.asn1.ASN1ObjectIdentifier proofOfOrigin -> a
    org.spongycastle.asn1.ASN1ObjectIdentifier proofOfReceipt -> b
    org.spongycastle.asn1.ASN1ObjectIdentifier proofOfDelivery -> c
    org.spongycastle.asn1.ASN1ObjectIdentifier proofOfSender -> d
    org.spongycastle.asn1.ASN1ObjectIdentifier proofOfApproval -> e
    org.spongycastle.asn1.ASN1ObjectIdentifier proofOfCreation -> f
org.spongycastle.asn1.esf.CommitmentTypeIndication -> org.spongycastle.asn1.f.b:
    org.spongycastle.asn1.ASN1ObjectIdentifier commitmentTypeId -> a
    org.spongycastle.asn1.ASN1Sequence commitmentTypeQualifier -> b
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.esf.SignerLocation -> org.spongycastle.asn1.f.c:
    org.spongycastle.asn1.DERUTF8String countryName -> a
    org.spongycastle.asn1.DERUTF8String localityName -> b
    org.spongycastle.asn1.ASN1Sequence postalAddress -> c
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.ess.ContentHints -> org.spongycastle.asn1.g.a:
    org.spongycastle.asn1.DERUTF8String contentDescription -> a
    org.spongycastle.asn1.ASN1ObjectIdentifier contentType -> b
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.ess.ESSCertID -> org.spongycastle.asn1.g.b:
    org.spongycastle.asn1.ASN1OctetString certHash -> a
    org.spongycastle.asn1.x509.IssuerSerial issuerSerial -> b
    org.spongycastle.asn1.ess.ESSCertID getInstance(java.lang.Object) -> a
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.ess.ESSCertIDv2 -> org.spongycastle.asn1.g.c:
    org.spongycastle.asn1.x509.AlgorithmIdentifier hashAlgorithm -> a
    byte[] certHash -> b
    org.spongycastle.asn1.x509.IssuerSerial issuerSerial -> c
    org.spongycastle.asn1.x509.AlgorithmIdentifier DEFAULT_ALG_ID -> d
    org.spongycastle.asn1.ess.ESSCertIDv2 getInstance(java.lang.Object) -> a
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.ess.SigningCertificate -> org.spongycastle.asn1.g.d:
    org.spongycastle.asn1.ASN1Sequence certs -> a
    org.spongycastle.asn1.ASN1Sequence policies -> b
    org.spongycastle.asn1.ess.SigningCertificate getInstance(java.lang.Object) -> a
    org.spongycastle.asn1.ess.ESSCertID[] getCerts() -> a
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.ess.SigningCertificateV2 -> org.spongycastle.asn1.g.e:
    org.spongycastle.asn1.ASN1Sequence certs -> a
    org.spongycastle.asn1.ASN1Sequence policies -> b
    org.spongycastle.asn1.ess.SigningCertificateV2 getInstance(java.lang.Object) -> a
    org.spongycastle.asn1.ess.ESSCertIDv2[] getCerts() -> a
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.kisa.KISAObjectIdentifiers -> org.spongycastle.asn1.h.a:
    org.spongycastle.asn1.ASN1ObjectIdentifier id_seedCBC -> a
    org.spongycastle.asn1.ASN1ObjectIdentifier id_seedMAC -> b
    org.spongycastle.asn1.ASN1ObjectIdentifier pbeWithSHA1AndSEED_CBC -> c
    org.spongycastle.asn1.ASN1ObjectIdentifier id_npki_app_cmsSeed_wrap -> d
    org.spongycastle.asn1.ASN1ObjectIdentifier id_mod_cms_seed -> e
org.spongycastle.asn1.misc.CAST5CBCParameters -> org.spongycastle.asn1.i.a:
    org.spongycastle.asn1.ASN1Integer keyLength -> a
    org.spongycastle.asn1.ASN1OctetString iv -> b
    org.spongycastle.asn1.misc.CAST5CBCParameters getInstance(java.lang.Object) -> a
    byte[] getIV() -> a
    int getKeyLength() -> b
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.misc.IDEACBCPar -> org.spongycastle.asn1.i.b:
    org.spongycastle.asn1.ASN1OctetString iv -> a
    byte[] getIV() -> a
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.misc.MiscObjectIdentifiers -> org.spongycastle.asn1.i.c:
    org.spongycastle.asn1.ASN1ObjectIdentifier netscape -> a
    org.spongycastle.asn1.ASN1ObjectIdentifier netscapeCertType -> b
    org.spongycastle.asn1.ASN1ObjectIdentifier netscapeBaseURL -> c
    org.spongycastle.asn1.ASN1ObjectIdentifier netscapeRevocationURL -> d
    org.spongycastle.asn1.ASN1ObjectIdentifier netscapeCARevocationURL -> e
    org.spongycastle.asn1.ASN1ObjectIdentifier netscapeRenewalURL -> f
    org.spongycastle.asn1.ASN1ObjectIdentifier netscapeCApolicyURL -> g
    org.spongycastle.asn1.ASN1ObjectIdentifier netscapeSSLServerName -> h
    org.spongycastle.asn1.ASN1ObjectIdentifier netscapeCertComment -> i
    org.spongycastle.asn1.ASN1ObjectIdentifier verisign -> j
    org.spongycastle.asn1.ASN1ObjectIdentifier verisignCzagExtension -> k
    org.spongycastle.asn1.ASN1ObjectIdentifier verisignPrivate_6_9 -> l
    org.spongycastle.asn1.ASN1ObjectIdentifier verisignOnSiteJurisdictionHash -> m
    org.spongycastle.asn1.ASN1ObjectIdentifier verisignBitString_6_13 -> n
    org.spongycastle.asn1.ASN1ObjectIdentifier verisignDnbDunsNumber -> o
    org.spongycastle.asn1.ASN1ObjectIdentifier verisignIssStrongCrypto -> p
    org.spongycastle.asn1.ASN1ObjectIdentifier novell -> q
    org.spongycastle.asn1.ASN1ObjectIdentifier novellSecurityAttribs -> r
    org.spongycastle.asn1.ASN1ObjectIdentifier entrust -> s
    org.spongycastle.asn1.ASN1ObjectIdentifier entrustVersionExtension -> t
    org.spongycastle.asn1.ASN1ObjectIdentifier cast5CBC -> u
    org.spongycastle.asn1.ASN1ObjectIdentifier as_sys_sec_alg_ideaCBC -> v
    org.spongycastle.asn1.ASN1ObjectIdentifier cryptlib -> w
    org.spongycastle.asn1.ASN1ObjectIdentifier cryptlib_algorithm -> x
    org.spongycastle.asn1.ASN1ObjectIdentifier cryptlib_algorithm_blowfish_ECB -> y
    org.spongycastle.asn1.ASN1ObjectIdentifier cryptlib_algorithm_blowfish_CBC -> z
    org.spongycastle.asn1.ASN1ObjectIdentifier cryptlib_algorithm_blowfish_CFB -> A
    org.spongycastle.asn1.ASN1ObjectIdentifier cryptlib_algorithm_blowfish_OFB -> B
    org.spongycastle.asn1.ASN1ObjectIdentifier blake2 -> C
    org.spongycastle.asn1.ASN1ObjectIdentifier id_blake2b160 -> D
    org.spongycastle.asn1.ASN1ObjectIdentifier id_blake2b256 -> E
    org.spongycastle.asn1.ASN1ObjectIdentifier id_blake2b384 -> F
    org.spongycastle.asn1.ASN1ObjectIdentifier id_blake2b512 -> G
org.spongycastle.asn1.misc.NetscapeCertType -> org.spongycastle.asn1.i.d:
    java.lang.String toString() -> toString
org.spongycastle.asn1.misc.NetscapeRevocationURL -> org.spongycastle.asn1.i.e:
    java.lang.String toString() -> toString
org.spongycastle.asn1.misc.VerisignCzagExtension -> org.spongycastle.asn1.i.f:
    java.lang.String toString() -> toString
org.spongycastle.asn1.nist.NISTNamedCurves -> org.spongycastle.asn1.j.a:
    java.util.Hashtable objIds -> a
    java.util.Hashtable names -> b
    void defineCurveAlias(java.lang.String,org.spongycastle.asn1.ASN1ObjectIdentifier) -> a
    org.spongycastle.asn1.x9.X9ECParameters getByName(java.lang.String) -> a
    org.spongycastle.asn1.x9.X9ECParameters getByOID(org.spongycastle.asn1.ASN1ObjectIdentifier) -> a
    org.spongycastle.asn1.ASN1ObjectIdentifier getOID(java.lang.String) -> b
    java.lang.String getName(org.spongycastle.asn1.ASN1ObjectIdentifier) -> b
    java.util.Enumeration getNames() -> a
org.spongycastle.asn1.nist.NISTObjectIdentifiers -> org.spongycastle.asn1.j.b:
    org.spongycastle.asn1.ASN1ObjectIdentifier nistAlgorithm -> a
    org.spongycastle.asn1.ASN1ObjectIdentifier hashAlgs -> b
    org.spongycastle.asn1.ASN1ObjectIdentifier id_sha256 -> c
    org.spongycastle.asn1.ASN1ObjectIdentifier id_sha384 -> d
    org.spongycastle.asn1.ASN1ObjectIdentifier id_sha512 -> e
    org.spongycastle.asn1.ASN1ObjectIdentifier id_sha224 -> f
    org.spongycastle.asn1.ASN1ObjectIdentifier id_sha512_224 -> g
    org.spongycastle.asn1.ASN1ObjectIdentifier id_sha512_256 -> h
    org.spongycastle.asn1.ASN1ObjectIdentifier id_sha3_224 -> i
    org.spongycastle.asn1.ASN1ObjectIdentifier id_sha3_256 -> j
    org.spongycastle.asn1.ASN1ObjectIdentifier id_sha3_384 -> k
    org.spongycastle.asn1.ASN1ObjectIdentifier id_sha3_512 -> l
    org.spongycastle.asn1.ASN1ObjectIdentifier id_shake128 -> m
    org.spongycastle.asn1.ASN1ObjectIdentifier id_shake256 -> n
    org.spongycastle.asn1.ASN1ObjectIdentifier aes -> o
    org.spongycastle.asn1.ASN1ObjectIdentifier id_aes128_ECB -> p
    org.spongycastle.asn1.ASN1ObjectIdentifier id_aes128_CBC -> q
    org.spongycastle.asn1.ASN1ObjectIdentifier id_aes128_OFB -> r
    org.spongycastle.asn1.ASN1ObjectIdentifier id_aes128_CFB -> s
    org.spongycastle.asn1.ASN1ObjectIdentifier id_aes128_wrap -> t
    org.spongycastle.asn1.ASN1ObjectIdentifier id_aes128_GCM -> u
    org.spongycastle.asn1.ASN1ObjectIdentifier id_aes128_CCM -> v
    org.spongycastle.asn1.ASN1ObjectIdentifier id_aes192_ECB -> w
    org.spongycastle.asn1.ASN1ObjectIdentifier id_aes192_CBC -> x
    org.spongycastle.asn1.ASN1ObjectIdentifier id_aes192_OFB -> y
    org.spongycastle.asn1.ASN1ObjectIdentifier id_aes192_CFB -> z
    org.spongycastle.asn1.ASN1ObjectIdentifier id_aes192_wrap -> A
    org.spongycastle.asn1.ASN1ObjectIdentifier id_aes192_GCM -> B
    org.spongycastle.asn1.ASN1ObjectIdentifier id_aes192_CCM -> C
    org.spongycastle.asn1.ASN1ObjectIdentifier id_aes256_ECB -> D
    org.spongycastle.asn1.ASN1ObjectIdentifier id_aes256_CBC -> E
    org.spongycastle.asn1.ASN1ObjectIdentifier id_aes256_OFB -> F
    org.spongycastle.asn1.ASN1ObjectIdentifier id_aes256_CFB -> G
    org.spongycastle.asn1.ASN1ObjectIdentifier id_aes256_wrap -> H
    org.spongycastle.asn1.ASN1ObjectIdentifier id_aes256_GCM -> I
    org.spongycastle.asn1.ASN1ObjectIdentifier id_aes256_CCM -> J
    org.spongycastle.asn1.ASN1ObjectIdentifier id_dsa_with_sha2 -> K
    org.spongycastle.asn1.ASN1ObjectIdentifier dsa_with_sha224 -> L
    org.spongycastle.asn1.ASN1ObjectIdentifier dsa_with_sha256 -> M
    org.spongycastle.asn1.ASN1ObjectIdentifier dsa_with_sha384 -> N
    org.spongycastle.asn1.ASN1ObjectIdentifier dsa_with_sha512 -> O
org.spongycastle.asn1.ntt.NTTObjectIdentifiers -> org.spongycastle.asn1.k.a:
    org.spongycastle.asn1.ASN1ObjectIdentifier id_camellia128_cbc -> a
    org.spongycastle.asn1.ASN1ObjectIdentifier id_camellia192_cbc -> b
    org.spongycastle.asn1.ASN1ObjectIdentifier id_camellia256_cbc -> c
    org.spongycastle.asn1.ASN1ObjectIdentifier id_camellia128_wrap -> d
    org.spongycastle.asn1.ASN1ObjectIdentifier id_camellia192_wrap -> e
    org.spongycastle.asn1.ASN1ObjectIdentifier id_camellia256_wrap -> f
org.spongycastle.asn1.ocsp.BasicOCSPResponse -> org.spongycastle.asn1.l.a:
    org.spongycastle.asn1.ocsp.ResponseData tbsResponseData -> a
    org.spongycastle.asn1.x509.AlgorithmIdentifier signatureAlgorithm -> b
    org.spongycastle.asn1.DERBitString signature -> c
    org.spongycastle.asn1.ASN1Sequence certs -> d
    org.spongycastle.asn1.ocsp.BasicOCSPResponse getInstance(java.lang.Object) -> a
    org.spongycastle.asn1.ocsp.ResponseData getTbsResponseData() -> a
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.ocsp.OCSPObjectIdentifiers -> org.spongycastle.asn1.l.b:
    org.spongycastle.asn1.ASN1ObjectIdentifier id_pkix_ocsp -> a
    org.spongycastle.asn1.ASN1ObjectIdentifier id_pkix_ocsp_basic -> b
    org.spongycastle.asn1.ASN1ObjectIdentifier id_pkix_ocsp_nonce -> c
    org.spongycastle.asn1.ASN1ObjectIdentifier id_pkix_ocsp_crl -> d
    org.spongycastle.asn1.ASN1ObjectIdentifier id_pkix_ocsp_response -> e
    org.spongycastle.asn1.ASN1ObjectIdentifier id_pkix_ocsp_nocheck -> f
    org.spongycastle.asn1.ASN1ObjectIdentifier id_pkix_ocsp_archive_cutoff -> g
    org.spongycastle.asn1.ASN1ObjectIdentifier id_pkix_ocsp_service_locator -> h
    org.spongycastle.asn1.ASN1ObjectIdentifier id_pkix_ocsp_pref_sig_algs -> i
    org.spongycastle.asn1.ASN1ObjectIdentifier id_pkix_ocsp_extended_revoke -> j
org.spongycastle.asn1.ocsp.ResponderID -> org.spongycastle.asn1.l.c:
    org.spongycastle.asn1.ASN1Encodable value -> a
    org.spongycastle.asn1.ocsp.ResponderID getInstance(java.lang.Object) -> a
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.ocsp.ResponseData -> org.spongycastle.asn1.l.d:
    org.spongycastle.asn1.ASN1Integer V1 -> a
    boolean versionPresent -> b
    org.spongycastle.asn1.ASN1Integer version -> c
    org.spongycastle.asn1.ocsp.ResponderID responderID -> d
    org.spongycastle.asn1.ASN1GeneralizedTime producedAt -> e
    org.spongycastle.asn1.ASN1Sequence responses -> f
    org.spongycastle.asn1.x509.Extensions responseExtensions -> g
    org.spongycastle.asn1.ocsp.ResponseData getInstance(java.lang.Object) -> a
    org.spongycastle.asn1.x509.Extensions getResponseExtensions() -> a
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.oiw.ElGamalParameter -> org.spongycastle.asn1.m.a:
    org.spongycastle.asn1.ASN1Integer p -> a
    org.spongycastle.asn1.ASN1Integer g -> b
    org.spongycastle.asn1.oiw.ElGamalParameter getInstance(java.lang.Object) -> a
    java.math.BigInteger getP() -> a
    java.math.BigInteger getG() -> b
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.oiw.OIWObjectIdentifiers -> org.spongycastle.asn1.m.b:
    org.spongycastle.asn1.ASN1ObjectIdentifier md4WithRSA -> a
    org.spongycastle.asn1.ASN1ObjectIdentifier md5WithRSA -> b
    org.spongycastle.asn1.ASN1ObjectIdentifier md4WithRSAEncryption -> c
    org.spongycastle.asn1.ASN1ObjectIdentifier desECB -> d
    org.spongycastle.asn1.ASN1ObjectIdentifier desCBC -> e
    org.spongycastle.asn1.ASN1ObjectIdentifier desOFB -> f
    org.spongycastle.asn1.ASN1ObjectIdentifier desCFB -> g
    org.spongycastle.asn1.ASN1ObjectIdentifier desEDE -> h
    org.spongycastle.asn1.ASN1ObjectIdentifier idSHA1 -> i
    org.spongycastle.asn1.ASN1ObjectIdentifier dsaWithSHA1 -> j
    org.spongycastle.asn1.ASN1ObjectIdentifier sha1WithRSA -> k
    org.spongycastle.asn1.ASN1ObjectIdentifier elGamalAlgorithm -> l
org.spongycastle.asn1.pkcs.AuthenticatedSafe -> org.spongycastle.asn1.n.a:
    org.spongycastle.asn1.pkcs.ContentInfo[] info -> a
    boolean isBer -> b
    org.spongycastle.asn1.pkcs.AuthenticatedSafe getInstance(java.lang.Object) -> a
    org.spongycastle.asn1.pkcs.ContentInfo[] getContentInfo() -> a
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.pkcs.CertBag -> org.spongycastle.asn1.n.b:
    org.spongycastle.asn1.ASN1ObjectIdentifier certId -> a
    org.spongycastle.asn1.ASN1Encodable certValue -> b
    org.spongycastle.asn1.pkcs.CertBag getInstance(java.lang.Object) -> a
    org.spongycastle.asn1.ASN1ObjectIdentifier getCertId() -> a
    org.spongycastle.asn1.ASN1Encodable getCertValue() -> b
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.pkcs.ContentInfo -> org.spongycastle.asn1.n.c:
    org.spongycastle.asn1.ASN1ObjectIdentifier contentType -> bH
    org.spongycastle.asn1.ASN1Encodable content -> bI
    boolean isBer -> bJ
    org.spongycastle.asn1.pkcs.ContentInfo getInstance(java.lang.Object) -> a
    org.spongycastle.asn1.ASN1ObjectIdentifier getContentType() -> a
    org.spongycastle.asn1.ASN1Encodable getContent() -> b
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.pkcs.DHParameter -> org.spongycastle.asn1.n.d:
    org.spongycastle.asn1.ASN1Integer p -> a
    org.spongycastle.asn1.ASN1Integer g -> b
    org.spongycastle.asn1.ASN1Integer l -> c
    org.spongycastle.asn1.pkcs.DHParameter getInstance(java.lang.Object) -> a
    java.math.BigInteger getP() -> a
    java.math.BigInteger getG() -> b
    java.math.BigInteger getL() -> c
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.pkcs.EncryptedData -> org.spongycastle.asn1.n.e:
    org.spongycastle.asn1.ASN1Sequence data -> a
    org.spongycastle.asn1.pkcs.EncryptedData getInstance(java.lang.Object) -> a
    org.spongycastle.asn1.x509.AlgorithmIdentifier getEncryptionAlgorithm() -> a
    org.spongycastle.asn1.ASN1OctetString getContent() -> b
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.pkcs.EncryptedPrivateKeyInfo -> org.spongycastle.asn1.n.f:
    org.spongycastle.asn1.x509.AlgorithmIdentifier algId -> a
    org.spongycastle.asn1.ASN1OctetString data -> b
    org.spongycastle.asn1.pkcs.EncryptedPrivateKeyInfo getInstance(java.lang.Object) -> a
    org.spongycastle.asn1.x509.AlgorithmIdentifier getEncryptionAlgorithm() -> a
    byte[] getEncryptedData() -> b
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.pkcs.EncryptionScheme -> org.spongycastle.asn1.n.g:
    org.spongycastle.asn1.x509.AlgorithmIdentifier algId -> a
    org.spongycastle.asn1.pkcs.EncryptionScheme getInstance(java.lang.Object) -> a
    org.spongycastle.asn1.ASN1ObjectIdentifier getAlgorithm() -> a
    org.spongycastle.asn1.ASN1Encodable getParameters() -> b
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.pkcs.KeyDerivationFunc -> org.spongycastle.asn1.n.h:
    org.spongycastle.asn1.x509.AlgorithmIdentifier algId -> a
    org.spongycastle.asn1.pkcs.KeyDerivationFunc getInstance(java.lang.Object) -> a
    org.spongycastle.asn1.ASN1ObjectIdentifier getAlgorithm() -> a
    org.spongycastle.asn1.ASN1Encodable getParameters() -> b
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.pkcs.MacData -> org.spongycastle.asn1.n.i:
    java.math.BigInteger ONE -> d
    org.spongycastle.asn1.x509.DigestInfo digInfo -> a
    byte[] salt -> b
    java.math.BigInteger iterationCount -> c
    org.spongycastle.asn1.pkcs.MacData getInstance(java.lang.Object) -> a
    org.spongycastle.asn1.x509.DigestInfo getMac() -> a
    byte[] getSalt() -> b
    java.math.BigInteger getIterationCount() -> c
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.pkcs.PBES2Parameters -> org.spongycastle.asn1.n.j:
    org.spongycastle.asn1.pkcs.KeyDerivationFunc func -> bH
    org.spongycastle.asn1.pkcs.EncryptionScheme scheme -> bI
    org.spongycastle.asn1.pkcs.PBES2Parameters getInstance(java.lang.Object) -> a
    org.spongycastle.asn1.pkcs.KeyDerivationFunc getKeyDerivationFunc() -> a
    org.spongycastle.asn1.pkcs.EncryptionScheme getEncryptionScheme() -> b
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.pkcs.PBKDF2Params -> org.spongycastle.asn1.n.k:
    org.spongycastle.asn1.x509.AlgorithmIdentifier algid_hmacWithSHA1 -> a
    org.spongycastle.asn1.ASN1OctetString octStr -> b
    org.spongycastle.asn1.ASN1Integer iterationCount -> c
    org.spongycastle.asn1.ASN1Integer keyLength -> d
    org.spongycastle.asn1.x509.AlgorithmIdentifier prf -> e
    org.spongycastle.asn1.pkcs.PBKDF2Params getInstance(java.lang.Object) -> a
    byte[] getSalt() -> a
    java.math.BigInteger getIterationCount() -> b
    boolean isDefaultPrf() -> c
    org.spongycastle.asn1.x509.AlgorithmIdentifier getPrf() -> d
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.pkcs.PKCS12PBEParams -> org.spongycastle.asn1.n.l:
    org.spongycastle.asn1.ASN1Integer iterations -> a
    org.spongycastle.asn1.ASN1OctetString iv -> b
    org.spongycastle.asn1.pkcs.PKCS12PBEParams getInstance(java.lang.Object) -> a
    java.math.BigInteger getIterations() -> a
    byte[] getIV() -> b
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.pkcs.PKCSObjectIdentifiers -> org.spongycastle.asn1.n.m:
    org.spongycastle.asn1.ASN1ObjectIdentifier pkcs_1 -> g_
    org.spongycastle.asn1.ASN1ObjectIdentifier rsaEncryption -> h_
    org.spongycastle.asn1.ASN1ObjectIdentifier md2WithRSAEncryption -> i_
    org.spongycastle.asn1.ASN1ObjectIdentifier md4WithRSAEncryption -> d
    org.spongycastle.asn1.ASN1ObjectIdentifier md5WithRSAEncryption -> e
    org.spongycastle.asn1.ASN1ObjectIdentifier sha1WithRSAEncryption -> j_
    org.spongycastle.asn1.ASN1ObjectIdentifier srsaOAEPEncryptionSET -> k_
    org.spongycastle.asn1.ASN1ObjectIdentifier id_RSAES_OAEP -> h
    org.spongycastle.asn1.ASN1ObjectIdentifier id_mgf1 -> l_
    org.spongycastle.asn1.ASN1ObjectIdentifier id_pSpecified -> j
    org.spongycastle.asn1.ASN1ObjectIdentifier id_RSASSA_PSS -> k
    org.spongycastle.asn1.ASN1ObjectIdentifier sha256WithRSAEncryption -> m_
    org.spongycastle.asn1.ASN1ObjectIdentifier sha384WithRSAEncryption -> n_
    org.spongycastle.asn1.ASN1ObjectIdentifier sha512WithRSAEncryption -> o_
    org.spongycastle.asn1.ASN1ObjectIdentifier sha224WithRSAEncryption -> p_
    org.spongycastle.asn1.ASN1ObjectIdentifier pkcs_3 -> q_
    org.spongycastle.asn1.ASN1ObjectIdentifier dhKeyAgreement -> q
    org.spongycastle.asn1.ASN1ObjectIdentifier pkcs_5 -> r_
    org.spongycastle.asn1.ASN1ObjectIdentifier pbeWithMD2AndDES_CBC -> s_
    org.spongycastle.asn1.ASN1ObjectIdentifier pbeWithMD2AndRC2_CBC -> t_
    org.spongycastle.asn1.ASN1ObjectIdentifier pbeWithMD5AndDES_CBC -> u
    org.spongycastle.asn1.ASN1ObjectIdentifier pbeWithMD5AndRC2_CBC -> v
    org.spongycastle.asn1.ASN1ObjectIdentifier pbeWithSHA1AndDES_CBC -> w
    org.spongycastle.asn1.ASN1ObjectIdentifier pbeWithSHA1AndRC2_CBC -> x
    org.spongycastle.asn1.ASN1ObjectIdentifier id_PBES2 -> y
    org.spongycastle.asn1.ASN1ObjectIdentifier id_PBKDF2 -> z
    org.spongycastle.asn1.ASN1ObjectIdentifier encryptionAlgorithm -> A
    org.spongycastle.asn1.ASN1ObjectIdentifier des_EDE3_CBC -> B
    org.spongycastle.asn1.ASN1ObjectIdentifier RC2_CBC -> C
    org.spongycastle.asn1.ASN1ObjectIdentifier rc4 -> D
    org.spongycastle.asn1.ASN1ObjectIdentifier digestAlgorithm -> E
    org.spongycastle.asn1.ASN1ObjectIdentifier md2 -> F
    org.spongycastle.asn1.ASN1ObjectIdentifier md4 -> G
    org.spongycastle.asn1.ASN1ObjectIdentifier md5 -> H
    org.spongycastle.asn1.ASN1ObjectIdentifier id_hmacWithSHA1 -> I
    org.spongycastle.asn1.ASN1ObjectIdentifier id_hmacWithSHA224 -> J
    org.spongycastle.asn1.ASN1ObjectIdentifier id_hmacWithSHA256 -> K
    org.spongycastle.asn1.ASN1ObjectIdentifier id_hmacWithSHA384 -> L
    org.spongycastle.asn1.ASN1ObjectIdentifier id_hmacWithSHA512 -> M
    org.spongycastle.asn1.ASN1ObjectIdentifier pkcs_7 -> N
    org.spongycastle.asn1.ASN1ObjectIdentifier data -> O
    org.spongycastle.asn1.ASN1ObjectIdentifier signedData -> P
    org.spongycastle.asn1.ASN1ObjectIdentifier envelopedData -> Q
    org.spongycastle.asn1.ASN1ObjectIdentifier signedAndEnvelopedData -> R
    org.spongycastle.asn1.ASN1ObjectIdentifier digestedData -> S
    org.spongycastle.asn1.ASN1ObjectIdentifier encryptedData -> T
    org.spongycastle.asn1.ASN1ObjectIdentifier pkcs_9 -> U
    org.spongycastle.asn1.ASN1ObjectIdentifier pkcs_9_at_emailAddress -> V
    org.spongycastle.asn1.ASN1ObjectIdentifier pkcs_9_at_unstructuredName -> W
    org.spongycastle.asn1.ASN1ObjectIdentifier pkcs_9_at_contentType -> X
    org.spongycastle.asn1.ASN1ObjectIdentifier pkcs_9_at_messageDigest -> Y
    org.spongycastle.asn1.ASN1ObjectIdentifier pkcs_9_at_signingTime -> Z
    org.spongycastle.asn1.ASN1ObjectIdentifier pkcs_9_at_counterSignature -> aa
    org.spongycastle.asn1.ASN1ObjectIdentifier pkcs_9_at_challengePassword -> ab
    org.spongycastle.asn1.ASN1ObjectIdentifier pkcs_9_at_unstructuredAddress -> ac
    org.spongycastle.asn1.ASN1ObjectIdentifier pkcs_9_at_extendedCertificateAttributes -> ad
    org.spongycastle.asn1.ASN1ObjectIdentifier pkcs_9_at_signingDescription -> ae
    org.spongycastle.asn1.ASN1ObjectIdentifier pkcs_9_at_extensionRequest -> af
    org.spongycastle.asn1.ASN1ObjectIdentifier pkcs_9_at_smimeCapabilities -> ag
    org.spongycastle.asn1.ASN1ObjectIdentifier id_smime -> ah
    org.spongycastle.asn1.ASN1ObjectIdentifier pkcs_9_at_friendlyName -> ai
    org.spongycastle.asn1.ASN1ObjectIdentifier pkcs_9_at_localKeyId -> aj
    org.spongycastle.asn1.ASN1ObjectIdentifier x509certType -> ak
    org.spongycastle.asn1.ASN1ObjectIdentifier certTypes -> al
    org.spongycastle.asn1.ASN1ObjectIdentifier x509Certificate -> am
    org.spongycastle.asn1.ASN1ObjectIdentifier sdsiCertificate -> an
    org.spongycastle.asn1.ASN1ObjectIdentifier crlTypes -> ao
    org.spongycastle.asn1.ASN1ObjectIdentifier x509Crl -> ap
    org.spongycastle.asn1.ASN1ObjectIdentifier id_aa_cmsAlgorithmProtect -> aq
    org.spongycastle.asn1.ASN1ObjectIdentifier preferSignedData -> ar
    org.spongycastle.asn1.ASN1ObjectIdentifier canNotDecryptAny -> as
    org.spongycastle.asn1.ASN1ObjectIdentifier sMIMECapabilitiesVersions -> at
    org.spongycastle.asn1.ASN1ObjectIdentifier id_ct -> au
    org.spongycastle.asn1.ASN1ObjectIdentifier id_ct_authData -> av
    org.spongycastle.asn1.ASN1ObjectIdentifier id_ct_TSTInfo -> aw
    org.spongycastle.asn1.ASN1ObjectIdentifier id_ct_compressedData -> ax
    org.spongycastle.asn1.ASN1ObjectIdentifier id_ct_authEnvelopedData -> ay
    org.spongycastle.asn1.ASN1ObjectIdentifier id_ct_timestampedData -> az
    org.spongycastle.asn1.ASN1ObjectIdentifier id_alg -> aA
    org.spongycastle.asn1.ASN1ObjectIdentifier id_alg_PWRI_KEK -> aB
    org.spongycastle.asn1.ASN1ObjectIdentifier id_rsa_KEM -> aC
    org.spongycastle.asn1.ASN1ObjectIdentifier id_cti -> aD
    org.spongycastle.asn1.ASN1ObjectIdentifier id_cti_ets_proofOfOrigin -> aE
    org.spongycastle.asn1.ASN1ObjectIdentifier id_cti_ets_proofOfReceipt -> aF
    org.spongycastle.asn1.ASN1ObjectIdentifier id_cti_ets_proofOfDelivery -> aG
    org.spongycastle.asn1.ASN1ObjectIdentifier id_cti_ets_proofOfSender -> aH
    org.spongycastle.asn1.ASN1ObjectIdentifier id_cti_ets_proofOfApproval -> aI
    org.spongycastle.asn1.ASN1ObjectIdentifier id_cti_ets_proofOfCreation -> aJ
    org.spongycastle.asn1.ASN1ObjectIdentifier id_aa -> aK
    org.spongycastle.asn1.ASN1ObjectIdentifier id_aa_receiptRequest -> aL
    org.spongycastle.asn1.ASN1ObjectIdentifier id_aa_contentHint -> aM
    org.spongycastle.asn1.ASN1ObjectIdentifier id_aa_msgSigDigest -> aN
    org.spongycastle.asn1.ASN1ObjectIdentifier id_aa_contentReference -> aO
    org.spongycastle.asn1.ASN1ObjectIdentifier id_aa_encrypKeyPref -> aP
    org.spongycastle.asn1.ASN1ObjectIdentifier id_aa_signingCertificate -> aQ
    org.spongycastle.asn1.ASN1ObjectIdentifier id_aa_signingCertificateV2 -> aR
    org.spongycastle.asn1.ASN1ObjectIdentifier id_aa_contentIdentifier -> aS
    org.spongycastle.asn1.ASN1ObjectIdentifier id_aa_signatureTimeStampToken -> aT
    org.spongycastle.asn1.ASN1ObjectIdentifier id_aa_ets_sigPolicyId -> aU
    org.spongycastle.asn1.ASN1ObjectIdentifier id_aa_ets_commitmentType -> aV
    org.spongycastle.asn1.ASN1ObjectIdentifier id_aa_ets_signerLocation -> aW
    org.spongycastle.asn1.ASN1ObjectIdentifier id_aa_ets_signerAttr -> aX
    org.spongycastle.asn1.ASN1ObjectIdentifier id_aa_ets_otherSigCert -> aY
    org.spongycastle.asn1.ASN1ObjectIdentifier id_aa_ets_contentTimestamp -> aZ
    org.spongycastle.asn1.ASN1ObjectIdentifier id_aa_ets_certificateRefs -> ba
    org.spongycastle.asn1.ASN1ObjectIdentifier id_aa_ets_revocationRefs -> bb
    org.spongycastle.asn1.ASN1ObjectIdentifier id_aa_ets_certValues -> bc
    org.spongycastle.asn1.ASN1ObjectIdentifier id_aa_ets_revocationValues -> bd
    org.spongycastle.asn1.ASN1ObjectIdentifier id_aa_ets_escTimeStamp -> be
    org.spongycastle.asn1.ASN1ObjectIdentifier id_aa_ets_certCRLTimestamp -> bf
    org.spongycastle.asn1.ASN1ObjectIdentifier id_aa_ets_archiveTimestamp -> bg
    org.spongycastle.asn1.ASN1ObjectIdentifier id_aa_sigPolicyId -> bh
    org.spongycastle.asn1.ASN1ObjectIdentifier id_aa_commitmentType -> bi
    org.spongycastle.asn1.ASN1ObjectIdentifier id_aa_signerLocation -> bj
    org.spongycastle.asn1.ASN1ObjectIdentifier id_aa_otherSigCert -> bk
    org.spongycastle.asn1.ASN1ObjectIdentifier id_spq_ets_uri -> bl
    org.spongycastle.asn1.ASN1ObjectIdentifier id_spq_ets_unotice -> bm
    org.spongycastle.asn1.ASN1ObjectIdentifier pkcs_12 -> bn
    org.spongycastle.asn1.ASN1ObjectIdentifier bagtypes -> bo
    org.spongycastle.asn1.ASN1ObjectIdentifier keyBag -> bp
    org.spongycastle.asn1.ASN1ObjectIdentifier pkcs8ShroudedKeyBag -> bq
    org.spongycastle.asn1.ASN1ObjectIdentifier certBag -> br
    org.spongycastle.asn1.ASN1ObjectIdentifier crlBag -> bs
    org.spongycastle.asn1.ASN1ObjectIdentifier secretBag -> bt
    org.spongycastle.asn1.ASN1ObjectIdentifier safeContentsBag -> bu
    org.spongycastle.asn1.ASN1ObjectIdentifier pkcs_12PbeIds -> bv
    org.spongycastle.asn1.ASN1ObjectIdentifier pbeWithSHAAnd128BitRC4 -> bw
    org.spongycastle.asn1.ASN1ObjectIdentifier pbeWithSHAAnd40BitRC4 -> bx
    org.spongycastle.asn1.ASN1ObjectIdentifier pbeWithSHAAnd3_KeyTripleDES_CBC -> by
    org.spongycastle.asn1.ASN1ObjectIdentifier pbeWithSHAAnd2_KeyTripleDES_CBC -> bz
    org.spongycastle.asn1.ASN1ObjectIdentifier pbeWithSHAAnd128BitRC2_CBC -> bA
    org.spongycastle.asn1.ASN1ObjectIdentifier pbeWithSHAAnd40BitRC2_CBC -> bB
    org.spongycastle.asn1.ASN1ObjectIdentifier pbewithSHAAnd40BitRC2_CBC -> bC
    org.spongycastle.asn1.ASN1ObjectIdentifier id_alg_CMS3DESwrap -> bD
    org.spongycastle.asn1.ASN1ObjectIdentifier id_alg_CMSRC2wrap -> bE
    org.spongycastle.asn1.ASN1ObjectIdentifier id_alg_ESDH -> bF
    org.spongycastle.asn1.ASN1ObjectIdentifier id_alg_SSDH -> bG
org.spongycastle.asn1.pkcs.Pfx -> org.spongycastle.asn1.n.n:
    org.spongycastle.asn1.pkcs.ContentInfo contentInfo -> bH
    org.spongycastle.asn1.pkcs.MacData macData -> bI
    org.spongycastle.asn1.pkcs.Pfx getInstance(java.lang.Object) -> a
    org.spongycastle.asn1.pkcs.ContentInfo getAuthSafe() -> a
    org.spongycastle.asn1.pkcs.MacData getMacData() -> b
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.pkcs.PrivateKeyInfo -> org.spongycastle.asn1.n.o:
    org.spongycastle.asn1.ASN1OctetString privKey -> a
    org.spongycastle.asn1.x509.AlgorithmIdentifier algId -> b
    org.spongycastle.asn1.ASN1Set attributes -> c
    org.spongycastle.asn1.pkcs.PrivateKeyInfo getInstance(java.lang.Object) -> a
    org.spongycastle.asn1.x509.AlgorithmIdentifier getPrivateKeyAlgorithm() -> a
    org.spongycastle.asn1.x509.AlgorithmIdentifier getAlgorithmId() -> b
    org.spongycastle.asn1.ASN1Encodable parsePrivateKey() -> c
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.pkcs.RC2CBCParameter -> org.spongycastle.asn1.n.p:
    org.spongycastle.asn1.ASN1Integer version -> a
    org.spongycastle.asn1.ASN1OctetString iv -> b
    org.spongycastle.asn1.pkcs.RC2CBCParameter getInstance(java.lang.Object) -> a
    java.math.BigInteger getRC2ParameterVersion() -> a
    byte[] getIV() -> b
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.pkcs.RSAESOAEPparams -> org.spongycastle.asn1.n.q:
    org.spongycastle.asn1.x509.AlgorithmIdentifier hashAlgorithm -> d
    org.spongycastle.asn1.x509.AlgorithmIdentifier maskGenAlgorithm -> e
    org.spongycastle.asn1.x509.AlgorithmIdentifier pSourceAlgorithm -> f
    org.spongycastle.asn1.x509.AlgorithmIdentifier DEFAULT_HASH_ALGORITHM -> a
    org.spongycastle.asn1.x509.AlgorithmIdentifier DEFAULT_MASK_GEN_FUNCTION -> b
    org.spongycastle.asn1.x509.AlgorithmIdentifier DEFAULT_P_SOURCE_ALGORITHM -> c
    org.spongycastle.asn1.pkcs.RSAESOAEPparams getInstance(java.lang.Object) -> a
    org.spongycastle.asn1.x509.AlgorithmIdentifier getHashAlgorithm() -> a
    org.spongycastle.asn1.x509.AlgorithmIdentifier getMaskGenAlgorithm() -> b
    org.spongycastle.asn1.x509.AlgorithmIdentifier getPSourceAlgorithm() -> c
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.pkcs.RSAPrivateKey -> org.spongycastle.asn1.n.r:
    java.math.BigInteger version -> a
    java.math.BigInteger modulus -> b
    java.math.BigInteger publicExponent -> c
    java.math.BigInteger privateExponent -> d
    java.math.BigInteger prime1 -> e
    java.math.BigInteger prime2 -> f
    java.math.BigInteger exponent1 -> g
    java.math.BigInteger exponent2 -> h
    java.math.BigInteger coefficient -> i
    org.spongycastle.asn1.ASN1Sequence otherPrimeInfos -> j
    org.spongycastle.asn1.pkcs.RSAPrivateKey getInstance(java.lang.Object) -> a
    java.math.BigInteger getModulus() -> a
    java.math.BigInteger getPublicExponent() -> b
    java.math.BigInteger getPrivateExponent() -> c
    java.math.BigInteger getPrime1() -> d
    java.math.BigInteger getPrime2() -> e
    java.math.BigInteger getExponent1() -> f
    java.math.BigInteger getExponent2() -> g
    java.math.BigInteger getCoefficient() -> h
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.pkcs.RSAPublicKey -> org.spongycastle.asn1.n.s:
    java.math.BigInteger modulus -> a
    java.math.BigInteger publicExponent -> b
    org.spongycastle.asn1.pkcs.RSAPublicKey getInstance(java.lang.Object) -> a
    java.math.BigInteger getModulus() -> a
    java.math.BigInteger getPublicExponent() -> b
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.pkcs.RSASSAPSSparams -> org.spongycastle.asn1.n.t:
    org.spongycastle.asn1.x509.AlgorithmIdentifier hashAlgorithm -> e
    org.spongycastle.asn1.x509.AlgorithmIdentifier maskGenAlgorithm -> f
    org.spongycastle.asn1.ASN1Integer saltLength -> g
    org.spongycastle.asn1.ASN1Integer trailerField -> h
    org.spongycastle.asn1.x509.AlgorithmIdentifier DEFAULT_HASH_ALGORITHM -> a
    org.spongycastle.asn1.x509.AlgorithmIdentifier DEFAULT_MASK_GEN_FUNCTION -> b
    org.spongycastle.asn1.ASN1Integer DEFAULT_SALT_LENGTH -> c
    org.spongycastle.asn1.ASN1Integer DEFAULT_TRAILER_FIELD -> d
    org.spongycastle.asn1.pkcs.RSASSAPSSparams getInstance(java.lang.Object) -> a
    org.spongycastle.asn1.x509.AlgorithmIdentifier getHashAlgorithm() -> a
    org.spongycastle.asn1.x509.AlgorithmIdentifier getMaskGenAlgorithm() -> b
    java.math.BigInteger getSaltLength() -> c
    java.math.BigInteger getTrailerField() -> d
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.pkcs.SafeBag -> org.spongycastle.asn1.n.u:
    org.spongycastle.asn1.ASN1ObjectIdentifier bagId -> a
    org.spongycastle.asn1.ASN1Encodable bagValue -> b
    org.spongycastle.asn1.ASN1Set bagAttributes -> c
    org.spongycastle.asn1.pkcs.SafeBag getInstance(java.lang.Object) -> a
    org.spongycastle.asn1.ASN1ObjectIdentifier getBagId() -> a
    org.spongycastle.asn1.ASN1Encodable getBagValue() -> b
    org.spongycastle.asn1.ASN1Set getBagAttributes() -> c
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.pkcs.SignedData -> org.spongycastle.asn1.n.v:
    org.spongycastle.asn1.ASN1Integer version -> bH
    org.spongycastle.asn1.ASN1Set digestAlgorithms -> bI
    org.spongycastle.asn1.pkcs.ContentInfo contentInfo -> bJ
    org.spongycastle.asn1.ASN1Set certificates -> bK
    org.spongycastle.asn1.ASN1Set crls -> bL
    org.spongycastle.asn1.ASN1Set signerInfos -> bM
    org.spongycastle.asn1.pkcs.SignedData getInstance(java.lang.Object) -> a
    org.spongycastle.asn1.ASN1Set getCertificates() -> a
    org.spongycastle.asn1.ASN1Set getCRLs() -> b
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.sec.ECPrivateKey -> org.spongycastle.asn1.o.a:
    org.spongycastle.asn1.ASN1Sequence seq -> a
    org.spongycastle.asn1.sec.ECPrivateKey getInstance(java.lang.Object) -> a
    java.math.BigInteger getKey() -> a
    org.spongycastle.asn1.DERBitString getPublicKey() -> b
    org.spongycastle.asn1.ASN1Primitive getObjectInTag(int) -> a
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.sec.ECPrivateKeyStructure -> org.spongycastle.asn1.o.b:
    org.spongycastle.asn1.ASN1Sequence seq -> a
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.sec.SECNamedCurves -> org.spongycastle.asn1.o.c:
    org.spongycastle.asn1.x9.X9ECParametersHolder secp112r1 -> a
    org.spongycastle.asn1.x9.X9ECParametersHolder secp112r2 -> b
    org.spongycastle.asn1.x9.X9ECParametersHolder secp128r1 -> c
    org.spongycastle.asn1.x9.X9ECParametersHolder secp128r2 -> d
    org.spongycastle.asn1.x9.X9ECParametersHolder secp160k1 -> e
    org.spongycastle.asn1.x9.X9ECParametersHolder secp160r1 -> f
    org.spongycastle.asn1.x9.X9ECParametersHolder secp160r2 -> g
    org.spongycastle.asn1.x9.X9ECParametersHolder secp192k1 -> h
    org.spongycastle.asn1.x9.X9ECParametersHolder secp192r1 -> i
    org.spongycastle.asn1.x9.X9ECParametersHolder secp224k1 -> j
    org.spongycastle.asn1.x9.X9ECParametersHolder secp224r1 -> k
    org.spongycastle.asn1.x9.X9ECParametersHolder secp256k1 -> l
    org.spongycastle.asn1.x9.X9ECParametersHolder secp256r1 -> m
    org.spongycastle.asn1.x9.X9ECParametersHolder secp384r1 -> n
    org.spongycastle.asn1.x9.X9ECParametersHolder secp521r1 -> o
    org.spongycastle.asn1.x9.X9ECParametersHolder sect113r1 -> p
    org.spongycastle.asn1.x9.X9ECParametersHolder sect113r2 -> q
    org.spongycastle.asn1.x9.X9ECParametersHolder sect131r1 -> r
    org.spongycastle.asn1.x9.X9ECParametersHolder sect131r2 -> s
    org.spongycastle.asn1.x9.X9ECParametersHolder sect163k1 -> t
    org.spongycastle.asn1.x9.X9ECParametersHolder sect163r1 -> u
    org.spongycastle.asn1.x9.X9ECParametersHolder sect163r2 -> v
    org.spongycastle.asn1.x9.X9ECParametersHolder sect193r1 -> w
    org.spongycastle.asn1.x9.X9ECParametersHolder sect193r2 -> x
    org.spongycastle.asn1.x9.X9ECParametersHolder sect233k1 -> y
    org.spongycastle.asn1.x9.X9ECParametersHolder sect233r1 -> z
    org.spongycastle.asn1.x9.X9ECParametersHolder sect239k1 -> A
    org.spongycastle.asn1.x9.X9ECParametersHolder sect283k1 -> B
    org.spongycastle.asn1.x9.X9ECParametersHolder sect283r1 -> C
    org.spongycastle.asn1.x9.X9ECParametersHolder sect409k1 -> D
    org.spongycastle.asn1.x9.X9ECParametersHolder sect409r1 -> E
    org.spongycastle.asn1.x9.X9ECParametersHolder sect571k1 -> F
    org.spongycastle.asn1.x9.X9ECParametersHolder sect571r1 -> G
    java.util.Hashtable objIds -> H
    java.util.Hashtable curves -> I
    java.util.Hashtable names -> J
    org.spongycastle.math.ec.ECCurve configureCurve(org.spongycastle.math.ec.ECCurve) -> b
    org.spongycastle.math.ec.ECCurve configureCurveGLV(org.spongycastle.math.ec.ECCurve,org.spongycastle.math.ec.endo.GLVTypeBParameters) -> b
    java.math.BigInteger fromHex(java.lang.String) -> d
    void defineCurve(java.lang.String,org.spongycastle.asn1.ASN1ObjectIdentifier,org.spongycastle.asn1.x9.X9ECParametersHolder) -> a
    org.spongycastle.asn1.x9.X9ECParameters getByName(java.lang.String) -> a
    org.spongycastle.asn1.x9.X9ECParameters getByOID(org.spongycastle.asn1.ASN1ObjectIdentifier) -> a
    org.spongycastle.asn1.ASN1ObjectIdentifier getOID(java.lang.String) -> b
    java.lang.String getName(org.spongycastle.asn1.ASN1ObjectIdentifier) -> b
    java.util.Enumeration getNames() -> a
    java.math.BigInteger access$000(java.lang.String) -> c
    org.spongycastle.math.ec.ECCurve access$100(org.spongycastle.math.ec.ECCurve) -> a
    org.spongycastle.math.ec.ECCurve access$200(org.spongycastle.math.ec.ECCurve,org.spongycastle.math.ec.endo.GLVTypeBParameters) -> a
org.spongycastle.asn1.sec.SECNamedCurves$1 -> org.spongycastle.asn1.o.d:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.asn1.sec.SECNamedCurves$10 -> org.spongycastle.asn1.o.e:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.asn1.sec.SECNamedCurves$11 -> org.spongycastle.asn1.o.f:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.asn1.sec.SECNamedCurves$12 -> org.spongycastle.asn1.o.g:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.asn1.sec.SECNamedCurves$13 -> org.spongycastle.asn1.o.h:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.asn1.sec.SECNamedCurves$14 -> org.spongycastle.asn1.o.i:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.asn1.sec.SECNamedCurves$15 -> org.spongycastle.asn1.o.j:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.asn1.sec.SECNamedCurves$16 -> org.spongycastle.asn1.o.k:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.asn1.sec.SECNamedCurves$17 -> org.spongycastle.asn1.o.l:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.asn1.sec.SECNamedCurves$18 -> org.spongycastle.asn1.o.m:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.asn1.sec.SECNamedCurves$19 -> org.spongycastle.asn1.o.n:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.asn1.sec.SECNamedCurves$2 -> org.spongycastle.asn1.o.o:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.asn1.sec.SECNamedCurves$20 -> org.spongycastle.asn1.o.p:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.asn1.sec.SECNamedCurves$21 -> org.spongycastle.asn1.o.q:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.asn1.sec.SECNamedCurves$22 -> org.spongycastle.asn1.o.r:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.asn1.sec.SECNamedCurves$23 -> org.spongycastle.asn1.o.s:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.asn1.sec.SECNamedCurves$24 -> org.spongycastle.asn1.o.t:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.asn1.sec.SECNamedCurves$25 -> org.spongycastle.asn1.o.u:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.asn1.sec.SECNamedCurves$26 -> org.spongycastle.asn1.o.v:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.asn1.sec.SECNamedCurves$27 -> org.spongycastle.asn1.o.w:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.asn1.sec.SECNamedCurves$28 -> org.spongycastle.asn1.o.x:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.asn1.sec.SECNamedCurves$29 -> org.spongycastle.asn1.o.y:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.asn1.sec.SECNamedCurves$3 -> org.spongycastle.asn1.o.z:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.asn1.sec.SECNamedCurves$30 -> org.spongycastle.asn1.o.A:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.asn1.sec.SECNamedCurves$31 -> org.spongycastle.asn1.o.B:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.asn1.sec.SECNamedCurves$32 -> org.spongycastle.asn1.o.C:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.asn1.sec.SECNamedCurves$33 -> org.spongycastle.asn1.o.D:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.asn1.sec.SECNamedCurves$4 -> org.spongycastle.asn1.o.E:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.asn1.sec.SECNamedCurves$5 -> org.spongycastle.asn1.o.F:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.asn1.sec.SECNamedCurves$6 -> org.spongycastle.asn1.o.G:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.asn1.sec.SECNamedCurves$7 -> org.spongycastle.asn1.o.H:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.asn1.sec.SECNamedCurves$8 -> org.spongycastle.asn1.o.I:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.asn1.sec.SECNamedCurves$9 -> org.spongycastle.asn1.o.J:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.asn1.sec.SECObjectIdentifiers -> org.spongycastle.asn1.o.K:
    org.spongycastle.asn1.ASN1ObjectIdentifier ellipticCurve -> a
    org.spongycastle.asn1.ASN1ObjectIdentifier sect163k1 -> b
    org.spongycastle.asn1.ASN1ObjectIdentifier sect163r1 -> c
    org.spongycastle.asn1.ASN1ObjectIdentifier sect239k1 -> d
    org.spongycastle.asn1.ASN1ObjectIdentifier sect113r1 -> e
    org.spongycastle.asn1.ASN1ObjectIdentifier sect113r2 -> f
    org.spongycastle.asn1.ASN1ObjectIdentifier secp112r1 -> g
    org.spongycastle.asn1.ASN1ObjectIdentifier secp112r2 -> h
    org.spongycastle.asn1.ASN1ObjectIdentifier secp160r1 -> i
    org.spongycastle.asn1.ASN1ObjectIdentifier secp160k1 -> j
    org.spongycastle.asn1.ASN1ObjectIdentifier secp256k1 -> k
    org.spongycastle.asn1.ASN1ObjectIdentifier sect163r2 -> l
    org.spongycastle.asn1.ASN1ObjectIdentifier sect283k1 -> m
    org.spongycastle.asn1.ASN1ObjectIdentifier sect283r1 -> n
    org.spongycastle.asn1.ASN1ObjectIdentifier sect131r1 -> o
    org.spongycastle.asn1.ASN1ObjectIdentifier sect131r2 -> p
    org.spongycastle.asn1.ASN1ObjectIdentifier sect193r1 -> q
    org.spongycastle.asn1.ASN1ObjectIdentifier sect193r2 -> r
    org.spongycastle.asn1.ASN1ObjectIdentifier sect233k1 -> s
    org.spongycastle.asn1.ASN1ObjectIdentifier sect233r1 -> t
    org.spongycastle.asn1.ASN1ObjectIdentifier secp128r1 -> u
    org.spongycastle.asn1.ASN1ObjectIdentifier secp128r2 -> v
    org.spongycastle.asn1.ASN1ObjectIdentifier secp160r2 -> w
    org.spongycastle.asn1.ASN1ObjectIdentifier secp192k1 -> x
    org.spongycastle.asn1.ASN1ObjectIdentifier secp224k1 -> y
    org.spongycastle.asn1.ASN1ObjectIdentifier secp224r1 -> z
    org.spongycastle.asn1.ASN1ObjectIdentifier secp384r1 -> A
    org.spongycastle.asn1.ASN1ObjectIdentifier secp521r1 -> B
    org.spongycastle.asn1.ASN1ObjectIdentifier sect409k1 -> C
    org.spongycastle.asn1.ASN1ObjectIdentifier sect409r1 -> D
    org.spongycastle.asn1.ASN1ObjectIdentifier sect571k1 -> E
    org.spongycastle.asn1.ASN1ObjectIdentifier sect571r1 -> F
    org.spongycastle.asn1.ASN1ObjectIdentifier secp192r1 -> G
    org.spongycastle.asn1.ASN1ObjectIdentifier secp256r1 -> H
    org.spongycastle.asn1.ASN1ObjectIdentifier secg_scheme -> I
    org.spongycastle.asn1.ASN1ObjectIdentifier dhSinglePass_stdDH_sha224kdf_scheme -> J
    org.spongycastle.asn1.ASN1ObjectIdentifier dhSinglePass_stdDH_sha256kdf_scheme -> K
    org.spongycastle.asn1.ASN1ObjectIdentifier dhSinglePass_stdDH_sha384kdf_scheme -> L
    org.spongycastle.asn1.ASN1ObjectIdentifier dhSinglePass_stdDH_sha512kdf_scheme -> M
    org.spongycastle.asn1.ASN1ObjectIdentifier dhSinglePass_cofactorDH_sha224kdf_scheme -> N
    org.spongycastle.asn1.ASN1ObjectIdentifier dhSinglePass_cofactorDH_sha256kdf_scheme -> O
    org.spongycastle.asn1.ASN1ObjectIdentifier dhSinglePass_cofactorDH_sha384kdf_scheme -> P
    org.spongycastle.asn1.ASN1ObjectIdentifier dhSinglePass_cofactorDH_sha512kdf_scheme -> Q
    org.spongycastle.asn1.ASN1ObjectIdentifier mqvSinglePass_sha224kdf_scheme -> R
    org.spongycastle.asn1.ASN1ObjectIdentifier mqvSinglePass_sha256kdf_scheme -> S
    org.spongycastle.asn1.ASN1ObjectIdentifier mqvSinglePass_sha384kdf_scheme -> T
    org.spongycastle.asn1.ASN1ObjectIdentifier mqvSinglePass_sha512kdf_scheme -> U
    org.spongycastle.asn1.ASN1ObjectIdentifier mqvFull_sha224kdf_scheme -> V
    org.spongycastle.asn1.ASN1ObjectIdentifier mqvFull_sha256kdf_scheme -> W
    org.spongycastle.asn1.ASN1ObjectIdentifier mqvFull_sha384kdf_scheme -> X
    org.spongycastle.asn1.ASN1ObjectIdentifier mqvFull_sha512kdf_scheme -> Y
org.spongycastle.asn1.teletrust.TeleTrusTNamedCurves -> org.spongycastle.asn1.p.a:
    org.spongycastle.asn1.x9.X9ECParametersHolder brainpoolP160r1 -> a
    org.spongycastle.asn1.x9.X9ECParametersHolder brainpoolP160t1 -> b
    org.spongycastle.asn1.x9.X9ECParametersHolder brainpoolP192r1 -> c
    org.spongycastle.asn1.x9.X9ECParametersHolder brainpoolP192t1 -> d
    org.spongycastle.asn1.x9.X9ECParametersHolder brainpoolP224r1 -> e
    org.spongycastle.asn1.x9.X9ECParametersHolder brainpoolP224t1 -> f
    org.spongycastle.asn1.x9.X9ECParametersHolder brainpoolP256r1 -> g
    org.spongycastle.asn1.x9.X9ECParametersHolder brainpoolP256t1 -> h
    org.spongycastle.asn1.x9.X9ECParametersHolder brainpoolP320r1 -> i
    org.spongycastle.asn1.x9.X9ECParametersHolder brainpoolP320t1 -> j
    org.spongycastle.asn1.x9.X9ECParametersHolder brainpoolP384r1 -> k
    org.spongycastle.asn1.x9.X9ECParametersHolder brainpoolP384t1 -> l
    org.spongycastle.asn1.x9.X9ECParametersHolder brainpoolP512r1 -> m
    org.spongycastle.asn1.x9.X9ECParametersHolder brainpoolP512t1 -> n
    java.util.Hashtable objIds -> o
    java.util.Hashtable curves -> p
    java.util.Hashtable names -> q
    org.spongycastle.math.ec.ECCurve configureCurve(org.spongycastle.math.ec.ECCurve) -> b
    void defineCurve(java.lang.String,org.spongycastle.asn1.ASN1ObjectIdentifier,org.spongycastle.asn1.x9.X9ECParametersHolder) -> a
    org.spongycastle.asn1.x9.X9ECParameters getByName(java.lang.String) -> a
    org.spongycastle.asn1.x9.X9ECParameters getByOID(org.spongycastle.asn1.ASN1ObjectIdentifier) -> a
    org.spongycastle.asn1.ASN1ObjectIdentifier getOID(java.lang.String) -> b
    java.lang.String getName(org.spongycastle.asn1.ASN1ObjectIdentifier) -> b
    java.util.Enumeration getNames() -> a
    org.spongycastle.math.ec.ECCurve access$000(org.spongycastle.math.ec.ECCurve) -> a
org.spongycastle.asn1.teletrust.TeleTrusTNamedCurves$1 -> org.spongycastle.asn1.p.b:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.asn1.teletrust.TeleTrusTNamedCurves$10 -> org.spongycastle.asn1.p.c:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.asn1.teletrust.TeleTrusTNamedCurves$11 -> org.spongycastle.asn1.p.d:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.asn1.teletrust.TeleTrusTNamedCurves$12 -> org.spongycastle.asn1.p.e:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.asn1.teletrust.TeleTrusTNamedCurves$13 -> org.spongycastle.asn1.p.f:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.asn1.teletrust.TeleTrusTNamedCurves$14 -> org.spongycastle.asn1.p.g:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.asn1.teletrust.TeleTrusTNamedCurves$2 -> org.spongycastle.asn1.p.h:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.asn1.teletrust.TeleTrusTNamedCurves$3 -> org.spongycastle.asn1.p.i:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.asn1.teletrust.TeleTrusTNamedCurves$4 -> org.spongycastle.asn1.p.j:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.asn1.teletrust.TeleTrusTNamedCurves$5 -> org.spongycastle.asn1.p.k:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.asn1.teletrust.TeleTrusTNamedCurves$6 -> org.spongycastle.asn1.p.l:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.asn1.teletrust.TeleTrusTNamedCurves$7 -> org.spongycastle.asn1.p.m:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.asn1.teletrust.TeleTrusTNamedCurves$8 -> org.spongycastle.asn1.p.n:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.asn1.teletrust.TeleTrusTNamedCurves$9 -> org.spongycastle.asn1.p.o:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.asn1.teletrust.TeleTrusTObjectIdentifiers -> org.spongycastle.asn1.p.p:
    org.spongycastle.asn1.ASN1ObjectIdentifier teleTrusTAlgorithm -> a
    org.spongycastle.asn1.ASN1ObjectIdentifier ripemd160 -> b
    org.spongycastle.asn1.ASN1ObjectIdentifier ripemd128 -> c
    org.spongycastle.asn1.ASN1ObjectIdentifier ripemd256 -> d
    org.spongycastle.asn1.ASN1ObjectIdentifier teleTrusTRSAsignatureAlgorithm -> e
    org.spongycastle.asn1.ASN1ObjectIdentifier rsaSignatureWithripemd160 -> f
    org.spongycastle.asn1.ASN1ObjectIdentifier rsaSignatureWithripemd128 -> g
    org.spongycastle.asn1.ASN1ObjectIdentifier rsaSignatureWithripemd256 -> h
    org.spongycastle.asn1.ASN1ObjectIdentifier ecSign -> i
    org.spongycastle.asn1.ASN1ObjectIdentifier ecSignWithSha1 -> j
    org.spongycastle.asn1.ASN1ObjectIdentifier ecSignWithRipemd160 -> k
    org.spongycastle.asn1.ASN1ObjectIdentifier ecc_brainpool -> l
    org.spongycastle.asn1.ASN1ObjectIdentifier ellipticCurve -> m
    org.spongycastle.asn1.ASN1ObjectIdentifier versionOne -> n
    org.spongycastle.asn1.ASN1ObjectIdentifier brainpoolP160r1 -> o
    org.spongycastle.asn1.ASN1ObjectIdentifier brainpoolP160t1 -> p
    org.spongycastle.asn1.ASN1ObjectIdentifier brainpoolP192r1 -> q
    org.spongycastle.asn1.ASN1ObjectIdentifier brainpoolP192t1 -> r
    org.spongycastle.asn1.ASN1ObjectIdentifier brainpoolP224r1 -> s
    org.spongycastle.asn1.ASN1ObjectIdentifier brainpoolP224t1 -> t
    org.spongycastle.asn1.ASN1ObjectIdentifier brainpoolP256r1 -> u
    org.spongycastle.asn1.ASN1ObjectIdentifier brainpoolP256t1 -> v
    org.spongycastle.asn1.ASN1ObjectIdentifier brainpoolP320r1 -> w
    org.spongycastle.asn1.ASN1ObjectIdentifier brainpoolP320t1 -> x
    org.spongycastle.asn1.ASN1ObjectIdentifier brainpoolP384r1 -> y
    org.spongycastle.asn1.ASN1ObjectIdentifier brainpoolP384t1 -> z
    org.spongycastle.asn1.ASN1ObjectIdentifier brainpoolP512r1 -> A
    org.spongycastle.asn1.ASN1ObjectIdentifier brainpoolP512t1 -> B
org.spongycastle.asn1.tsp.Accuracy -> org.spongycastle.asn1.q.a:
    org.spongycastle.asn1.ASN1Integer seconds -> a
    org.spongycastle.asn1.ASN1Integer millis -> b
    org.spongycastle.asn1.ASN1Integer micros -> c
    org.spongycastle.asn1.tsp.Accuracy getInstance(java.lang.Object) -> a
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.tsp.MessageImprint -> org.spongycastle.asn1.q.b:
    org.spongycastle.asn1.x509.AlgorithmIdentifier hashAlgorithm -> a
    byte[] hashedMessage -> b
    org.spongycastle.asn1.tsp.MessageImprint getInstance(java.lang.Object) -> a
    org.spongycastle.asn1.x509.AlgorithmIdentifier getHashAlgorithm() -> a
    byte[] getHashedMessage() -> b
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.tsp.TSTInfo -> org.spongycastle.asn1.q.c:
    org.spongycastle.asn1.ASN1Integer version -> a
    org.spongycastle.asn1.ASN1ObjectIdentifier tsaPolicyId -> b
    org.spongycastle.asn1.tsp.MessageImprint messageImprint -> c
    org.spongycastle.asn1.ASN1Integer serialNumber -> d
    org.spongycastle.asn1.ASN1GeneralizedTime genTime -> e
    org.spongycastle.asn1.tsp.Accuracy accuracy -> f
    org.spongycastle.asn1.ASN1Boolean ordering -> g
    org.spongycastle.asn1.ASN1Integer nonce -> h
    org.spongycastle.asn1.x509.GeneralName tsa -> i
    org.spongycastle.asn1.x509.Extensions extensions -> j
    org.spongycastle.asn1.tsp.TSTInfo getInstance(java.lang.Object) -> a
    org.spongycastle.asn1.tsp.MessageImprint getMessageImprint() -> a
    org.spongycastle.asn1.ASN1ObjectIdentifier getPolicy() -> b
    org.spongycastle.asn1.ASN1GeneralizedTime getGenTime() -> c
    org.spongycastle.asn1.ASN1Integer getNonce() -> d
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.tsp.TimeStampReq -> org.spongycastle.asn1.q.d:
    org.spongycastle.asn1.ASN1Integer version -> a
    org.spongycastle.asn1.tsp.MessageImprint messageImprint -> b
    org.spongycastle.asn1.ASN1ObjectIdentifier tsaPolicy -> c
    org.spongycastle.asn1.ASN1Integer nonce -> d
    org.spongycastle.asn1.ASN1Boolean certReq -> e
    org.spongycastle.asn1.x509.Extensions extensions -> f
    org.spongycastle.asn1.tsp.MessageImprint getMessageImprint() -> a
    org.spongycastle.asn1.ASN1ObjectIdentifier getReqPolicy() -> b
    org.spongycastle.asn1.ASN1Integer getNonce() -> c
    org.spongycastle.asn1.x509.Extensions getExtensions() -> d
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.tsp.TimeStampResp -> org.spongycastle.asn1.q.e:
    org.spongycastle.asn1.cmp.PKIStatusInfo pkiStatusInfo -> a
    org.spongycastle.asn1.cms.ContentInfo timeStampToken -> b
    org.spongycastle.asn1.tsp.TimeStampResp getInstance(java.lang.Object) -> a
    org.spongycastle.asn1.cmp.PKIStatusInfo getStatus() -> a
    org.spongycastle.asn1.cms.ContentInfo getTimeStampToken() -> b
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.ua.DSTU4145BinaryField -> org.spongycastle.asn1.r.a:
    int m -> a
    int k -> b
    int j -> c
    int l -> d
    org.spongycastle.asn1.ua.DSTU4145BinaryField getInstance(java.lang.Object) -> a
    int getM() -> a
    int getK1() -> b
    int getK2() -> c
    int getK3() -> d
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.ua.DSTU4145ECBinary -> org.spongycastle.asn1.r.b:
    java.math.BigInteger version -> a
    org.spongycastle.asn1.ua.DSTU4145BinaryField f -> b
    org.spongycastle.asn1.ASN1Integer a -> c
    org.spongycastle.asn1.ASN1OctetString b -> d
    org.spongycastle.asn1.ASN1Integer n -> e
    org.spongycastle.asn1.ASN1OctetString bp -> f
    org.spongycastle.asn1.ua.DSTU4145ECBinary getInstance(java.lang.Object) -> a
    org.spongycastle.asn1.ua.DSTU4145BinaryField getField() -> a
    java.math.BigInteger getA() -> b
    byte[] getB() -> c
    java.math.BigInteger getN() -> d
    byte[] getG() -> e
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.ua.DSTU4145NamedCurves -> org.spongycastle.asn1.r.c:
    java.math.BigInteger ZERO -> d
    java.math.BigInteger ONE -> e
    org.spongycastle.crypto.params.ECDomainParameters[] params -> a
    org.spongycastle.asn1.ASN1ObjectIdentifier[] oids -> b
    java.lang.String oidBase -> c
    org.spongycastle.crypto.params.ECDomainParameters getByOID(org.spongycastle.asn1.ASN1ObjectIdentifier) -> a
org.spongycastle.asn1.ua.DSTU4145Params -> org.spongycastle.asn1.r.d:
    byte[] DEFAULT_DKE -> a
    org.spongycastle.asn1.ASN1ObjectIdentifier namedCurve -> b
    org.spongycastle.asn1.ua.DSTU4145ECBinary ecbinary -> c
    byte[] dke -> d
    boolean isNamedCurve() -> a
    org.spongycastle.asn1.ua.DSTU4145ECBinary getECBinary() -> b
    byte[] getDKE() -> c
    byte[] getDefaultDKE() -> d
    org.spongycastle.asn1.ASN1ObjectIdentifier getNamedCurve() -> e
    org.spongycastle.asn1.ua.DSTU4145Params getInstance(java.lang.Object) -> a
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.ua.DSTU4145PointEncoder -> org.spongycastle.asn1.r.e:
    org.spongycastle.math.ec.ECFieldElement trace(org.spongycastle.math.ec.ECFieldElement) -> a
    org.spongycastle.math.ec.ECFieldElement solveQuadraticEquation(org.spongycastle.math.ec.ECCurve,org.spongycastle.math.ec.ECFieldElement) -> a
    byte[] encodePoint(org.spongycastle.math.ec.ECPoint) -> a
    org.spongycastle.math.ec.ECPoint decodePoint(org.spongycastle.math.ec.ECCurve,byte[]) -> a
org.spongycastle.asn1.ua.UAObjectIdentifiers -> org.spongycastle.asn1.r.f:
    org.spongycastle.asn1.ASN1ObjectIdentifier UaOid -> a
    org.spongycastle.asn1.ASN1ObjectIdentifier dstu4145le -> b
    org.spongycastle.asn1.ASN1ObjectIdentifier dstu4145be -> c
org.spongycastle.asn1.util.ASN1Dump -> org.spongycastle.asn1.s.a:
    void _dumpAsString(java.lang.String,boolean,org.spongycastle.asn1.ASN1Primitive,java.lang.StringBuffer) -> a
    java.lang.String outputApplicationSpecific(java.lang.String,java.lang.String,boolean,org.spongycastle.asn1.ASN1Primitive,java.lang.String) -> a
    java.lang.String dumpAsString(java.lang.Object) -> a
    java.lang.String dumpAsString(java.lang.Object,boolean) -> a
    java.lang.String dumpBinaryDataAsString(java.lang.String,byte[]) -> a
    java.lang.String calculateAscString(byte[],int,int) -> a
org.spongycastle.asn1.x500.AttributeTypeAndValue -> org.spongycastle.asn1.t.a:
    org.spongycastle.asn1.ASN1ObjectIdentifier type -> a
    org.spongycastle.asn1.ASN1Encodable value -> b
    org.spongycastle.asn1.x500.AttributeTypeAndValue getInstance(java.lang.Object) -> a
    org.spongycastle.asn1.ASN1ObjectIdentifier getType() -> a
    org.spongycastle.asn1.ASN1Encodable getValue() -> b
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.x500.RDN -> org.spongycastle.asn1.t.b:
    org.spongycastle.asn1.ASN1Set values -> a
    org.spongycastle.asn1.x500.RDN getInstance(java.lang.Object) -> a
    boolean isMultiValued() -> a
    org.spongycastle.asn1.x500.AttributeTypeAndValue getFirst() -> b
    org.spongycastle.asn1.x500.AttributeTypeAndValue[] getTypesAndValues() -> c
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.x500.X500Name -> org.spongycastle.asn1.t.c:
    org.spongycastle.asn1.x500.X500NameStyle defaultStyle -> a
    boolean isHashCodeCalculated -> b
    int hashCodeValue -> c
    org.spongycastle.asn1.x500.X500NameStyle style -> d
    org.spongycastle.asn1.x500.RDN[] rdns -> e
    org.spongycastle.asn1.x500.X500Name getInstance(org.spongycastle.asn1.ASN1TaggedObject,boolean) -> a
    org.spongycastle.asn1.x500.X500Name getInstance(java.lang.Object) -> a
    org.spongycastle.asn1.x500.X500Name getInstance(org.spongycastle.asn1.x500.X500NameStyle,java.lang.Object) -> a
    org.spongycastle.asn1.x500.RDN[] getRDNs() -> a
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
org.spongycastle.asn1.x500.X500NameStyle -> org.spongycastle.asn1.t.d:
    boolean areEqual(org.spongycastle.asn1.x500.X500Name,org.spongycastle.asn1.x500.X500Name) -> a
    int calculateHashCode(org.spongycastle.asn1.x500.X500Name) -> a
    java.lang.String toString(org.spongycastle.asn1.x500.X500Name) -> b
org.spongycastle.asn1.x500.style.AbstractX500NameStyle -> org.spongycastle.asn1.t.a.a:
    java.util.Hashtable copyHashTable(java.util.Hashtable) -> a
    int calcHashCode(org.spongycastle.asn1.ASN1Encodable) -> a
    int calculateHashCode(org.spongycastle.asn1.x500.X500Name) -> a
    boolean areEqual(org.spongycastle.asn1.x500.X500Name,org.spongycastle.asn1.x500.X500Name) -> a
    boolean foundMatch(boolean,org.spongycastle.asn1.x500.RDN,org.spongycastle.asn1.x500.RDN[]) -> a
    boolean rdnAreEqual(org.spongycastle.asn1.x500.RDN,org.spongycastle.asn1.x500.RDN) -> a
org.spongycastle.asn1.x500.style.BCStyle -> org.spongycastle.asn1.t.a.b:
    org.spongycastle.asn1.ASN1ObjectIdentifier C -> a
    org.spongycastle.asn1.ASN1ObjectIdentifier O -> b
    org.spongycastle.asn1.ASN1ObjectIdentifier OU -> c
    org.spongycastle.asn1.ASN1ObjectIdentifier T -> d
    org.spongycastle.asn1.ASN1ObjectIdentifier CN -> e
    org.spongycastle.asn1.ASN1ObjectIdentifier SN -> f
    org.spongycastle.asn1.ASN1ObjectIdentifier STREET -> g
    org.spongycastle.asn1.ASN1ObjectIdentifier SERIALNUMBER -> h
    org.spongycastle.asn1.ASN1ObjectIdentifier L -> i
    org.spongycastle.asn1.ASN1ObjectIdentifier ST -> j
    org.spongycastle.asn1.ASN1ObjectIdentifier SURNAME -> k
    org.spongycastle.asn1.ASN1ObjectIdentifier GIVENNAME -> l
    org.spongycastle.asn1.ASN1ObjectIdentifier INITIALS -> m
    org.spongycastle.asn1.ASN1ObjectIdentifier GENERATION -> n
    org.spongycastle.asn1.ASN1ObjectIdentifier UNIQUE_IDENTIFIER -> o
    org.spongycastle.asn1.ASN1ObjectIdentifier BUSINESS_CATEGORY -> p
    org.spongycastle.asn1.ASN1ObjectIdentifier POSTAL_CODE -> q
    org.spongycastle.asn1.ASN1ObjectIdentifier DN_QUALIFIER -> r
    org.spongycastle.asn1.ASN1ObjectIdentifier PSEUDONYM -> s
    org.spongycastle.asn1.ASN1ObjectIdentifier DATE_OF_BIRTH -> t
    org.spongycastle.asn1.ASN1ObjectIdentifier PLACE_OF_BIRTH -> u
    org.spongycastle.asn1.ASN1ObjectIdentifier GENDER -> v
    org.spongycastle.asn1.ASN1ObjectIdentifier COUNTRY_OF_CITIZENSHIP -> w
    org.spongycastle.asn1.ASN1ObjectIdentifier COUNTRY_OF_RESIDENCE -> x
    org.spongycastle.asn1.ASN1ObjectIdentifier NAME_AT_BIRTH -> y
    org.spongycastle.asn1.ASN1ObjectIdentifier POSTAL_ADDRESS -> z
    org.spongycastle.asn1.ASN1ObjectIdentifier DMD_NAME -> A
    org.spongycastle.asn1.ASN1ObjectIdentifier TELEPHONE_NUMBER -> B
    org.spongycastle.asn1.ASN1ObjectIdentifier NAME -> C
    org.spongycastle.asn1.ASN1ObjectIdentifier EmailAddress -> D
    org.spongycastle.asn1.ASN1ObjectIdentifier UnstructuredName -> E
    org.spongycastle.asn1.ASN1ObjectIdentifier UnstructuredAddress -> F
    org.spongycastle.asn1.ASN1ObjectIdentifier E -> G
    org.spongycastle.asn1.ASN1ObjectIdentifier DC -> H
    org.spongycastle.asn1.ASN1ObjectIdentifier UID -> I
    java.util.Hashtable DefaultSymbols -> M
    java.util.Hashtable DefaultLookUp -> N
    org.spongycastle.asn1.x500.X500NameStyle INSTANCE -> J
    java.util.Hashtable defaultLookUp -> K
    java.util.Hashtable defaultSymbols -> L
    java.lang.String toString(org.spongycastle.asn1.x500.X500Name) -> b
org.spongycastle.asn1.x500.style.IETFUtils -> org.spongycastle.asn1.t.a.c:
    void appendRDN(java.lang.StringBuffer,org.spongycastle.asn1.x500.RDN,java.util.Hashtable) -> a
    void appendTypeAndValue(java.lang.StringBuffer,org.spongycastle.asn1.x500.AttributeTypeAndValue,java.util.Hashtable) -> a
    java.lang.String valueToString(org.spongycastle.asn1.ASN1Encodable) -> a
    java.lang.String bytesToString(byte[]) -> a
    java.lang.String canonicalize(java.lang.String) -> a
    org.spongycastle.asn1.ASN1Primitive decodeObject(java.lang.String) -> c
    java.lang.String stripInternalSpaces(java.lang.String) -> b
    boolean rDNAreEqual(org.spongycastle.asn1.x500.RDN,org.spongycastle.asn1.x500.RDN) -> a
    boolean atvAreEqual(org.spongycastle.asn1.x500.AttributeTypeAndValue,org.spongycastle.asn1.x500.AttributeTypeAndValue) -> a
org.spongycastle.asn1.x500.style.RFC4519Style -> org.spongycastle.asn1.t.a.d:
    org.spongycastle.asn1.ASN1ObjectIdentifier businessCategory -> a
    org.spongycastle.asn1.ASN1ObjectIdentifier c -> b
    org.spongycastle.asn1.ASN1ObjectIdentifier cn -> c
    org.spongycastle.asn1.ASN1ObjectIdentifier dc -> d
    org.spongycastle.asn1.ASN1ObjectIdentifier description -> e
    org.spongycastle.asn1.ASN1ObjectIdentifier destinationIndicator -> f
    org.spongycastle.asn1.ASN1ObjectIdentifier distinguishedName -> g
    org.spongycastle.asn1.ASN1ObjectIdentifier dnQualifier -> h
    org.spongycastle.asn1.ASN1ObjectIdentifier enhancedSearchGuide -> i
    org.spongycastle.asn1.ASN1ObjectIdentifier facsimileTelephoneNumber -> j
    org.spongycastle.asn1.ASN1ObjectIdentifier generationQualifier -> k
    org.spongycastle.asn1.ASN1ObjectIdentifier givenName -> l
    org.spongycastle.asn1.ASN1ObjectIdentifier houseIdentifier -> m
    org.spongycastle.asn1.ASN1ObjectIdentifier initials -> n
    org.spongycastle.asn1.ASN1ObjectIdentifier internationalISDNNumber -> o
    org.spongycastle.asn1.ASN1ObjectIdentifier l -> p
    org.spongycastle.asn1.ASN1ObjectIdentifier member -> q
    org.spongycastle.asn1.ASN1ObjectIdentifier name -> r
    org.spongycastle.asn1.ASN1ObjectIdentifier o -> s
    org.spongycastle.asn1.ASN1ObjectIdentifier ou -> t
    org.spongycastle.asn1.ASN1ObjectIdentifier owner -> u
    org.spongycastle.asn1.ASN1ObjectIdentifier physicalDeliveryOfficeName -> v
    org.spongycastle.asn1.ASN1ObjectIdentifier postalAddress -> w
    org.spongycastle.asn1.ASN1ObjectIdentifier postalCode -> x
    org.spongycastle.asn1.ASN1ObjectIdentifier postOfficeBox -> y
    org.spongycastle.asn1.ASN1ObjectIdentifier preferredDeliveryMethod -> z
    org.spongycastle.asn1.ASN1ObjectIdentifier registeredAddress -> A
    org.spongycastle.asn1.ASN1ObjectIdentifier roleOccupant -> B
    org.spongycastle.asn1.ASN1ObjectIdentifier searchGuide -> C
    org.spongycastle.asn1.ASN1ObjectIdentifier seeAlso -> D
    org.spongycastle.asn1.ASN1ObjectIdentifier serialNumber -> E
    org.spongycastle.asn1.ASN1ObjectIdentifier sn -> F
    org.spongycastle.asn1.ASN1ObjectIdentifier st -> G
    org.spongycastle.asn1.ASN1ObjectIdentifier street -> H
    org.spongycastle.asn1.ASN1ObjectIdentifier telephoneNumber -> I
    org.spongycastle.asn1.ASN1ObjectIdentifier teletexTerminalIdentifier -> J
    org.spongycastle.asn1.ASN1ObjectIdentifier telexNumber -> K
    org.spongycastle.asn1.ASN1ObjectIdentifier title -> L
    org.spongycastle.asn1.ASN1ObjectIdentifier uid -> M
    org.spongycastle.asn1.ASN1ObjectIdentifier uniqueMember -> N
    org.spongycastle.asn1.ASN1ObjectIdentifier userPassword -> O
    org.spongycastle.asn1.ASN1ObjectIdentifier x121Address -> P
    org.spongycastle.asn1.ASN1ObjectIdentifier x500UniqueIdentifier -> Q
    java.util.Hashtable DefaultSymbols -> U
    java.util.Hashtable DefaultLookUp -> V
    org.spongycastle.asn1.x500.X500NameStyle INSTANCE -> R
    java.util.Hashtable defaultLookUp -> S
    java.util.Hashtable defaultSymbols -> T
    java.lang.String toString(org.spongycastle.asn1.x500.X500Name) -> b
org.spongycastle.asn1.x509.AlgorithmIdentifier -> org.spongycastle.asn1.u.a:
    org.spongycastle.asn1.ASN1ObjectIdentifier algorithm -> a
    org.spongycastle.asn1.ASN1Encodable parameters -> b
    org.spongycastle.asn1.x509.AlgorithmIdentifier getInstance(org.spongycastle.asn1.ASN1TaggedObject,boolean) -> a
    org.spongycastle.asn1.x509.AlgorithmIdentifier getInstance(java.lang.Object) -> a
    org.spongycastle.asn1.ASN1ObjectIdentifier getAlgorithm() -> a
    org.spongycastle.asn1.ASN1Encodable getParameters() -> b
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.x509.AuthorityKeyIdentifier -> org.spongycastle.asn1.u.b:
    org.spongycastle.asn1.ASN1OctetString keyidentifier -> a
    org.spongycastle.asn1.x509.GeneralNames certissuer -> b
    org.spongycastle.asn1.ASN1Integer certserno -> c
    org.spongycastle.asn1.x509.AuthorityKeyIdentifier getInstance(java.lang.Object) -> a
    byte[] getKeyIdentifier() -> a
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
    java.lang.String toString() -> toString
org.spongycastle.asn1.x509.BasicConstraints -> org.spongycastle.asn1.u.c:
    org.spongycastle.asn1.ASN1Boolean cA -> a
    org.spongycastle.asn1.ASN1Integer pathLenConstraint -> b
    org.spongycastle.asn1.x509.BasicConstraints getInstance(java.lang.Object) -> a
    boolean isCA() -> a
    java.math.BigInteger getPathLenConstraint() -> b
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
    java.lang.String toString() -> toString
org.spongycastle.asn1.x509.CRLDistPoint -> org.spongycastle.asn1.u.d:
    org.spongycastle.asn1.ASN1Sequence seq -> a
    org.spongycastle.asn1.x509.CRLDistPoint getInstance(java.lang.Object) -> a
    org.spongycastle.asn1.x509.DistributionPoint[] getDistributionPoints() -> a
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
    java.lang.String toString() -> toString
org.spongycastle.asn1.x509.CRLNumber -> org.spongycastle.asn1.u.e:
    java.math.BigInteger number -> a
    java.math.BigInteger getCRLNumber() -> a
    java.lang.String toString() -> toString
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.x509.CRLReason -> org.spongycastle.asn1.u.f:
    java.lang.String[] reasonString -> a
    java.util.Hashtable table -> b
    org.spongycastle.asn1.ASN1Enumerated value -> c
    org.spongycastle.asn1.x509.CRLReason getInstance(java.lang.Object) -> a
    java.lang.String toString() -> toString
    java.math.BigInteger getValue() -> a
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
    org.spongycastle.asn1.x509.CRLReason lookup(int) -> a
org.spongycastle.asn1.x509.Certificate -> org.spongycastle.asn1.u.g:
    org.spongycastle.asn1.ASN1Sequence seq -> a
    org.spongycastle.asn1.x509.TBSCertificate tbsCert -> b
    org.spongycastle.asn1.x509.AlgorithmIdentifier sigAlgId -> c
    org.spongycastle.asn1.DERBitString sig -> d
    org.spongycastle.asn1.x509.Certificate getInstance(java.lang.Object) -> a
    org.spongycastle.asn1.x509.TBSCertificate getTBSCertificate() -> a
    int getVersionNumber() -> b
    org.spongycastle.asn1.ASN1Integer getSerialNumber() -> c
    org.spongycastle.asn1.x500.X500Name getIssuer() -> d
    org.spongycastle.asn1.x509.Time getStartDate() -> e
    org.spongycastle.asn1.x509.Time getEndDate() -> f
    org.spongycastle.asn1.x500.X500Name getSubject() -> g
    org.spongycastle.asn1.x509.SubjectPublicKeyInfo getSubjectPublicKeyInfo() -> h
    org.spongycastle.asn1.x509.AlgorithmIdentifier getSignatureAlgorithm() -> i
    org.spongycastle.asn1.DERBitString getSignature() -> j
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.x509.CertificateList -> org.spongycastle.asn1.u.h:
    org.spongycastle.asn1.x509.TBSCertList tbsCertList -> a
    org.spongycastle.asn1.x509.AlgorithmIdentifier sigAlgId -> b
    org.spongycastle.asn1.DERBitString sig -> c
    boolean isHashCodeSet -> d
    int hashCodeValue -> e
    org.spongycastle.asn1.x509.CertificateList getInstance(java.lang.Object) -> a
    org.spongycastle.asn1.x509.TBSCertList getTBSCertList() -> a
    java.util.Enumeration getRevokedCertificateEnumeration() -> b
    org.spongycastle.asn1.x509.AlgorithmIdentifier getSignatureAlgorithm() -> c
    org.spongycastle.asn1.DERBitString getSignature() -> d
    int getVersionNumber() -> e
    org.spongycastle.asn1.x500.X500Name getIssuer() -> f
    org.spongycastle.asn1.x509.Time getThisUpdate() -> g
    org.spongycastle.asn1.x509.Time getNextUpdate() -> h
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
    int hashCode() -> hashCode
org.spongycastle.asn1.x509.CertificatePolicies -> org.spongycastle.asn1.u.i:
    org.spongycastle.asn1.x509.PolicyInformation[] policyInformation -> a
    org.spongycastle.asn1.x509.CertificatePolicies getInstance(java.lang.Object) -> a
    org.spongycastle.asn1.x509.PolicyInformation[] getPolicyInformation() -> a
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
    java.lang.String toString() -> toString
org.spongycastle.asn1.x509.DSAParameter -> org.spongycastle.asn1.u.j:
    org.spongycastle.asn1.ASN1Integer p -> a
    org.spongycastle.asn1.ASN1Integer q -> b
    org.spongycastle.asn1.ASN1Integer g -> c
    org.spongycastle.asn1.x509.DSAParameter getInstance(java.lang.Object) -> a
    java.math.BigInteger getP() -> a
    java.math.BigInteger getQ() -> b
    java.math.BigInteger getG() -> c
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.x509.DigestInfo -> org.spongycastle.asn1.u.k:
    byte[] digest -> a
    org.spongycastle.asn1.x509.AlgorithmIdentifier algId -> b
    org.spongycastle.asn1.x509.DigestInfo getInstance(java.lang.Object) -> a
    org.spongycastle.asn1.x509.AlgorithmIdentifier getAlgorithmId() -> a
    byte[] getDigest() -> b
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.x509.DistributionPoint -> org.spongycastle.asn1.u.l:
    org.spongycastle.asn1.x509.DistributionPointName distributionPoint -> a
    org.spongycastle.asn1.x509.ReasonFlags reasons -> b
    org.spongycastle.asn1.x509.GeneralNames cRLIssuer -> c
    org.spongycastle.asn1.x509.DistributionPoint getInstance(java.lang.Object) -> a
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
    java.lang.String toString() -> toString
    void appendObject(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String) -> a
org.spongycastle.asn1.x509.DistributionPointName -> org.spongycastle.asn1.u.m:
    org.spongycastle.asn1.ASN1Encodable name -> a
    int type -> b
    org.spongycastle.asn1.x509.DistributionPointName getInstance(org.spongycastle.asn1.ASN1TaggedObject,boolean) -> a
    org.spongycastle.asn1.x509.DistributionPointName getInstance(java.lang.Object) -> a
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
    java.lang.String toString() -> toString
    void appendObject(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String) -> a
org.spongycastle.asn1.x509.Extension -> org.spongycastle.asn1.u.n:
    org.spongycastle.asn1.ASN1ObjectIdentifier subjectDirectoryAttributes -> a
    org.spongycastle.asn1.ASN1ObjectIdentifier subjectKeyIdentifier -> b
    org.spongycastle.asn1.ASN1ObjectIdentifier keyUsage -> c
    org.spongycastle.asn1.ASN1ObjectIdentifier privateKeyUsagePeriod -> d
    org.spongycastle.asn1.ASN1ObjectIdentifier subjectAlternativeName -> e
    org.spongycastle.asn1.ASN1ObjectIdentifier issuerAlternativeName -> f
    org.spongycastle.asn1.ASN1ObjectIdentifier basicConstraints -> g
    org.spongycastle.asn1.ASN1ObjectIdentifier cRLNumber -> h
    org.spongycastle.asn1.ASN1ObjectIdentifier reasonCode -> i
    org.spongycastle.asn1.ASN1ObjectIdentifier instructionCode -> j
    org.spongycastle.asn1.ASN1ObjectIdentifier invalidityDate -> k
    org.spongycastle.asn1.ASN1ObjectIdentifier deltaCRLIndicator -> l
    org.spongycastle.asn1.ASN1ObjectIdentifier issuingDistributionPoint -> m
    org.spongycastle.asn1.ASN1ObjectIdentifier certificateIssuer -> n
    org.spongycastle.asn1.ASN1ObjectIdentifier nameConstraints -> o
    org.spongycastle.asn1.ASN1ObjectIdentifier cRLDistributionPoints -> p
    org.spongycastle.asn1.ASN1ObjectIdentifier certificatePolicies -> q
    org.spongycastle.asn1.ASN1ObjectIdentifier policyMappings -> r
    org.spongycastle.asn1.ASN1ObjectIdentifier authorityKeyIdentifier -> s
    org.spongycastle.asn1.ASN1ObjectIdentifier policyConstraints -> t
    org.spongycastle.asn1.ASN1ObjectIdentifier extendedKeyUsage -> u
    org.spongycastle.asn1.ASN1ObjectIdentifier freshestCRL -> v
    org.spongycastle.asn1.ASN1ObjectIdentifier inhibitAnyPolicy -> w
    org.spongycastle.asn1.ASN1ObjectIdentifier authorityInfoAccess -> x
    org.spongycastle.asn1.ASN1ObjectIdentifier subjectInfoAccess -> y
    org.spongycastle.asn1.ASN1ObjectIdentifier logoType -> z
    org.spongycastle.asn1.ASN1ObjectIdentifier biometricInfo -> A
    org.spongycastle.asn1.ASN1ObjectIdentifier qCStatements -> B
    org.spongycastle.asn1.ASN1ObjectIdentifier auditIdentity -> C
    org.spongycastle.asn1.ASN1ObjectIdentifier noRevAvail -> D
    org.spongycastle.asn1.ASN1ObjectIdentifier targetInformation -> E
    org.spongycastle.asn1.ASN1ObjectIdentifier extnId -> F
    boolean critical -> G
    org.spongycastle.asn1.ASN1OctetString value -> H
    org.spongycastle.asn1.x509.Extension getInstance(java.lang.Object) -> a
    org.spongycastle.asn1.ASN1ObjectIdentifier getExtnId() -> a
    boolean isCritical() -> b
    org.spongycastle.asn1.ASN1OctetString getExtnValue() -> c
    org.spongycastle.asn1.ASN1Encodable getParsedValue() -> d
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
    org.spongycastle.asn1.ASN1Primitive convertValueToObject(org.spongycastle.asn1.x509.Extension) -> a
org.spongycastle.asn1.x509.Extensions -> org.spongycastle.asn1.u.o:
    java.util.Hashtable extensions -> a
    java.util.Vector ordering -> b
    org.spongycastle.asn1.x509.Extensions getInstance(org.spongycastle.asn1.ASN1TaggedObject,boolean) -> a
    org.spongycastle.asn1.x509.Extensions getInstance(java.lang.Object) -> a
    java.util.Enumeration oids() -> a
    org.spongycastle.asn1.x509.Extension getExtension(org.spongycastle.asn1.ASN1ObjectIdentifier) -> a
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.x509.ExtensionsGenerator -> org.spongycastle.asn1.u.p:
    java.util.Hashtable extensions -> a
    java.util.Vector extOrdering -> b
    void addExtension(org.spongycastle.asn1.ASN1ObjectIdentifier,boolean,byte[]) -> a
    boolean isEmpty() -> a
    org.spongycastle.asn1.x509.Extensions generate() -> b
org.spongycastle.asn1.x509.GeneralName -> org.spongycastle.asn1.u.q:
    org.spongycastle.asn1.ASN1Encodable obj -> a
    int tag -> b
    org.spongycastle.asn1.x509.GeneralName getInstance(java.lang.Object) -> a
    org.spongycastle.asn1.x509.GeneralName getInstance(org.spongycastle.asn1.ASN1TaggedObject,boolean) -> a
    int getTagNo() -> a
    org.spongycastle.asn1.ASN1Encodable getName() -> b
    java.lang.String toString() -> toString
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.x509.GeneralNames -> org.spongycastle.asn1.u.r:
    org.spongycastle.asn1.x509.GeneralName[] names -> a
    org.spongycastle.asn1.x509.GeneralNames getInstance(java.lang.Object) -> a
    org.spongycastle.asn1.x509.GeneralNames getInstance(org.spongycastle.asn1.ASN1TaggedObject,boolean) -> a
    org.spongycastle.asn1.x509.GeneralName[] getNames() -> a
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
    java.lang.String toString() -> toString
org.spongycastle.asn1.x509.IssuerSerial -> org.spongycastle.asn1.u.s:
    org.spongycastle.asn1.x509.GeneralNames issuer -> a
    org.spongycastle.asn1.ASN1Integer serial -> b
    org.spongycastle.asn1.DERBitString issuerUID -> c
    org.spongycastle.asn1.x509.IssuerSerial getInstance(java.lang.Object) -> a
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.x509.IssuingDistributionPoint -> org.spongycastle.asn1.u.t:
    org.spongycastle.asn1.x509.DistributionPointName distributionPoint -> a
    boolean onlyContainsUserCerts -> b
    boolean onlyContainsCACerts -> c
    org.spongycastle.asn1.x509.ReasonFlags onlySomeReasons -> d
    boolean indirectCRL -> e
    boolean onlyContainsAttributeCerts -> f
    org.spongycastle.asn1.ASN1Sequence seq -> g
    org.spongycastle.asn1.x509.IssuingDistributionPoint getInstance(java.lang.Object) -> a
    boolean isIndirectCRL() -> a
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
    java.lang.String toString() -> toString
    void appendObject(java.lang.StringBuffer,java.lang.String,java.lang.String,java.lang.String) -> a
    java.lang.String booleanToString(boolean) -> a
org.spongycastle.asn1.x509.KeyUsage -> org.spongycastle.asn1.u.u:
    org.spongycastle.asn1.DERBitString bitString -> a
    org.spongycastle.asn1.x509.KeyUsage getInstance(java.lang.Object) -> a
    java.lang.String toString() -> toString
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.x509.PolicyInformation -> org.spongycastle.asn1.u.v:
    org.spongycastle.asn1.ASN1ObjectIdentifier policyIdentifier -> a
    org.spongycastle.asn1.ASN1Sequence policyQualifiers -> b
    org.spongycastle.asn1.x509.PolicyInformation getInstance(java.lang.Object) -> a
    org.spongycastle.asn1.ASN1ObjectIdentifier getPolicyIdentifier() -> a
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
    java.lang.String toString() -> toString
org.spongycastle.asn1.x509.PolicyQualifierInfo -> org.spongycastle.asn1.u.w:
    org.spongycastle.asn1.ASN1ObjectIdentifier policyQualifierId -> a
    org.spongycastle.asn1.ASN1Encodable qualifier -> b
    org.spongycastle.asn1.x509.PolicyQualifierInfo getInstance(java.lang.Object) -> a
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.x509.ReasonFlags -> org.spongycastle.asn1.u.x:
org.spongycastle.asn1.x509.SubjectKeyIdentifier -> org.spongycastle.asn1.u.y:
    byte[] keyidentifier -> a
    org.spongycastle.asn1.x509.SubjectKeyIdentifier getInstance(org.spongycastle.asn1.ASN1TaggedObject,boolean) -> a
    org.spongycastle.asn1.x509.SubjectKeyIdentifier getInstance(java.lang.Object) -> a
    byte[] getKeyIdentifier() -> a
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.x509.SubjectPublicKeyInfo -> org.spongycastle.asn1.u.z:
    org.spongycastle.asn1.x509.AlgorithmIdentifier algId -> a
    org.spongycastle.asn1.DERBitString keyData -> b
    org.spongycastle.asn1.x509.SubjectPublicKeyInfo getInstance(java.lang.Object) -> a
    org.spongycastle.asn1.x509.AlgorithmIdentifier getAlgorithm() -> a
    org.spongycastle.asn1.x509.AlgorithmIdentifier getAlgorithmId() -> b
    org.spongycastle.asn1.ASN1Primitive parsePublicKey() -> c
    org.spongycastle.asn1.DERBitString getPublicKeyData() -> d
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.x509.TBSCertList -> org.spongycastle.asn1.u.A:
    org.spongycastle.asn1.ASN1Integer version -> a
    org.spongycastle.asn1.x509.AlgorithmIdentifier signature -> b
    org.spongycastle.asn1.x500.X500Name issuer -> c
    org.spongycastle.asn1.x509.Time thisUpdate -> d
    org.spongycastle.asn1.x509.Time nextUpdate -> e
    org.spongycastle.asn1.ASN1Sequence revokedCertificates -> f
    org.spongycastle.asn1.x509.Extensions crlExtensions -> g
    org.spongycastle.asn1.x509.TBSCertList getInstance(java.lang.Object) -> a
    int getVersionNumber() -> a
    org.spongycastle.asn1.x509.AlgorithmIdentifier getSignature() -> b
    org.spongycastle.asn1.x500.X500Name getIssuer() -> c
    org.spongycastle.asn1.x509.Time getThisUpdate() -> d
    org.spongycastle.asn1.x509.Time getNextUpdate() -> e
    java.util.Enumeration getRevokedCertificateEnumeration() -> f
    org.spongycastle.asn1.x509.Extensions getExtensions() -> g
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.x509.TBSCertList$1 -> org.spongycastle.asn1.u.B:
org.spongycastle.asn1.x509.TBSCertList$CRLEntry -> org.spongycastle.asn1.u.C:
    org.spongycastle.asn1.ASN1Sequence seq -> a
    org.spongycastle.asn1.x509.Extensions crlEntryExtensions -> b
    org.spongycastle.asn1.x509.TBSCertList$CRLEntry getInstance(java.lang.Object) -> a
    org.spongycastle.asn1.ASN1Integer getUserCertificate() -> a
    org.spongycastle.asn1.x509.Time getRevocationDate() -> b
    org.spongycastle.asn1.x509.Extensions getExtensions() -> c
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
    boolean hasExtensions() -> d
org.spongycastle.asn1.x509.TBSCertList$EmptyEnumeration -> org.spongycastle.asn1.u.D:
    org.spongycastle.asn1.x509.TBSCertList this$0 -> a
    boolean hasMoreElements() -> hasMoreElements
    java.lang.Object nextElement() -> nextElement
org.spongycastle.asn1.x509.TBSCertList$RevokedCertificatesEnumeration -> org.spongycastle.asn1.u.E:
    java.util.Enumeration en -> b
    org.spongycastle.asn1.x509.TBSCertList this$0 -> a
    boolean hasMoreElements() -> hasMoreElements
    java.lang.Object nextElement() -> nextElement
org.spongycastle.asn1.x509.TBSCertificate -> org.spongycastle.asn1.u.F:
    org.spongycastle.asn1.ASN1Sequence seq -> a
    org.spongycastle.asn1.ASN1Integer version -> b
    org.spongycastle.asn1.ASN1Integer serialNumber -> c
    org.spongycastle.asn1.x509.AlgorithmIdentifier signature -> d
    org.spongycastle.asn1.x500.X500Name issuer -> e
    org.spongycastle.asn1.x509.Time startDate -> f
    org.spongycastle.asn1.x509.Time endDate -> g
    org.spongycastle.asn1.x500.X500Name subject -> h
    org.spongycastle.asn1.x509.SubjectPublicKeyInfo subjectPublicKeyInfo -> i
    org.spongycastle.asn1.DERBitString issuerUniqueId -> j
    org.spongycastle.asn1.DERBitString subjectUniqueId -> k
    org.spongycastle.asn1.x509.Extensions extensions -> l
    org.spongycastle.asn1.x509.TBSCertificate getInstance(java.lang.Object) -> a
    int getVersionNumber() -> a
    org.spongycastle.asn1.ASN1Integer getSerialNumber() -> b
    org.spongycastle.asn1.x509.AlgorithmIdentifier getSignature() -> c
    org.spongycastle.asn1.x500.X500Name getIssuer() -> d
    org.spongycastle.asn1.x509.Time getStartDate() -> e
    org.spongycastle.asn1.x509.Time getEndDate() -> f
    org.spongycastle.asn1.x500.X500Name getSubject() -> g
    org.spongycastle.asn1.x509.SubjectPublicKeyInfo getSubjectPublicKeyInfo() -> h
    org.spongycastle.asn1.DERBitString getIssuerUniqueId() -> i
    org.spongycastle.asn1.DERBitString getSubjectUniqueId() -> j
    org.spongycastle.asn1.x509.Extensions getExtensions() -> k
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.x509.TBSCertificateStructure -> org.spongycastle.asn1.u.G:
    org.spongycastle.asn1.ASN1Sequence seq -> bH
    org.spongycastle.asn1.ASN1Integer version -> bI
    org.spongycastle.asn1.ASN1Integer serialNumber -> bJ
    org.spongycastle.asn1.x509.AlgorithmIdentifier signature -> bK
    org.spongycastle.asn1.x500.X500Name issuer -> bL
    org.spongycastle.asn1.x509.Time startDate -> bM
    org.spongycastle.asn1.x509.Time endDate -> bN
    org.spongycastle.asn1.x500.X500Name subject -> bO
    org.spongycastle.asn1.x509.SubjectPublicKeyInfo subjectPublicKeyInfo -> bP
    org.spongycastle.asn1.DERBitString issuerUniqueId -> bQ
    org.spongycastle.asn1.DERBitString subjectUniqueId -> bR
    org.spongycastle.asn1.x509.X509Extensions extensions -> bS
    org.spongycastle.asn1.x509.TBSCertificateStructure getInstance(java.lang.Object) -> a
    org.spongycastle.asn1.ASN1Integer getSerialNumber() -> a
    org.spongycastle.asn1.x500.X500Name getIssuer() -> b
    org.spongycastle.asn1.x509.SubjectPublicKeyInfo getSubjectPublicKeyInfo() -> c
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.x509.Time -> org.spongycastle.asn1.u.H:
    org.spongycastle.asn1.ASN1Primitive time -> a
    org.spongycastle.asn1.x509.Time getInstance(java.lang.Object) -> a
    java.lang.String getTime() -> a
    java.util.Date getDate() -> b
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
    java.lang.String toString() -> toString
org.spongycastle.asn1.x509.X509Extension -> org.spongycastle.asn1.u.I:
    org.spongycastle.asn1.ASN1ObjectIdentifier subjectDirectoryAttributes -> a
    org.spongycastle.asn1.ASN1ObjectIdentifier subjectKeyIdentifier -> b
    org.spongycastle.asn1.ASN1ObjectIdentifier keyUsage -> c
    org.spongycastle.asn1.ASN1ObjectIdentifier privateKeyUsagePeriod -> d
    org.spongycastle.asn1.ASN1ObjectIdentifier subjectAlternativeName -> e
    org.spongycastle.asn1.ASN1ObjectIdentifier issuerAlternativeName -> f
    org.spongycastle.asn1.ASN1ObjectIdentifier basicConstraints -> g
    org.spongycastle.asn1.ASN1ObjectIdentifier cRLNumber -> h
    org.spongycastle.asn1.ASN1ObjectIdentifier reasonCode -> i
    org.spongycastle.asn1.ASN1ObjectIdentifier instructionCode -> j
    org.spongycastle.asn1.ASN1ObjectIdentifier invalidityDate -> k
    org.spongycastle.asn1.ASN1ObjectIdentifier deltaCRLIndicator -> l
    org.spongycastle.asn1.ASN1ObjectIdentifier issuingDistributionPoint -> m
    org.spongycastle.asn1.ASN1ObjectIdentifier certificateIssuer -> n
    org.spongycastle.asn1.ASN1ObjectIdentifier nameConstraints -> o
    org.spongycastle.asn1.ASN1ObjectIdentifier cRLDistributionPoints -> p
    org.spongycastle.asn1.ASN1ObjectIdentifier certificatePolicies -> q
    org.spongycastle.asn1.ASN1ObjectIdentifier policyMappings -> r
    org.spongycastle.asn1.ASN1ObjectIdentifier authorityKeyIdentifier -> s
    org.spongycastle.asn1.ASN1ObjectIdentifier policyConstraints -> t
    org.spongycastle.asn1.ASN1ObjectIdentifier extendedKeyUsage -> u
    org.spongycastle.asn1.ASN1ObjectIdentifier freshestCRL -> v
    org.spongycastle.asn1.ASN1ObjectIdentifier inhibitAnyPolicy -> w
    org.spongycastle.asn1.ASN1ObjectIdentifier authorityInfoAccess -> x
    org.spongycastle.asn1.ASN1ObjectIdentifier subjectInfoAccess -> y
    org.spongycastle.asn1.ASN1ObjectIdentifier logoType -> z
    org.spongycastle.asn1.ASN1ObjectIdentifier biometricInfo -> A
    org.spongycastle.asn1.ASN1ObjectIdentifier qCStatements -> B
    org.spongycastle.asn1.ASN1ObjectIdentifier auditIdentity -> C
    org.spongycastle.asn1.ASN1ObjectIdentifier noRevAvail -> D
    org.spongycastle.asn1.ASN1ObjectIdentifier targetInformation -> E
    boolean critical -> F
    org.spongycastle.asn1.ASN1OctetString value -> G
    boolean isCritical() -> a
    org.spongycastle.asn1.ASN1OctetString getValue() -> b
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    org.spongycastle.asn1.ASN1Primitive convertValueToObject(org.spongycastle.asn1.x509.X509Extension) -> a
org.spongycastle.asn1.x509.X509Extensions -> org.spongycastle.asn1.u.J:
    org.spongycastle.asn1.ASN1ObjectIdentifier SubjectDirectoryAttributes -> a
    org.spongycastle.asn1.ASN1ObjectIdentifier SubjectKeyIdentifier -> b
    org.spongycastle.asn1.ASN1ObjectIdentifier KeyUsage -> c
    org.spongycastle.asn1.ASN1ObjectIdentifier PrivateKeyUsagePeriod -> d
    org.spongycastle.asn1.ASN1ObjectIdentifier SubjectAlternativeName -> e
    org.spongycastle.asn1.ASN1ObjectIdentifier IssuerAlternativeName -> f
    org.spongycastle.asn1.ASN1ObjectIdentifier BasicConstraints -> g
    org.spongycastle.asn1.ASN1ObjectIdentifier CRLNumber -> h
    org.spongycastle.asn1.ASN1ObjectIdentifier ReasonCode -> i
    org.spongycastle.asn1.ASN1ObjectIdentifier InstructionCode -> j
    org.spongycastle.asn1.ASN1ObjectIdentifier InvalidityDate -> k
    org.spongycastle.asn1.ASN1ObjectIdentifier DeltaCRLIndicator -> l
    org.spongycastle.asn1.ASN1ObjectIdentifier IssuingDistributionPoint -> m
    org.spongycastle.asn1.ASN1ObjectIdentifier CertificateIssuer -> n
    org.spongycastle.asn1.ASN1ObjectIdentifier NameConstraints -> o
    org.spongycastle.asn1.ASN1ObjectIdentifier CRLDistributionPoints -> p
    org.spongycastle.asn1.ASN1ObjectIdentifier CertificatePolicies -> q
    org.spongycastle.asn1.ASN1ObjectIdentifier PolicyMappings -> r
    org.spongycastle.asn1.ASN1ObjectIdentifier AuthorityKeyIdentifier -> s
    org.spongycastle.asn1.ASN1ObjectIdentifier PolicyConstraints -> t
    org.spongycastle.asn1.ASN1ObjectIdentifier ExtendedKeyUsage -> u
    org.spongycastle.asn1.ASN1ObjectIdentifier FreshestCRL -> v
    org.spongycastle.asn1.ASN1ObjectIdentifier InhibitAnyPolicy -> w
    org.spongycastle.asn1.ASN1ObjectIdentifier AuthorityInfoAccess -> x
    org.spongycastle.asn1.ASN1ObjectIdentifier SubjectInfoAccess -> y
    org.spongycastle.asn1.ASN1ObjectIdentifier LogoType -> z
    org.spongycastle.asn1.ASN1ObjectIdentifier BiometricInfo -> A
    org.spongycastle.asn1.ASN1ObjectIdentifier QCStatements -> B
    org.spongycastle.asn1.ASN1ObjectIdentifier AuditIdentity -> C
    org.spongycastle.asn1.ASN1ObjectIdentifier NoRevAvail -> D
    org.spongycastle.asn1.ASN1ObjectIdentifier TargetInformation -> E
    java.util.Hashtable extensions -> F
    java.util.Vector ordering -> G
    org.spongycastle.asn1.x509.X509Extensions getInstance(java.lang.Object) -> a
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.x509.X509Name -> org.spongycastle.asn1.u.K:
    org.spongycastle.asn1.ASN1ObjectIdentifier C -> a
    org.spongycastle.asn1.ASN1ObjectIdentifier O -> b
    org.spongycastle.asn1.ASN1ObjectIdentifier OU -> c
    org.spongycastle.asn1.ASN1ObjectIdentifier T -> d
    org.spongycastle.asn1.ASN1ObjectIdentifier CN -> e
    org.spongycastle.asn1.ASN1ObjectIdentifier SN -> f
    org.spongycastle.asn1.ASN1ObjectIdentifier STREET -> g
    org.spongycastle.asn1.ASN1ObjectIdentifier SERIALNUMBER -> h
    org.spongycastle.asn1.ASN1ObjectIdentifier L -> i
    org.spongycastle.asn1.ASN1ObjectIdentifier ST -> j
    org.spongycastle.asn1.ASN1ObjectIdentifier SURNAME -> k
    org.spongycastle.asn1.ASN1ObjectIdentifier GIVENNAME -> l
    org.spongycastle.asn1.ASN1ObjectIdentifier INITIALS -> m
    org.spongycastle.asn1.ASN1ObjectIdentifier GENERATION -> n
    org.spongycastle.asn1.ASN1ObjectIdentifier UNIQUE_IDENTIFIER -> o
    org.spongycastle.asn1.ASN1ObjectIdentifier BUSINESS_CATEGORY -> p
    org.spongycastle.asn1.ASN1ObjectIdentifier POSTAL_CODE -> q
    org.spongycastle.asn1.ASN1ObjectIdentifier DN_QUALIFIER -> r
    org.spongycastle.asn1.ASN1ObjectIdentifier PSEUDONYM -> s
    org.spongycastle.asn1.ASN1ObjectIdentifier DATE_OF_BIRTH -> t
    org.spongycastle.asn1.ASN1ObjectIdentifier PLACE_OF_BIRTH -> u
    org.spongycastle.asn1.ASN1ObjectIdentifier GENDER -> v
    org.spongycastle.asn1.ASN1ObjectIdentifier COUNTRY_OF_CITIZENSHIP -> w
    org.spongycastle.asn1.ASN1ObjectIdentifier COUNTRY_OF_RESIDENCE -> x
    org.spongycastle.asn1.ASN1ObjectIdentifier NAME_AT_BIRTH -> y
    org.spongycastle.asn1.ASN1ObjectIdentifier POSTAL_ADDRESS -> z
    org.spongycastle.asn1.ASN1ObjectIdentifier DMD_NAME -> A
    org.spongycastle.asn1.ASN1ObjectIdentifier TELEPHONE_NUMBER -> B
    org.spongycastle.asn1.ASN1ObjectIdentifier NAME -> C
    org.spongycastle.asn1.ASN1ObjectIdentifier EmailAddress -> D
    org.spongycastle.asn1.ASN1ObjectIdentifier UnstructuredName -> E
    org.spongycastle.asn1.ASN1ObjectIdentifier UnstructuredAddress -> F
    org.spongycastle.asn1.ASN1ObjectIdentifier E -> G
    org.spongycastle.asn1.ASN1ObjectIdentifier DC -> H
    org.spongycastle.asn1.ASN1ObjectIdentifier UID -> I
    boolean DefaultReverse -> J
    java.util.Hashtable DefaultSymbols -> K
    java.util.Hashtable RFC2253Symbols -> L
    java.util.Hashtable RFC1779Symbols -> M
    java.util.Hashtable DefaultLookUp -> N
    java.util.Hashtable OIDLookUp -> O
    java.util.Hashtable SymbolLookUp -> P
    java.lang.Boolean TRUE -> Q
    java.lang.Boolean FALSE -> R
    org.spongycastle.asn1.x509.X509NameEntryConverter converter -> S
    java.util.Vector ordering -> T
    java.util.Vector values -> U
    java.util.Vector added -> V
    org.spongycastle.asn1.ASN1Sequence seq -> W
    boolean isHashCodeCalculated -> X
    int hashCodeValue -> Y
    org.spongycastle.asn1.x509.X509Name getInstance(java.lang.Object) -> a
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    boolean equivalentStrings(java.lang.String,java.lang.String) -> a
    java.lang.String canonicalize(java.lang.String) -> a
    org.spongycastle.asn1.ASN1Primitive decodeObject(java.lang.String) -> b
    java.lang.String stripInternalSpaces(java.lang.String) -> c
    void appendValue(java.lang.StringBuffer,java.util.Hashtable,org.spongycastle.asn1.ASN1ObjectIdentifier,java.lang.String) -> a
    java.lang.String toString(boolean,java.util.Hashtable) -> a
    java.lang.String bytesToString(byte[]) -> a
    java.lang.String toString() -> toString
org.spongycastle.asn1.x509.X509NameEntryConverter -> org.spongycastle.asn1.u.L:
    org.spongycastle.asn1.ASN1Primitive getConvertedValue(org.spongycastle.asn1.ASN1ObjectIdentifier,java.lang.String) -> a
org.spongycastle.asn1.x509.X509ObjectIdentifiers -> org.spongycastle.asn1.u.M:
    org.spongycastle.asn1.ASN1ObjectIdentifier commonName -> a
    org.spongycastle.asn1.ASN1ObjectIdentifier countryName -> b
    org.spongycastle.asn1.ASN1ObjectIdentifier localityName -> c
    org.spongycastle.asn1.ASN1ObjectIdentifier stateOrProvinceName -> a_
    org.spongycastle.asn1.ASN1ObjectIdentifier organization -> b_
    org.spongycastle.asn1.ASN1ObjectIdentifier organizationalUnitName -> f
    org.spongycastle.asn1.ASN1ObjectIdentifier id_at_telephoneNumber -> g
    org.spongycastle.asn1.ASN1ObjectIdentifier id_at_name -> c_
    org.spongycastle.asn1.ASN1ObjectIdentifier id_SHA1 -> i
    org.spongycastle.asn1.ASN1ObjectIdentifier ripemd160 -> d_
    org.spongycastle.asn1.ASN1ObjectIdentifier ripemd160WithRSAEncryption -> e_
    org.spongycastle.asn1.ASN1ObjectIdentifier id_ea_rsa -> l
    org.spongycastle.asn1.ASN1ObjectIdentifier id_pkix -> m
    org.spongycastle.asn1.ASN1ObjectIdentifier id_pe -> n
    org.spongycastle.asn1.ASN1ObjectIdentifier id_ce -> o
    org.spongycastle.asn1.ASN1ObjectIdentifier id_ad -> p
    org.spongycastle.asn1.ASN1ObjectIdentifier id_ad_caIssuers -> f_
    org.spongycastle.asn1.ASN1ObjectIdentifier id_ad_ocsp -> r
    org.spongycastle.asn1.ASN1ObjectIdentifier ocspAccessMethod -> s
    org.spongycastle.asn1.ASN1ObjectIdentifier crlAccessMethod -> t
org.spongycastle.asn1.x509.qualified.QCStatement -> org.spongycastle.asn1.u.a.a:
    org.spongycastle.asn1.ASN1ObjectIdentifier qcStatementId -> a
    org.spongycastle.asn1.ASN1Encodable qcStatementInfo -> b
    org.spongycastle.asn1.x509.qualified.QCStatement getInstance(java.lang.Object) -> a
    org.spongycastle.asn1.ASN1ObjectIdentifier getStatementId() -> a
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.x9.DomainParameters -> org.spongycastle.asn1.v.a:
    org.spongycastle.asn1.ASN1Integer p -> a
    org.spongycastle.asn1.ASN1Integer g -> b
    org.spongycastle.asn1.ASN1Integer q -> c
    org.spongycastle.asn1.ASN1Integer j -> d
    org.spongycastle.asn1.x9.ValidationParams validationParams -> e
    org.spongycastle.asn1.x9.DomainParameters getInstance(java.lang.Object) -> a
    org.spongycastle.asn1.ASN1Encodable getNext(java.util.Enumeration) -> a
    java.math.BigInteger getP() -> a
    java.math.BigInteger getG() -> b
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.x9.ECNamedCurveTable -> org.spongycastle.asn1.v.b:
    org.spongycastle.asn1.x9.X9ECParameters getByName(java.lang.String) -> a
    org.spongycastle.asn1.ASN1ObjectIdentifier getOID(java.lang.String) -> b
    java.lang.String getName(org.spongycastle.asn1.ASN1ObjectIdentifier) -> a
    org.spongycastle.asn1.x9.X9ECParameters getByOID(org.spongycastle.asn1.ASN1ObjectIdentifier) -> b
    java.util.Enumeration getNames() -> a
    void addEnumeration(java.util.Vector,java.util.Enumeration) -> a
org.spongycastle.asn1.x9.ValidationParams -> org.spongycastle.asn1.v.c:
    org.spongycastle.asn1.DERBitString seed -> a
    org.spongycastle.asn1.ASN1Integer pgenCounter -> b
    org.spongycastle.asn1.x9.ValidationParams getInstance(java.lang.Object) -> a
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.x9.X962NamedCurves -> org.spongycastle.asn1.v.d:
    org.spongycastle.asn1.x9.X9ECParametersHolder prime192v1 -> a
    org.spongycastle.asn1.x9.X9ECParametersHolder prime192v2 -> b
    org.spongycastle.asn1.x9.X9ECParametersHolder prime192v3 -> c
    org.spongycastle.asn1.x9.X9ECParametersHolder prime239v1 -> d
    org.spongycastle.asn1.x9.X9ECParametersHolder prime239v2 -> e
    org.spongycastle.asn1.x9.X9ECParametersHolder prime239v3 -> f
    org.spongycastle.asn1.x9.X9ECParametersHolder prime256v1 -> g
    org.spongycastle.asn1.x9.X9ECParametersHolder c2pnb163v1 -> h
    org.spongycastle.asn1.x9.X9ECParametersHolder c2pnb163v2 -> i
    org.spongycastle.asn1.x9.X9ECParametersHolder c2pnb163v3 -> j
    org.spongycastle.asn1.x9.X9ECParametersHolder c2pnb176w1 -> k
    org.spongycastle.asn1.x9.X9ECParametersHolder c2tnb191v1 -> l
    org.spongycastle.asn1.x9.X9ECParametersHolder c2tnb191v2 -> m
    org.spongycastle.asn1.x9.X9ECParametersHolder c2tnb191v3 -> n
    org.spongycastle.asn1.x9.X9ECParametersHolder c2pnb208w1 -> o
    org.spongycastle.asn1.x9.X9ECParametersHolder c2tnb239v1 -> p
    org.spongycastle.asn1.x9.X9ECParametersHolder c2tnb239v2 -> q
    org.spongycastle.asn1.x9.X9ECParametersHolder c2tnb239v3 -> r
    org.spongycastle.asn1.x9.X9ECParametersHolder c2pnb272w1 -> s
    org.spongycastle.asn1.x9.X9ECParametersHolder c2pnb304w1 -> t
    org.spongycastle.asn1.x9.X9ECParametersHolder c2tnb359v1 -> u
    org.spongycastle.asn1.x9.X9ECParametersHolder c2pnb368w1 -> v
    org.spongycastle.asn1.x9.X9ECParametersHolder c2tnb431r1 -> w
    java.util.Hashtable objIds -> x
    java.util.Hashtable curves -> y
    java.util.Hashtable names -> z
    void defineCurve(java.lang.String,org.spongycastle.asn1.ASN1ObjectIdentifier,org.spongycastle.asn1.x9.X9ECParametersHolder) -> a
    org.spongycastle.asn1.x9.X9ECParameters getByName(java.lang.String) -> a
    org.spongycastle.asn1.x9.X9ECParameters getByOID(org.spongycastle.asn1.ASN1ObjectIdentifier) -> a
    org.spongycastle.asn1.ASN1ObjectIdentifier getOID(java.lang.String) -> b
    java.lang.String getName(org.spongycastle.asn1.ASN1ObjectIdentifier) -> b
    java.util.Enumeration getNames() -> a
org.spongycastle.asn1.x9.X962NamedCurves$1 -> org.spongycastle.asn1.v.e:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.asn1.x9.X962NamedCurves$10 -> org.spongycastle.asn1.v.f:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.asn1.x9.X962NamedCurves$11 -> org.spongycastle.asn1.v.g:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.asn1.x9.X962NamedCurves$12 -> org.spongycastle.asn1.v.h:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.asn1.x9.X962NamedCurves$13 -> org.spongycastle.asn1.v.i:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.asn1.x9.X962NamedCurves$14 -> org.spongycastle.asn1.v.j:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.asn1.x9.X962NamedCurves$15 -> org.spongycastle.asn1.v.k:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.asn1.x9.X962NamedCurves$16 -> org.spongycastle.asn1.v.l:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.asn1.x9.X962NamedCurves$17 -> org.spongycastle.asn1.v.m:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.asn1.x9.X962NamedCurves$18 -> org.spongycastle.asn1.v.n:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.asn1.x9.X962NamedCurves$19 -> org.spongycastle.asn1.v.o:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.asn1.x9.X962NamedCurves$2 -> org.spongycastle.asn1.v.p:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.asn1.x9.X962NamedCurves$20 -> org.spongycastle.asn1.v.q:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.asn1.x9.X962NamedCurves$21 -> org.spongycastle.asn1.v.r:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.asn1.x9.X962NamedCurves$22 -> org.spongycastle.asn1.v.s:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.asn1.x9.X962NamedCurves$23 -> org.spongycastle.asn1.v.t:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.asn1.x9.X962NamedCurves$3 -> org.spongycastle.asn1.v.u:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.asn1.x9.X962NamedCurves$4 -> org.spongycastle.asn1.v.v:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.asn1.x9.X962NamedCurves$5 -> org.spongycastle.asn1.v.w:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.asn1.x9.X962NamedCurves$6 -> org.spongycastle.asn1.v.x:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.asn1.x9.X962NamedCurves$7 -> org.spongycastle.asn1.v.y:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.asn1.x9.X962NamedCurves$8 -> org.spongycastle.asn1.v.z:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.asn1.x9.X962NamedCurves$9 -> org.spongycastle.asn1.v.A:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.asn1.x9.X962Parameters -> org.spongycastle.asn1.v.B:
    org.spongycastle.asn1.ASN1Primitive params -> a
    org.spongycastle.asn1.x9.X962Parameters getInstance(java.lang.Object) -> a
    boolean isNamedCurve() -> a
    boolean isImplicitlyCA() -> b
    org.spongycastle.asn1.ASN1Primitive getParameters() -> c
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.x9.X9Curve -> org.spongycastle.asn1.v.C:
    org.spongycastle.math.ec.ECCurve curve -> ap
    byte[] seed -> aq
    org.spongycastle.asn1.ASN1ObjectIdentifier fieldIdentifier -> ar
    void setFieldIdentifier() -> c
    org.spongycastle.math.ec.ECCurve getCurve() -> a
    byte[] getSeed() -> b
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.x9.X9ECParameters -> org.spongycastle.asn1.v.D:
    java.math.BigInteger ONE -> ap
    org.spongycastle.asn1.x9.X9FieldID fieldID -> aq
    org.spongycastle.math.ec.ECCurve curve -> ar
    org.spongycastle.asn1.x9.X9ECPoint g -> as
    java.math.BigInteger n -> at
    java.math.BigInteger h -> au
    byte[] seed -> av
    org.spongycastle.asn1.x9.X9ECParameters getInstance(java.lang.Object) -> a
    org.spongycastle.math.ec.ECCurve getCurve() -> a
    org.spongycastle.math.ec.ECPoint getG() -> b
    java.math.BigInteger getN() -> c
    java.math.BigInteger getH() -> d
    byte[] getSeed() -> e
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.x9.X9ECParametersHolder -> org.spongycastle.asn1.v.E:
    org.spongycastle.asn1.x9.X9ECParameters params -> a
    org.spongycastle.asn1.x9.X9ECParameters getParameters() -> b
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.asn1.x9.X9ECPoint -> org.spongycastle.asn1.v.F:
    org.spongycastle.asn1.ASN1OctetString encoding -> a
    org.spongycastle.math.ec.ECCurve c -> b
    org.spongycastle.math.ec.ECPoint p -> c
    org.spongycastle.math.ec.ECPoint getPoint() -> a
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.x9.X9FieldElement -> org.spongycastle.asn1.v.G:
    org.spongycastle.math.ec.ECFieldElement f -> a
    org.spongycastle.asn1.x9.X9IntegerConverter converter -> b
    org.spongycastle.math.ec.ECFieldElement getValue() -> a
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.x9.X9FieldID -> org.spongycastle.asn1.v.H:
    org.spongycastle.asn1.ASN1ObjectIdentifier id -> ap
    org.spongycastle.asn1.ASN1Primitive parameters -> aq
    org.spongycastle.asn1.x9.X9FieldID getInstance(java.lang.Object) -> a
    org.spongycastle.asn1.ASN1ObjectIdentifier getIdentifier() -> a
    org.spongycastle.asn1.ASN1Primitive getParameters() -> b
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.asn1.x9.X9IntegerConverter -> org.spongycastle.asn1.v.I:
    int getByteLength(org.spongycastle.math.ec.ECCurve) -> a
    int getByteLength(org.spongycastle.math.ec.ECFieldElement) -> a
    byte[] integerToBytes(java.math.BigInteger,int) -> a
org.spongycastle.asn1.x9.X9ObjectIdentifiers -> org.spongycastle.asn1.v.J:
    org.spongycastle.asn1.ASN1ObjectIdentifier ansi_X9_62 -> a
    org.spongycastle.asn1.ASN1ObjectIdentifier id_fieldType -> b
    org.spongycastle.asn1.ASN1ObjectIdentifier prime_field -> c
    org.spongycastle.asn1.ASN1ObjectIdentifier characteristic_two_field -> d
    org.spongycastle.asn1.ASN1ObjectIdentifier gnBasis -> e
    org.spongycastle.asn1.ASN1ObjectIdentifier tpBasis -> f
    org.spongycastle.asn1.ASN1ObjectIdentifier ppBasis -> g
    org.spongycastle.asn1.ASN1ObjectIdentifier id_ecSigType -> h
    org.spongycastle.asn1.ASN1ObjectIdentifier ecdsa_with_SHA1 -> i
    org.spongycastle.asn1.ASN1ObjectIdentifier id_publicKeyType -> j
    org.spongycastle.asn1.ASN1ObjectIdentifier id_ecPublicKey -> k
    org.spongycastle.asn1.ASN1ObjectIdentifier ecdsa_with_SHA2 -> l
    org.spongycastle.asn1.ASN1ObjectIdentifier ecdsa_with_SHA224 -> m
    org.spongycastle.asn1.ASN1ObjectIdentifier ecdsa_with_SHA256 -> n
    org.spongycastle.asn1.ASN1ObjectIdentifier ecdsa_with_SHA384 -> o
    org.spongycastle.asn1.ASN1ObjectIdentifier ecdsa_with_SHA512 -> p
    org.spongycastle.asn1.ASN1ObjectIdentifier ellipticCurve -> q
    org.spongycastle.asn1.ASN1ObjectIdentifier cTwoCurve -> r
    org.spongycastle.asn1.ASN1ObjectIdentifier c2pnb163v1 -> s
    org.spongycastle.asn1.ASN1ObjectIdentifier c2pnb163v2 -> t
    org.spongycastle.asn1.ASN1ObjectIdentifier c2pnb163v3 -> u
    org.spongycastle.asn1.ASN1ObjectIdentifier c2pnb176w1 -> v
    org.spongycastle.asn1.ASN1ObjectIdentifier c2tnb191v1 -> w
    org.spongycastle.asn1.ASN1ObjectIdentifier c2tnb191v2 -> x
    org.spongycastle.asn1.ASN1ObjectIdentifier c2tnb191v3 -> y
    org.spongycastle.asn1.ASN1ObjectIdentifier c2onb191v4 -> z
    org.spongycastle.asn1.ASN1ObjectIdentifier c2onb191v5 -> A
    org.spongycastle.asn1.ASN1ObjectIdentifier c2pnb208w1 -> B
    org.spongycastle.asn1.ASN1ObjectIdentifier c2tnb239v1 -> C
    org.spongycastle.asn1.ASN1ObjectIdentifier c2tnb239v2 -> D
    org.spongycastle.asn1.ASN1ObjectIdentifier c2tnb239v3 -> E
    org.spongycastle.asn1.ASN1ObjectIdentifier c2onb239v4 -> F
    org.spongycastle.asn1.ASN1ObjectIdentifier c2onb239v5 -> G
    org.spongycastle.asn1.ASN1ObjectIdentifier c2pnb272w1 -> H
    org.spongycastle.asn1.ASN1ObjectIdentifier c2pnb304w1 -> I
    org.spongycastle.asn1.ASN1ObjectIdentifier c2tnb359v1 -> J
    org.spongycastle.asn1.ASN1ObjectIdentifier c2pnb368w1 -> K
    org.spongycastle.asn1.ASN1ObjectIdentifier c2tnb431r1 -> L
    org.spongycastle.asn1.ASN1ObjectIdentifier primeCurve -> M
    org.spongycastle.asn1.ASN1ObjectIdentifier prime192v1 -> N
    org.spongycastle.asn1.ASN1ObjectIdentifier prime192v2 -> O
    org.spongycastle.asn1.ASN1ObjectIdentifier prime192v3 -> P
    org.spongycastle.asn1.ASN1ObjectIdentifier prime239v1 -> Q
    org.spongycastle.asn1.ASN1ObjectIdentifier prime239v2 -> R
    org.spongycastle.asn1.ASN1ObjectIdentifier prime239v3 -> S
    org.spongycastle.asn1.ASN1ObjectIdentifier prime256v1 -> T
    org.spongycastle.asn1.ASN1ObjectIdentifier id_dsa -> U
    org.spongycastle.asn1.ASN1ObjectIdentifier id_dsa_with_sha1 -> V
    org.spongycastle.asn1.ASN1ObjectIdentifier x9_63_scheme -> W
    org.spongycastle.asn1.ASN1ObjectIdentifier dhSinglePass_stdDH_sha1kdf_scheme -> X
    org.spongycastle.asn1.ASN1ObjectIdentifier dhSinglePass_cofactorDH_sha1kdf_scheme -> Y
    org.spongycastle.asn1.ASN1ObjectIdentifier mqvSinglePass_sha1kdf_scheme -> Z
    org.spongycastle.asn1.ASN1ObjectIdentifier ansi_X9_42 -> aa
    org.spongycastle.asn1.ASN1ObjectIdentifier dhpublicnumber -> ab
    org.spongycastle.asn1.ASN1ObjectIdentifier x9_42_schemes -> ac
    org.spongycastle.asn1.ASN1ObjectIdentifier dhStatic -> ad
    org.spongycastle.asn1.ASN1ObjectIdentifier dhEphem -> ae
    org.spongycastle.asn1.ASN1ObjectIdentifier dhOneFlow -> af
    org.spongycastle.asn1.ASN1ObjectIdentifier dhHybrid1 -> ag
    org.spongycastle.asn1.ASN1ObjectIdentifier dhHybrid2 -> ah
    org.spongycastle.asn1.ASN1ObjectIdentifier dhHybridOneFlow -> ai
    org.spongycastle.asn1.ASN1ObjectIdentifier mqv2 -> aj
    org.spongycastle.asn1.ASN1ObjectIdentifier mqv1 -> ak
    org.spongycastle.asn1.ASN1ObjectIdentifier x9_44 -> al
    org.spongycastle.asn1.ASN1ObjectIdentifier x9_44_components -> am
    org.spongycastle.asn1.ASN1ObjectIdentifier id_kdf_kdf2 -> an
    org.spongycastle.asn1.ASN1ObjectIdentifier id_kdf_kdf3 -> ao
org.spongycastle.cert.X509CertificateHolder -> org.spongycastle.cert.a:
    org.spongycastle.asn1.x509.Certificate x509Certificate -> a
    org.spongycastle.asn1.x509.Extensions extensions -> b
    org.spongycastle.asn1.x509.Extension getExtension(org.spongycastle.asn1.ASN1ObjectIdentifier) -> a
    org.spongycastle.asn1.x509.SubjectPublicKeyInfo getSubjectPublicKeyInfo() -> a
    org.spongycastle.asn1.x509.Certificate toASN1Structure() -> b
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    byte[] getEncoded() -> c
org.spongycastle.cert.jcajce.JcaX509CRLConverter -> org.spongycastle.cert.jcajce.JcaX509CRLConverter:
org.spongycastle.cert.jcajce.JcaX509CRLConverter$ExCRLException -> org.spongycastle.cert.jcajce.JcaX509CRLConverter$ExCRLException:
    java.lang.Throwable cause -> a
    java.lang.Throwable getCause() -> getCause
org.spongycastle.cert.jcajce.JcaX509CertificateConverter -> org.spongycastle.cert.jcajce.JcaX509CertificateConverter:
org.spongycastle.cert.jcajce.JcaX509CertificateConverter$ExCertificateException -> org.spongycastle.cert.jcajce.JcaX509CertificateConverter$ExCertificateException:
    java.lang.Throwable cause -> a
    java.lang.Throwable getCause() -> getCause
org.spongycastle.cert.jcajce.JcaX509CertificateConverter$ExCertificateParsingException -> org.spongycastle.cert.jcajce.JcaX509CertificateConverter$ExCertificateParsingException:
    java.lang.Throwable cause -> a
    java.lang.Throwable getCause() -> getCause
org.spongycastle.cert.ocsp.BasicOCSPResp -> org.spongycastle.cert.a.a:
    org.spongycastle.asn1.ocsp.BasicOCSPResponse resp -> a
    org.spongycastle.asn1.ocsp.ResponseData data -> b
    org.spongycastle.asn1.x509.Extensions extensions -> c
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.spongycastle.cert.selector.MSOutlookKeyIdCalculator -> org.spongycastle.cert.b.a:
    byte[] calculateKeyId(org.spongycastle.asn1.x509.SubjectPublicKeyInfo) -> a
org.spongycastle.cert.selector.MSOutlookKeyIdCalculator$GeneralDigest -> org.spongycastle.cert.b.b:
    byte[] xBuf -> a
    int xBufOff -> b
    long byteCount -> c
    void update(byte) -> a
    void update(byte[],int,int) -> a
    void finish() -> a
    void reset() -> b
    void processWord(byte[],int) -> a
    void processLength(long) -> a
    void processBlock() -> c
org.spongycastle.cert.selector.MSOutlookKeyIdCalculator$SHA1Digest -> org.spongycastle.cert.b.c:
    int H1 -> a
    int H2 -> b
    int H3 -> c
    int H4 -> d
    int H5 -> e
    int[] X -> f
    int xOff -> g
    int getDigestSize() -> d
    void processWord(byte[],int) -> a
    void processLength(long) -> a
    int doFinal(byte[],int) -> b
    void reset() -> b
    int f(int,int,int) -> a
    int h(int,int,int) -> b
    int g(int,int,int) -> c
    void processBlock() -> c
org.spongycastle.cert.selector.X509CertificateHolderSelector -> org.spongycastle.cert.b.d:
    byte[] subjectKeyId -> a
    org.spongycastle.asn1.x500.X500Name issuer -> b
    java.math.BigInteger serialNumber -> c
    java.math.BigInteger getSerialNumber() -> a
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    boolean equalsObj(java.lang.Object,java.lang.Object) -> a
    boolean match(java.lang.Object) -> a
    java.lang.Object clone() -> clone
org.spongycastle.cms.AuthAttributesProvider -> org.spongycastle.cms.a:
org.spongycastle.cms.CMSAlgorithm -> org.spongycastle.cms.b:
    org.spongycastle.asn1.ASN1ObjectIdentifier DES_CBC -> a
    org.spongycastle.asn1.ASN1ObjectIdentifier DES_EDE3_CBC -> b
    org.spongycastle.asn1.ASN1ObjectIdentifier RC2_CBC -> c
    org.spongycastle.asn1.ASN1ObjectIdentifier IDEA_CBC -> d
    org.spongycastle.asn1.ASN1ObjectIdentifier CAST5_CBC -> e
    org.spongycastle.asn1.ASN1ObjectIdentifier AES128_CBC -> f
    org.spongycastle.asn1.ASN1ObjectIdentifier AES192_CBC -> g
    org.spongycastle.asn1.ASN1ObjectIdentifier AES256_CBC -> h
    org.spongycastle.asn1.ASN1ObjectIdentifier AES128_CCM -> i
    org.spongycastle.asn1.ASN1ObjectIdentifier AES192_CCM -> j
    org.spongycastle.asn1.ASN1ObjectIdentifier AES256_CCM -> k
    org.spongycastle.asn1.ASN1ObjectIdentifier AES128_GCM -> l
    org.spongycastle.asn1.ASN1ObjectIdentifier AES192_GCM -> m
    org.spongycastle.asn1.ASN1ObjectIdentifier AES256_GCM -> n
    org.spongycastle.asn1.ASN1ObjectIdentifier CAMELLIA128_CBC -> o
    org.spongycastle.asn1.ASN1ObjectIdentifier CAMELLIA192_CBC -> p
    org.spongycastle.asn1.ASN1ObjectIdentifier CAMELLIA256_CBC -> q
    org.spongycastle.asn1.ASN1ObjectIdentifier SEED_CBC -> r
    org.spongycastle.asn1.ASN1ObjectIdentifier DES_EDE3_WRAP -> s
    org.spongycastle.asn1.ASN1ObjectIdentifier AES128_WRAP -> t
    org.spongycastle.asn1.ASN1ObjectIdentifier AES192_WRAP -> u
    org.spongycastle.asn1.ASN1ObjectIdentifier AES256_WRAP -> v
    org.spongycastle.asn1.ASN1ObjectIdentifier CAMELLIA128_WRAP -> w
    org.spongycastle.asn1.ASN1ObjectIdentifier CAMELLIA192_WRAP -> x
    org.spongycastle.asn1.ASN1ObjectIdentifier CAMELLIA256_WRAP -> y
    org.spongycastle.asn1.ASN1ObjectIdentifier SEED_WRAP -> z
    org.spongycastle.asn1.ASN1ObjectIdentifier ECDH_SHA1KDF -> A
    org.spongycastle.asn1.ASN1ObjectIdentifier ECCDH_SHA1KDF -> B
    org.spongycastle.asn1.ASN1ObjectIdentifier ECMQV_SHA1KDF -> C
    org.spongycastle.asn1.ASN1ObjectIdentifier ECDH_SHA224KDF -> D
    org.spongycastle.asn1.ASN1ObjectIdentifier ECCDH_SHA224KDF -> E
    org.spongycastle.asn1.ASN1ObjectIdentifier ECMQV_SHA224KDF -> F
    org.spongycastle.asn1.ASN1ObjectIdentifier ECDH_SHA256KDF -> G
    org.spongycastle.asn1.ASN1ObjectIdentifier ECCDH_SHA256KDF -> H
    org.spongycastle.asn1.ASN1ObjectIdentifier ECMQV_SHA256KDF -> I
    org.spongycastle.asn1.ASN1ObjectIdentifier ECDH_SHA384KDF -> J
    org.spongycastle.asn1.ASN1ObjectIdentifier ECCDH_SHA384KDF -> K
    org.spongycastle.asn1.ASN1ObjectIdentifier ECMQV_SHA384KDF -> L
    org.spongycastle.asn1.ASN1ObjectIdentifier ECDH_SHA512KDF -> M
    org.spongycastle.asn1.ASN1ObjectIdentifier ECCDH_SHA512KDF -> N
    org.spongycastle.asn1.ASN1ObjectIdentifier ECMQV_SHA512KDF -> O
    org.spongycastle.asn1.ASN1ObjectIdentifier SHA1 -> P
    org.spongycastle.asn1.ASN1ObjectIdentifier SHA224 -> Q
    org.spongycastle.asn1.ASN1ObjectIdentifier SHA256 -> R
    org.spongycastle.asn1.ASN1ObjectIdentifier SHA384 -> S
    org.spongycastle.asn1.ASN1ObjectIdentifier SHA512 -> T
    org.spongycastle.asn1.ASN1ObjectIdentifier MD5 -> U
    org.spongycastle.asn1.ASN1ObjectIdentifier GOST3411 -> V
    org.spongycastle.asn1.ASN1ObjectIdentifier RIPEMD128 -> W
    org.spongycastle.asn1.ASN1ObjectIdentifier RIPEMD160 -> X
    org.spongycastle.asn1.ASN1ObjectIdentifier RIPEMD256 -> Y
org.spongycastle.cms.CMSEnvelopedData -> org.spongycastle.cms.c:
    org.spongycastle.cms.RecipientInformationStore recipientInfoStore -> a
    org.spongycastle.asn1.cms.ContentInfo contentInfo -> b
    org.spongycastle.asn1.x509.AlgorithmIdentifier encAlg -> c
    org.spongycastle.asn1.ASN1Set unprotectedAttributes -> d
    org.spongycastle.cms.OriginatorInformation originatorInfo -> e
    org.spongycastle.cms.RecipientInformationStore getRecipientInfos() -> a
org.spongycastle.cms.CMSEnvelopedDataGenerator -> org.spongycastle.cms.d:
org.spongycastle.cms.CMSEnvelopedGenerator -> org.spongycastle.cms.e:
    java.lang.String DES_EDE3_CBC -> a
    java.lang.String RC2_CBC -> b
    java.lang.String AES128_CBC -> c
    java.lang.String AES192_CBC -> d
    java.lang.String AES256_CBC -> e
    java.lang.String CAMELLIA128_CBC -> f
    java.lang.String CAMELLIA192_CBC -> g
    java.lang.String CAMELLIA256_CBC -> h
    java.lang.String SEED_CBC -> i
    java.lang.String DES_EDE3_WRAP -> j
    java.lang.String AES128_WRAP -> k
    java.lang.String AES192_WRAP -> l
    java.lang.String AES256_WRAP -> m
    java.lang.String CAMELLIA128_WRAP -> n
    java.lang.String CAMELLIA192_WRAP -> o
    java.lang.String CAMELLIA256_WRAP -> p
    java.lang.String SEED_WRAP -> q
    java.lang.String ECDH_SHA1KDF -> r
    java.lang.String ECMQV_SHA1KDF -> s
org.spongycastle.cms.CMSEnvelopedHelper -> org.spongycastle.cms.f:
    org.spongycastle.cms.RecipientInformationStore buildRecipientInformationStore(org.spongycastle.asn1.ASN1Set,org.spongycastle.asn1.x509.AlgorithmIdentifier,org.spongycastle.cms.CMSSecureReadable) -> a
    org.spongycastle.cms.RecipientInformationStore buildRecipientInformationStore(org.spongycastle.asn1.ASN1Set,org.spongycastle.asn1.x509.AlgorithmIdentifier,org.spongycastle.cms.CMSSecureReadable,org.spongycastle.cms.AuthAttributesProvider) -> a
    void readRecipientInfo(java.util.List,org.spongycastle.asn1.cms.RecipientInfo,org.spongycastle.asn1.x509.AlgorithmIdentifier,org.spongycastle.cms.CMSSecureReadable,org.spongycastle.cms.AuthAttributesProvider) -> a
org.spongycastle.cms.CMSEnvelopedHelper$CMSEnvelopedSecureReadable -> org.spongycastle.cms.g:
    org.spongycastle.asn1.x509.AlgorithmIdentifier algorithm -> a
    org.spongycastle.cms.CMSReadable readable -> b
    java.io.InputStream getInputStream() -> a
org.spongycastle.cms.CMSException -> org.spongycastle.cms.h:
    java.lang.Exception e -> a
    java.lang.Exception getUnderlyingException() -> a
    java.lang.Throwable getCause() -> getCause
org.spongycastle.cms.CMSProcessable -> org.spongycastle.cms.i:
    void write(java.io.OutputStream) -> a
org.spongycastle.cms.CMSProcessableByteArray -> org.spongycastle.cms.j:
    org.spongycastle.asn1.ASN1ObjectIdentifier type -> a
    byte[] bytes -> b
    java.io.InputStream getInputStream() -> a
    void write(java.io.OutputStream) -> a
org.spongycastle.cms.CMSReadable -> org.spongycastle.cms.k:
    java.io.InputStream getInputStream() -> a
org.spongycastle.cms.CMSSecureReadable -> org.spongycastle.cms.l:
    java.io.InputStream getInputStream() -> a
org.spongycastle.cms.CMSSignedData -> org.spongycastle.cms.m:
    org.spongycastle.cms.CMSSignedHelper HELPER -> e
    org.spongycastle.asn1.cms.SignedData signedData -> a
    org.spongycastle.asn1.cms.ContentInfo contentInfo -> b
    org.spongycastle.cms.CMSTypedData signedContent -> c
    org.spongycastle.cms.SignerInformationStore signerInfoStore -> d
    java.util.Map hashes -> f
    org.spongycastle.asn1.cms.SignedData getSignedData() -> f
    org.spongycastle.cms.SignerInformationStore getSignerInfos() -> a
    org.spongycastle.util.Store getCertificates() -> b
    java.lang.String getSignedContentTypeOID() -> c
    org.spongycastle.cms.CMSTypedData getSignedContent() -> d
    byte[] getEncoded() -> e
    org.spongycastle.cms.CMSSignedData replaceSigners(org.spongycastle.cms.CMSSignedData,org.spongycastle.cms.SignerInformationStore) -> a
org.spongycastle.cms.CMSSignedDataGenerator -> org.spongycastle.cms.n:
org.spongycastle.cms.CMSSignedGenerator -> org.spongycastle.cms.o:
    java.lang.String DATA -> a
    java.lang.String DIGEST_SHA1 -> b
    java.lang.String DIGEST_SHA224 -> c
    java.lang.String DIGEST_SHA256 -> d
    java.lang.String DIGEST_SHA384 -> e
    java.lang.String DIGEST_SHA512 -> f
    java.lang.String DIGEST_MD5 -> g
    java.lang.String DIGEST_GOST3411 -> h
    java.lang.String DIGEST_RIPEMD128 -> i
    java.lang.String DIGEST_RIPEMD160 -> j
    java.lang.String DIGEST_RIPEMD256 -> k
    java.lang.String ENCRYPTION_RSA -> l
    java.lang.String ENCRYPTION_DSA -> m
    java.lang.String ENCRYPTION_ECDSA -> n
    java.lang.String ENCRYPTION_RSA_PSS -> o
    java.lang.String ENCRYPTION_GOST3410 -> p
    java.lang.String ENCRYPTION_ECGOST3410 -> q
    java.lang.String ENCRYPTION_ECDSA_WITH_SHA1 -> r
    java.lang.String ENCRYPTION_ECDSA_WITH_SHA224 -> s
    java.lang.String ENCRYPTION_ECDSA_WITH_SHA256 -> t
    java.lang.String ENCRYPTION_ECDSA_WITH_SHA384 -> u
    java.lang.String ENCRYPTION_ECDSA_WITH_SHA512 -> v
    java.util.Set NO_PARAMS -> w
    java.util.Map EC_ALGORITHMS -> x
org.spongycastle.cms.CMSSignedHelper -> org.spongycastle.cms.p:
    org.spongycastle.cms.CMSSignedHelper INSTANCE -> a
    java.util.Map encryptionAlgs -> b
    java.util.Map digestAlgs -> c
    java.util.Map digestAliases -> d
    void addEntries(org.spongycastle.asn1.ASN1ObjectIdentifier,java.lang.String,java.lang.String) -> a
    org.spongycastle.asn1.x509.AlgorithmIdentifier fixAlgID(org.spongycastle.asn1.x509.AlgorithmIdentifier) -> a
    org.spongycastle.util.Store getCertificates(org.spongycastle.asn1.ASN1Set) -> a
org.spongycastle.cms.CMSTypedData -> org.spongycastle.cms.q:
org.spongycastle.cms.CMSTypedStream -> org.spongycastle.cms.r:
    org.spongycastle.asn1.ASN1ObjectIdentifier _oid -> b
    java.io.InputStream _in -> a
    java.io.InputStream getContentStream() -> a
org.spongycastle.cms.CMSTypedStream$FullReaderStream -> org.spongycastle.cms.s:
    int read(byte[],int,int) -> read
org.spongycastle.cms.CMSUtils -> org.spongycastle.cms.t:
    java.util.Set des -> a
    org.spongycastle.asn1.cms.ContentInfo readContentInfo(byte[]) -> a
    org.spongycastle.asn1.cms.ContentInfo readContentInfo(org.spongycastle.asn1.ASN1InputStream) -> a
    byte[] streamToByteArray(java.io.InputStream) -> a
org.spongycastle.cms.KEKRecipient -> org.spongycastle.cms.u:
    org.spongycastle.cms.RecipientOperator getRecipientOperator(org.spongycastle.asn1.x509.AlgorithmIdentifier,org.spongycastle.asn1.x509.AlgorithmIdentifier,byte[]) -> a
org.spongycastle.cms.KEKRecipientId -> org.spongycastle.cms.v:
    byte[] keyIdentifier -> a
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.Object clone() -> clone
    boolean match(java.lang.Object) -> a
org.spongycastle.cms.KEKRecipientInformation -> org.spongycastle.cms.w:
    org.spongycastle.asn1.cms.KEKRecipientInfo info -> a
    org.spongycastle.cms.RecipientOperator getRecipientOperator(org.spongycastle.cms.Recipient) -> a
org.spongycastle.cms.KeyAgreeRecipient -> org.spongycastle.cms.x:
    org.spongycastle.cms.RecipientOperator getRecipientOperator(org.spongycastle.asn1.x509.AlgorithmIdentifier,org.spongycastle.asn1.x509.AlgorithmIdentifier,org.spongycastle.asn1.x509.SubjectPublicKeyInfo,org.spongycastle.asn1.ASN1OctetString,byte[]) -> a
    org.spongycastle.asn1.x509.AlgorithmIdentifier getPrivateKeyAlgorithmIdentifier() -> a
org.spongycastle.cms.KeyAgreeRecipientId -> org.spongycastle.cms.y:
    org.spongycastle.cert.selector.X509CertificateHolderSelector baseSelector -> a
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.Object clone() -> clone
    boolean match(java.lang.Object) -> a
org.spongycastle.cms.KeyAgreeRecipientInformation -> org.spongycastle.cms.z:
    org.spongycastle.asn1.cms.KeyAgreeRecipientInfo info -> a
    org.spongycastle.asn1.ASN1OctetString encryptedKey -> b
    void readRecipientInfo(java.util.List,org.spongycastle.asn1.cms.KeyAgreeRecipientInfo,org.spongycastle.asn1.x509.AlgorithmIdentifier,org.spongycastle.cms.CMSSecureReadable,org.spongycastle.cms.AuthAttributesProvider) -> a
    org.spongycastle.asn1.x509.SubjectPublicKeyInfo getSenderPublicKeyInfo(org.spongycastle.asn1.x509.AlgorithmIdentifier,org.spongycastle.asn1.cms.OriginatorIdentifierOrKey) -> a
    org.spongycastle.asn1.x509.SubjectPublicKeyInfo getPublicKeyInfoFromOriginatorPublicKey(org.spongycastle.asn1.x509.AlgorithmIdentifier,org.spongycastle.asn1.cms.OriginatorPublicKey) -> a
    org.spongycastle.asn1.x509.SubjectPublicKeyInfo getPublicKeyInfoFromOriginatorId(org.spongycastle.cms.OriginatorId) -> a
    org.spongycastle.cms.RecipientOperator getRecipientOperator(org.spongycastle.cms.Recipient) -> a
org.spongycastle.cms.KeyTransRecipient -> org.spongycastle.cms.A:
    org.spongycastle.cms.RecipientOperator getRecipientOperator(org.spongycastle.asn1.x509.AlgorithmIdentifier,org.spongycastle.asn1.x509.AlgorithmIdentifier,byte[]) -> a
org.spongycastle.cms.KeyTransRecipientId -> org.spongycastle.cms.B:
    org.spongycastle.cert.selector.X509CertificateHolderSelector baseSelector -> a
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.Object clone() -> clone
    boolean match(java.lang.Object) -> a
org.spongycastle.cms.KeyTransRecipientInfoGenerator -> org.spongycastle.cms.C:
org.spongycastle.cms.KeyTransRecipientInformation -> org.spongycastle.cms.D:
    org.spongycastle.asn1.cms.KeyTransRecipientInfo info -> a
    org.spongycastle.cms.RecipientOperator getRecipientOperator(org.spongycastle.cms.Recipient) -> a
org.spongycastle.cms.OriginatorId -> org.spongycastle.cms.E:
    byte[] subjectKeyId -> a
    org.spongycastle.asn1.x500.X500Name issuer -> b
    java.math.BigInteger serialNumber -> c
    void setSubjectKeyID(byte[]) -> a
    void setIssuerAndSerial(org.spongycastle.asn1.x500.X500Name,java.math.BigInteger) -> a
    java.lang.Object clone() -> clone
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    boolean equalsObj(java.lang.Object,java.lang.Object) -> a
    boolean match(java.lang.Object) -> a
org.spongycastle.cms.OriginatorInformation -> org.spongycastle.cms.F:
    org.spongycastle.asn1.cms.OriginatorInfo originatorInfo -> a
org.spongycastle.cms.PKCS7ProcessableObject -> org.spongycastle.cms.G:
    org.spongycastle.asn1.ASN1ObjectIdentifier type -> a
    org.spongycastle.asn1.ASN1Encodable structure -> b
    void write(java.io.OutputStream) -> a
org.spongycastle.cms.PasswordRecipient -> org.spongycastle.cms.H:
    byte[] calculateDerivedKey(int,org.spongycastle.asn1.x509.AlgorithmIdentifier,int) -> a
    org.spongycastle.cms.RecipientOperator getRecipientOperator(org.spongycastle.asn1.x509.AlgorithmIdentifier,org.spongycastle.asn1.x509.AlgorithmIdentifier,byte[],byte[]) -> a
    int getPasswordConversionScheme() -> a
org.spongycastle.cms.PasswordRecipientId -> org.spongycastle.cms.I:
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.Object clone() -> clone
    boolean match(java.lang.Object) -> a
org.spongycastle.cms.PasswordRecipientInformation -> org.spongycastle.cms.J:
    java.util.Map KEYSIZES -> a
    java.util.Map BLOCKSIZES -> b
    org.spongycastle.asn1.cms.PasswordRecipientInfo info -> g
    org.spongycastle.asn1.x509.AlgorithmIdentifier getKeyDerivationAlgorithm() -> a
    org.spongycastle.cms.RecipientOperator getRecipientOperator(org.spongycastle.cms.Recipient) -> a
org.spongycastle.cms.Recipient -> org.spongycastle.cms.K:
org.spongycastle.cms.RecipientId -> org.spongycastle.cms.L:
    int type -> a
    java.lang.Object clone() -> clone
org.spongycastle.cms.RecipientInformation -> org.spongycastle.cms.M:
    org.spongycastle.cms.RecipientId rid -> c
    org.spongycastle.asn1.x509.AlgorithmIdentifier keyEncAlg -> d
    org.spongycastle.asn1.x509.AlgorithmIdentifier messageAlgorithm -> e
    org.spongycastle.cms.CMSSecureReadable secureReadable -> f
    org.spongycastle.cms.AuthAttributesProvider additionalData -> a
    org.spongycastle.cms.RecipientOperator operator -> b
    org.spongycastle.cms.RecipientId getRID() -> b
    byte[] getContent(org.spongycastle.cms.Recipient) -> b
    org.spongycastle.cms.CMSTypedStream getContentStream(org.spongycastle.cms.Recipient) -> c
    org.spongycastle.cms.RecipientOperator getRecipientOperator(org.spongycastle.cms.Recipient) -> a
org.spongycastle.cms.RecipientInformationStore -> org.spongycastle.cms.N:
    java.util.List all -> a
    java.util.Map table -> b
    java.util.Collection getRecipients() -> a
    java.util.Iterator iterator() -> iterator
org.spongycastle.cms.RecipientOperator -> org.spongycastle.cms.O:
    org.spongycastle.asn1.x509.AlgorithmIdentifier algorithmIdentifier -> a
    java.lang.Object operator -> b
    java.io.InputStream getInputStream(java.io.InputStream) -> a
org.spongycastle.cms.SignerId -> org.spongycastle.cms.P:
    org.spongycastle.cert.selector.X509CertificateHolderSelector baseSelector -> a
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    boolean match(java.lang.Object) -> a
    java.lang.Object clone() -> clone
org.spongycastle.cms.SignerInformation -> org.spongycastle.cms.Q:
    org.spongycastle.cms.SignerId sid -> f
    org.spongycastle.cms.CMSProcessable content -> g
    byte[] signature -> h
    org.spongycastle.asn1.ASN1ObjectIdentifier contentType -> i
    boolean isCounterSignature -> j
    org.spongycastle.asn1.cms.AttributeTable signedAttributeValues -> k
    org.spongycastle.asn1.cms.AttributeTable unsignedAttributeValues -> l
    byte[] resultDigest -> m
    org.spongycastle.asn1.cms.SignerInfo info -> a
    org.spongycastle.asn1.x509.AlgorithmIdentifier digestAlgorithm -> b
    org.spongycastle.asn1.x509.AlgorithmIdentifier encryptionAlgorithm -> c
    org.spongycastle.asn1.ASN1Set signedAttributeSet -> d
    org.spongycastle.asn1.ASN1Set unsignedAttributeSet -> e
    org.spongycastle.cms.SignerId getSID() -> a
    org.spongycastle.asn1.x509.AlgorithmIdentifier getDigestAlgorithmID() -> b
    org.spongycastle.asn1.cms.AttributeTable getSignedAttributes() -> c
    org.spongycastle.asn1.cms.AttributeTable getUnsignedAttributes() -> d
    byte[] getSignature() -> e
    org.spongycastle.asn1.cms.SignerInfo toASN1Structure() -> f
    org.spongycastle.cms.SignerInformation replaceUnsignedAttributes(org.spongycastle.cms.SignerInformation,org.spongycastle.asn1.cms.AttributeTable) -> a
org.spongycastle.cms.SignerInformationStore -> org.spongycastle.cms.R:
    java.util.List all -> a
    java.util.Map table -> b
    java.util.Collection getSigners() -> a
    java.util.Iterator iterator() -> iterator
org.spongycastle.cms.jcajce.CMSUtils -> org.spongycastle.cms.jcajce.a:
    java.util.Set mqvAlgs -> a
    java.util.Set ecAlgs -> b
    void loadParameters(java.security.AlgorithmParameters,org.spongycastle.asn1.ASN1Encodable) -> a
org.spongycastle.cms.jcajce.DefaultJcaJceExtHelper -> org.spongycastle.cms.jcajce.b:
    org.spongycastle.operator.jcajce.JceAsymmetricKeyUnwrapper createAsymmetricUnwrapper(org.spongycastle.asn1.x509.AlgorithmIdentifier,java.security.PrivateKey) -> a
org.spongycastle.cms.jcajce.EnvelopedDataHelper -> org.spongycastle.cms.jcajce.c:
    org.spongycastle.operator.SecretKeySizeProvider KEY_SIZE_PROVIDER -> a
    java.util.Map BASE_CIPHER_NAMES -> b
    java.util.Map CIPHER_ALG_NAMES -> c
    java.util.Map MAC_ALG_NAMES -> d
    short[] rc2Table -> e
    short[] rc2Ekb -> f
    org.spongycastle.cms.jcajce.JcaJceExtHelper helper -> g
    java.lang.String getBaseCipherName(org.spongycastle.asn1.ASN1ObjectIdentifier) -> a
    java.security.Key getJceKey(org.spongycastle.asn1.ASN1ObjectIdentifier,org.spongycastle.operator.GenericKey) -> a
    void keySizeCheck(org.spongycastle.asn1.x509.AlgorithmIdentifier,java.security.Key) -> a
    javax.crypto.Cipher createCipher(org.spongycastle.asn1.ASN1ObjectIdentifier) -> b
    javax.crypto.Cipher createContentCipher(java.security.Key,org.spongycastle.asn1.x509.AlgorithmIdentifier) -> a
    java.security.AlgorithmParameters createAlgorithmParameters(org.spongycastle.asn1.ASN1ObjectIdentifier) -> c
    java.lang.Object execute(org.spongycastle.cms.jcajce.EnvelopedDataHelper$JCECallback) -> a
    org.spongycastle.operator.jcajce.JceAsymmetricKeyUnwrapper createAsymmetricUnwrapper(org.spongycastle.asn1.x509.AlgorithmIdentifier,java.security.PrivateKey) -> a
org.spongycastle.cms.jcajce.EnvelopedDataHelper$1 -> org.spongycastle.cms.jcajce.d:
    org.spongycastle.asn1.x509.AlgorithmIdentifier val$encryptionAlgID -> a
    java.security.Key val$sKey -> b
    org.spongycastle.cms.jcajce.EnvelopedDataHelper this$0 -> c
    java.lang.Object doInJCE() -> a
org.spongycastle.cms.jcajce.EnvelopedDataHelper$JCECallback -> org.spongycastle.cms.jcajce.e:
    java.lang.Object doInJCE() -> a
org.spongycastle.cms.jcajce.JcaJceExtHelper -> org.spongycastle.cms.jcajce.f:
    org.spongycastle.operator.jcajce.JceAsymmetricKeyUnwrapper createAsymmetricUnwrapper(org.spongycastle.asn1.x509.AlgorithmIdentifier,java.security.PrivateKey) -> a
org.spongycastle.cms.jcajce.JceKTSKeyTransRecipientInfoGenerator -> org.spongycastle.cms.jcajce.g:
    byte[] ANONYMOUS_SENDER -> a
org.spongycastle.cms.jcajce.JceKTSKeyTransRecipientInfoGenerator$1 -> org.spongycastle.cms.jcajce.JceKTSKeyTransRecipientInfoGenerator$1:
    java.io.IOException val$e -> a
    java.lang.Throwable getCause() -> getCause
org.spongycastle.cms.jcajce.JceKeyTransEnvelopedRecipient -> org.spongycastle.cms.jcajce.h:
    org.spongycastle.cms.RecipientOperator getRecipientOperator(org.spongycastle.asn1.x509.AlgorithmIdentifier,org.spongycastle.asn1.x509.AlgorithmIdentifier,byte[]) -> a
org.spongycastle.cms.jcajce.JceKeyTransEnvelopedRecipient$1 -> org.spongycastle.cms.jcajce.i:
    org.spongycastle.asn1.x509.AlgorithmIdentifier val$contentEncryptionAlgorithm -> a
    javax.crypto.Cipher val$dataCipher -> b
    org.spongycastle.cms.jcajce.JceKeyTransEnvelopedRecipient this$0 -> c
    org.spongycastle.asn1.x509.AlgorithmIdentifier getAlgorithmIdentifier() -> a
    java.io.InputStream getInputStream(java.io.InputStream) -> a
org.spongycastle.cms.jcajce.JceKeyTransRecipient -> org.spongycastle.cms.jcajce.j:
    java.security.PrivateKey recipientKey -> f
    org.spongycastle.cms.jcajce.EnvelopedDataHelper helper -> a
    org.spongycastle.cms.jcajce.EnvelopedDataHelper contentHelper -> b
    java.util.Map extraMappings -> c
    boolean validateKeySize -> d
    boolean unwrappedKeyMustBeEncodable -> e
    java.security.Key extractSecretKey(org.spongycastle.asn1.x509.AlgorithmIdentifier,org.spongycastle.asn1.x509.AlgorithmIdentifier,byte[]) -> b
org.spongycastle.crypto.AsymmetricBlockCipher -> org.spongycastle.crypto.a:
    void init(boolean,org.spongycastle.crypto.CipherParameters) -> a
    int getInputBlockSize() -> a
    int getOutputBlockSize() -> b
    byte[] processBlock(byte[],int,int) -> a
org.spongycastle.crypto.AsymmetricCipherKeyPair -> org.spongycastle.crypto.b:
    org.spongycastle.crypto.params.AsymmetricKeyParameter publicParam -> a
    org.spongycastle.crypto.params.AsymmetricKeyParameter privateParam -> b
    org.spongycastle.crypto.params.AsymmetricKeyParameter getPublic() -> a
    org.spongycastle.crypto.params.AsymmetricKeyParameter getPrivate() -> b
org.spongycastle.crypto.BlockCipher -> org.spongycastle.crypto.c:
    void init(boolean,org.spongycastle.crypto.CipherParameters) -> a
    int getBlockSize() -> a
    int processBlock(byte[],int,byte[],int) -> a
    void reset() -> b
org.spongycastle.crypto.BufferedBlockCipher -> org.spongycastle.crypto.d:
    byte[] buf -> a
    int bufOff -> b
    boolean forEncryption -> c
    org.spongycastle.crypto.BlockCipher cipher -> d
    boolean partialBlockOkay -> e
    boolean pgpCFB -> f
    void init(boolean,org.spongycastle.crypto.CipherParameters) -> a
    int getBlockSize() -> a
    int getUpdateOutputSize(int) -> a
    int getOutputSize(int) -> b
    int processBytes(byte[],int,int,byte[],int) -> a
    int doFinal(byte[],int) -> a
    void reset() -> b
org.spongycastle.crypto.CipherParameters -> org.spongycastle.crypto.e:
org.spongycastle.crypto.CryptoException -> org.spongycastle.crypto.f:
    java.lang.Throwable cause -> a
    java.lang.Throwable getCause() -> getCause
org.spongycastle.crypto.DSA -> org.spongycastle.crypto.g:
    void init(boolean,org.spongycastle.crypto.CipherParameters) -> a
    java.math.BigInteger[] generateSignature(byte[]) -> a
    boolean verifySignature(byte[],java.math.BigInteger,java.math.BigInteger) -> a
org.spongycastle.crypto.DataLengthException -> org.spongycastle.crypto.h:
org.spongycastle.crypto.Digest -> org.spongycastle.crypto.i:
    java.lang.String getAlgorithmName() -> a
    int getDigestSize() -> b
    void update(byte) -> a
    void update(byte[],int,int) -> a
    int doFinal(byte[],int) -> a
    void reset() -> c
org.spongycastle.crypto.ExtendedDigest -> org.spongycastle.crypto.j:
    int getByteLength() -> d
org.spongycastle.crypto.InvalidCipherTextException -> org.spongycastle.crypto.k:
org.spongycastle.crypto.KeyGenerationParameters -> org.spongycastle.crypto.l:
    java.security.SecureRandom random -> a
    int strength -> b
    java.security.SecureRandom getRandom() -> a
    int getStrength() -> b
org.spongycastle.crypto.Mac -> org.spongycastle.crypto.m:
    void init(org.spongycastle.crypto.CipherParameters) -> a
    int getMacSize() -> a
    void update(byte) -> a
    void update(byte[],int,int) -> a
    int doFinal(byte[],int) -> a
org.spongycastle.crypto.OutputLengthException -> org.spongycastle.crypto.n:
org.spongycastle.crypto.PBEParametersGenerator -> org.spongycastle.crypto.o:
    byte[] password -> a
    byte[] salt -> b
    int iterationCount -> c
    void init(byte[],byte[],int) -> a
    org.spongycastle.crypto.CipherParameters generateDerivedMacParameters(int) -> a
    byte[] PKCS12PasswordToBytes(char[]) -> a
org.spongycastle.crypto.RuntimeCryptoException -> org.spongycastle.crypto.p:
org.spongycastle.crypto.digests.Blake2bDigest -> org.spongycastle.crypto.a.a:
    long[] blake2b_IV -> a
    byte[][] blake2b_sigma -> b
    int rOUNDS -> c
    int digestLength -> d
    int keyLength -> e
    byte[] salt -> f
    byte[] personalization -> g
    byte[] key -> h
    byte[] buffer -> i
    int bufferPos -> j
    long[] internalState -> k
    long[] chainValue -> l
    long t0 -> m
    long t1 -> n
    long f0 -> o
    void init() -> e
    void initializeInternalState() -> f
    void update(byte) -> a
    void update(byte[],int,int) -> a
    int doFinal(byte[],int) -> a
    void reset() -> c
    void compress(byte[],int) -> b
    void G(long,long,int,int,int,int) -> a
    long rotr64(long,int) -> a
    byte[] long2bytes(long) -> a
    long bytes2long(byte[],int) -> c
    java.lang.String getAlgorithmName() -> a
    int getDigestSize() -> b
    int getByteLength() -> d
org.spongycastle.crypto.digests.GOST3411Digest -> org.spongycastle.crypto.a.b:
    byte[] H -> h
    byte[] L -> i
    byte[] M -> j
    byte[] Sum -> k
    byte[][] C -> l
    byte[] xBuf -> m
    int xBufOff -> n
    long byteCount -> o
    org.spongycastle.crypto.BlockCipher cipher -> p
    byte[] sBox -> q
    byte[] K -> r
    byte[] a -> a
    short[] wS -> b
    short[] w_S -> c
    byte[] S -> d
    byte[] U -> e
    byte[] V -> f
    byte[] W -> g
    byte[] C2 -> s
    java.lang.String getAlgorithmName() -> a
    int getDigestSize() -> b
    void update(byte) -> a
    void update(byte[],int,int) -> a
    byte[] P(byte[]) -> a
    byte[] A(byte[]) -> b
    void E(byte[],byte[],int,byte[],int) -> a
    void fw(byte[]) -> c
    void processBlock(byte[],int) -> b
    void finish() -> f
    int doFinal(byte[],int) -> a
    void reset() -> c
    void sumByteArray(byte[]) -> d
    void cpyBytesToShort(byte[],short[]) -> a
    void cpyShortToBytes(short[],byte[]) -> a
    int getByteLength() -> d
    org.spongycastle.util.Memoable copy() -> e
    void reset(org.spongycastle.util.Memoable) -> a
org.spongycastle.crypto.digests.GeneralDigest -> org.spongycastle.crypto.a.c:
    byte[] xBuf -> a
    int xBufOff -> b
    long byteCount -> c
    void copyIn(org.spongycastle.crypto.digests.GeneralDigest) -> a
    void update(byte) -> a
    void update(byte[],int,int) -> a
    void finish() -> f
    void reset() -> c
    int getByteLength() -> d
    void processWord(byte[],int) -> b
    void processLength(long) -> a
    void processBlock() -> g
org.spongycastle.crypto.digests.KeccakDigest -> org.spongycastle.crypto.a.d:
    long[] KeccakRoundConstants -> m
    int[] KeccakRhoOffsets -> n
    byte[] state -> a
    byte[] dataQueue -> b
    int rate -> c
    int bitsInQueue -> d
    int fixedOutputLength -> e
    boolean squeezing -> f
    int bitsAvailableForSqueezing -> g
    byte[] chunk -> h
    byte[] oneByte -> i
    long[] C -> j
    long[] tempA -> k
    long[] chiC -> l
    long[] keccakInitializeRoundConstants() -> e
    boolean LFSR86540(byte[]) -> a
    int[] keccakInitializeRhoOffsets() -> f
    void clearDataQueueSection(int,int) -> a
    java.lang.String getAlgorithmName() -> a
    int getDigestSize() -> b
    void update(byte) -> a
    void update(byte[],int,int) -> a
    int doFinal(byte[],int) -> a
    void reset() -> c
    int getByteLength() -> d
    void init(int) -> a
    void initSponge(int,int) -> b
    void absorbQueue() -> g
    void absorb(byte[],int,long) -> a
    void padAndSwitchToSqueezingPhase() -> h
    void squeeze(byte[],int,long) -> b
    void fromBytesToWords(long[],byte[]) -> a
    void fromWordsToBytes(byte[],long[]) -> a
    void keccakPermutation(byte[]) -> b
    void keccakPermutationAfterXor(byte[],byte[],int) -> a
    void keccakPermutationOnWords(long[]) -> a
    void theta(long[]) -> b
    void rho(long[]) -> c
    void pi(long[]) -> d
    void chi(long[]) -> e
    void iota(long[],int) -> a
    void KeccakAbsorb(byte[],byte[],int) -> b
    void KeccakExtract1024bits(byte[],byte[]) -> a
    void KeccakExtract(byte[],byte[],int) -> c
org.spongycastle.crypto.digests.LongDigest -> org.spongycastle.crypto.a.e:
    byte[] xBuf -> j
    int xBufOff -> k
    long byteCount1 -> l
    long byteCount2 -> m
    long H1 -> a
    long H2 -> b
    long H3 -> c
    long H4 -> d
    long H5 -> e
    long H6 -> f
    long H7 -> g
    long H8 -> h
    long[] W -> n
    int wOff -> o
    long[] K -> i
    void copyIn(org.spongycastle.crypto.digests.LongDigest) -> a
    void update(byte) -> a
    void update(byte[],int,int) -> a
    void finish() -> f
    void reset() -> c
    int getByteLength() -> d
    void processWord(byte[],int) -> b
    void adjustByteCounts() -> h
    void processLength(long,long) -> a
    void processBlock() -> g
    long Ch(long,long,long) -> a
    long Maj(long,long,long) -> b
    long Sum0(long) -> a
    long Sum1(long) -> b
    long Sigma0(long) -> c
    long Sigma1(long) -> d
org.spongycastle.crypto.digests.MD2Digest -> org.spongycastle.crypto.a.f:
    byte[] X -> a
    int xOff -> b
    byte[] M -> c
    int mOff -> d
    byte[] C -> e
    int COff -> f
    byte[] S -> g
    void copyIn(org.spongycastle.crypto.digests.MD2Digest) -> a
    java.lang.String getAlgorithmName() -> a
    int getDigestSize() -> b
    int doFinal(byte[],int) -> a
    void reset() -> c
    void update(byte) -> a
    void update(byte[],int,int) -> a
    void processCheckSum(byte[]) -> a
    void processBlock(byte[]) -> b
    int getByteLength() -> d
    org.spongycastle.util.Memoable copy() -> e
    void reset(org.spongycastle.util.Memoable) -> a
org.spongycastle.crypto.digests.MD4Digest -> org.spongycastle.crypto.a.g:
    int H1 -> a
    int H2 -> b
    int H3 -> c
    int H4 -> d
    int[] X -> e
    int xOff -> f
    void copyIn(org.spongycastle.crypto.digests.MD4Digest) -> a
    java.lang.String getAlgorithmName() -> a
    int getDigestSize() -> b
    void processWord(byte[],int) -> b
    void processLength(long) -> a
    void unpackWord(int,byte[],int) -> a
    int doFinal(byte[],int) -> a
    void reset() -> c
    int rotateLeft(int,int) -> a
    int F(int,int,int) -> a
    int G(int,int,int) -> b
    int H(int,int,int) -> c
    void processBlock() -> g
    org.spongycastle.util.Memoable copy() -> e
    void reset(org.spongycastle.util.Memoable) -> a
org.spongycastle.crypto.digests.MD5Digest -> org.spongycastle.crypto.a.h:
    int H1 -> a
    int H2 -> b
    int H3 -> c
    int H4 -> d
    int[] X -> e
    int xOff -> f
    void copyIn(org.spongycastle.crypto.digests.MD5Digest) -> a
    java.lang.String getAlgorithmName() -> a
    int getDigestSize() -> b
    void processWord(byte[],int) -> b
    void processLength(long) -> a
    void unpackWord(int,byte[],int) -> a
    int doFinal(byte[],int) -> a
    void reset() -> c
    int rotateLeft(int,int) -> a
    int F(int,int,int) -> a
    int G(int,int,int) -> b
    int H(int,int,int) -> c
    int K(int,int,int) -> d
    void processBlock() -> g
    org.spongycastle.util.Memoable copy() -> e
    void reset(org.spongycastle.util.Memoable) -> a
org.spongycastle.crypto.digests.NullDigest -> org.spongycastle.crypto.a.i:
    java.io.ByteArrayOutputStream bOut -> a
    java.lang.String getAlgorithmName() -> a
    int getDigestSize() -> b
    void update(byte) -> a
    void update(byte[],int,int) -> a
    int doFinal(byte[],int) -> a
    void reset() -> c
org.spongycastle.crypto.digests.RIPEMD128Digest -> org.spongycastle.crypto.a.j:
    int H0 -> a
    int H1 -> b
    int H2 -> c
    int H3 -> d
    int[] X -> e
    int xOff -> f
    void copyIn(org.spongycastle.crypto.digests.RIPEMD128Digest) -> a
    java.lang.String getAlgorithmName() -> a
    int getDigestSize() -> b
    void processWord(byte[],int) -> b
    void processLength(long) -> a
    void unpackWord(int,byte[],int) -> a
    int doFinal(byte[],int) -> a
    void reset() -> c
    int RL(int,int) -> a
    int f1(int,int,int) -> a
    int f2(int,int,int) -> b
    int f3(int,int,int) -> c
    int f4(int,int,int) -> d
    int F1(int,int,int,int,int,int) -> a
    int F2(int,int,int,int,int,int) -> b
    int F3(int,int,int,int,int,int) -> c
    int F4(int,int,int,int,int,int) -> d
    int FF1(int,int,int,int,int,int) -> e
    int FF2(int,int,int,int,int,int) -> f
    int FF3(int,int,int,int,int,int) -> g
    int FF4(int,int,int,int,int,int) -> h
    void processBlock() -> g
    org.spongycastle.util.Memoable copy() -> e
    void reset(org.spongycastle.util.Memoable) -> a
org.spongycastle.crypto.digests.RIPEMD160Digest -> org.spongycastle.crypto.a.k:
    int H0 -> a
    int H1 -> b
    int H2 -> c
    int H3 -> d
    int H4 -> e
    int[] X -> f
    int xOff -> g
    void copyIn(org.spongycastle.crypto.digests.RIPEMD160Digest) -> a
    java.lang.String getAlgorithmName() -> a
    int getDigestSize() -> b
    void processWord(byte[],int) -> b
    void processLength(long) -> a
    void unpackWord(int,byte[],int) -> a
    int doFinal(byte[],int) -> a
    void reset() -> c
    int RL(int,int) -> a
    int f1(int,int,int) -> a
    int f2(int,int,int) -> b
    int f3(int,int,int) -> c
    int f4(int,int,int) -> d
    int f5(int,int,int) -> e
    void processBlock() -> g
    org.spongycastle.util.Memoable copy() -> e
    void reset(org.spongycastle.util.Memoable) -> a
org.spongycastle.crypto.digests.RIPEMD256Digest -> org.spongycastle.crypto.a.l:
    int H0 -> a
    int H1 -> b
    int H2 -> c
    int H3 -> d
    int H4 -> e
    int H5 -> f
    int H6 -> g
    int H7 -> h
    int[] X -> i
    int xOff -> j
    void copyIn(org.spongycastle.crypto.digests.RIPEMD256Digest) -> a
    java.lang.String getAlgorithmName() -> a
    int getDigestSize() -> b
    void processWord(byte[],int) -> b
    void processLength(long) -> a
    void unpackWord(int,byte[],int) -> a
    int doFinal(byte[],int) -> a
    void reset() -> c
    int RL(int,int) -> a
    int f1(int,int,int) -> a
    int f2(int,int,int) -> b
    int f3(int,int,int) -> c
    int f4(int,int,int) -> d
    int F1(int,int,int,int,int,int) -> a
    int F2(int,int,int,int,int,int) -> b
    int F3(int,int,int,int,int,int) -> c
    int F4(int,int,int,int,int,int) -> d
    int FF1(int,int,int,int,int,int) -> e
    int FF2(int,int,int,int,int,int) -> f
    int FF3(int,int,int,int,int,int) -> g
    int FF4(int,int,int,int,int,int) -> h
    void processBlock() -> g
    org.spongycastle.util.Memoable copy() -> e
    void reset(org.spongycastle.util.Memoable) -> a
org.spongycastle.crypto.digests.RIPEMD320Digest -> org.spongycastle.crypto.a.m:
    int H0 -> a
    int H1 -> b
    int H2 -> c
    int H3 -> d
    int H4 -> e
    int H5 -> f
    int H6 -> g
    int H7 -> h
    int H8 -> i
    int H9 -> j
    int[] X -> k
    int xOff -> l
    void doCopy(org.spongycastle.crypto.digests.RIPEMD320Digest) -> a
    java.lang.String getAlgorithmName() -> a
    int getDigestSize() -> b
    void processWord(byte[],int) -> b
    void processLength(long) -> a
    void unpackWord(int,byte[],int) -> a
    int doFinal(byte[],int) -> a
    void reset() -> c
    int RL(int,int) -> a
    int f1(int,int,int) -> a
    int f2(int,int,int) -> b
    int f3(int,int,int) -> c
    int f4(int,int,int) -> d
    int f5(int,int,int) -> e
    void processBlock() -> g
    org.spongycastle.util.Memoable copy() -> e
    void reset(org.spongycastle.util.Memoable) -> a
org.spongycastle.crypto.digests.SHA1Digest -> org.spongycastle.crypto.a.n:
    int H1 -> a
    int H2 -> b
    int H3 -> c
    int H4 -> d
    int H5 -> e
    int[] X -> f
    int xOff -> g
    void copyIn(org.spongycastle.crypto.digests.SHA1Digest) -> a
    java.lang.String getAlgorithmName() -> a
    int getDigestSize() -> b
    void processWord(byte[],int) -> b
    void processLength(long) -> a
    int doFinal(byte[],int) -> a
    void reset() -> c
    int f(int,int,int) -> a
    int h(int,int,int) -> b
    int g(int,int,int) -> c
    void processBlock() -> g
    org.spongycastle.util.Memoable copy() -> e
    void reset(org.spongycastle.util.Memoable) -> a
org.spongycastle.crypto.digests.SHA224Digest -> org.spongycastle.crypto.a.o:
    int H1 -> b
    int H2 -> c
    int H3 -> d
    int H4 -> e
    int H5 -> f
    int H6 -> g
    int H7 -> h
    int H8 -> i
    int[] X -> j
    int xOff -> k
    int[] K -> a
    void doCopy(org.spongycastle.crypto.digests.SHA224Digest) -> a
    java.lang.String getAlgorithmName() -> a
    int getDigestSize() -> b
    void processWord(byte[],int) -> b
    void processLength(long) -> a
    int doFinal(byte[],int) -> a
    void reset() -> c
    void processBlock() -> g
    int Ch(int,int,int) -> a
    int Maj(int,int,int) -> b
    int Sum0(int) -> a
    int Sum1(int) -> b
    int Theta0(int) -> c
    int Theta1(int) -> d
    org.spongycastle.util.Memoable copy() -> e
    void reset(org.spongycastle.util.Memoable) -> a
org.spongycastle.crypto.digests.SHA256Digest -> org.spongycastle.crypto.a.p:
    int H1 -> b
    int H2 -> c
    int H3 -> d
    int H4 -> e
    int H5 -> f
    int H6 -> g
    int H7 -> h
    int H8 -> i
    int[] X -> j
    int xOff -> k
    int[] K -> a
    void copyIn(org.spongycastle.crypto.digests.SHA256Digest) -> a
    java.lang.String getAlgorithmName() -> a
    int getDigestSize() -> b
    void processWord(byte[],int) -> b
    void processLength(long) -> a
    int doFinal(byte[],int) -> a
    void reset() -> c
    void processBlock() -> g
    int Ch(int,int,int) -> a
    int Maj(int,int,int) -> b
    int Sum0(int) -> a
    int Sum1(int) -> b
    int Theta0(int) -> c
    int Theta1(int) -> d
    org.spongycastle.util.Memoable copy() -> e
    void reset(org.spongycastle.util.Memoable) -> a
org.spongycastle.crypto.digests.SHA384Digest -> org.spongycastle.crypto.a.q:
    java.lang.String getAlgorithmName() -> a
    int getDigestSize() -> b
    int doFinal(byte[],int) -> a
    void reset() -> c
    org.spongycastle.util.Memoable copy() -> e
    void reset(org.spongycastle.util.Memoable) -> a
org.spongycastle.crypto.digests.SHA3Digest -> org.spongycastle.crypto.a.r:
    int checkBitLength(int) -> a
    java.lang.String getAlgorithmName() -> a
    int doFinal(byte[],int) -> a
org.spongycastle.crypto.digests.SHA512Digest -> org.spongycastle.crypto.a.s:
    java.lang.String getAlgorithmName() -> a
    int getDigestSize() -> b
    int doFinal(byte[],int) -> a
    void reset() -> c
    org.spongycastle.util.Memoable copy() -> e
    void reset(org.spongycastle.util.Memoable) -> a
org.spongycastle.crypto.digests.SHA512tDigest -> org.spongycastle.crypto.a.t:
    int digestLength -> j
    long H1t -> k
    long H2t -> l
    long H3t -> m
    long H4t -> n
    long H5t -> o
    long H6t -> p
    long H7t -> q
    long H8t -> r
    java.lang.String getAlgorithmName() -> a
    int getDigestSize() -> b
    int doFinal(byte[],int) -> a
    void reset() -> c
    void tIvGenerate(int) -> a
    void longToBigEndian(long,byte[],int,int) -> a
    void intToBigEndian(int,byte[],int,int) -> a
    org.spongycastle.util.Memoable copy() -> e
    void reset(org.spongycastle.util.Memoable) -> a
org.spongycastle.crypto.digests.SM3Digest -> org.spongycastle.crypto.a.u:
    int[] V -> a
    int[] inwords -> b
    int xOff -> c
    int[] W -> d
    int[] W1 -> e
    int[] T -> f
    void copyIn(org.spongycastle.crypto.digests.SM3Digest) -> a
    java.lang.String getAlgorithmName() -> a
    int getDigestSize() -> b
    org.spongycastle.util.Memoable copy() -> e
    void reset(org.spongycastle.util.Memoable) -> a
    void reset() -> c
    int doFinal(byte[],int) -> a
    void processWord(byte[],int) -> b
    void processLength(long) -> a
    int P0(int) -> a
    int P1(int) -> b
    int FF0(int,int,int) -> a
    int FF1(int,int,int) -> b
    int GG0(int,int,int) -> c
    int GG1(int,int,int) -> d
    void processBlock() -> g
org.spongycastle.crypto.digests.SkeinDigest -> org.spongycastle.crypto.a.v:
    org.spongycastle.crypto.digests.SkeinEngine engine -> a
    void reset(org.spongycastle.util.Memoable) -> a
    org.spongycastle.util.Memoable copy() -> e
    java.lang.String getAlgorithmName() -> a
    int getDigestSize() -> b
    int getByteLength() -> d
    void init(org.spongycastle.crypto.params.SkeinParameters) -> a
    void reset() -> c
    void update(byte) -> a
    void update(byte[],int,int) -> a
    int doFinal(byte[],int) -> a
org.spongycastle.crypto.digests.SkeinEngine -> org.spongycastle.crypto.a.w:
    java.util.Hashtable INITIAL_STATES -> c
    org.spongycastle.crypto.engines.ThreefishEngine threefish -> a
    int outputSizeBytes -> d
    long[] chain -> b
    long[] initialState -> e
    byte[] key -> f
    org.spongycastle.crypto.digests.SkeinEngine$Parameter[] preMessageParameters -> g
    org.spongycastle.crypto.digests.SkeinEngine$Parameter[] postMessageParameters -> h
    org.spongycastle.crypto.digests.SkeinEngine$UBI ubi -> i
    byte[] singleByte -> j
    void initialState(int,int,long[]) -> a
    java.lang.Integer variantIdentifier(int,int) -> a
    void copyIn(org.spongycastle.crypto.digests.SkeinEngine) -> a
    org.spongycastle.crypto.digests.SkeinEngine$Parameter[] clone(org.spongycastle.crypto.digests.SkeinEngine$Parameter[],org.spongycastle.crypto.digests.SkeinEngine$Parameter[]) -> a
    org.spongycastle.util.Memoable copy() -> e
    void reset(org.spongycastle.util.Memoable) -> a
    int getOutputSize() -> a
    int getBlockSize() -> b
    void init(org.spongycastle.crypto.params.SkeinParameters) -> a
    void initParams(java.util.Hashtable) -> a
    void sort(org.spongycastle.crypto.digests.SkeinEngine$Parameter[]) -> a
    void createInitialState() -> d
    void reset() -> c
    void ubiComplete(int,byte[]) -> a
    void ubiInit(int) -> a
    void ubiFinal() -> f
    void checkInitialised() -> g
    void update(byte) -> a
    void update(byte[],int,int) -> a
    int doFinal(byte[],int) -> a
    void output(long,byte[],int,int) -> a
org.spongycastle.crypto.digests.SkeinEngine$Configuration -> org.spongycastle.crypto.a.x:
    byte[] bytes -> a
    byte[] getBytes() -> a
org.spongycastle.crypto.digests.SkeinEngine$Parameter -> org.spongycastle.crypto.a.y:
    int type -> a
    byte[] value -> b
    int getType() -> a
    byte[] getValue() -> b
org.spongycastle.crypto.digests.SkeinEngine$UBI -> org.spongycastle.crypto.a.z:
    org.spongycastle.crypto.digests.SkeinEngine$UbiTweak tweak -> b
    byte[] currentBlock -> c
    int currentOffset -> d
    long[] message -> e
    org.spongycastle.crypto.digests.SkeinEngine this$0 -> a
    void reset(org.spongycastle.crypto.digests.SkeinEngine$UBI) -> a
    void reset(int) -> a
    void update(byte[],int,int,long[]) -> a
    void processBlock(long[]) -> b
    void doFinal(long[]) -> a
org.spongycastle.crypto.digests.SkeinEngine$UbiTweak -> org.spongycastle.crypto.a.A:
    long[] tweak -> a
    boolean extendedPosition -> b
    void reset(org.spongycastle.crypto.digests.SkeinEngine$UbiTweak) -> a
    void reset() -> a
    void setType(int) -> a
    int getType() -> b
    void setFirst(boolean) -> a
    boolean isFirst() -> c
    void setFinal(boolean) -> b
    boolean isFinal() -> d
    void advancePosition(int) -> b
    long[] getWords() -> e
    java.lang.String toString() -> toString
org.spongycastle.crypto.digests.TigerDigest -> org.spongycastle.crypto.a.B:
    long[] t1 -> a
    long[] t2 -> b
    long[] t3 -> c
    long[] t4 -> d
    long a -> e
    long b -> f
    long c -> g
    long byteCount -> h
    byte[] buf -> i
    int bOff -> j
    long[] x -> k
    int xOff -> l
    java.lang.String getAlgorithmName() -> a
    int getDigestSize() -> b
    void processWord(byte[],int) -> b
    void update(byte) -> a
    void update(byte[],int,int) -> a
    void roundABC(long,long) -> a
    void roundBCA(long,long) -> b
    void roundCAB(long,long) -> c
    void keySchedule() -> f
    void processBlock() -> g
    void unpackWord(long,byte[],int) -> a
    void processLength(long) -> a
    void finish() -> h
    int doFinal(byte[],int) -> a
    void reset() -> c
    int getByteLength() -> d
    org.spongycastle.util.Memoable copy() -> e
    void reset(org.spongycastle.util.Memoable) -> a
org.spongycastle.crypto.digests.WhirlpoolDigest -> org.spongycastle.crypto.a.C:
    int[] SBOX -> a
    long[] C0 -> b
    long[] C1 -> c
    long[] C2 -> d
    long[] C3 -> e
    long[] C4 -> f
    long[] C5 -> g
    long[] C6 -> h
    long[] C7 -> i
    long[] _rc -> j
    byte[] _buffer -> k
    int _bufferPos -> l
    short[] _bitCount -> m
    long[] _hash -> n
    long[] _K -> o
    long[] _L -> p
    long[] _block -> q
    long[] _state -> r
    short[] EIGHT -> s
    long packIntoLong(int,int,int,int,int,int,int,int) -> a
    int maskWithReductionPolynomial(int) -> a
    java.lang.String getAlgorithmName() -> a
    int getDigestSize() -> b
    int doFinal(byte[],int) -> a
    void reset() -> c
    void processFilledBuffer(byte[],int) -> b
    long bytesToLongFromBuffer(byte[],int) -> c
    void convertLongToByteArray(long,byte[],int) -> a
    void processBlock() -> f
    void update(byte) -> a
    void increment() -> g
    void update(byte[],int,int) -> a
    void finish() -> h
    byte[] copyBitLength() -> i
    int getByteLength() -> d
    org.spongycastle.util.Memoable copy() -> e
    void reset(org.spongycastle.util.Memoable) -> a
org.spongycastle.crypto.ec.CustomNamedCurves -> org.spongycastle.crypto.b.a:
    org.spongycastle.asn1.x9.X9ECParametersHolder curve25519 -> a
    org.spongycastle.asn1.x9.X9ECParametersHolder secp128r1 -> b
    org.spongycastle.asn1.x9.X9ECParametersHolder secp160k1 -> c
    org.spongycastle.asn1.x9.X9ECParametersHolder secp160r1 -> d
    org.spongycastle.asn1.x9.X9ECParametersHolder secp160r2 -> e
    org.spongycastle.asn1.x9.X9ECParametersHolder secp192k1 -> f
    org.spongycastle.asn1.x9.X9ECParametersHolder secp192r1 -> g
    org.spongycastle.asn1.x9.X9ECParametersHolder secp224k1 -> h
    org.spongycastle.asn1.x9.X9ECParametersHolder secp224r1 -> i
    org.spongycastle.asn1.x9.X9ECParametersHolder secp256k1 -> j
    org.spongycastle.asn1.x9.X9ECParametersHolder secp256r1 -> k
    org.spongycastle.asn1.x9.X9ECParametersHolder secp384r1 -> l
    org.spongycastle.asn1.x9.X9ECParametersHolder secp521r1 -> m
    org.spongycastle.asn1.x9.X9ECParametersHolder sect113r1 -> n
    org.spongycastle.asn1.x9.X9ECParametersHolder sect113r2 -> o
    org.spongycastle.asn1.x9.X9ECParametersHolder sect131r1 -> p
    org.spongycastle.asn1.x9.X9ECParametersHolder sect131r2 -> q
    org.spongycastle.asn1.x9.X9ECParametersHolder sect163k1 -> r
    org.spongycastle.asn1.x9.X9ECParametersHolder sect163r1 -> s
    org.spongycastle.asn1.x9.X9ECParametersHolder sect163r2 -> t
    org.spongycastle.asn1.x9.X9ECParametersHolder sect193r1 -> u
    org.spongycastle.asn1.x9.X9ECParametersHolder sect193r2 -> v
    org.spongycastle.asn1.x9.X9ECParametersHolder sect233k1 -> w
    org.spongycastle.asn1.x9.X9ECParametersHolder sect233r1 -> x
    org.spongycastle.asn1.x9.X9ECParametersHolder sect239k1 -> y
    org.spongycastle.asn1.x9.X9ECParametersHolder sect283k1 -> z
    org.spongycastle.asn1.x9.X9ECParametersHolder sect283r1 -> A
    org.spongycastle.asn1.x9.X9ECParametersHolder sect409k1 -> B
    org.spongycastle.asn1.x9.X9ECParametersHolder sect409r1 -> C
    org.spongycastle.asn1.x9.X9ECParametersHolder sect571k1 -> D
    org.spongycastle.asn1.x9.X9ECParametersHolder sect571r1 -> E
    java.util.Hashtable nameToCurve -> F
    java.util.Hashtable nameToOID -> G
    java.util.Hashtable oidToCurve -> H
    java.util.Hashtable oidToName -> I
    java.util.Vector names -> J
    org.spongycastle.math.ec.ECCurve configureCurve(org.spongycastle.math.ec.ECCurve) -> b
    org.spongycastle.math.ec.ECCurve configureCurveGLV(org.spongycastle.math.ec.ECCurve,org.spongycastle.math.ec.endo.GLVTypeBParameters) -> b
    void defineCurve(java.lang.String,org.spongycastle.asn1.x9.X9ECParametersHolder) -> a
    void defineCurveWithOID(java.lang.String,org.spongycastle.asn1.ASN1ObjectIdentifier,org.spongycastle.asn1.x9.X9ECParametersHolder) -> a
    void defineCurveAlias(java.lang.String,org.spongycastle.asn1.ASN1ObjectIdentifier) -> a
    org.spongycastle.asn1.x9.X9ECParameters getByName(java.lang.String) -> a
    org.spongycastle.asn1.x9.X9ECParameters getByOID(org.spongycastle.asn1.ASN1ObjectIdentifier) -> a
    java.util.Enumeration getNames() -> a
    org.spongycastle.math.ec.ECCurve access$000(org.spongycastle.math.ec.ECCurve) -> a
    org.spongycastle.math.ec.ECCurve access$100(org.spongycastle.math.ec.ECCurve,org.spongycastle.math.ec.endo.GLVTypeBParameters) -> a
org.spongycastle.crypto.ec.CustomNamedCurves$1 -> org.spongycastle.crypto.b.b:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.crypto.ec.CustomNamedCurves$10 -> org.spongycastle.crypto.b.c:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.crypto.ec.CustomNamedCurves$11 -> org.spongycastle.crypto.b.d:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.crypto.ec.CustomNamedCurves$12 -> org.spongycastle.crypto.b.e:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.crypto.ec.CustomNamedCurves$13 -> org.spongycastle.crypto.b.f:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.crypto.ec.CustomNamedCurves$14 -> org.spongycastle.crypto.b.g:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.crypto.ec.CustomNamedCurves$15 -> org.spongycastle.crypto.b.h:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.crypto.ec.CustomNamedCurves$16 -> org.spongycastle.crypto.b.i:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.crypto.ec.CustomNamedCurves$17 -> org.spongycastle.crypto.b.j:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.crypto.ec.CustomNamedCurves$18 -> org.spongycastle.crypto.b.k:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.crypto.ec.CustomNamedCurves$19 -> org.spongycastle.crypto.b.l:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.crypto.ec.CustomNamedCurves$2 -> org.spongycastle.crypto.b.m:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.crypto.ec.CustomNamedCurves$20 -> org.spongycastle.crypto.b.n:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.crypto.ec.CustomNamedCurves$21 -> org.spongycastle.crypto.b.o:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.crypto.ec.CustomNamedCurves$22 -> org.spongycastle.crypto.b.p:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.crypto.ec.CustomNamedCurves$23 -> org.spongycastle.crypto.b.q:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.crypto.ec.CustomNamedCurves$24 -> org.spongycastle.crypto.b.r:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.crypto.ec.CustomNamedCurves$25 -> org.spongycastle.crypto.b.s:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.crypto.ec.CustomNamedCurves$26 -> org.spongycastle.crypto.b.t:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.crypto.ec.CustomNamedCurves$27 -> org.spongycastle.crypto.b.u:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.crypto.ec.CustomNamedCurves$28 -> org.spongycastle.crypto.b.v:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.crypto.ec.CustomNamedCurves$29 -> org.spongycastle.crypto.b.w:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.crypto.ec.CustomNamedCurves$3 -> org.spongycastle.crypto.b.x:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.crypto.ec.CustomNamedCurves$30 -> org.spongycastle.crypto.b.y:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.crypto.ec.CustomNamedCurves$31 -> org.spongycastle.crypto.b.z:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.crypto.ec.CustomNamedCurves$4 -> org.spongycastle.crypto.b.A:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.crypto.ec.CustomNamedCurves$5 -> org.spongycastle.crypto.b.B:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.crypto.ec.CustomNamedCurves$6 -> org.spongycastle.crypto.b.C:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.crypto.ec.CustomNamedCurves$7 -> org.spongycastle.crypto.b.D:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.crypto.ec.CustomNamedCurves$8 -> org.spongycastle.crypto.b.E:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.crypto.ec.CustomNamedCurves$9 -> org.spongycastle.crypto.b.F:
    org.spongycastle.asn1.x9.X9ECParameters createParameters() -> a
org.spongycastle.crypto.encodings.PKCS1Encoding -> org.spongycastle.crypto.encodings.a:
    java.security.SecureRandom random -> a
    org.spongycastle.crypto.AsymmetricBlockCipher engine -> b
    boolean forEncryption -> c
    boolean forPrivateKey -> d
    boolean useStrictLength -> e
    int pLen -> f
    byte[] fallback -> g
    boolean useStrict() -> c
    void init(boolean,org.spongycastle.crypto.CipherParameters) -> a
    int getInputBlockSize() -> a
    int getOutputBlockSize() -> b
    byte[] processBlock(byte[],int,int) -> a
    byte[] encodeBlock(byte[],int,int) -> b
    int checkPkcs1Encoding(byte[],int) -> a
    byte[] decodeBlockOrRandom(byte[],int,int) -> c
    byte[] decodeBlock(byte[],int,int) -> d
org.spongycastle.crypto.encodings.PKCS1Encoding$1 -> org.spongycastle.crypto.encodings.PKCS1Encoding$1:
    org.spongycastle.crypto.encodings.PKCS1Encoding this$0 -> a
    java.lang.Object run() -> run
org.spongycastle.crypto.encodings.PKCS1Encoding$2 -> org.spongycastle.crypto.encodings.PKCS1Encoding$2:
    org.spongycastle.crypto.encodings.PKCS1Encoding this$0 -> a
    java.lang.Object run() -> run
org.spongycastle.crypto.engines.AESFastEngine -> org.spongycastle.crypto.c.a:
    byte[] S -> a
    byte[] Si -> b
    int[] rcon -> c
    int[] T -> d
    int[] Tinv -> e
    int ROUNDS -> f
    int[][] WorkingKey -> g
    int C0 -> h
    int C1 -> i
    int C2 -> j
    int C3 -> k
    boolean forEncryption -> l
    int shift(int,int) -> a
    int FFmulX(int) -> a
    int FFmulX2(int) -> b
    int inv_mcol(int) -> c
    int subWord(int) -> d
    int[][] generateWorkingKey(byte[],boolean) -> a
    void init(boolean,org.spongycastle.crypto.CipherParameters) -> a
    int getBlockSize() -> a
    int processBlock(byte[],int,byte[],int) -> a
    void reset() -> b
    void unpackBlock(byte[],int) -> a
    void packBlock(byte[],int) -> b
    void encryptBlock(int[][]) -> a
    void decryptBlock(int[][]) -> b
org.spongycastle.crypto.engines.DESEngine -> org.spongycastle.crypto.c.b:
    int[] workingKey -> a
    short[] bytebit -> b
    int[] bigbyte -> c
    byte[] pc1 -> d
    byte[] totrot -> e
    byte[] pc2 -> f
    int[] SP1 -> g
    int[] SP2 -> h
    int[] SP3 -> i
    int[] SP4 -> j
    int[] SP5 -> k
    int[] SP6 -> l
    int[] SP7 -> m
    int[] SP8 -> n
    void init(boolean,org.spongycastle.crypto.CipherParameters) -> a
    int getBlockSize() -> a
    int processBlock(byte[],int,byte[],int) -> a
    void reset() -> b
    int[] generateWorkingKey(boolean,byte[]) -> a
    void desFunc(int[],byte[],int,byte[],int) -> a
org.spongycastle.crypto.engines.DESedeEngine -> org.spongycastle.crypto.c.c:
    int[] workingKey1 -> a
    int[] workingKey2 -> b
    int[] workingKey3 -> c
    boolean forEncryption -> d
    void init(boolean,org.spongycastle.crypto.CipherParameters) -> a
    int getBlockSize() -> a
    int processBlock(byte[],int,byte[],int) -> a
    void reset() -> b
org.spongycastle.crypto.engines.GOST28147Engine -> org.spongycastle.crypto.c.d:
    int[] workingKey -> a
    boolean forEncryption -> b
    byte[] S -> c
    byte[] Sbox_Default -> d
    byte[] ESbox_Test -> e
    byte[] ESbox_A -> f
    byte[] ESbox_B -> g
    byte[] ESbox_C -> h
    byte[] ESbox_D -> i
    byte[] DSbox_Test -> j
    byte[] DSbox_A -> k
    java.util.Hashtable sBoxes -> l
    void addSBox(java.lang.String,byte[]) -> a
    void init(boolean,org.spongycastle.crypto.CipherParameters) -> a
    int getBlockSize() -> a
    int processBlock(byte[],int,byte[],int) -> a
    void reset() -> b
    int[] generateWorkingKey(boolean,byte[]) -> a
    int GOST28147_mainStep(int,int) -> a
    void GOST28147Func(int[],byte[],int,byte[],int) -> a
    int bytesToint(byte[],int) -> a
    void intTobytes(int,byte[],int) -> a
    byte[] getSBox(java.lang.String) -> a
org.spongycastle.crypto.engines.RSABlindedEngine -> org.spongycastle.crypto.c.e:
    java.math.BigInteger ONE -> a
    org.spongycastle.crypto.engines.RSACoreEngine core -> b
    org.spongycastle.crypto.params.RSAKeyParameters key -> c
    java.security.SecureRandom random -> d
    void init(boolean,org.spongycastle.crypto.CipherParameters) -> a
    int getInputBlockSize() -> a
    int getOutputBlockSize() -> b
    byte[] processBlock(byte[],int,int) -> a
org.spongycastle.crypto.engines.RSACoreEngine -> org.spongycastle.crypto.c.f:
    org.spongycastle.crypto.params.RSAKeyParameters key -> a
    boolean forEncryption -> b
    void init(boolean,org.spongycastle.crypto.CipherParameters) -> a
    int getInputBlockSize() -> a
    int getOutputBlockSize() -> b
    java.math.BigInteger convertInput(byte[],int,int) -> a
    byte[] convertOutput(java.math.BigInteger) -> a
    java.math.BigInteger processBlock(java.math.BigInteger) -> b
org.spongycastle.crypto.engines.ThreefishEngine -> org.spongycastle.crypto.c.g:
    int[] MOD9 -> a
    int[] MOD17 -> b
    int[] MOD5 -> c
    int[] MOD3 -> d
    int blocksizeBytes -> e
    int blocksizeWords -> f
    long[] currentBlock -> g
    long[] t -> h
    long[] kw -> i
    org.spongycastle.crypto.engines.ThreefishEngine$ThreefishCipher cipher -> j
    boolean forEncryption -> k
    void init(boolean,org.spongycastle.crypto.CipherParameters) -> a
    void init(boolean,long[],long[]) -> a
    void setKey(long[]) -> a
    void setTweak(long[]) -> b
    int getBlockSize() -> a
    void reset() -> b
    int processBlock(byte[],int,byte[],int) -> a
    int processBlock(long[],long[]) -> a
    long bytesToWord(byte[],int) -> a
    void wordToBytes(long,byte[],int) -> a
    long rotlXor(long,int,long) -> a
    long xorRotr(long,int,long) -> b
    int[] access$000() -> c
    int[] access$100() -> d
    int[] access$200() -> e
    int[] access$300() -> f
org.spongycastle.crypto.engines.ThreefishEngine$Threefish1024Cipher -> org.spongycastle.crypto.c.h:
    void encryptBlock(long[],long[]) -> a
    void decryptBlock(long[],long[]) -> b
org.spongycastle.crypto.engines.ThreefishEngine$Threefish256Cipher -> org.spongycastle.crypto.c.i:
    void encryptBlock(long[],long[]) -> a
    void decryptBlock(long[],long[]) -> b
org.spongycastle.crypto.engines.ThreefishEngine$Threefish512Cipher -> org.spongycastle.crypto.c.j:
    void encryptBlock(long[],long[]) -> a
    void decryptBlock(long[],long[]) -> b
org.spongycastle.crypto.engines.ThreefishEngine$ThreefishCipher -> org.spongycastle.crypto.c.k:
    long[] t -> a
    long[] kw -> b
    void encryptBlock(long[],long[]) -> a
    void decryptBlock(long[],long[]) -> b
org.spongycastle.crypto.generators.DHBasicKeyPairGenerator -> org.spongycastle.crypto.d.a:
    org.spongycastle.crypto.params.DHKeyGenerationParameters param -> a
    void init(org.spongycastle.crypto.KeyGenerationParameters) -> a
    org.spongycastle.crypto.AsymmetricCipherKeyPair generateKeyPair() -> a
org.spongycastle.crypto.generators.DHKeyGeneratorHelper -> org.spongycastle.crypto.d.b:
    org.spongycastle.crypto.generators.DHKeyGeneratorHelper INSTANCE -> a
    java.math.BigInteger ONE -> b
    java.math.BigInteger TWO -> c
    java.math.BigInteger calculatePrivate(org.spongycastle.crypto.params.DHParameters,java.security.SecureRandom) -> a
    java.math.BigInteger calculatePublic(org.spongycastle.crypto.params.DHParameters,java.math.BigInteger) -> a
org.spongycastle.crypto.generators.DHParametersGenerator -> org.spongycastle.crypto.d.c:
    int size -> a
    int certainty -> b
    java.security.SecureRandom random -> c
    java.math.BigInteger TWO -> d
    void init(int,int,java.security.SecureRandom) -> a
    org.spongycastle.crypto.params.DHParameters generateParameters() -> a
org.spongycastle.crypto.generators.DHParametersHelper -> org.spongycastle.crypto.d.d:
    java.math.BigInteger ONE -> a
    java.math.BigInteger TWO -> b
    java.math.BigInteger[] generateSafePrimes(int,int,java.security.SecureRandom) -> a
    java.math.BigInteger selectGenerator(java.math.BigInteger,java.math.BigInteger,java.security.SecureRandom) -> a
org.spongycastle.crypto.generators.DSAKeyPairGenerator -> org.spongycastle.crypto.d.e:
    java.math.BigInteger ONE -> a
    org.spongycastle.crypto.params.DSAKeyGenerationParameters param -> b
    void init(org.spongycastle.crypto.KeyGenerationParameters) -> a
    org.spongycastle.crypto.AsymmetricCipherKeyPair generateKeyPair() -> a
    java.math.BigInteger generatePrivateKey(java.math.BigInteger,java.security.SecureRandom) -> a
    java.math.BigInteger calculatePublicKey(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger) -> a
org.spongycastle.crypto.generators.DSAParametersGenerator -> org.spongycastle.crypto.d.f:
    java.math.BigInteger ZERO -> a
    java.math.BigInteger ONE -> b
    java.math.BigInteger TWO -> c
    org.spongycastle.crypto.Digest digest -> d
    int L -> e
    int N -> f
    int certainty -> g
    int iterations -> h
    java.security.SecureRandom random -> i
    boolean use186_3 -> j
    int usageIndex -> k
    void init(int,int,java.security.SecureRandom) -> a
    void init(org.spongycastle.crypto.params.DSAParameterGenerationParameters) -> a
    org.spongycastle.crypto.params.DSAParameters generateParameters() -> a
    org.spongycastle.crypto.params.DSAParameters generateParameters_FIPS186_2() -> b
    java.math.BigInteger calculateGenerator_FIPS186_2(java.math.BigInteger,java.math.BigInteger,java.security.SecureRandom) -> a
    org.spongycastle.crypto.params.DSAParameters generateParameters_FIPS186_3() -> c
    boolean isProbablePrime(java.math.BigInteger) -> a
    java.math.BigInteger calculateGenerator_FIPS186_3_Unverifiable(java.math.BigInteger,java.math.BigInteger,java.security.SecureRandom) -> b
    java.math.BigInteger calculateGenerator_FIPS186_3_Verifiable(org.spongycastle.crypto.Digest,java.math.BigInteger,java.math.BigInteger,byte[],int) -> a
    void hash(org.spongycastle.crypto.Digest,byte[],byte[],int) -> a
    int getDefaultN(int) -> a
    int getMinimumIterations(int) -> b
    void inc(byte[]) -> a
org.spongycastle.crypto.generators.DSTU4145KeyPairGenerator -> org.spongycastle.crypto.d.g:
    org.spongycastle.crypto.AsymmetricCipherKeyPair generateKeyPair() -> a
org.spongycastle.crypto.generators.ECKeyPairGenerator -> org.spongycastle.crypto.d.h:
    org.spongycastle.crypto.params.ECDomainParameters params -> a
    java.security.SecureRandom random -> b
    void init(org.spongycastle.crypto.KeyGenerationParameters) -> a
    org.spongycastle.crypto.AsymmetricCipherKeyPair generateKeyPair() -> a
    org.spongycastle.math.ec.ECMultiplier createBasePointMultiplier() -> b
org.spongycastle.crypto.generators.ElGamalKeyPairGenerator -> org.spongycastle.crypto.d.i:
    org.spongycastle.crypto.params.ElGamalKeyGenerationParameters param -> a
    void init(org.spongycastle.crypto.KeyGenerationParameters) -> a
    org.spongycastle.crypto.AsymmetricCipherKeyPair generateKeyPair() -> a
org.spongycastle.crypto.generators.ElGamalParametersGenerator -> org.spongycastle.crypto.d.j:
    int size -> a
    int certainty -> b
    java.security.SecureRandom random -> c
    void init(int,int,java.security.SecureRandom) -> a
    org.spongycastle.crypto.params.ElGamalParameters generateParameters() -> a
org.spongycastle.crypto.generators.GOST3410KeyPairGenerator -> org.spongycastle.crypto.d.k:
    org.spongycastle.crypto.params.GOST3410KeyGenerationParameters param -> a
    void init(org.spongycastle.crypto.KeyGenerationParameters) -> a
    org.spongycastle.crypto.AsymmetricCipherKeyPair generateKeyPair() -> a
org.spongycastle.crypto.generators.PKCS12ParametersGenerator -> org.spongycastle.crypto.d.l:
    org.spongycastle.crypto.Digest digest -> d
    int u -> e
    int v -> f
    void adjust(byte[],int,byte[]) -> a
    byte[] generateDerivedKey(int,int) -> a
    org.spongycastle.crypto.CipherParameters generateDerivedMacParameters(int) -> a
org.spongycastle.crypto.generators.RSAKeyPairGenerator -> org.spongycastle.crypto.d.m:
    java.math.BigInteger ONE -> a
    org.spongycastle.crypto.params.RSAKeyGenerationParameters param -> b
    int iterations -> c
    void init(org.spongycastle.crypto.KeyGenerationParameters) -> a
    org.spongycastle.crypto.AsymmetricCipherKeyPair generateKeyPair() -> a
    java.math.BigInteger chooseRandomPrime(int,java.math.BigInteger,java.math.BigInteger) -> a
    boolean isProbablePrime(java.math.BigInteger) -> a
    int getNumberOfIterations(int,int) -> a
org.spongycastle.crypto.io.CipherIOException -> org.spongycastle.crypto.e.a:
    java.lang.Throwable cause -> a
    java.lang.Throwable getCause() -> getCause
org.spongycastle.crypto.io.DigestInputStream -> org.spongycastle.crypto.e.b:
    org.spongycastle.crypto.Digest digest -> a
    int read() -> read
    int read(byte[],int,int) -> read
org.spongycastle.crypto.io.DigestOutputStream -> org.spongycastle.crypto.e.c:
    org.spongycastle.crypto.Digest digest -> a
    void write(int) -> write
    void write(byte[],int,int) -> write
    byte[] getDigest() -> a
org.spongycastle.crypto.io.InvalidCipherTextIOException -> org.spongycastle.crypto.e.d:
org.spongycastle.crypto.io.MacInputStream -> org.spongycastle.crypto.e.e:
    org.spongycastle.crypto.Mac mac -> a
    int read() -> read
    int read(byte[],int,int) -> read
org.spongycastle.crypto.io.MacOutputStream -> org.spongycastle.crypto.e.f:
    org.spongycastle.crypto.Mac mac -> a
    void write(int) -> write
    void write(byte[],int,int) -> write
org.spongycastle.crypto.macs.CMac -> org.spongycastle.crypto.f.a:
    byte[] poly -> a
    byte[] ZEROES -> b
    byte[] mac -> c
    byte[] buf -> d
    int bufOff -> e
    org.spongycastle.crypto.BlockCipher cipher -> f
    int macSize -> g
    byte[] Lu -> h
    byte[] Lu2 -> i
    int shiftLeft(byte[],byte[]) -> a
    byte[] doubleLu(byte[]) -> a
    byte[] lookupPoly(int) -> a
    void init(org.spongycastle.crypto.CipherParameters) -> a
    void validate(org.spongycastle.crypto.CipherParameters) -> b
    int getMacSize() -> a
    void update(byte) -> a
    void update(byte[],int,int) -> a
    int doFinal(byte[],int) -> a
    void reset() -> b
org.spongycastle.crypto.macs.HMac -> org.spongycastle.crypto.f.b:
    org.spongycastle.crypto.Digest digest -> a
    int digestSize -> b
    int blockLength -> c
    org.spongycastle.util.Memoable ipadState -> d
    org.spongycastle.util.Memoable opadState -> e
    byte[] inputPad -> f
    byte[] outputBuf -> g
    java.util.Hashtable blockLengths -> h
    int getByteLength(org.spongycastle.crypto.Digest) -> a
    void init(org.spongycastle.crypto.CipherParameters) -> a
    int getMacSize() -> a
    void update(byte) -> a
    void update(byte[],int,int) -> a
    int doFinal(byte[],int) -> a
    void xorPad(byte[],int,byte) -> a
org.spongycastle.crypto.macs.ISO9797Alg3Mac -> org.spongycastle.crypto.f.c:
    byte[] mac -> a
    byte[] buf -> b
    int bufOff -> c
    org.spongycastle.crypto.BlockCipher cipher -> d
    org.spongycastle.crypto.paddings.BlockCipherPadding padding -> e
    int macSize -> f
    org.spongycastle.crypto.params.KeyParameter lastKey2 -> g
    org.spongycastle.crypto.params.KeyParameter lastKey3 -> h
    void init(org.spongycastle.crypto.CipherParameters) -> a
    int getMacSize() -> a
    void update(byte) -> a
    void update(byte[],int,int) -> a
    int doFinal(byte[],int) -> a
    void reset() -> b
org.spongycastle.crypto.modes.CBCBlockCipher -> org.spongycastle.crypto.g.a:
    byte[] IV -> a
    byte[] cbcV -> b
    byte[] cbcNextV -> c
    int blockSize -> d
    org.spongycastle.crypto.BlockCipher cipher -> e
    boolean encrypting -> f
    void init(boolean,org.spongycastle.crypto.CipherParameters) -> a
    int getBlockSize() -> a
    int processBlock(byte[],int,byte[],int) -> a
    void reset() -> b
    int encryptBlock(byte[],int,byte[],int) -> b
    int decryptBlock(byte[],int,byte[],int) -> c
org.spongycastle.crypto.paddings.BlockCipherPadding -> org.spongycastle.crypto.h.a:
    void init(java.security.SecureRandom) -> a
    int addPadding(byte[],int) -> a
    int padCount(byte[]) -> a
org.spongycastle.crypto.paddings.ISO7816d4Padding -> org.spongycastle.crypto.h.b:
    void init(java.security.SecureRandom) -> a
    int addPadding(byte[],int) -> a
    int padCount(byte[]) -> a
org.spongycastle.crypto.paddings.PKCS7Padding -> org.spongycastle.crypto.h.c:
    void init(java.security.SecureRandom) -> a
    int addPadding(byte[],int) -> a
    int padCount(byte[]) -> a
org.spongycastle.crypto.paddings.PaddedBufferedBlockCipher -> org.spongycastle.crypto.h.d:
    org.spongycastle.crypto.paddings.BlockCipherPadding padding -> g
    void init(boolean,org.spongycastle.crypto.CipherParameters) -> a
    int getOutputSize(int) -> b
    int getUpdateOutputSize(int) -> a
    int processBytes(byte[],int,int,byte[],int) -> a
    int doFinal(byte[],int) -> a
org.spongycastle.crypto.params.AsymmetricKeyParameter -> org.spongycastle.crypto.i.a:
    boolean privateKey -> a
    boolean isPrivate() -> a
org.spongycastle.crypto.params.DHKeyGenerationParameters -> org.spongycastle.crypto.i.b:
    org.spongycastle.crypto.params.DHParameters params -> a
    org.spongycastle.crypto.params.DHParameters getParameters() -> c
    int getStrength(org.spongycastle.crypto.params.DHParameters) -> a
org.spongycastle.crypto.params.DHKeyParameters -> org.spongycastle.crypto.i.c:
    org.spongycastle.crypto.params.DHParameters params -> b
    org.spongycastle.crypto.params.DHParameters getParameters() -> b
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.spongycastle.crypto.params.DHParameters -> org.spongycastle.crypto.i.d:
    java.math.BigInteger g -> a
    java.math.BigInteger p -> b
    java.math.BigInteger q -> c
    java.math.BigInteger j -> d
    int m -> e
    int l -> f
    org.spongycastle.crypto.params.DHValidationParameters validation -> g
    int getDefaultMParam(int) -> a
    java.math.BigInteger getP() -> a
    java.math.BigInteger getG() -> b
    java.math.BigInteger getQ() -> c
    int getM() -> d
    int getL() -> e
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.spongycastle.crypto.params.DHPrivateKeyParameters -> org.spongycastle.crypto.i.e:
    java.math.BigInteger x -> b
    java.math.BigInteger getX() -> c
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
org.spongycastle.crypto.params.DHPublicKeyParameters -> org.spongycastle.crypto.i.f:
    java.math.BigInteger y -> b
    java.math.BigInteger getY() -> c
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
org.spongycastle.crypto.params.DHValidationParameters -> org.spongycastle.crypto.i.g:
    byte[] seed -> a
    int counter -> b
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.spongycastle.crypto.params.DSAKeyGenerationParameters -> org.spongycastle.crypto.i.h:
    org.spongycastle.crypto.params.DSAParameters params -> a
    org.spongycastle.crypto.params.DSAParameters getParameters() -> c
org.spongycastle.crypto.params.DSAKeyParameters -> org.spongycastle.crypto.i.i:
    org.spongycastle.crypto.params.DSAParameters params -> b
    org.spongycastle.crypto.params.DSAParameters getParameters() -> b
org.spongycastle.crypto.params.DSAParameterGenerationParameters -> org.spongycastle.crypto.i.j:
    int l -> a
    int n -> b
    int usageIndex -> c
    int certainty -> d
    java.security.SecureRandom random -> e
    int getL() -> a
    int getN() -> b
    int getCertainty() -> c
    java.security.SecureRandom getRandom() -> d
    int getUsageIndex() -> e
org.spongycastle.crypto.params.DSAParameters -> org.spongycastle.crypto.i.k:
    java.math.BigInteger g -> a
    java.math.BigInteger q -> b
    java.math.BigInteger p -> c
    org.spongycastle.crypto.params.DSAValidationParameters validation -> d
    java.math.BigInteger getP() -> a
    java.math.BigInteger getQ() -> b
    java.math.BigInteger getG() -> c
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.spongycastle.crypto.params.DSAPrivateKeyParameters -> org.spongycastle.crypto.i.l:
    java.math.BigInteger x -> b
    java.math.BigInteger getX() -> c
org.spongycastle.crypto.params.DSAPublicKeyParameters -> org.spongycastle.crypto.i.m:
    java.math.BigInteger y -> b
    java.math.BigInteger getY() -> c
org.spongycastle.crypto.params.DSAValidationParameters -> org.spongycastle.crypto.i.n:
    int usageIndex -> a
    byte[] seed -> b
    int counter -> c
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
org.spongycastle.crypto.params.ECDomainParameters -> org.spongycastle.crypto.i.o:
    org.spongycastle.math.ec.ECCurve curve -> a
    byte[] seed -> b
    org.spongycastle.math.ec.ECPoint G -> i
    java.math.BigInteger n -> j
    java.math.BigInteger h -> k
    org.spongycastle.math.ec.ECCurve getCurve() -> a
    org.spongycastle.math.ec.ECPoint getG() -> b
    java.math.BigInteger getN() -> c
    java.math.BigInteger getH() -> d
    byte[] getSeed() -> e
org.spongycastle.crypto.params.ECKeyGenerationParameters -> org.spongycastle.crypto.i.p:
    org.spongycastle.crypto.params.ECDomainParameters domainParams -> a
    org.spongycastle.crypto.params.ECDomainParameters getDomainParameters() -> c
org.spongycastle.crypto.params.ECKeyParameters -> org.spongycastle.crypto.i.q:
    org.spongycastle.crypto.params.ECDomainParameters params -> b
    org.spongycastle.crypto.params.ECDomainParameters getParameters() -> b
org.spongycastle.crypto.params.ECPrivateKeyParameters -> org.spongycastle.crypto.i.r:
    java.math.BigInteger d -> c
    java.math.BigInteger getD() -> c
org.spongycastle.crypto.params.ECPublicKeyParameters -> org.spongycastle.crypto.i.s:
    org.spongycastle.math.ec.ECPoint Q -> c
    org.spongycastle.math.ec.ECPoint getQ() -> c
org.spongycastle.crypto.params.ElGamalKeyGenerationParameters -> org.spongycastle.crypto.i.t:
    org.spongycastle.crypto.params.ElGamalParameters params -> a
    org.spongycastle.crypto.params.ElGamalParameters getParameters() -> c
    int getStrength(org.spongycastle.crypto.params.ElGamalParameters) -> a
org.spongycastle.crypto.params.ElGamalKeyParameters -> org.spongycastle.crypto.i.u:
    org.spongycastle.crypto.params.ElGamalParameters params -> b
    org.spongycastle.crypto.params.ElGamalParameters getParameters() -> b
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
org.spongycastle.crypto.params.ElGamalParameters -> org.spongycastle.crypto.i.v:
    java.math.BigInteger g -> a
    java.math.BigInteger p -> b
    int l -> c
    java.math.BigInteger getP() -> a
    java.math.BigInteger getG() -> b
    int getL() -> c
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.spongycastle.crypto.params.ElGamalPrivateKeyParameters -> org.spongycastle.crypto.i.w:
    java.math.BigInteger x -> b
    java.math.BigInteger getX() -> c
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.spongycastle.crypto.params.ElGamalPublicKeyParameters -> org.spongycastle.crypto.i.x:
    java.math.BigInteger y -> b
    java.math.BigInteger getY() -> c
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
org.spongycastle.crypto.params.GOST3410KeyGenerationParameters -> org.spongycastle.crypto.i.y:
    org.spongycastle.crypto.params.GOST3410Parameters params -> a
    org.spongycastle.crypto.params.GOST3410Parameters getParameters() -> c
org.spongycastle.crypto.params.GOST3410KeyParameters -> org.spongycastle.crypto.i.z:
    org.spongycastle.crypto.params.GOST3410Parameters params -> b
    org.spongycastle.crypto.params.GOST3410Parameters getParameters() -> b
org.spongycastle.crypto.params.GOST3410Parameters -> org.spongycastle.crypto.i.A:
    java.math.BigInteger p -> a
    java.math.BigInteger q -> b
    java.math.BigInteger a -> c
    java.math.BigInteger getP() -> a
    java.math.BigInteger getQ() -> b
    java.math.BigInteger getA() -> c
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
org.spongycastle.crypto.params.GOST3410PrivateKeyParameters -> org.spongycastle.crypto.i.B:
    java.math.BigInteger x -> b
    java.math.BigInteger getX() -> c
org.spongycastle.crypto.params.GOST3410PublicKeyParameters -> org.spongycastle.crypto.i.C:
    java.math.BigInteger y -> b
    java.math.BigInteger getY() -> c
org.spongycastle.crypto.params.KeyParameter -> org.spongycastle.crypto.i.D:
    byte[] key -> a
    byte[] getKey() -> a
org.spongycastle.crypto.params.ParametersWithIV -> org.spongycastle.crypto.i.E:
    byte[] iv -> a
    org.spongycastle.crypto.CipherParameters parameters -> b
    byte[] getIV() -> a
    org.spongycastle.crypto.CipherParameters getParameters() -> b
org.spongycastle.crypto.params.ParametersWithRandom -> org.spongycastle.crypto.i.F:
    java.security.SecureRandom random -> a
    org.spongycastle.crypto.CipherParameters parameters -> b
    java.security.SecureRandom getRandom() -> a
    org.spongycastle.crypto.CipherParameters getParameters() -> b
org.spongycastle.crypto.params.ParametersWithSBox -> org.spongycastle.crypto.i.G:
    org.spongycastle.crypto.CipherParameters parameters -> a
    byte[] sBox -> b
    byte[] getSBox() -> a
    org.spongycastle.crypto.CipherParameters getParameters() -> b
org.spongycastle.crypto.params.RSABlindingParameters -> org.spongycastle.crypto.i.H:
    org.spongycastle.crypto.params.RSAKeyParameters publicKey -> a
    org.spongycastle.crypto.params.RSAKeyParameters getPublicKey() -> a
org.spongycastle.crypto.params.RSAKeyGenerationParameters -> org.spongycastle.crypto.i.I:
    java.math.BigInteger publicExponent -> a
    int certainty -> b
    java.math.BigInteger getPublicExponent() -> c
    int getCertainty() -> d
org.spongycastle.crypto.params.RSAKeyParameters -> org.spongycastle.crypto.i.J:
    java.math.BigInteger modulus -> b
    java.math.BigInteger exponent -> c
    java.math.BigInteger getModulus() -> b
    java.math.BigInteger getExponent() -> c
org.spongycastle.crypto.params.RSAPrivateCrtKeyParameters -> org.spongycastle.crypto.i.K:
    java.math.BigInteger e -> b
    java.math.BigInteger p -> c
    java.math.BigInteger q -> d
    java.math.BigInteger dP -> e
    java.math.BigInteger dQ -> f
    java.math.BigInteger qInv -> g
    java.math.BigInteger getPublicExponent() -> d
    java.math.BigInteger getP() -> e
    java.math.BigInteger getQ() -> f
    java.math.BigInteger getDP() -> g
    java.math.BigInteger getDQ() -> h
    java.math.BigInteger getQInv() -> i
org.spongycastle.crypto.params.SkeinParameters -> org.spongycastle.crypto.i.L:
    java.util.Hashtable parameters -> a
    java.util.Hashtable getParameters() -> a
    byte[] getKey() -> b
org.spongycastle.crypto.params.TweakableBlockCipherParameters -> org.spongycastle.crypto.i.M:
    byte[] tweak -> a
    org.spongycastle.crypto.params.KeyParameter key -> b
    org.spongycastle.crypto.params.KeyParameter getKey() -> a
    byte[] getTweak() -> b
org.spongycastle.crypto.prng.DRBGProvider -> org.spongycastle.crypto.prng.a:
    org.spongycastle.crypto.prng.drbg.SP80090DRBG get(org.spongycastle.crypto.prng.EntropySource) -> a
org.spongycastle.crypto.prng.EntropySource -> org.spongycastle.crypto.prng.b:
    byte[] getEntropy() -> a
    int entropySize() -> b
org.spongycastle.crypto.prng.EntropyUtil -> org.spongycastle.crypto.prng.c:
    byte[] generateSeed(org.spongycastle.crypto.prng.EntropySource,int) -> a
org.spongycastle.crypto.prng.FixedSecureRandom -> org.spongycastle.crypto.prng.FixedSecureRandom:
    byte[] _data -> a
    int _index -> b
    int _intPad -> c
    void nextBytes(byte[]) -> nextBytes
    byte[] generateSeed(int) -> generateSeed
    int nextInt() -> nextInt
    long nextLong() -> nextLong
    int nextValue() -> a
org.spongycastle.crypto.prng.SP800SecureRandom -> org.spongycastle.crypto.prng.SP800SecureRandom:
    org.spongycastle.crypto.prng.DRBGProvider drbgProvider -> a
    boolean predictionResistant -> b
    java.security.SecureRandom randomSource -> c
    org.spongycastle.crypto.prng.EntropySource entropySource -> d
    org.spongycastle.crypto.prng.drbg.SP80090DRBG drbg -> e
    void setSeed(byte[]) -> setSeed
    void setSeed(long) -> setSeed
    void nextBytes(byte[]) -> nextBytes
    byte[] generateSeed(int) -> generateSeed
org.spongycastle.crypto.prng.X931RNG -> org.spongycastle.crypto.prng.d:
    org.spongycastle.crypto.BlockCipher engine -> a
    org.spongycastle.crypto.prng.EntropySource entropySource -> b
    byte[] DT -> c
    byte[] I -> d
    byte[] R -> e
    byte[] V -> f
    long reseedCounter -> g
    int generate(byte[],boolean) -> a
    void reseed() -> a
    org.spongycastle.crypto.prng.EntropySource getEntropySource() -> b
    void process(byte[],byte[],byte[]) -> a
    void increment(byte[]) -> a
    boolean isTooLarge(byte[],int) -> a
org.spongycastle.crypto.prng.X931SecureRandom -> org.spongycastle.crypto.prng.X931SecureRandom:
    boolean predictionResistant -> a
    java.security.SecureRandom randomSource -> b
    org.spongycastle.crypto.prng.X931RNG drbg -> c
    void setSeed(byte[]) -> setSeed
    void setSeed(long) -> setSeed
    void nextBytes(byte[]) -> nextBytes
    byte[] generateSeed(int) -> generateSeed
org.spongycastle.crypto.prng.drbg.SP80090DRBG -> org.spongycastle.crypto.prng.a.a:
    int generate(byte[],byte[],boolean) -> a
    void reseed(byte[]) -> a
org.spongycastle.crypto.signers.DSAKCalculator -> org.spongycastle.crypto.j.a:
    boolean isDeterministic() -> a
    void init(java.math.BigInteger,java.security.SecureRandom) -> a
    void init(java.math.BigInteger,java.math.BigInteger,byte[]) -> a
    java.math.BigInteger nextK() -> b
org.spongycastle.crypto.signers.DSASigner -> org.spongycastle.crypto.j.b:
    org.spongycastle.crypto.signers.DSAKCalculator kCalculator -> a
    org.spongycastle.crypto.params.DSAKeyParameters key -> b
    java.security.SecureRandom random -> c
    void init(boolean,org.spongycastle.crypto.CipherParameters) -> a
    java.math.BigInteger[] generateSignature(byte[]) -> a
    boolean verifySignature(byte[],java.math.BigInteger,java.math.BigInteger) -> a
    java.math.BigInteger calculateE(java.math.BigInteger,byte[]) -> a
    java.security.SecureRandom initSecureRandom(boolean,java.security.SecureRandom) -> a
org.spongycastle.crypto.signers.DSTU4145Signer -> org.spongycastle.crypto.j.c:
    java.math.BigInteger ONE -> a
    org.spongycastle.crypto.params.ECKeyParameters key -> b
    java.security.SecureRandom random -> c
    void init(boolean,org.spongycastle.crypto.CipherParameters) -> a
    java.math.BigInteger[] generateSignature(byte[]) -> a
    boolean verifySignature(byte[],java.math.BigInteger,java.math.BigInteger) -> a
    org.spongycastle.math.ec.ECMultiplier createBasePointMultiplier() -> a
    java.math.BigInteger generateRandomInteger(java.math.BigInteger,java.security.SecureRandom) -> a
    org.spongycastle.math.ec.ECFieldElement hash2FieldElement(org.spongycastle.math.ec.ECCurve,byte[]) -> a
    java.math.BigInteger fieldElement2Integer(java.math.BigInteger,org.spongycastle.math.ec.ECFieldElement) -> a
    java.math.BigInteger truncate(java.math.BigInteger,int) -> a
org.spongycastle.crypto.signers.ECDSASigner -> org.spongycastle.crypto.j.d:
    org.spongycastle.crypto.signers.DSAKCalculator kCalculator -> a
    org.spongycastle.crypto.params.ECKeyParameters key -> b
    java.security.SecureRandom random -> i
    void init(boolean,org.spongycastle.crypto.CipherParameters) -> a
    java.math.BigInteger[] generateSignature(byte[]) -> a
    boolean verifySignature(byte[],java.math.BigInteger,java.math.BigInteger) -> a
    java.math.BigInteger calculateE(java.math.BigInteger,byte[]) -> a
    org.spongycastle.math.ec.ECMultiplier createBasePointMultiplier() -> a
    org.spongycastle.math.ec.ECFieldElement getDenominator(int,org.spongycastle.math.ec.ECPoint) -> a
    java.security.SecureRandom initSecureRandom(boolean,java.security.SecureRandom) -> a
org.spongycastle.crypto.signers.ECGOST3410Signer -> org.spongycastle.crypto.j.e:
    org.spongycastle.crypto.params.ECKeyParameters key -> a
    java.security.SecureRandom random -> b
    void init(boolean,org.spongycastle.crypto.CipherParameters) -> a
    java.math.BigInteger[] generateSignature(byte[]) -> a
    boolean verifySignature(byte[],java.math.BigInteger,java.math.BigInteger) -> a
    org.spongycastle.math.ec.ECMultiplier createBasePointMultiplier() -> a
org.spongycastle.crypto.signers.ECNRSigner -> org.spongycastle.crypto.j.f:
    boolean forSigning -> a
    org.spongycastle.crypto.params.ECKeyParameters key -> b
    java.security.SecureRandom random -> c
    void init(boolean,org.spongycastle.crypto.CipherParameters) -> a
    java.math.BigInteger[] generateSignature(byte[]) -> a
    boolean verifySignature(byte[],java.math.BigInteger,java.math.BigInteger) -> a
org.spongycastle.crypto.signers.GOST3410Signer -> org.spongycastle.crypto.j.g:
    org.spongycastle.crypto.params.GOST3410KeyParameters key -> a
    java.security.SecureRandom random -> b
    void init(boolean,org.spongycastle.crypto.CipherParameters) -> a
    java.math.BigInteger[] generateSignature(byte[]) -> a
    boolean verifySignature(byte[],java.math.BigInteger,java.math.BigInteger) -> a
org.spongycastle.crypto.signers.HMacDSAKCalculator -> org.spongycastle.crypto.j.h:
    java.math.BigInteger ZERO -> a
    org.spongycastle.crypto.macs.HMac hMac -> b
    byte[] K -> c
    byte[] V -> d
    java.math.BigInteger n -> e
    boolean isDeterministic() -> a
    void init(java.math.BigInteger,java.security.SecureRandom) -> a
    void init(java.math.BigInteger,java.math.BigInteger,byte[]) -> a
    java.math.BigInteger nextK() -> b
    java.math.BigInteger bitsToInt(byte[]) -> a
org.spongycastle.crypto.signers.ISO9796d2Signer -> org.spongycastle.crypto.j.i:
    org.spongycastle.crypto.Digest digest -> a
    org.spongycastle.crypto.AsymmetricBlockCipher cipher -> b
    int trailer -> c
    int keyBits -> d
    byte[] block -> e
    byte[] mBuf -> f
    int messageLength -> g
    boolean fullMessage -> h
    byte[] recoveredMessage -> i
    byte[] preSig -> j
    byte[] preBlock -> k
    void init(boolean,org.spongycastle.crypto.CipherParameters) -> a
    boolean isSameAs(byte[],byte[]) -> a
    void clearBlock(byte[]) -> b
    void update(byte) -> a
    void update(byte[],int,int) -> a
    void reset() -> a
    byte[] generateSignature() -> b
    boolean verifySignature(byte[]) -> a
    boolean returnFalse(byte[]) -> c
org.spongycastle.crypto.signers.ISOTrailers -> org.spongycastle.crypto.j.j:
    java.util.Map trailerMap -> a
    java.lang.Integer getTrailer(org.spongycastle.crypto.Digest) -> a
org.spongycastle.crypto.signers.PSSSigner -> org.spongycastle.crypto.j.k:
    org.spongycastle.crypto.Digest contentDigest -> a
    org.spongycastle.crypto.Digest mgfDigest -> b
    org.spongycastle.crypto.AsymmetricBlockCipher cipher -> c
    java.security.SecureRandom random -> d
    int hLen -> e
    int mgfhLen -> f
    boolean sSet -> g
    int sLen -> h
    int emBits -> i
    byte[] salt -> j
    byte[] mDash -> k
    byte[] block -> l
    byte trailer -> m
    void init(boolean,org.spongycastle.crypto.CipherParameters) -> a
    void clearBlock(byte[]) -> b
    void update(byte) -> a
    void update(byte[],int,int) -> a
    void reset() -> a
    byte[] generateSignature() -> b
    boolean verifySignature(byte[]) -> a
    void ItoOSP(int,byte[]) -> a
    byte[] maskGeneratorFunction1(byte[],int,int,int) -> a
org.spongycastle.crypto.signers.RandomDSAKCalculator -> org.spongycastle.crypto.j.l:
    java.math.BigInteger ZERO -> a
    java.math.BigInteger q -> b
    java.security.SecureRandom random -> c
    boolean isDeterministic() -> a
    void init(java.math.BigInteger,java.security.SecureRandom) -> a
    void init(java.math.BigInteger,java.math.BigInteger,byte[]) -> a
    java.math.BigInteger nextK() -> b
org.spongycastle.crypto.signers.X931Signer -> org.spongycastle.crypto.j.m:
    org.spongycastle.crypto.Digest digest -> a
    org.spongycastle.crypto.AsymmetricBlockCipher cipher -> b
    org.spongycastle.crypto.params.RSAKeyParameters kParam -> c
    int trailer -> d
    int keyBits -> e
    byte[] block -> f
    void init(boolean,org.spongycastle.crypto.CipherParameters) -> a
    void clearBlock(byte[]) -> b
    void update(byte) -> a
    void update(byte[],int,int) -> a
    void reset() -> a
    byte[] generateSignature() -> b
    void createSignatureBlock() -> c
    boolean verifySignature(byte[]) -> a
org.spongycastle.jcajce.PKCS12Key -> org.spongycastle.jcajce.a:
    char[] password -> a
    boolean useWrongZeroLengthConversion -> b
org.spongycastle.jcajce.PKCS12StoreParameter -> org.spongycastle.jcajce.PKCS12StoreParameter:
    java.io.OutputStream out -> a
    java.security.KeyStore$ProtectionParameter protectionParameter -> b
    boolean forDEREncoding -> c
    java.io.OutputStream getOutputStream() -> a
    java.security.KeyStore$ProtectionParameter getProtectionParameter() -> getProtectionParameter
    boolean isForDEREncoding() -> b
org.spongycastle.jcajce.io.CipherInputStream -> org.spongycastle.jcajce.a.a:
    javax.crypto.Cipher cipher -> a
    byte[] inputBuffer -> b
    boolean finalized -> c
    byte[] buf -> d
    int maxBuf -> e
    int bufOff -> f
    int nextChunk() -> a
    byte[] finaliseCipher() -> b
    int read() -> read
    int read(byte[],int,int) -> read
    long skip(long) -> skip
    int available() -> available
    void close() -> close
    void mark(int) -> mark
    void reset() -> reset
    boolean markSupported() -> markSupported
org.spongycastle.jcajce.provider.asymmetric.dh.AlgorithmParameterGeneratorSpi -> org.spongycastle.jcajce.provider.asymmetric.dh.AlgorithmParameterGeneratorSpi:
    java.security.SecureRandom random -> a
    int strength -> b
    int l -> c
    void engineInit(int,java.security.SecureRandom) -> engineInit
    void engineInit(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> engineInit
    java.security.AlgorithmParameters engineGenerateParameters() -> engineGenerateParameters
org.spongycastle.jcajce.provider.asymmetric.dh.AlgorithmParametersSpi -> org.spongycastle.jcajce.provider.asymmetric.dh.AlgorithmParametersSpi:
    javax.crypto.spec.DHParameterSpec currentSpec -> a
    boolean isASN1FormatString(java.lang.String) -> a
    java.security.spec.AlgorithmParameterSpec engineGetParameterSpec(java.lang.Class) -> engineGetParameterSpec
    byte[] engineGetEncoded() -> engineGetEncoded
    byte[] engineGetEncoded(java.lang.String) -> engineGetEncoded
    java.security.spec.AlgorithmParameterSpec localEngineGetParameterSpec(java.lang.Class) -> a
    void engineInit(java.security.spec.AlgorithmParameterSpec) -> engineInit
    void engineInit(byte[]) -> engineInit
    void engineInit(byte[],java.lang.String) -> engineInit
    java.lang.String engineToString() -> engineToString
org.spongycastle.jcajce.provider.asymmetric.dh.BCDHPrivateKey -> org.spongycastle.jcajce.provider.asymmetric.dh.a:
    java.math.BigInteger x -> a
    javax.crypto.spec.DHParameterSpec dhSpec -> b
    org.spongycastle.asn1.pkcs.PrivateKeyInfo info -> c
    org.spongycastle.jcajce.provider.asymmetric.util.PKCS12BagAttributeCarrierImpl attrCarrier -> d
    javax.crypto.spec.DHParameterSpec getParams() -> a
    java.math.BigInteger getX() -> b
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void setBagAttribute(org.spongycastle.asn1.ASN1ObjectIdentifier,org.spongycastle.asn1.ASN1Encodable) -> a
    org.spongycastle.asn1.ASN1Encodable getBagAttribute(org.spongycastle.asn1.ASN1ObjectIdentifier) -> a
    java.util.Enumeration getBagAttributeKeys() -> c
org.spongycastle.jcajce.provider.asymmetric.dh.BCDHPublicKey -> org.spongycastle.jcajce.provider.asymmetric.dh.b:
    java.math.BigInteger y -> a
    javax.crypto.spec.DHParameterSpec dhSpec -> b
    org.spongycastle.asn1.x509.SubjectPublicKeyInfo info -> c
    javax.crypto.spec.DHParameterSpec getParams() -> a
    java.math.BigInteger getY() -> b
    boolean isPKCSParam(org.spongycastle.asn1.ASN1Sequence) -> a
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
org.spongycastle.jcajce.provider.asymmetric.dh.KeyFactorySpi -> org.spongycastle.jcajce.provider.asymmetric.dh.KeyFactorySpi:
    java.security.spec.KeySpec engineGetKeySpec(java.security.Key,java.lang.Class) -> engineGetKeySpec
    java.security.Key engineTranslateKey(java.security.Key) -> engineTranslateKey
    java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec) -> engineGeneratePrivate
    java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec) -> engineGeneratePublic
    java.security.PrivateKey generatePrivate(org.spongycastle.asn1.pkcs.PrivateKeyInfo) -> a
    java.security.PublicKey generatePublic(org.spongycastle.asn1.x509.SubjectPublicKeyInfo) -> a
org.spongycastle.jcajce.provider.asymmetric.dh.KeyPairGeneratorSpi -> org.spongycastle.jcajce.provider.asymmetric.dh.KeyPairGeneratorSpi:
    java.util.Hashtable params -> g
    java.lang.Object lock -> h
    org.spongycastle.crypto.params.DHKeyGenerationParameters param -> a
    org.spongycastle.crypto.generators.DHBasicKeyPairGenerator engine -> b
    int strength -> c
    int certainty -> d
    java.security.SecureRandom random -> e
    boolean initialised -> f
    void initialize(int,java.security.SecureRandom) -> initialize
    void initialize(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> initialize
    java.security.KeyPair generateKeyPair() -> generateKeyPair
org.spongycastle.jcajce.provider.asymmetric.dsa.AlgorithmParameterGeneratorSpi -> org.spongycastle.jcajce.provider.asymmetric.dsa.AlgorithmParameterGeneratorSpi:
    java.security.SecureRandom random -> a
    int strength -> b
    org.spongycastle.crypto.params.DSAParameterGenerationParameters params -> c
    void engineInit(int,java.security.SecureRandom) -> engineInit
    void engineInit(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> engineInit
    java.security.AlgorithmParameters engineGenerateParameters() -> engineGenerateParameters
org.spongycastle.jcajce.provider.asymmetric.dsa.AlgorithmParametersSpi -> org.spongycastle.jcajce.provider.asymmetric.dsa.AlgorithmParametersSpi:
    java.security.spec.DSAParameterSpec currentSpec -> a
    boolean isASN1FormatString(java.lang.String) -> a
    java.security.spec.AlgorithmParameterSpec engineGetParameterSpec(java.lang.Class) -> engineGetParameterSpec
    byte[] engineGetEncoded() -> engineGetEncoded
    byte[] engineGetEncoded(java.lang.String) -> engineGetEncoded
    java.security.spec.AlgorithmParameterSpec localEngineGetParameterSpec(java.lang.Class) -> a
    void engineInit(java.security.spec.AlgorithmParameterSpec) -> engineInit
    void engineInit(byte[]) -> engineInit
    void engineInit(byte[],java.lang.String) -> engineInit
    java.lang.String engineToString() -> engineToString
org.spongycastle.jcajce.provider.asymmetric.dsa.BCDSAPrivateKey -> org.spongycastle.jcajce.provider.asymmetric.dsa.BCDSAPrivateKey:
    java.math.BigInteger x -> a
    java.security.interfaces.DSAParams dsaSpec -> b
    org.spongycastle.jcajce.provider.asymmetric.util.PKCS12BagAttributeCarrierImpl attrCarrier -> c
    java.lang.String getAlgorithm() -> getAlgorithm
    java.lang.String getFormat() -> getFormat
    byte[] getEncoded() -> getEncoded
    java.security.interfaces.DSAParams getParams() -> getParams
    java.math.BigInteger getX() -> getX
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void setBagAttribute(org.spongycastle.asn1.ASN1ObjectIdentifier,org.spongycastle.asn1.ASN1Encodable) -> a
    org.spongycastle.asn1.ASN1Encodable getBagAttribute(org.spongycastle.asn1.ASN1ObjectIdentifier) -> a
    java.util.Enumeration getBagAttributeKeys() -> c
org.spongycastle.jcajce.provider.asymmetric.dsa.BCDSAPublicKey -> org.spongycastle.jcajce.provider.asymmetric.dsa.BCDSAPublicKey:
    java.math.BigInteger y -> a
    java.security.interfaces.DSAParams dsaSpec -> b
    boolean isNotNull(org.spongycastle.asn1.ASN1Encodable) -> a
    java.lang.String getAlgorithm() -> getAlgorithm
    java.lang.String getFormat() -> getFormat
    byte[] getEncoded() -> getEncoded
    java.security.interfaces.DSAParams getParams() -> getParams
    java.math.BigInteger getY() -> getY
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
org.spongycastle.jcajce.provider.asymmetric.dsa.DSASigner -> org.spongycastle.jcajce.provider.asymmetric.dsa.DSASigner:
    org.spongycastle.crypto.Digest digest -> bH
    org.spongycastle.crypto.DSA signer -> bI
    java.security.SecureRandom random -> bJ
    void engineInitVerify(java.security.PublicKey) -> engineInitVerify
    void engineInitSign(java.security.PrivateKey,java.security.SecureRandom) -> engineInitSign
    void engineInitSign(java.security.PrivateKey) -> engineInitSign
    void engineUpdate(byte) -> engineUpdate
    void engineUpdate(byte[],int,int) -> engineUpdate
    byte[] engineSign() -> engineSign
    boolean engineVerify(byte[]) -> engineVerify
    void engineSetParameter(java.security.spec.AlgorithmParameterSpec) -> engineSetParameter
    void engineSetParameter(java.lang.String,java.lang.Object) -> engineSetParameter
    java.lang.Object engineGetParameter(java.lang.String) -> engineGetParameter
    byte[] derEncode(java.math.BigInteger,java.math.BigInteger) -> a
    java.math.BigInteger[] derDecode(byte[]) -> a
org.spongycastle.jcajce.provider.asymmetric.dsa.DSASigner$detDSA -> org.spongycastle.jcajce.provider.asymmetric.dsa.DSASigner$detDSA:
org.spongycastle.jcajce.provider.asymmetric.dsa.DSASigner$detDSA224 -> org.spongycastle.jcajce.provider.asymmetric.dsa.DSASigner$detDSA224:
org.spongycastle.jcajce.provider.asymmetric.dsa.DSASigner$detDSA256 -> org.spongycastle.jcajce.provider.asymmetric.dsa.DSASigner$detDSA256:
org.spongycastle.jcajce.provider.asymmetric.dsa.DSASigner$detDSA384 -> org.spongycastle.jcajce.provider.asymmetric.dsa.DSASigner$detDSA384:
org.spongycastle.jcajce.provider.asymmetric.dsa.DSASigner$detDSA512 -> org.spongycastle.jcajce.provider.asymmetric.dsa.DSASigner$detDSA512:
org.spongycastle.jcajce.provider.asymmetric.dsa.DSASigner$dsa224 -> org.spongycastle.jcajce.provider.asymmetric.dsa.DSASigner$dsa224:
org.spongycastle.jcajce.provider.asymmetric.dsa.DSASigner$dsa256 -> org.spongycastle.jcajce.provider.asymmetric.dsa.DSASigner$dsa256:
org.spongycastle.jcajce.provider.asymmetric.dsa.DSASigner$dsa384 -> org.spongycastle.jcajce.provider.asymmetric.dsa.DSASigner$dsa384:
org.spongycastle.jcajce.provider.asymmetric.dsa.DSASigner$dsa512 -> org.spongycastle.jcajce.provider.asymmetric.dsa.DSASigner$dsa512:
org.spongycastle.jcajce.provider.asymmetric.dsa.DSASigner$noneDSA -> org.spongycastle.jcajce.provider.asymmetric.dsa.DSASigner$noneDSA:
org.spongycastle.jcajce.provider.asymmetric.dsa.DSASigner$stdDSA -> org.spongycastle.jcajce.provider.asymmetric.dsa.DSASigner$stdDSA:
org.spongycastle.jcajce.provider.asymmetric.dsa.DSAUtil -> org.spongycastle.jcajce.provider.asymmetric.dsa.a:
    org.spongycastle.asn1.ASN1ObjectIdentifier[] dsaOids -> a
    boolean isDsaOid(org.spongycastle.asn1.ASN1ObjectIdentifier) -> a
    org.spongycastle.crypto.params.AsymmetricKeyParameter generatePublicKeyParameter(java.security.PublicKey) -> a
    org.spongycastle.crypto.params.AsymmetricKeyParameter generatePrivateKeyParameter(java.security.PrivateKey) -> a
org.spongycastle.jcajce.provider.asymmetric.dsa.KeyFactorySpi -> org.spongycastle.jcajce.provider.asymmetric.dsa.KeyFactorySpi:
    java.security.spec.KeySpec engineGetKeySpec(java.security.Key,java.lang.Class) -> engineGetKeySpec
    java.security.Key engineTranslateKey(java.security.Key) -> engineTranslateKey
    java.security.PrivateKey generatePrivate(org.spongycastle.asn1.pkcs.PrivateKeyInfo) -> a
    java.security.PublicKey generatePublic(org.spongycastle.asn1.x509.SubjectPublicKeyInfo) -> a
    java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec) -> engineGeneratePrivate
    java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec) -> engineGeneratePublic
org.spongycastle.jcajce.provider.asymmetric.dsa.KeyPairGeneratorSpi -> org.spongycastle.jcajce.provider.asymmetric.dsa.KeyPairGeneratorSpi:
    org.spongycastle.crypto.params.DSAKeyGenerationParameters param -> a
    org.spongycastle.crypto.generators.DSAKeyPairGenerator engine -> b
    int strength -> c
    int certainty -> d
    java.security.SecureRandom random -> e
    boolean initialised -> f
    void initialize(int,java.security.SecureRandom) -> initialize
    void initialize(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> initialize
    java.security.KeyPair generateKeyPair() -> generateKeyPair
org.spongycastle.jcajce.provider.asymmetric.dstu.BCDSTU4145PrivateKey -> org.spongycastle.jcajce.provider.asymmetric.dstu.BCDSTU4145PrivateKey:
    java.lang.String algorithm -> a
    boolean withCompression -> b
    java.math.BigInteger d -> c
    java.security.spec.ECParameterSpec ecSpec -> d
    org.spongycastle.asn1.DERBitString publicKey -> e
    org.spongycastle.jcajce.provider.asymmetric.util.PKCS12BagAttributeCarrierImpl attrCarrier -> f
    void populateFromPrivKeyInfo(org.spongycastle.asn1.pkcs.PrivateKeyInfo) -> a
    java.lang.String getAlgorithm() -> getAlgorithm
    java.lang.String getFormat() -> getFormat
    byte[] getEncoded() -> getEncoded
    java.security.spec.ECParameterSpec getParams() -> getParams
    org.spongycastle.jce.spec.ECParameterSpec getParameters() -> a
    org.spongycastle.jce.spec.ECParameterSpec engineGetSpec() -> b
    java.math.BigInteger getS() -> getS
    java.math.BigInteger getD() -> d
    void setBagAttribute(org.spongycastle.asn1.ASN1ObjectIdentifier,org.spongycastle.asn1.ASN1Encodable) -> a
    org.spongycastle.asn1.ASN1Encodable getBagAttribute(org.spongycastle.asn1.ASN1ObjectIdentifier) -> a
    java.util.Enumeration getBagAttributeKeys() -> c
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    org.spongycastle.asn1.DERBitString getPublicKeyDetails(org.spongycastle.jcajce.provider.asymmetric.dstu.BCDSTU4145PublicKey) -> a
org.spongycastle.jcajce.provider.asymmetric.dstu.BCDSTU4145PublicKey -> org.spongycastle.jcajce.provider.asymmetric.dstu.BCDSTU4145PublicKey:
    java.lang.String algorithm -> a
    boolean withCompression -> b
    org.spongycastle.math.ec.ECPoint q -> c
    java.security.spec.ECParameterSpec ecSpec -> d
    org.spongycastle.asn1.ua.DSTU4145Params dstuParams -> e
    java.security.spec.ECParameterSpec createSpec(java.security.spec.EllipticCurve,org.spongycastle.crypto.params.ECDomainParameters) -> a
    void reverseBytes(byte[]) -> a
    void populateFromPubKeyInfo(org.spongycastle.asn1.x509.SubjectPublicKeyInfo) -> a
    byte[] getSbox() -> b
    java.lang.String getAlgorithm() -> getAlgorithm
    java.lang.String getFormat() -> getFormat
    byte[] getEncoded() -> getEncoded
    java.security.spec.ECParameterSpec getParams() -> getParams
    org.spongycastle.jce.spec.ECParameterSpec getParameters() -> a
    java.security.spec.ECPoint getW() -> getW
    org.spongycastle.math.ec.ECPoint getQ() -> c
    org.spongycastle.math.ec.ECPoint engineGetQ() -> d
    org.spongycastle.jce.spec.ECParameterSpec engineGetSpec() -> e
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.spongycastle.jcajce.provider.asymmetric.dstu.KeyFactorySpi -> org.spongycastle.jcajce.provider.asymmetric.dstu.KeyFactorySpi:
    java.security.spec.KeySpec engineGetKeySpec(java.security.Key,java.lang.Class) -> engineGetKeySpec
    java.security.Key engineTranslateKey(java.security.Key) -> engineTranslateKey
    java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec) -> engineGeneratePrivate
    java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec) -> engineGeneratePublic
    java.security.PrivateKey generatePrivate(org.spongycastle.asn1.pkcs.PrivateKeyInfo) -> a
    java.security.PublicKey generatePublic(org.spongycastle.asn1.x509.SubjectPublicKeyInfo) -> a
org.spongycastle.jcajce.provider.asymmetric.dstu.KeyPairGeneratorSpi -> org.spongycastle.jcajce.provider.asymmetric.dstu.KeyPairGeneratorSpi:
    java.lang.Object ecParams -> a
    org.spongycastle.crypto.generators.ECKeyPairGenerator engine -> b
    java.lang.String algorithm -> c
    org.spongycastle.crypto.params.ECKeyGenerationParameters param -> d
    java.security.SecureRandom random -> e
    boolean initialised -> f
    void initialize(int,java.security.SecureRandom) -> initialize
    void initialize(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> initialize
    java.security.KeyPair generateKeyPair() -> generateKeyPair
org.spongycastle.jcajce.provider.asymmetric.dstu.SignatureSpi -> org.spongycastle.jcajce.provider.asymmetric.dstu.SignatureSpi:
    org.spongycastle.crypto.Digest digest -> bH
    org.spongycastle.crypto.DSA signer -> bI
    byte[] DEFAULT_SBOX -> bJ
    void engineInitVerify(java.security.PublicKey) -> engineInitVerify
    byte[] expandSbox(byte[]) -> a
    void engineInitSign(java.security.PrivateKey) -> engineInitSign
    void engineUpdate(byte) -> engineUpdate
    void engineUpdate(byte[],int,int) -> engineUpdate
    byte[] engineSign() -> engineSign
    boolean engineVerify(byte[]) -> engineVerify
    void engineSetParameter(java.security.spec.AlgorithmParameterSpec) -> engineSetParameter
    void engineSetParameter(java.lang.String,java.lang.Object) -> engineSetParameter
    java.lang.Object engineGetParameter(java.lang.String) -> engineGetParameter
org.spongycastle.jcajce.provider.asymmetric.dstu.SignatureSpiLe -> org.spongycastle.jcajce.provider.asymmetric.dstu.SignatureSpiLe:
    void reverseBytes(byte[]) -> b
    byte[] engineSign() -> engineSign
    boolean engineVerify(byte[]) -> engineVerify
org.spongycastle.jcajce.provider.asymmetric.ec.AlgorithmParametersSpi -> org.spongycastle.jcajce.provider.asymmetric.ec.AlgorithmParametersSpi:
    java.security.spec.ECParameterSpec ecParameterSpec -> a
    java.lang.String curveName -> b
    boolean isASN1FormatString(java.lang.String) -> a
    void engineInit(java.security.spec.AlgorithmParameterSpec) -> engineInit
    void engineInit(byte[]) -> engineInit
    void engineInit(byte[],java.lang.String) -> engineInit
    java.security.spec.AlgorithmParameterSpec engineGetParameterSpec(java.lang.Class) -> engineGetParameterSpec
    byte[] engineGetEncoded() -> engineGetEncoded
    byte[] engineGetEncoded(java.lang.String) -> engineGetEncoded
    java.lang.String engineToString() -> engineToString
org.spongycastle.jcajce.provider.asymmetric.ec.BCECPrivateKey -> org.spongycastle.jcajce.provider.asymmetric.ec.BCECPrivateKey:
    java.lang.String algorithm -> a
    boolean withCompression -> b
    java.math.BigInteger d -> c
    java.security.spec.ECParameterSpec ecSpec -> d
    org.spongycastle.jcajce.provider.config.ProviderConfiguration configuration -> e
    org.spongycastle.asn1.DERBitString publicKey -> f
    org.spongycastle.jcajce.provider.asymmetric.util.PKCS12BagAttributeCarrierImpl attrCarrier -> g
    void populateFromPrivKeyInfo(org.spongycastle.asn1.pkcs.PrivateKeyInfo) -> a
    java.lang.String getAlgorithm() -> getAlgorithm
    java.lang.String getFormat() -> getFormat
    byte[] getEncoded() -> getEncoded
    java.security.spec.ECParameterSpec getParams() -> getParams
    org.spongycastle.jce.spec.ECParameterSpec getParameters() -> a
    org.spongycastle.jce.spec.ECParameterSpec engineGetSpec() -> b
    java.math.BigInteger getS() -> getS
    java.math.BigInteger getD() -> d
    void setBagAttribute(org.spongycastle.asn1.ASN1ObjectIdentifier,org.spongycastle.asn1.ASN1Encodable) -> a
    org.spongycastle.asn1.ASN1Encodable getBagAttribute(org.spongycastle.asn1.ASN1ObjectIdentifier) -> a
    java.util.Enumeration getBagAttributeKeys() -> c
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    org.spongycastle.asn1.DERBitString getPublicKeyDetails(org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey) -> a
org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey -> org.spongycastle.jcajce.provider.asymmetric.ec.BCECPublicKey:
    java.lang.String algorithm -> a
    boolean withCompression -> b
    org.spongycastle.math.ec.ECPoint q -> c
    java.security.spec.ECParameterSpec ecSpec -> d
    org.spongycastle.jcajce.provider.config.ProviderConfiguration configuration -> e
    java.security.spec.ECParameterSpec createSpec(java.security.spec.EllipticCurve,org.spongycastle.crypto.params.ECDomainParameters) -> a
    void populateFromPubKeyInfo(org.spongycastle.asn1.x509.SubjectPublicKeyInfo) -> a
    java.lang.String getAlgorithm() -> getAlgorithm
    java.lang.String getFormat() -> getFormat
    byte[] getEncoded() -> getEncoded
    java.security.spec.ECParameterSpec getParams() -> getParams
    org.spongycastle.jce.spec.ECParameterSpec getParameters() -> a
    java.security.spec.ECPoint getW() -> getW
    org.spongycastle.math.ec.ECPoint getQ() -> c
    org.spongycastle.math.ec.ECPoint engineGetQ() -> b
    org.spongycastle.jce.spec.ECParameterSpec engineGetSpec() -> d
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.spongycastle.jcajce.provider.asymmetric.ec.ECUtils -> org.spongycastle.jcajce.provider.asymmetric.ec.a:
    org.spongycastle.asn1.x9.X9ECParameters getDomainParametersFromGenSpec(java.security.spec.ECGenParameterSpec) -> a
    org.spongycastle.asn1.x9.X9ECParameters getDomainParametersFromName(java.lang.String) -> a
org.spongycastle.jcajce.provider.asymmetric.ec.KeyFactorySpi -> org.spongycastle.jcajce.provider.asymmetric.ec.KeyFactorySpi:
    java.lang.String algorithm -> a
    org.spongycastle.jcajce.provider.config.ProviderConfiguration configuration -> b
    java.security.Key engineTranslateKey(java.security.Key) -> engineTranslateKey
    java.security.spec.KeySpec engineGetKeySpec(java.security.Key,java.lang.Class) -> engineGetKeySpec
    java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec) -> engineGeneratePrivate
    java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec) -> engineGeneratePublic
    java.security.PrivateKey generatePrivate(org.spongycastle.asn1.pkcs.PrivateKeyInfo) -> a
    java.security.PublicKey generatePublic(org.spongycastle.asn1.x509.SubjectPublicKeyInfo) -> a
org.spongycastle.jcajce.provider.asymmetric.ec.KeyFactorySpi$EC -> org.spongycastle.jcajce.provider.asymmetric.ec.KeyFactorySpi$EC:
org.spongycastle.jcajce.provider.asymmetric.ec.KeyFactorySpi$ECDH -> org.spongycastle.jcajce.provider.asymmetric.ec.KeyFactorySpi$ECDH:
org.spongycastle.jcajce.provider.asymmetric.ec.KeyFactorySpi$ECDHC -> org.spongycastle.jcajce.provider.asymmetric.ec.KeyFactorySpi$ECDHC:
org.spongycastle.jcajce.provider.asymmetric.ec.KeyFactorySpi$ECDSA -> org.spongycastle.jcajce.provider.asymmetric.ec.KeyFactorySpi$ECDSA:
org.spongycastle.jcajce.provider.asymmetric.ec.KeyFactorySpi$ECGOST3410 -> org.spongycastle.jcajce.provider.asymmetric.ec.KeyFactorySpi$ECGOST3410:
org.spongycastle.jcajce.provider.asymmetric.ec.KeyFactorySpi$ECMQV -> org.spongycastle.jcajce.provider.asymmetric.ec.KeyFactorySpi$ECMQV:
org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi -> org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi:
org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC -> org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC:
    org.spongycastle.crypto.params.ECKeyGenerationParameters param -> a
    org.spongycastle.crypto.generators.ECKeyPairGenerator engine -> b
    java.lang.Object ecParams -> c
    int strength -> d
    int certainty -> e
    java.security.SecureRandom random -> f
    boolean initialised -> g
    java.lang.String algorithm -> h
    org.spongycastle.jcajce.provider.config.ProviderConfiguration configuration -> i
    java.util.Hashtable ecParameters -> j
    void initialize(int,java.security.SecureRandom) -> initialize
    void initialize(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> initialize
    java.security.KeyPair generateKeyPair() -> generateKeyPair
    org.spongycastle.crypto.params.ECKeyGenerationParameters createKeyGenParamsBC(org.spongycastle.jce.spec.ECParameterSpec,java.security.SecureRandom) -> a
    org.spongycastle.crypto.params.ECKeyGenerationParameters createKeyGenParamsJCE(java.security.spec.ECParameterSpec,java.security.SecureRandom) -> a
    org.spongycastle.jce.spec.ECNamedCurveSpec createNamedCurveSpec(java.lang.String) -> a
    void initializeNamedCurve(java.lang.String,java.security.SecureRandom) -> a
org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$ECDH -> org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$ECDH:
org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$ECDHC -> org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$ECDHC:
org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$ECDSA -> org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$ECDSA:
org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$ECMQV -> org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$ECMQV:
org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi -> org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi:
    void engineInitVerify(java.security.PublicKey) -> engineInitVerify
    void engineInitSign(java.security.PrivateKey) -> engineInitSign
org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$1 -> org.spongycastle.jcajce.provider.asymmetric.ec.b:
org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$PlainDSAEncoder -> org.spongycastle.jcajce.provider.asymmetric.ec.c:
    byte[] encode(java.math.BigInteger,java.math.BigInteger) -> a
    byte[] makeUnsigned(java.math.BigInteger) -> a
    java.math.BigInteger[] decode(byte[]) -> a
org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$StdDSAEncoder -> org.spongycastle.jcajce.provider.asymmetric.ec.d:
    byte[] encode(java.math.BigInteger,java.math.BigInteger) -> a
    java.math.BigInteger[] decode(byte[]) -> a
org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecCVCDSA -> org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecCVCDSA:
org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecCVCDSA224 -> org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecCVCDSA224:
org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecCVCDSA256 -> org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecCVCDSA256:
org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecCVCDSA384 -> org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecCVCDSA384:
org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecCVCDSA512 -> org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecCVCDSA512:
org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecDSA -> org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecDSA:
org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecDSA224 -> org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecDSA224:
org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecDSA256 -> org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecDSA256:
org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecDSA384 -> org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecDSA384:
org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecDSA512 -> org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecDSA512:
org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecDSARipeMD160 -> org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecDSARipeMD160:
org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecDSAnone -> org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecDSAnone:
org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecDetDSA -> org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecDetDSA:
org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecDetDSA224 -> org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecDetDSA224:
org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecDetDSA256 -> org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecDetDSA256:
org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecDetDSA384 -> org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecDetDSA384:
org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecDetDSA512 -> org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecDetDSA512:
org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecNR -> org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecNR:
org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecNR224 -> org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecNR224:
org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecNR256 -> org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecNR256:
org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecNR384 -> org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecNR384:
org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecNR512 -> org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecNR512:
org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecPlainDSARP160 -> org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecPlainDSARP160:
org.spongycastle.jcajce.provider.asymmetric.ecgost.BCECGOST3410PrivateKey -> org.spongycastle.jcajce.provider.asymmetric.ecgost.BCECGOST3410PrivateKey:
    java.lang.String algorithm -> a
    boolean withCompression -> b
    org.spongycastle.asn1.cryptopro.GOST3410PublicKeyAlgParameters gostParams -> c
    java.math.BigInteger d -> d
    java.security.spec.ECParameterSpec ecSpec -> e
    org.spongycastle.asn1.DERBitString publicKey -> f
    org.spongycastle.jcajce.provider.asymmetric.util.PKCS12BagAttributeCarrierImpl attrCarrier -> g
    void populateFromPrivKeyInfo(org.spongycastle.asn1.pkcs.PrivateKeyInfo) -> a
    java.lang.String getAlgorithm() -> getAlgorithm
    java.lang.String getFormat() -> getFormat
    byte[] getEncoded() -> getEncoded
    void extractBytes(byte[],int,java.math.BigInteger) -> a
    java.security.spec.ECParameterSpec getParams() -> getParams
    org.spongycastle.jce.spec.ECParameterSpec getParameters() -> a
    org.spongycastle.jce.spec.ECParameterSpec engineGetSpec() -> b
    java.math.BigInteger getS() -> getS
    java.math.BigInteger getD() -> d
    void setBagAttribute(org.spongycastle.asn1.ASN1ObjectIdentifier,org.spongycastle.asn1.ASN1Encodable) -> a
    org.spongycastle.asn1.ASN1Encodable getBagAttribute(org.spongycastle.asn1.ASN1ObjectIdentifier) -> a
    java.util.Enumeration getBagAttributeKeys() -> c
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    org.spongycastle.asn1.DERBitString getPublicKeyDetails(org.spongycastle.jcajce.provider.asymmetric.ecgost.BCECGOST3410PublicKey) -> a
org.spongycastle.jcajce.provider.asymmetric.ecgost.BCECGOST3410PublicKey -> org.spongycastle.jcajce.provider.asymmetric.ecgost.BCECGOST3410PublicKey:
    java.lang.String algorithm -> a
    boolean withCompression -> b
    org.spongycastle.math.ec.ECPoint q -> c
    java.security.spec.ECParameterSpec ecSpec -> d
    org.spongycastle.asn1.cryptopro.GOST3410PublicKeyAlgParameters gostParams -> e
    java.security.spec.ECParameterSpec createSpec(java.security.spec.EllipticCurve,org.spongycastle.crypto.params.ECDomainParameters) -> a
    void populateFromPubKeyInfo(org.spongycastle.asn1.x509.SubjectPublicKeyInfo) -> a
    java.lang.String getAlgorithm() -> getAlgorithm
    java.lang.String getFormat() -> getFormat
    byte[] getEncoded() -> getEncoded
    void extractBytes(byte[],int,java.math.BigInteger) -> a
    java.security.spec.ECParameterSpec getParams() -> getParams
    org.spongycastle.jce.spec.ECParameterSpec getParameters() -> a
    java.security.spec.ECPoint getW() -> getW
    org.spongycastle.math.ec.ECPoint getQ() -> c
    org.spongycastle.math.ec.ECPoint engineGetQ() -> b
    org.spongycastle.jce.spec.ECParameterSpec engineGetSpec() -> d
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    org.spongycastle.asn1.cryptopro.GOST3410PublicKeyAlgParameters getGostParams() -> e
org.spongycastle.jcajce.provider.asymmetric.ecgost.KeyFactorySpi -> org.spongycastle.jcajce.provider.asymmetric.ecgost.KeyFactorySpi:
    java.security.spec.KeySpec engineGetKeySpec(java.security.Key,java.lang.Class) -> engineGetKeySpec
    java.security.Key engineTranslateKey(java.security.Key) -> engineTranslateKey
    java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec) -> engineGeneratePrivate
    java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec) -> engineGeneratePublic
    java.security.PrivateKey generatePrivate(org.spongycastle.asn1.pkcs.PrivateKeyInfo) -> a
    java.security.PublicKey generatePublic(org.spongycastle.asn1.x509.SubjectPublicKeyInfo) -> a
org.spongycastle.jcajce.provider.asymmetric.ecgost.KeyPairGeneratorSpi -> org.spongycastle.jcajce.provider.asymmetric.ecgost.KeyPairGeneratorSpi:
    java.lang.Object ecParams -> a
    org.spongycastle.crypto.generators.ECKeyPairGenerator engine -> b
    java.lang.String algorithm -> c
    org.spongycastle.crypto.params.ECKeyGenerationParameters param -> d
    int strength -> e
    java.security.SecureRandom random -> f
    boolean initialised -> g
    void initialize(int,java.security.SecureRandom) -> initialize
    void initialize(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> initialize
    java.security.KeyPair generateKeyPair() -> generateKeyPair
org.spongycastle.jcajce.provider.asymmetric.ecgost.SignatureSpi -> org.spongycastle.jcajce.provider.asymmetric.ecgost.SignatureSpi:
    org.spongycastle.crypto.Digest digest -> bH
    org.spongycastle.crypto.DSA signer -> bI
    void engineInitVerify(java.security.PublicKey) -> engineInitVerify
    void engineInitSign(java.security.PrivateKey) -> engineInitSign
    void engineUpdate(byte) -> engineUpdate
    void engineUpdate(byte[],int,int) -> engineUpdate
    byte[] engineSign() -> engineSign
    boolean engineVerify(byte[]) -> engineVerify
    void engineSetParameter(java.security.spec.AlgorithmParameterSpec) -> engineSetParameter
    void engineSetParameter(java.lang.String,java.lang.Object) -> engineSetParameter
    java.lang.Object engineGetParameter(java.lang.String) -> engineGetParameter
org.spongycastle.jcajce.provider.asymmetric.elgamal.AlgorithmParameterGeneratorSpi -> org.spongycastle.jcajce.provider.asymmetric.elgamal.AlgorithmParameterGeneratorSpi:
    java.security.SecureRandom random -> a
    int strength -> b
    int l -> c
    void engineInit(int,java.security.SecureRandom) -> engineInit
    void engineInit(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> engineInit
    java.security.AlgorithmParameters engineGenerateParameters() -> engineGenerateParameters
org.spongycastle.jcajce.provider.asymmetric.elgamal.AlgorithmParametersSpi -> org.spongycastle.jcajce.provider.asymmetric.elgamal.AlgorithmParametersSpi:
    org.spongycastle.jce.spec.ElGamalParameterSpec currentSpec -> a
    byte[] engineGetEncoded() -> engineGetEncoded
    byte[] engineGetEncoded(java.lang.String) -> engineGetEncoded
    java.security.spec.AlgorithmParameterSpec localEngineGetParameterSpec(java.lang.Class) -> a
    void engineInit(java.security.spec.AlgorithmParameterSpec) -> engineInit
    void engineInit(byte[]) -> engineInit
    void engineInit(byte[],java.lang.String) -> engineInit
    java.lang.String engineToString() -> engineToString
org.spongycastle.jcajce.provider.asymmetric.elgamal.BCElGamalPrivateKey -> org.spongycastle.jcajce.provider.asymmetric.elgamal.a:
    java.math.BigInteger x -> a
    org.spongycastle.jce.spec.ElGamalParameterSpec elSpec -> b
    org.spongycastle.jcajce.provider.asymmetric.util.PKCS12BagAttributeCarrierImpl attrCarrier -> c
    org.spongycastle.jce.spec.ElGamalParameterSpec getParameters() -> a
    javax.crypto.spec.DHParameterSpec getParams() -> b
    java.math.BigInteger getX() -> d
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void setBagAttribute(org.spongycastle.asn1.ASN1ObjectIdentifier,org.spongycastle.asn1.ASN1Encodable) -> a
    org.spongycastle.asn1.ASN1Encodable getBagAttribute(org.spongycastle.asn1.ASN1ObjectIdentifier) -> a
    java.util.Enumeration getBagAttributeKeys() -> c
org.spongycastle.jcajce.provider.asymmetric.elgamal.BCElGamalPublicKey -> org.spongycastle.jcajce.provider.asymmetric.elgamal.b:
    java.math.BigInteger y -> a
    org.spongycastle.jce.spec.ElGamalParameterSpec elSpec -> b
    org.spongycastle.jce.spec.ElGamalParameterSpec getParameters() -> a
    javax.crypto.spec.DHParameterSpec getParams() -> b
    java.math.BigInteger getY() -> c
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
org.spongycastle.jcajce.provider.asymmetric.elgamal.KeyFactorySpi -> org.spongycastle.jcajce.provider.asymmetric.elgamal.KeyFactorySpi:
    java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec) -> engineGeneratePrivate
    java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec) -> engineGeneratePublic
    java.security.spec.KeySpec engineGetKeySpec(java.security.Key,java.lang.Class) -> engineGetKeySpec
    java.security.Key engineTranslateKey(java.security.Key) -> engineTranslateKey
    java.security.PrivateKey generatePrivate(org.spongycastle.asn1.pkcs.PrivateKeyInfo) -> a
    java.security.PublicKey generatePublic(org.spongycastle.asn1.x509.SubjectPublicKeyInfo) -> a
org.spongycastle.jcajce.provider.asymmetric.elgamal.KeyPairGeneratorSpi -> org.spongycastle.jcajce.provider.asymmetric.elgamal.KeyPairGeneratorSpi:
    org.spongycastle.crypto.params.ElGamalKeyGenerationParameters param -> a
    org.spongycastle.crypto.generators.ElGamalKeyPairGenerator engine -> b
    int strength -> c
    int certainty -> d
    java.security.SecureRandom random -> e
    boolean initialised -> f
    void initialize(int,java.security.SecureRandom) -> initialize
    void initialize(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> initialize
    java.security.KeyPair generateKeyPair() -> generateKeyPair
org.spongycastle.jcajce.provider.asymmetric.gost.AlgorithmParameterGeneratorSpi -> org.spongycastle.jcajce.provider.asymmetric.gost.AlgorithmParameterGeneratorSpi:
    int strength -> a
org.spongycastle.jcajce.provider.asymmetric.gost.AlgorithmParametersSpi -> org.spongycastle.jcajce.provider.asymmetric.gost.AlgorithmParametersSpi:
    org.spongycastle.jce.spec.GOST3410ParameterSpec currentSpec -> a
    boolean isASN1FormatString(java.lang.String) -> a
    java.security.spec.AlgorithmParameterSpec engineGetParameterSpec(java.lang.Class) -> engineGetParameterSpec
    byte[] engineGetEncoded() -> engineGetEncoded
    byte[] engineGetEncoded(java.lang.String) -> engineGetEncoded
    java.security.spec.AlgorithmParameterSpec localEngineGetParameterSpec(java.lang.Class) -> a
    void engineInit(java.security.spec.AlgorithmParameterSpec) -> engineInit
    void engineInit(byte[]) -> engineInit
    void engineInit(byte[],java.lang.String) -> engineInit
    java.lang.String engineToString() -> engineToString
org.spongycastle.jcajce.provider.asymmetric.gost.BCGOST3410PrivateKey -> org.spongycastle.jcajce.provider.asymmetric.gost.BCGOST3410PrivateKey:
    java.math.BigInteger x -> a
    org.spongycastle.jce.interfaces.GOST3410Params gost3410Spec -> b
    org.spongycastle.jce.interfaces.PKCS12BagAttributeCarrier attrCarrier -> c
    java.lang.String getAlgorithm() -> getAlgorithm
    java.lang.String getFormat() -> getFormat
    byte[] getEncoded() -> getEncoded
    org.spongycastle.jce.interfaces.GOST3410Params getParameters() -> a
    java.math.BigInteger getX() -> b
    boolean equals(java.lang.Object) -> equals
    boolean compareObj(java.lang.Object,java.lang.Object) -> a
    int hashCode() -> hashCode
    void setBagAttribute(org.spongycastle.asn1.ASN1ObjectIdentifier,org.spongycastle.asn1.ASN1Encodable) -> a
    org.spongycastle.asn1.ASN1Encodable getBagAttribute(org.spongycastle.asn1.ASN1ObjectIdentifier) -> a
    java.util.Enumeration getBagAttributeKeys() -> c
org.spongycastle.jcajce.provider.asymmetric.gost.BCGOST3410PublicKey -> org.spongycastle.jcajce.provider.asymmetric.gost.BCGOST3410PublicKey:
    java.math.BigInteger y -> a
    org.spongycastle.jce.interfaces.GOST3410Params gost3410Spec -> b
    java.lang.String getAlgorithm() -> getAlgorithm
    java.lang.String getFormat() -> getFormat
    byte[] getEncoded() -> getEncoded
    org.spongycastle.jce.interfaces.GOST3410Params getParameters() -> a
    java.math.BigInteger getY() -> b
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.spongycastle.jcajce.provider.asymmetric.gost.KeyFactorySpi -> org.spongycastle.jcajce.provider.asymmetric.gost.KeyFactorySpi:
    java.security.spec.KeySpec engineGetKeySpec(java.security.Key,java.lang.Class) -> engineGetKeySpec
    java.security.Key engineTranslateKey(java.security.Key) -> engineTranslateKey
    java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec) -> engineGeneratePrivate
    java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec) -> engineGeneratePublic
    java.security.PrivateKey generatePrivate(org.spongycastle.asn1.pkcs.PrivateKeyInfo) -> a
    java.security.PublicKey generatePublic(org.spongycastle.asn1.x509.SubjectPublicKeyInfo) -> a
org.spongycastle.jcajce.provider.asymmetric.gost.KeyPairGeneratorSpi -> org.spongycastle.jcajce.provider.asymmetric.gost.KeyPairGeneratorSpi:
    org.spongycastle.crypto.params.GOST3410KeyGenerationParameters param -> a
    org.spongycastle.crypto.generators.GOST3410KeyPairGenerator engine -> b
    org.spongycastle.jce.spec.GOST3410ParameterSpec gost3410Params -> c
    int strength -> d
    java.security.SecureRandom random -> e
    boolean initialised -> f
    void initialize(int,java.security.SecureRandom) -> initialize
    void init(org.spongycastle.jce.spec.GOST3410ParameterSpec,java.security.SecureRandom) -> a
    void initialize(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> initialize
    java.security.KeyPair generateKeyPair() -> generateKeyPair
org.spongycastle.jcajce.provider.asymmetric.gost.SignatureSpi -> org.spongycastle.jcajce.provider.asymmetric.gost.SignatureSpi:
    org.spongycastle.crypto.Digest digest -> bH
    org.spongycastle.crypto.DSA signer -> bI
    java.security.SecureRandom random -> bJ
    void engineInitVerify(java.security.PublicKey) -> engineInitVerify
    void engineInitSign(java.security.PrivateKey,java.security.SecureRandom) -> engineInitSign
    void engineInitSign(java.security.PrivateKey) -> engineInitSign
    void engineUpdate(byte) -> engineUpdate
    void engineUpdate(byte[],int,int) -> engineUpdate
    byte[] engineSign() -> engineSign
    boolean engineVerify(byte[]) -> engineVerify
    void engineSetParameter(java.security.spec.AlgorithmParameterSpec) -> engineSetParameter
    void engineSetParameter(java.lang.String,java.lang.Object) -> engineSetParameter
    java.lang.Object engineGetParameter(java.lang.String) -> engineGetParameter
org.spongycastle.jcajce.provider.asymmetric.ies.AlgorithmParametersSpi -> org.spongycastle.jcajce.provider.asymmetric.ies.AlgorithmParametersSpi:
    org.spongycastle.jce.spec.IESParameterSpec currentSpec -> a
    boolean isASN1FormatString(java.lang.String) -> a
    java.security.spec.AlgorithmParameterSpec engineGetParameterSpec(java.lang.Class) -> engineGetParameterSpec
    byte[] engineGetEncoded() -> engineGetEncoded
    byte[] engineGetEncoded(java.lang.String) -> engineGetEncoded
    java.security.spec.AlgorithmParameterSpec localEngineGetParameterSpec(java.lang.Class) -> a
    void engineInit(java.security.spec.AlgorithmParameterSpec) -> engineInit
    void engineInit(byte[]) -> engineInit
    void engineInit(byte[],java.lang.String) -> engineInit
    java.lang.String engineToString() -> engineToString
org.spongycastle.jcajce.provider.asymmetric.rsa.AlgorithmParametersSpi -> org.spongycastle.jcajce.provider.asymmetric.rsa.AlgorithmParametersSpi:
    boolean isASN1FormatString(java.lang.String) -> a
    java.security.spec.AlgorithmParameterSpec engineGetParameterSpec(java.lang.Class) -> engineGetParameterSpec
    java.security.spec.AlgorithmParameterSpec localEngineGetParameterSpec(java.lang.Class) -> a
org.spongycastle.jcajce.provider.asymmetric.rsa.AlgorithmParametersSpi$OAEP -> org.spongycastle.jcajce.provider.asymmetric.rsa.AlgorithmParametersSpi$OAEP:
    javax.crypto.spec.OAEPParameterSpec currentSpec -> a
    byte[] engineGetEncoded() -> engineGetEncoded
    byte[] engineGetEncoded(java.lang.String) -> engineGetEncoded
    java.security.spec.AlgorithmParameterSpec localEngineGetParameterSpec(java.lang.Class) -> a
    void engineInit(java.security.spec.AlgorithmParameterSpec) -> engineInit
    void engineInit(byte[]) -> engineInit
    void engineInit(byte[],java.lang.String) -> engineInit
    java.lang.String engineToString() -> engineToString
org.spongycastle.jcajce.provider.asymmetric.rsa.AlgorithmParametersSpi$PSS -> org.spongycastle.jcajce.provider.asymmetric.rsa.AlgorithmParametersSpi$PSS:
    java.security.spec.PSSParameterSpec currentSpec -> a
    byte[] engineGetEncoded() -> engineGetEncoded
    byte[] engineGetEncoded(java.lang.String) -> engineGetEncoded
    java.security.spec.AlgorithmParameterSpec localEngineGetParameterSpec(java.lang.Class) -> a
    void engineInit(java.security.spec.AlgorithmParameterSpec) -> engineInit
    void engineInit(byte[]) -> engineInit
    void engineInit(byte[],java.lang.String) -> engineInit
    java.lang.String engineToString() -> engineToString
org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey -> org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateCrtKey:
    java.math.BigInteger publicExponent -> c
    java.math.BigInteger primeP -> d
    java.math.BigInteger primeQ -> e
    java.math.BigInteger primeExponentP -> f
    java.math.BigInteger primeExponentQ -> g
    java.math.BigInteger crtCoefficient -> h
    java.lang.String getFormat() -> getFormat
    byte[] getEncoded() -> getEncoded
    java.math.BigInteger getPublicExponent() -> getPublicExponent
    java.math.BigInteger getPrimeP() -> getPrimeP
    java.math.BigInteger getPrimeQ() -> getPrimeQ
    java.math.BigInteger getPrimeExponentP() -> getPrimeExponentP
    java.math.BigInteger getPrimeExponentQ() -> getPrimeExponentQ
    java.math.BigInteger getCrtCoefficient() -> getCrtCoefficient
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateKey -> org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateKey:
    java.math.BigInteger ZERO -> c
    java.math.BigInteger modulus -> a
    java.math.BigInteger privateExponent -> b
    org.spongycastle.jcajce.provider.asymmetric.util.PKCS12BagAttributeCarrierImpl attrCarrier -> d
    java.math.BigInteger getModulus() -> getModulus
    java.math.BigInteger getPrivateExponent() -> getPrivateExponent
    java.lang.String getAlgorithm() -> getAlgorithm
    java.lang.String getFormat() -> getFormat
    byte[] getEncoded() -> getEncoded
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void setBagAttribute(org.spongycastle.asn1.ASN1ObjectIdentifier,org.spongycastle.asn1.ASN1Encodable) -> a
    org.spongycastle.asn1.ASN1Encodable getBagAttribute(org.spongycastle.asn1.ASN1ObjectIdentifier) -> a
    java.util.Enumeration getBagAttributeKeys() -> c
org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPublicKey -> org.spongycastle.jcajce.provider.asymmetric.rsa.BCRSAPublicKey:
    org.spongycastle.asn1.x509.AlgorithmIdentifier DEFAULT_ALGORITHM_IDENTIFIER -> a
    java.math.BigInteger modulus -> b
    java.math.BigInteger publicExponent -> c
    org.spongycastle.asn1.x509.AlgorithmIdentifier algorithmIdentifier -> d
    void populateFromPublicKeyInfo(org.spongycastle.asn1.x509.SubjectPublicKeyInfo) -> a
    java.math.BigInteger getModulus() -> getModulus
    java.math.BigInteger getPublicExponent() -> getPublicExponent
    java.lang.String getAlgorithm() -> getAlgorithm
    java.lang.String getFormat() -> getFormat
    byte[] getEncoded() -> getEncoded
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
org.spongycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi -> org.spongycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi:
    org.spongycastle.crypto.Digest digest -> a
    org.spongycastle.crypto.AsymmetricBlockCipher cipher -> b
    org.spongycastle.asn1.x509.AlgorithmIdentifier algId -> c
    void engineInitVerify(java.security.PublicKey) -> engineInitVerify
    void engineInitSign(java.security.PrivateKey) -> engineInitSign
    java.lang.String getType(java.lang.Object) -> a
    void engineUpdate(byte) -> engineUpdate
    void engineUpdate(byte[],int,int) -> engineUpdate
    byte[] engineSign() -> engineSign
    boolean engineVerify(byte[]) -> engineVerify
    void engineSetParameter(java.security.spec.AlgorithmParameterSpec) -> engineSetParameter
    void engineSetParameter(java.lang.String,java.lang.Object) -> engineSetParameter
    java.lang.Object engineGetParameter(java.lang.String) -> engineGetParameter
    java.security.AlgorithmParameters engineGetParameters() -> engineGetParameters
    byte[] derEncode(byte[]) -> a
org.spongycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi$MD2 -> org.spongycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi$MD2:
org.spongycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi$MD4 -> org.spongycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi$MD4:
org.spongycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi$MD5 -> org.spongycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi$MD5:
org.spongycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi$RIPEMD128 -> org.spongycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi$RIPEMD128:
org.spongycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi$RIPEMD160 -> org.spongycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi$RIPEMD160:
org.spongycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi$RIPEMD256 -> org.spongycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi$RIPEMD256:
org.spongycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi$SHA1 -> org.spongycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi$SHA1:
org.spongycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi$SHA224 -> org.spongycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi$SHA224:
org.spongycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi$SHA256 -> org.spongycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi$SHA256:
org.spongycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi$SHA384 -> org.spongycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi$SHA384:
org.spongycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi$SHA512 -> org.spongycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi$SHA512:
org.spongycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi$SHA512_224 -> org.spongycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi$SHA512_224:
org.spongycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi$SHA512_256 -> org.spongycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi$SHA512_256:
org.spongycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi$noneRSA -> org.spongycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi$noneRSA:
org.spongycastle.jcajce.provider.asymmetric.rsa.ISOSignatureSpi -> org.spongycastle.jcajce.provider.asymmetric.rsa.ISOSignatureSpi:
    org.spongycastle.crypto.signers.ISO9796d2Signer signer -> a
    void engineInitVerify(java.security.PublicKey) -> engineInitVerify
    void engineInitSign(java.security.PrivateKey) -> engineInitSign
    void engineUpdate(byte) -> engineUpdate
    void engineUpdate(byte[],int,int) -> engineUpdate
    byte[] engineSign() -> engineSign
    boolean engineVerify(byte[]) -> engineVerify
    void engineSetParameter(java.security.spec.AlgorithmParameterSpec) -> engineSetParameter
    void engineSetParameter(java.lang.String,java.lang.Object) -> engineSetParameter
    java.lang.Object engineGetParameter(java.lang.String) -> engineGetParameter
org.spongycastle.jcajce.provider.asymmetric.rsa.ISOSignatureSpi$MD5WithRSAEncryption -> org.spongycastle.jcajce.provider.asymmetric.rsa.ISOSignatureSpi$MD5WithRSAEncryption:
org.spongycastle.jcajce.provider.asymmetric.rsa.ISOSignatureSpi$RIPEMD160WithRSAEncryption -> org.spongycastle.jcajce.provider.asymmetric.rsa.ISOSignatureSpi$RIPEMD160WithRSAEncryption:
org.spongycastle.jcajce.provider.asymmetric.rsa.ISOSignatureSpi$SHA1WithRSAEncryption -> org.spongycastle.jcajce.provider.asymmetric.rsa.ISOSignatureSpi$SHA1WithRSAEncryption:
org.spongycastle.jcajce.provider.asymmetric.rsa.ISOSignatureSpi$SHA224WithRSAEncryption -> org.spongycastle.jcajce.provider.asymmetric.rsa.ISOSignatureSpi$SHA224WithRSAEncryption:
org.spongycastle.jcajce.provider.asymmetric.rsa.ISOSignatureSpi$SHA256WithRSAEncryption -> org.spongycastle.jcajce.provider.asymmetric.rsa.ISOSignatureSpi$SHA256WithRSAEncryption:
org.spongycastle.jcajce.provider.asymmetric.rsa.ISOSignatureSpi$SHA384WithRSAEncryption -> org.spongycastle.jcajce.provider.asymmetric.rsa.ISOSignatureSpi$SHA384WithRSAEncryption:
org.spongycastle.jcajce.provider.asymmetric.rsa.ISOSignatureSpi$SHA512WithRSAEncryption -> org.spongycastle.jcajce.provider.asymmetric.rsa.ISOSignatureSpi$SHA512WithRSAEncryption:
org.spongycastle.jcajce.provider.asymmetric.rsa.ISOSignatureSpi$SHA512_224WithRSAEncryption -> org.spongycastle.jcajce.provider.asymmetric.rsa.ISOSignatureSpi$SHA512_224WithRSAEncryption:
org.spongycastle.jcajce.provider.asymmetric.rsa.ISOSignatureSpi$SHA512_256WithRSAEncryption -> org.spongycastle.jcajce.provider.asymmetric.rsa.ISOSignatureSpi$SHA512_256WithRSAEncryption:
org.spongycastle.jcajce.provider.asymmetric.rsa.ISOSignatureSpi$WhirlpoolWithRSAEncryption -> org.spongycastle.jcajce.provider.asymmetric.rsa.ISOSignatureSpi$WhirlpoolWithRSAEncryption:
org.spongycastle.jcajce.provider.asymmetric.rsa.KeyFactorySpi -> org.spongycastle.jcajce.provider.asymmetric.rsa.KeyFactorySpi:
    java.security.spec.KeySpec engineGetKeySpec(java.security.Key,java.lang.Class) -> engineGetKeySpec
    java.security.Key engineTranslateKey(java.security.Key) -> engineTranslateKey
    java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec) -> engineGeneratePrivate
    java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec) -> engineGeneratePublic
    java.security.PrivateKey generatePrivate(org.spongycastle.asn1.pkcs.PrivateKeyInfo) -> a
    java.security.PublicKey generatePublic(org.spongycastle.asn1.x509.SubjectPublicKeyInfo) -> a
org.spongycastle.jcajce.provider.asymmetric.rsa.KeyPairGeneratorSpi -> org.spongycastle.jcajce.provider.asymmetric.rsa.KeyPairGeneratorSpi:
    java.math.BigInteger defaultPublicExponent -> a
    org.spongycastle.crypto.params.RSAKeyGenerationParameters param -> b
    org.spongycastle.crypto.generators.RSAKeyPairGenerator engine -> c
    void initialize(int,java.security.SecureRandom) -> initialize
    void initialize(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> initialize
    java.security.KeyPair generateKeyPair() -> generateKeyPair
org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi -> org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi:
    org.spongycastle.jcajce.util.JcaJceHelper helper -> a
    java.security.AlgorithmParameters engineParams -> b
    java.security.spec.PSSParameterSpec paramSpec -> c
    java.security.spec.PSSParameterSpec originalSpec -> d
    org.spongycastle.crypto.AsymmetricBlockCipher signer -> e
    org.spongycastle.crypto.Digest contentDigest -> f
    org.spongycastle.crypto.Digest mgfDigest -> g
    int saltLength -> h
    byte trailer -> i
    boolean isRaw -> j
    org.spongycastle.crypto.signers.PSSSigner pss -> k
    byte getTrailer(int) -> a
    void setupContentDigest() -> a
    void engineInitVerify(java.security.PublicKey) -> engineInitVerify
    void engineInitSign(java.security.PrivateKey,java.security.SecureRandom) -> engineInitSign
    void engineInitSign(java.security.PrivateKey) -> engineInitSign
    void engineUpdate(byte) -> engineUpdate
    void engineUpdate(byte[],int,int) -> engineUpdate
    byte[] engineSign() -> engineSign
    boolean engineVerify(byte[]) -> engineVerify
    void engineSetParameter(java.security.spec.AlgorithmParameterSpec) -> engineSetParameter
    java.security.AlgorithmParameters engineGetParameters() -> engineGetParameters
    void engineSetParameter(java.lang.String,java.lang.Object) -> engineSetParameter
    java.lang.Object engineGetParameter(java.lang.String) -> engineGetParameter
org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi$NullPssDigest -> org.spongycastle.jcajce.provider.asymmetric.rsa.a:
    java.io.ByteArrayOutputStream bOut -> b
    org.spongycastle.crypto.Digest baseDigest -> c
    boolean oddTime -> d
    org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi this$0 -> a
    java.lang.String getAlgorithmName() -> a
    int getDigestSize() -> b
    void update(byte) -> a
    void update(byte[],int,int) -> a
    int doFinal(byte[],int) -> a
    void reset() -> c
org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi$PSSwithRSA -> org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi$PSSwithRSA:
org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi$SHA1withRSA -> org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi$SHA1withRSA:
org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi$SHA224withRSA -> org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi$SHA224withRSA:
org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi$SHA256withRSA -> org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi$SHA256withRSA:
org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi$SHA384withRSA -> org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi$SHA384withRSA:
org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi$SHA512_224withRSA -> org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi$SHA512_224withRSA:
org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi$SHA512_256withRSA -> org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi$SHA512_256withRSA:
org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi$SHA512withRSA -> org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi$SHA512withRSA:
org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi$nonePSS -> org.spongycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi$nonePSS:
org.spongycastle.jcajce.provider.asymmetric.rsa.RSAUtil -> org.spongycastle.jcajce.provider.asymmetric.rsa.b:
    org.spongycastle.asn1.ASN1ObjectIdentifier[] rsaOids -> a
    boolean isRsaOid(org.spongycastle.asn1.ASN1ObjectIdentifier) -> a
    org.spongycastle.crypto.params.RSAKeyParameters generatePublicKeyParameter(java.security.interfaces.RSAPublicKey) -> a
    org.spongycastle.crypto.params.RSAKeyParameters generatePrivateKeyParameter(java.security.interfaces.RSAPrivateKey) -> a
org.spongycastle.jcajce.provider.asymmetric.rsa.X931SignatureSpi -> org.spongycastle.jcajce.provider.asymmetric.rsa.X931SignatureSpi:
    org.spongycastle.crypto.signers.X931Signer signer -> a
    void engineInitVerify(java.security.PublicKey) -> engineInitVerify
    void engineInitSign(java.security.PrivateKey) -> engineInitSign
    void engineUpdate(byte) -> engineUpdate
    void engineUpdate(byte[],int,int) -> engineUpdate
    byte[] engineSign() -> engineSign
    boolean engineVerify(byte[]) -> engineVerify
    void engineSetParameter(java.security.spec.AlgorithmParameterSpec) -> engineSetParameter
    void engineSetParameter(java.lang.String,java.lang.Object) -> engineSetParameter
    java.lang.Object engineGetParameter(java.lang.String) -> engineGetParameter
org.spongycastle.jcajce.provider.asymmetric.rsa.X931SignatureSpi$RIPEMD128WithRSAEncryption -> org.spongycastle.jcajce.provider.asymmetric.rsa.X931SignatureSpi$RIPEMD128WithRSAEncryption:
org.spongycastle.jcajce.provider.asymmetric.rsa.X931SignatureSpi$RIPEMD160WithRSAEncryption -> org.spongycastle.jcajce.provider.asymmetric.rsa.X931SignatureSpi$RIPEMD160WithRSAEncryption:
org.spongycastle.jcajce.provider.asymmetric.rsa.X931SignatureSpi$SHA1WithRSAEncryption -> org.spongycastle.jcajce.provider.asymmetric.rsa.X931SignatureSpi$SHA1WithRSAEncryption:
org.spongycastle.jcajce.provider.asymmetric.rsa.X931SignatureSpi$SHA224WithRSAEncryption -> org.spongycastle.jcajce.provider.asymmetric.rsa.X931SignatureSpi$SHA224WithRSAEncryption:
org.spongycastle.jcajce.provider.asymmetric.rsa.X931SignatureSpi$SHA256WithRSAEncryption -> org.spongycastle.jcajce.provider.asymmetric.rsa.X931SignatureSpi$SHA256WithRSAEncryption:
org.spongycastle.jcajce.provider.asymmetric.rsa.X931SignatureSpi$SHA384WithRSAEncryption -> org.spongycastle.jcajce.provider.asymmetric.rsa.X931SignatureSpi$SHA384WithRSAEncryption:
org.spongycastle.jcajce.provider.asymmetric.rsa.X931SignatureSpi$SHA512WithRSAEncryption -> org.spongycastle.jcajce.provider.asymmetric.rsa.X931SignatureSpi$SHA512WithRSAEncryption:
org.spongycastle.jcajce.provider.asymmetric.rsa.X931SignatureSpi$SHA512_224WithRSAEncryption -> org.spongycastle.jcajce.provider.asymmetric.rsa.X931SignatureSpi$SHA512_224WithRSAEncryption:
org.spongycastle.jcajce.provider.asymmetric.rsa.X931SignatureSpi$SHA512_256WithRSAEncryption -> org.spongycastle.jcajce.provider.asymmetric.rsa.X931SignatureSpi$SHA512_256WithRSAEncryption:
org.spongycastle.jcajce.provider.asymmetric.rsa.X931SignatureSpi$WhirlpoolWithRSAEncryption -> org.spongycastle.jcajce.provider.asymmetric.rsa.X931SignatureSpi$WhirlpoolWithRSAEncryption:
org.spongycastle.jcajce.provider.asymmetric.util.BaseAlgorithmParameterGeneratorSpi -> org.spongycastle.jcajce.provider.asymmetric.util.BaseAlgorithmParameterGeneratorSpi:
    org.spongycastle.jcajce.util.JcaJceHelper helper -> a
    java.security.AlgorithmParameters createParametersInstance(java.lang.String) -> a
org.spongycastle.jcajce.provider.asymmetric.util.BaseKeyFactorySpi -> org.spongycastle.jcajce.provider.asymmetric.util.BaseKeyFactorySpi:
    java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec) -> engineGeneratePrivate
    java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec) -> engineGeneratePublic
    java.security.spec.KeySpec engineGetKeySpec(java.security.Key,java.lang.Class) -> engineGetKeySpec
org.spongycastle.jcajce.provider.asymmetric.util.DSABase -> org.spongycastle.jcajce.provider.asymmetric.util.DSABase:
    org.spongycastle.crypto.Digest digest -> bH
    org.spongycastle.crypto.DSA signer -> bI
    org.spongycastle.jcajce.provider.asymmetric.util.DSAEncoder encoder -> bJ
    void engineUpdate(byte) -> engineUpdate
    void engineUpdate(byte[],int,int) -> engineUpdate
    byte[] engineSign() -> engineSign
    boolean engineVerify(byte[]) -> engineVerify
    void engineSetParameter(java.security.spec.AlgorithmParameterSpec) -> engineSetParameter
    void engineSetParameter(java.lang.String,java.lang.Object) -> engineSetParameter
    java.lang.Object engineGetParameter(java.lang.String) -> engineGetParameter
org.spongycastle.jcajce.provider.asymmetric.util.DSAEncoder -> org.spongycastle.jcajce.provider.asymmetric.util.a:
    byte[] encode(java.math.BigInteger,java.math.BigInteger) -> a
    java.math.BigInteger[] decode(byte[]) -> a
org.spongycastle.jcajce.provider.asymmetric.util.EC5Util -> org.spongycastle.jcajce.provider.asymmetric.util.b:
    java.util.Map customCurves -> a
    org.spongycastle.math.ec.ECCurve getCurve(org.spongycastle.jcajce.provider.config.ProviderConfiguration,org.spongycastle.asn1.x9.X962Parameters) -> a
    java.security.spec.ECParameterSpec convertToSpec(org.spongycastle.asn1.x9.X962Parameters,org.spongycastle.math.ec.ECCurve) -> a
    java.security.spec.ECParameterSpec convertToSpec(org.spongycastle.asn1.x9.X9ECParameters) -> a
    java.security.spec.EllipticCurve convertCurve(org.spongycastle.math.ec.ECCurve,byte[]) -> a
    org.spongycastle.math.ec.ECCurve convertCurve(java.security.spec.EllipticCurve) -> a
    java.security.spec.ECField convertField(org.spongycastle.math.field.FiniteField) -> a
    java.security.spec.ECParameterSpec convertSpec(java.security.spec.EllipticCurve,org.spongycastle.jce.spec.ECParameterSpec) -> a
    org.spongycastle.jce.spec.ECParameterSpec convertSpec(java.security.spec.ECParameterSpec,boolean) -> a
    org.spongycastle.math.ec.ECPoint convertPoint(java.security.spec.ECParameterSpec,java.security.spec.ECPoint,boolean) -> a
    org.spongycastle.math.ec.ECPoint convertPoint(org.spongycastle.math.ec.ECCurve,java.security.spec.ECPoint,boolean) -> a
org.spongycastle.jcajce.provider.asymmetric.util.ECUtil -> org.spongycastle.jcajce.provider.asymmetric.util.c:
    int[] convertMidTerms(int[]) -> a
    org.spongycastle.crypto.params.AsymmetricKeyParameter generatePublicKeyParameter(java.security.PublicKey) -> a
    org.spongycastle.crypto.params.AsymmetricKeyParameter generatePrivateKeyParameter(java.security.PrivateKey) -> a
    int getOrderBitLength(java.math.BigInteger,java.math.BigInteger) -> a
    org.spongycastle.asn1.ASN1ObjectIdentifier getNamedCurveOid(java.lang.String) -> a
    org.spongycastle.asn1.ASN1ObjectIdentifier lookupOidByName(java.lang.String) -> c
    org.spongycastle.asn1.ASN1ObjectIdentifier getNamedCurveOid(org.spongycastle.jce.spec.ECParameterSpec) -> a
    org.spongycastle.asn1.x9.X9ECParameters getNamedCurveByOid(org.spongycastle.asn1.ASN1ObjectIdentifier) -> a
    org.spongycastle.asn1.x9.X9ECParameters getNamedCurveByName(java.lang.String) -> b
    java.lang.String getCurveName(org.spongycastle.asn1.ASN1ObjectIdentifier) -> b
org.spongycastle.jcajce.provider.asymmetric.util.ExtendedInvalidKeySpecException -> org.spongycastle.jcajce.provider.asymmetric.util.ExtendedInvalidKeySpecException:
    java.lang.Throwable cause -> a
    java.lang.Throwable getCause() -> getCause
org.spongycastle.jcajce.provider.asymmetric.util.GOST3410Util -> org.spongycastle.jcajce.provider.asymmetric.util.d:
    org.spongycastle.crypto.params.AsymmetricKeyParameter generatePublicKeyParameter(java.security.PublicKey) -> a
    org.spongycastle.crypto.params.AsymmetricKeyParameter generatePrivateKeyParameter(java.security.PrivateKey) -> a
org.spongycastle.jcajce.provider.asymmetric.util.KeyUtil -> org.spongycastle.jcajce.provider.asymmetric.util.e:
    byte[] getEncodedSubjectPublicKeyInfo(org.spongycastle.asn1.x509.AlgorithmIdentifier,org.spongycastle.asn1.ASN1Encodable) -> a
    byte[] getEncodedSubjectPublicKeyInfo(org.spongycastle.asn1.x509.SubjectPublicKeyInfo) -> a
    byte[] getEncodedPrivateKeyInfo(org.spongycastle.asn1.x509.AlgorithmIdentifier,org.spongycastle.asn1.ASN1Encodable) -> b
    byte[] getEncodedPrivateKeyInfo(org.spongycastle.asn1.pkcs.PrivateKeyInfo) -> a
org.spongycastle.jcajce.provider.asymmetric.util.PKCS12BagAttributeCarrierImpl -> org.spongycastle.jcajce.provider.asymmetric.util.f:
    java.util.Hashtable pkcs12Attributes -> a
    java.util.Vector pkcs12Ordering -> b
    void setBagAttribute(org.spongycastle.asn1.ASN1ObjectIdentifier,org.spongycastle.asn1.ASN1Encodable) -> a
    org.spongycastle.asn1.ASN1Encodable getBagAttribute(org.spongycastle.asn1.ASN1ObjectIdentifier) -> a
    java.util.Enumeration getBagAttributeKeys() -> c
org.spongycastle.jcajce.provider.asymmetric.x509.CertificateFactory -> org.spongycastle.jcajce.provider.asymmetric.x509.CertificateFactory:
    org.spongycastle.jcajce.util.JcaJceHelper bcHelper -> a
    org.spongycastle.jcajce.provider.asymmetric.x509.PEMUtil PEM_CERT_PARSER -> b
    org.spongycastle.jcajce.provider.asymmetric.x509.PEMUtil PEM_CRL_PARSER -> c
    org.spongycastle.asn1.ASN1Set sData -> d
    int sDataObjectCount -> e
    java.io.InputStream currentStream -> f
    org.spongycastle.asn1.ASN1Set sCrlData -> g
    int sCrlDataObjectCount -> h
    java.io.InputStream currentCrlStream -> i
    java.security.cert.Certificate readDERCertificate(org.spongycastle.asn1.ASN1InputStream) -> a
    java.security.cert.Certificate getCertificate() -> a
    java.security.cert.Certificate readPEMCertificate(java.io.InputStream) -> a
    java.security.cert.CRL createCRL(org.spongycastle.asn1.x509.CertificateList) -> a
    java.security.cert.CRL readPEMCRL(java.io.InputStream) -> b
    java.security.cert.CRL readDERCRL(org.spongycastle.asn1.ASN1InputStream) -> b
    java.security.cert.CRL getCRL() -> b
    java.security.cert.Certificate engineGenerateCertificate(java.io.InputStream) -> engineGenerateCertificate
    java.util.Collection engineGenerateCertificates(java.io.InputStream) -> engineGenerateCertificates
    java.security.cert.CRL engineGenerateCRL(java.io.InputStream) -> engineGenerateCRL
    java.util.Collection engineGenerateCRLs(java.io.InputStream) -> engineGenerateCRLs
    java.util.Iterator engineGetCertPathEncodings() -> engineGetCertPathEncodings
    java.security.cert.CertPath engineGenerateCertPath(java.io.InputStream) -> engineGenerateCertPath
    java.security.cert.CertPath engineGenerateCertPath(java.io.InputStream,java.lang.String) -> engineGenerateCertPath
    java.security.cert.CertPath engineGenerateCertPath(java.util.List) -> engineGenerateCertPath
org.spongycastle.jcajce.provider.asymmetric.x509.CertificateFactory$ExCertificateException -> org.spongycastle.jcajce.provider.asymmetric.x509.CertificateFactory$ExCertificateException:
    java.lang.Throwable cause -> b
    org.spongycastle.jcajce.provider.asymmetric.x509.CertificateFactory this$0 -> a
    java.lang.Throwable getCause() -> getCause
org.spongycastle.jcajce.provider.asymmetric.x509.ExtCRLException -> org.spongycastle.jcajce.provider.asymmetric.x509.ExtCRLException:
    java.lang.Throwable cause -> a
    java.lang.Throwable getCause() -> getCause
org.spongycastle.jcajce.provider.asymmetric.x509.KeyFactory -> org.spongycastle.jcajce.provider.asymmetric.x509.KeyFactory:
    java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec) -> engineGeneratePrivate
    java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec) -> engineGeneratePublic
    java.security.spec.KeySpec engineGetKeySpec(java.security.Key,java.lang.Class) -> engineGetKeySpec
    java.security.Key engineTranslateKey(java.security.Key) -> engineTranslateKey
org.spongycastle.jcajce.provider.asymmetric.x509.PEMUtil -> org.spongycastle.jcajce.provider.asymmetric.x509.a:
    java.lang.String _header1 -> a
    java.lang.String _header2 -> b
    java.lang.String _footer1 -> c
    java.lang.String _footer2 -> d
    java.lang.String readLine(java.io.InputStream) -> b
    org.spongycastle.asn1.ASN1Sequence readPEMObject(java.io.InputStream) -> a
org.spongycastle.jcajce.provider.asymmetric.x509.PKIXCertPath -> org.spongycastle.jcajce.provider.asymmetric.x509.b:
    org.spongycastle.jcajce.util.JcaJceHelper helper -> b
    java.util.List certPathEncodings -> a
    java.util.List certificates -> c
    java.util.List sortCerts(java.util.List) -> a
    java.util.Iterator getEncodings() -> getEncodings
    byte[] getEncoded() -> getEncoded
    byte[] getEncoded(java.lang.String) -> getEncoded
    java.util.List getCertificates() -> getCertificates
    org.spongycastle.asn1.ASN1Primitive toASN1Object(java.security.cert.X509Certificate) -> a
    byte[] toDEREncoded(org.spongycastle.asn1.ASN1Encodable) -> a
org.spongycastle.jcajce.provider.asymmetric.x509.X509CRLEntryObject -> org.spongycastle.jcajce.provider.asymmetric.x509.c:
    org.spongycastle.asn1.x509.TBSCertList$CRLEntry c -> a
    org.spongycastle.asn1.x500.X500Name certificateIssuer -> b
    int hashValue -> c
    boolean isHashValueSet -> d
    boolean hasUnsupportedCriticalExtension() -> hasUnsupportedCriticalExtension
    org.spongycastle.asn1.x500.X500Name loadCertificateIssuer(boolean,org.spongycastle.asn1.x500.X500Name) -> a
    javax.security.auth.x500.X500Principal getCertificateIssuer() -> getCertificateIssuer
    java.util.Set getExtensionOIDs(boolean) -> a
    java.util.Set getCriticalExtensionOIDs() -> getCriticalExtensionOIDs
    java.util.Set getNonCriticalExtensionOIDs() -> getNonCriticalExtensionOIDs
    org.spongycastle.asn1.x509.Extension getExtension(org.spongycastle.asn1.ASN1ObjectIdentifier) -> a
    byte[] getExtensionValue(java.lang.String) -> getExtensionValue
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    byte[] getEncoded() -> getEncoded
    java.math.BigInteger getSerialNumber() -> getSerialNumber
    java.util.Date getRevocationDate() -> getRevocationDate
    boolean hasExtensions() -> hasExtensions
    java.lang.String toString() -> toString
org.spongycastle.jcajce.provider.asymmetric.x509.X509CRLObject -> org.spongycastle.jcajce.provider.asymmetric.x509.d:
    org.spongycastle.jcajce.util.JcaJceHelper bcHelper -> a
    org.spongycastle.asn1.x509.CertificateList c -> b
    java.lang.String sigAlgName -> c
    byte[] sigAlgParams -> d
    boolean isIndirect -> e
    boolean isHashCodeSet -> f
    int hashCodeValue -> g
    boolean isIndirectCRL(java.security.cert.X509CRL) -> a
    boolean hasUnsupportedCriticalExtension() -> hasUnsupportedCriticalExtension
    java.util.Set getExtensionOIDs(boolean) -> a
    java.util.Set getCriticalExtensionOIDs() -> getCriticalExtensionOIDs
    java.util.Set getNonCriticalExtensionOIDs() -> getNonCriticalExtensionOIDs
    byte[] getExtensionValue(java.lang.String) -> getExtensionValue
    byte[] getEncoded() -> getEncoded
    void verify(java.security.PublicKey) -> verify
    void verify(java.security.PublicKey,java.lang.String) -> verify
    void doVerify(java.security.PublicKey,java.security.Signature) -> a
    int getVersion() -> getVersion
    java.security.Principal getIssuerDN() -> getIssuerDN
    javax.security.auth.x500.X500Principal getIssuerX500Principal() -> getIssuerX500Principal
    java.util.Date getThisUpdate() -> getThisUpdate
    java.util.Date getNextUpdate() -> getNextUpdate
    java.util.Set loadCRLEntries() -> a
    java.security.cert.X509CRLEntry getRevokedCertificate(java.math.BigInteger) -> getRevokedCertificate
    java.util.Set getRevokedCertificates() -> getRevokedCertificates
    byte[] getTBSCertList() -> getTBSCertList
    byte[] getSignature() -> getSignature
    java.lang.String getSigAlgName() -> getSigAlgName
    java.lang.String getSigAlgOID() -> getSigAlgOID
    byte[] getSigAlgParams() -> getSigAlgParams
    java.lang.String toString() -> toString
    boolean isRevoked(java.security.cert.Certificate) -> isRevoked
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.spongycastle.jcajce.provider.asymmetric.x509.X509CertificateObject -> org.spongycastle.jcajce.provider.asymmetric.x509.e:
    org.spongycastle.jcajce.util.JcaJceHelper bcHelper -> a
    org.spongycastle.asn1.x509.Certificate c -> b
    org.spongycastle.asn1.x509.BasicConstraints basicConstraints -> c
    boolean[] keyUsage -> d
    boolean hashValueSet -> e
    int hashValue -> f
    org.spongycastle.jce.interfaces.PKCS12BagAttributeCarrier attrCarrier -> g
    void checkValidity() -> checkValidity
    void checkValidity(java.util.Date) -> checkValidity
    int getVersion() -> getVersion
    java.math.BigInteger getSerialNumber() -> getSerialNumber
    java.security.Principal getIssuerDN() -> getIssuerDN
    javax.security.auth.x500.X500Principal getIssuerX500Principal() -> getIssuerX500Principal
    java.security.Principal getSubjectDN() -> getSubjectDN
    javax.security.auth.x500.X500Principal getSubjectX500Principal() -> getSubjectX500Principal
    java.util.Date getNotBefore() -> getNotBefore
    java.util.Date getNotAfter() -> getNotAfter
    byte[] getTBSCertificate() -> getTBSCertificate
    byte[] getSignature() -> getSignature
    java.lang.String getSigAlgName() -> getSigAlgName
    java.lang.String getSigAlgOID() -> getSigAlgOID
    byte[] getSigAlgParams() -> getSigAlgParams
    boolean[] getIssuerUniqueID() -> getIssuerUniqueID
    boolean[] getSubjectUniqueID() -> getSubjectUniqueID
    boolean[] getKeyUsage() -> getKeyUsage
    java.util.List getExtendedKeyUsage() -> getExtendedKeyUsage
    int getBasicConstraints() -> getBasicConstraints
    java.util.Collection getSubjectAlternativeNames() -> getSubjectAlternativeNames
    java.util.Collection getIssuerAlternativeNames() -> getIssuerAlternativeNames
    java.util.Set getCriticalExtensionOIDs() -> getCriticalExtensionOIDs
    byte[] getExtensionBytes(java.lang.String) -> a
    byte[] getExtensionValue(java.lang.String) -> getExtensionValue
    java.util.Set getNonCriticalExtensionOIDs() -> getNonCriticalExtensionOIDs
    boolean hasUnsupportedCriticalExtension() -> hasUnsupportedCriticalExtension
    java.security.PublicKey getPublicKey() -> getPublicKey
    byte[] getEncoded() -> getEncoded
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void setBagAttribute(org.spongycastle.asn1.ASN1ObjectIdentifier,org.spongycastle.asn1.ASN1Encodable) -> a
    org.spongycastle.asn1.ASN1Encodable getBagAttribute(org.spongycastle.asn1.ASN1ObjectIdentifier) -> a
    java.util.Enumeration getBagAttributeKeys() -> c
    java.lang.String toString() -> toString
    void verify(java.security.PublicKey) -> verify
    void verify(java.security.PublicKey,java.lang.String) -> verify
    void checkSignature(java.security.PublicKey,java.security.Signature) -> a
    boolean isAlgIdEqual(org.spongycastle.asn1.x509.AlgorithmIdentifier,org.spongycastle.asn1.x509.AlgorithmIdentifier) -> a
    java.util.Collection getAlternativeNames(byte[]) -> a
org.spongycastle.jcajce.provider.asymmetric.x509.X509SignatureUtil -> org.spongycastle.jcajce.provider.asymmetric.x509.f:
    org.spongycastle.asn1.ASN1Null derNull -> a
    void setSignatureParameters(java.security.Signature,org.spongycastle.asn1.ASN1Encodable) -> a
    java.lang.String getSignatureName(org.spongycastle.asn1.x509.AlgorithmIdentifier) -> a
    java.lang.String getDigestAlgName(org.spongycastle.asn1.ASN1ObjectIdentifier) -> a
org.spongycastle.jcajce.provider.config.ConfigurableProvider -> org.spongycastle.jcajce.provider.config.a:
org.spongycastle.jcajce.provider.config.PKCS12StoreParameter -> org.spongycastle.jcajce.provider.config.PKCS12StoreParameter:
org.spongycastle.jcajce.provider.config.ProviderConfiguration -> org.spongycastle.jcajce.provider.config.b:
    org.spongycastle.jce.spec.ECParameterSpec getEcImplicitlyCa() -> a
    javax.crypto.spec.DHParameterSpec getDHDefaultParameters(int) -> a
org.spongycastle.jcajce.provider.config.ProviderConfigurationPermission -> org.spongycastle.jcajce.provider.config.ProviderConfigurationPermission:
    java.lang.String actions -> a
    int permissionMask -> b
    int calculateMask(java.lang.String) -> a
    java.lang.String getActions() -> getActions
    boolean implies(java.security.Permission) -> implies
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.spongycastle.jcajce.provider.digest.BCMessageDigest -> org.spongycastle.jcajce.provider.digest.BCMessageDigest:
    org.spongycastle.crypto.Digest digest -> a
    void engineReset() -> engineReset
    void engineUpdate(byte) -> engineUpdate
    void engineUpdate(byte[],int,int) -> engineUpdate
    byte[] engineDigest() -> engineDigest
org.spongycastle.jcajce.provider.digest.Blake2b -> org.spongycastle.jcajce.provider.digest.Blake2b:
org.spongycastle.jcajce.provider.digest.Blake2b$Blake2b160 -> org.spongycastle.jcajce.provider.digest.Blake2b$Blake2b160:
    java.lang.Object clone() -> clone
org.spongycastle.jcajce.provider.digest.Blake2b$Blake2b256 -> org.spongycastle.jcajce.provider.digest.Blake2b$Blake2b256:
    java.lang.Object clone() -> clone
org.spongycastle.jcajce.provider.digest.Blake2b$Blake2b384 -> org.spongycastle.jcajce.provider.digest.Blake2b$Blake2b384:
    java.lang.Object clone() -> clone
org.spongycastle.jcajce.provider.digest.Blake2b$Blake2b512 -> org.spongycastle.jcajce.provider.digest.Blake2b$Blake2b512:
    java.lang.Object clone() -> clone
org.spongycastle.jcajce.provider.digest.GOST3411 -> org.spongycastle.jcajce.provider.digest.GOST3411:
org.spongycastle.jcajce.provider.digest.GOST3411$Digest -> org.spongycastle.jcajce.provider.digest.GOST3411$Digest:
    java.lang.Object clone() -> clone
org.spongycastle.jcajce.provider.digest.Keccak -> org.spongycastle.jcajce.provider.digest.Keccak:
org.spongycastle.jcajce.provider.digest.Keccak$Digest224 -> org.spongycastle.jcajce.provider.digest.Keccak$Digest224:
org.spongycastle.jcajce.provider.digest.Keccak$Digest256 -> org.spongycastle.jcajce.provider.digest.Keccak$Digest256:
org.spongycastle.jcajce.provider.digest.Keccak$Digest288 -> org.spongycastle.jcajce.provider.digest.Keccak$Digest288:
org.spongycastle.jcajce.provider.digest.Keccak$Digest384 -> org.spongycastle.jcajce.provider.digest.Keccak$Digest384:
org.spongycastle.jcajce.provider.digest.Keccak$Digest512 -> org.spongycastle.jcajce.provider.digest.Keccak$Digest512:
org.spongycastle.jcajce.provider.digest.Keccak$DigestKeccak -> org.spongycastle.jcajce.provider.digest.Keccak$DigestKeccak:
    java.lang.Object clone() -> clone
org.spongycastle.jcajce.provider.digest.MD2 -> org.spongycastle.jcajce.provider.digest.MD2:
org.spongycastle.jcajce.provider.digest.MD2$Digest -> org.spongycastle.jcajce.provider.digest.MD2$Digest:
    java.lang.Object clone() -> clone
org.spongycastle.jcajce.provider.digest.MD4 -> org.spongycastle.jcajce.provider.digest.MD4:
org.spongycastle.jcajce.provider.digest.MD4$Digest -> org.spongycastle.jcajce.provider.digest.MD4$Digest:
    java.lang.Object clone() -> clone
org.spongycastle.jcajce.provider.digest.MD5 -> org.spongycastle.jcajce.provider.digest.MD5:
org.spongycastle.jcajce.provider.digest.MD5$Digest -> org.spongycastle.jcajce.provider.digest.MD5$Digest:
    java.lang.Object clone() -> clone
org.spongycastle.jcajce.provider.digest.RIPEMD128 -> org.spongycastle.jcajce.provider.digest.RIPEMD128:
org.spongycastle.jcajce.provider.digest.RIPEMD128$Digest -> org.spongycastle.jcajce.provider.digest.RIPEMD128$Digest:
    java.lang.Object clone() -> clone
org.spongycastle.jcajce.provider.digest.RIPEMD160 -> org.spongycastle.jcajce.provider.digest.RIPEMD160:
org.spongycastle.jcajce.provider.digest.RIPEMD160$Digest -> org.spongycastle.jcajce.provider.digest.RIPEMD160$Digest:
    java.lang.Object clone() -> clone
org.spongycastle.jcajce.provider.digest.RIPEMD256 -> org.spongycastle.jcajce.provider.digest.RIPEMD256:
org.spongycastle.jcajce.provider.digest.RIPEMD256$Digest -> org.spongycastle.jcajce.provider.digest.RIPEMD256$Digest:
    java.lang.Object clone() -> clone
org.spongycastle.jcajce.provider.digest.RIPEMD320 -> org.spongycastle.jcajce.provider.digest.RIPEMD320:
org.spongycastle.jcajce.provider.digest.RIPEMD320$Digest -> org.spongycastle.jcajce.provider.digest.RIPEMD320$Digest:
    java.lang.Object clone() -> clone
org.spongycastle.jcajce.provider.digest.SHA1 -> org.spongycastle.jcajce.provider.digest.SHA1:
org.spongycastle.jcajce.provider.digest.SHA1$Digest -> org.spongycastle.jcajce.provider.digest.SHA1$Digest:
    java.lang.Object clone() -> clone
org.spongycastle.jcajce.provider.digest.SHA224 -> org.spongycastle.jcajce.provider.digest.SHA224:
org.spongycastle.jcajce.provider.digest.SHA224$Digest -> org.spongycastle.jcajce.provider.digest.SHA224$Digest:
    java.lang.Object clone() -> clone
org.spongycastle.jcajce.provider.digest.SHA256 -> org.spongycastle.jcajce.provider.digest.SHA256:
org.spongycastle.jcajce.provider.digest.SHA256$Digest -> org.spongycastle.jcajce.provider.digest.SHA256$Digest:
    java.lang.Object clone() -> clone
org.spongycastle.jcajce.provider.digest.SHA3 -> org.spongycastle.jcajce.provider.digest.SHA3:
org.spongycastle.jcajce.provider.digest.SHA3$Digest224 -> org.spongycastle.jcajce.provider.digest.SHA3$Digest224:
org.spongycastle.jcajce.provider.digest.SHA3$Digest256 -> org.spongycastle.jcajce.provider.digest.SHA3$Digest256:
org.spongycastle.jcajce.provider.digest.SHA3$Digest384 -> org.spongycastle.jcajce.provider.digest.SHA3$Digest384:
org.spongycastle.jcajce.provider.digest.SHA3$Digest512 -> org.spongycastle.jcajce.provider.digest.SHA3$Digest512:
org.spongycastle.jcajce.provider.digest.SHA3$DigestSHA3 -> org.spongycastle.jcajce.provider.digest.SHA3$DigestSHA3:
    java.lang.Object clone() -> clone
org.spongycastle.jcajce.provider.digest.SHA384 -> org.spongycastle.jcajce.provider.digest.SHA384:
org.spongycastle.jcajce.provider.digest.SHA384$Digest -> org.spongycastle.jcajce.provider.digest.SHA384$Digest:
    java.lang.Object clone() -> clone
org.spongycastle.jcajce.provider.digest.SHA512 -> org.spongycastle.jcajce.provider.digest.SHA512:
org.spongycastle.jcajce.provider.digest.SHA512$Digest -> org.spongycastle.jcajce.provider.digest.SHA512$Digest:
    java.lang.Object clone() -> clone
org.spongycastle.jcajce.provider.digest.SHA512$DigestT -> org.spongycastle.jcajce.provider.digest.SHA512$DigestT:
    java.lang.Object clone() -> clone
org.spongycastle.jcajce.provider.digest.SHA512$DigestT224 -> org.spongycastle.jcajce.provider.digest.SHA512$DigestT224:
org.spongycastle.jcajce.provider.digest.SHA512$DigestT256 -> org.spongycastle.jcajce.provider.digest.SHA512$DigestT256:
org.spongycastle.jcajce.provider.digest.SM3 -> org.spongycastle.jcajce.provider.digest.SM3:
org.spongycastle.jcajce.provider.digest.SM3$Digest -> org.spongycastle.jcajce.provider.digest.SM3$Digest:
    java.lang.Object clone() -> clone
org.spongycastle.jcajce.provider.digest.Skein -> org.spongycastle.jcajce.provider.digest.Skein:
org.spongycastle.jcajce.provider.digest.Skein$DigestSkein1024 -> org.spongycastle.jcajce.provider.digest.Skein$DigestSkein1024:
    java.lang.Object clone() -> clone
org.spongycastle.jcajce.provider.digest.Skein$DigestSkein256 -> org.spongycastle.jcajce.provider.digest.Skein$DigestSkein256:
    java.lang.Object clone() -> clone
org.spongycastle.jcajce.provider.digest.Skein$DigestSkein512 -> org.spongycastle.jcajce.provider.digest.Skein$DigestSkein512:
    java.lang.Object clone() -> clone
org.spongycastle.jcajce.provider.digest.Skein$Digest_1024_1024 -> org.spongycastle.jcajce.provider.digest.Skein$Digest_1024_1024:
org.spongycastle.jcajce.provider.digest.Skein$Digest_1024_384 -> org.spongycastle.jcajce.provider.digest.Skein$Digest_1024_384:
org.spongycastle.jcajce.provider.digest.Skein$Digest_1024_512 -> org.spongycastle.jcajce.provider.digest.Skein$Digest_1024_512:
org.spongycastle.jcajce.provider.digest.Skein$Digest_256_128 -> org.spongycastle.jcajce.provider.digest.Skein$Digest_256_128:
org.spongycastle.jcajce.provider.digest.Skein$Digest_256_160 -> org.spongycastle.jcajce.provider.digest.Skein$Digest_256_160:
org.spongycastle.jcajce.provider.digest.Skein$Digest_256_224 -> org.spongycastle.jcajce.provider.digest.Skein$Digest_256_224:
org.spongycastle.jcajce.provider.digest.Skein$Digest_256_256 -> org.spongycastle.jcajce.provider.digest.Skein$Digest_256_256:
org.spongycastle.jcajce.provider.digest.Skein$Digest_512_128 -> org.spongycastle.jcajce.provider.digest.Skein$Digest_512_128:
org.spongycastle.jcajce.provider.digest.Skein$Digest_512_160 -> org.spongycastle.jcajce.provider.digest.Skein$Digest_512_160:
org.spongycastle.jcajce.provider.digest.Skein$Digest_512_224 -> org.spongycastle.jcajce.provider.digest.Skein$Digest_512_224:
org.spongycastle.jcajce.provider.digest.Skein$Digest_512_256 -> org.spongycastle.jcajce.provider.digest.Skein$Digest_512_256:
org.spongycastle.jcajce.provider.digest.Skein$Digest_512_384 -> org.spongycastle.jcajce.provider.digest.Skein$Digest_512_384:
org.spongycastle.jcajce.provider.digest.Skein$Digest_512_512 -> org.spongycastle.jcajce.provider.digest.Skein$Digest_512_512:
org.spongycastle.jcajce.provider.digest.Tiger -> org.spongycastle.jcajce.provider.digest.Tiger:
org.spongycastle.jcajce.provider.digest.Tiger$Digest -> org.spongycastle.jcajce.provider.digest.Tiger$Digest:
    java.lang.Object clone() -> clone
org.spongycastle.jcajce.provider.digest.Whirlpool -> org.spongycastle.jcajce.provider.digest.Whirlpool:
org.spongycastle.jcajce.provider.digest.Whirlpool$Digest -> org.spongycastle.jcajce.provider.digest.Whirlpool$Digest:
    java.lang.Object clone() -> clone
org.spongycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi -> org.spongycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi:
    java.util.Hashtable table -> a
    java.security.SecureRandom random -> b
    int version -> c
    org.spongycastle.jcajce.util.JcaJceHelper helper -> d
    void encodeCertificate(java.security.cert.Certificate,java.io.DataOutputStream) -> a
    java.security.cert.Certificate decodeCertificate(java.io.DataInputStream) -> a
    void encodeKey(java.security.Key,java.io.DataOutputStream) -> a
    java.security.Key decodeKey(java.io.DataInputStream) -> b
    javax.crypto.Cipher makePBECipher(java.lang.String,int,char[],byte[],int) -> a
    java.util.Enumeration engineAliases() -> engineAliases
    boolean engineContainsAlias(java.lang.String) -> engineContainsAlias
    void engineDeleteEntry(java.lang.String) -> engineDeleteEntry
    java.security.cert.Certificate engineGetCertificate(java.lang.String) -> engineGetCertificate
    java.lang.String engineGetCertificateAlias(java.security.cert.Certificate) -> engineGetCertificateAlias
    java.security.cert.Certificate[] engineGetCertificateChain(java.lang.String) -> engineGetCertificateChain
    java.util.Date engineGetCreationDate(java.lang.String) -> engineGetCreationDate
    java.security.Key engineGetKey(java.lang.String,char[]) -> engineGetKey
    boolean engineIsCertificateEntry(java.lang.String) -> engineIsCertificateEntry
    boolean engineIsKeyEntry(java.lang.String) -> engineIsKeyEntry
    void engineSetCertificateEntry(java.lang.String,java.security.cert.Certificate) -> engineSetCertificateEntry
    void engineSetKeyEntry(java.lang.String,byte[],java.security.cert.Certificate[]) -> engineSetKeyEntry
    void engineSetKeyEntry(java.lang.String,java.security.Key,char[],java.security.cert.Certificate[]) -> engineSetKeyEntry
    int engineSize() -> engineSize
    void loadStore(java.io.InputStream) -> a
    void saveStore(java.io.OutputStream) -> a
    void engineLoad(java.io.InputStream,char[]) -> engineLoad
    void engineStore(java.io.OutputStream,char[]) -> engineStore
    void access$000(org.spongycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi,java.security.Key,java.io.DataOutputStream) -> a
    java.security.Key access$100(org.spongycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi,java.io.DataInputStream) -> a
org.spongycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi$BouncyCastleStore -> org.spongycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi$BouncyCastleStore:
    void engineLoad(java.io.InputStream,char[]) -> engineLoad
    void engineStore(java.io.OutputStream,char[]) -> engineStore
org.spongycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi$Std -> org.spongycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi$Std:
org.spongycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi$StoreEntry -> org.spongycastle.jcajce.provider.keystore.bc.a:
    int type -> a
    java.lang.String alias -> b
    java.lang.Object obj -> c
    java.security.cert.Certificate[] certChain -> d
    java.util.Date date -> e
    org.spongycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi this$0 -> f
    int getType() -> a
    java.lang.String getAlias() -> b
    java.lang.Object getObject() -> c
    java.lang.Object getObject(char[]) -> a
    java.security.cert.Certificate[] getCertificateChain() -> d
    java.util.Date getDate() -> e
org.spongycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi$Version1 -> org.spongycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi$Version1:
org.spongycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi -> org.spongycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi:
    org.spongycastle.jcajce.util.JcaJceHelper helper -> bI
    org.spongycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi$DefaultSecretKeyProvider keySizeProvider -> bJ
    org.spongycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi$IgnoresCaseHashtable keys -> bK
    java.util.Hashtable localIds -> bL
    org.spongycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi$IgnoresCaseHashtable certs -> bM
    java.util.Hashtable chainCerts -> bN
    java.util.Hashtable keyCerts -> bO
    java.security.SecureRandom random -> bH
    java.security.cert.CertificateFactory certFact -> bP
    org.spongycastle.asn1.ASN1ObjectIdentifier keyAlgorithm -> bQ
    org.spongycastle.asn1.ASN1ObjectIdentifier certAlgorithm -> bR
    org.spongycastle.asn1.x509.SubjectKeyIdentifier createSubjectKeyId(java.security.PublicKey) -> a
    byte[] getDigest(org.spongycastle.asn1.x509.SubjectPublicKeyInfo) -> a
    java.util.Enumeration engineAliases() -> engineAliases
    boolean engineContainsAlias(java.lang.String) -> engineContainsAlias
    void engineDeleteEntry(java.lang.String) -> engineDeleteEntry
    java.security.cert.Certificate engineGetCertificate(java.lang.String) -> engineGetCertificate
    java.lang.String engineGetCertificateAlias(java.security.cert.Certificate) -> engineGetCertificateAlias
    java.security.cert.Certificate[] engineGetCertificateChain(java.lang.String) -> engineGetCertificateChain
    java.util.Date engineGetCreationDate(java.lang.String) -> engineGetCreationDate
    java.security.Key engineGetKey(java.lang.String,char[]) -> engineGetKey
    boolean engineIsCertificateEntry(java.lang.String) -> engineIsCertificateEntry
    boolean engineIsKeyEntry(java.lang.String) -> engineIsKeyEntry
    void engineSetCertificateEntry(java.lang.String,java.security.cert.Certificate) -> engineSetCertificateEntry
    void engineSetKeyEntry(java.lang.String,byte[],java.security.cert.Certificate[]) -> engineSetKeyEntry
    void engineSetKeyEntry(java.lang.String,java.security.Key,char[],java.security.cert.Certificate[]) -> engineSetKeyEntry
    int engineSize() -> engineSize
    java.security.PrivateKey unwrapKey(org.spongycastle.asn1.x509.AlgorithmIdentifier,byte[],char[],boolean) -> a
    byte[] wrapKey(java.lang.String,java.security.Key,org.spongycastle.asn1.pkcs.PKCS12PBEParams,char[]) -> a
    byte[] cryptData(boolean,org.spongycastle.asn1.x509.AlgorithmIdentifier,char[],boolean,byte[]) -> a
    javax.crypto.Cipher createCipher(int,char[],org.spongycastle.asn1.x509.AlgorithmIdentifier) -> a
    void engineLoad(java.io.InputStream,char[]) -> engineLoad
    void engineStore(java.security.KeyStore$LoadStoreParameter) -> engineStore
    void engineStore(java.io.OutputStream,char[]) -> engineStore
    void doStore(java.io.OutputStream,char[],boolean) -> a
    java.util.Set getUsedCertificateSet() -> a
    byte[] calculatePbeMac(org.spongycastle.asn1.ASN1ObjectIdentifier,byte[],int,char[],boolean,byte[]) -> a
    org.spongycastle.asn1.x509.SubjectKeyIdentifier access$100(org.spongycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi,java.security.PublicKey) -> a
org.spongycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi$1 -> org.spongycastle.jcajce.provider.keystore.pkcs12.a:
org.spongycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi$BCPKCS12KeyStore -> org.spongycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi$BCPKCS12KeyStore:
org.spongycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi$BCPKCS12KeyStore3DES -> org.spongycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi$BCPKCS12KeyStore3DES:
org.spongycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi$CertId -> org.spongycastle.jcajce.provider.keystore.pkcs12.b:
    byte[] id -> a
    org.spongycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi this$0 -> b
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
org.spongycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi$DefPKCS12KeyStore -> org.spongycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi$DefPKCS12KeyStore:
org.spongycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi$DefPKCS12KeyStore3DES -> org.spongycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi$DefPKCS12KeyStore3DES:
org.spongycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi$DefaultSecretKeyProvider -> org.spongycastle.jcajce.provider.keystore.pkcs12.c:
    java.util.Map KEY_SIZES -> a
    int getKeySize(org.spongycastle.asn1.x509.AlgorithmIdentifier) -> a
org.spongycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi$IgnoresCaseHashtable -> org.spongycastle.jcajce.provider.keystore.pkcs12.d:
    java.util.Hashtable orig -> a
    java.util.Hashtable keys -> b
    void put(java.lang.String,java.lang.Object) -> a
    java.util.Enumeration keys() -> a
    java.lang.Object remove(java.lang.String) -> a
    java.lang.Object get(java.lang.String) -> b
    java.util.Enumeration elements() -> b
org.spongycastle.jcajce.provider.symmetric.AES -> org.spongycastle.jcajce.provider.symmetric.AES:
    java.lang.Class gcmSpecClass -> a
    java.lang.Class lookup(java.lang.String) -> a
org.spongycastle.jcajce.provider.symmetric.AES$AlgParamGen -> org.spongycastle.jcajce.provider.symmetric.AES$AlgParamGen:
    void engineInit(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> engineInit
    java.security.AlgorithmParameters engineGenerateParameters() -> engineGenerateParameters
org.spongycastle.jcajce.provider.symmetric.AES$AlgParamGenCCM -> org.spongycastle.jcajce.provider.symmetric.AES$AlgParamGenCCM:
    void engineInit(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> engineInit
    java.security.AlgorithmParameters engineGenerateParameters() -> engineGenerateParameters
org.spongycastle.jcajce.provider.symmetric.AES$AlgParamGenGCM -> org.spongycastle.jcajce.provider.symmetric.AES$AlgParamGenGCM:
    void engineInit(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> engineInit
    java.security.AlgorithmParameters engineGenerateParameters() -> engineGenerateParameters
org.spongycastle.jcajce.provider.symmetric.AES$AlgParams -> org.spongycastle.jcajce.provider.symmetric.AES$AlgParams:
    java.lang.String engineToString() -> engineToString
org.spongycastle.jcajce.provider.symmetric.AES$AlgParamsCCM -> org.spongycastle.jcajce.provider.symmetric.AES$AlgParamsCCM:
    org.spongycastle.asn1.cms.CCMParameters ccmParams -> a
    void engineInit(java.security.spec.AlgorithmParameterSpec) -> engineInit
    void engineInit(byte[]) -> engineInit
    void engineInit(byte[],java.lang.String) -> engineInit
    byte[] engineGetEncoded() -> engineGetEncoded
    byte[] engineGetEncoded(java.lang.String) -> engineGetEncoded
    java.lang.String engineToString() -> engineToString
    java.security.spec.AlgorithmParameterSpec localEngineGetParameterSpec(java.lang.Class) -> a
org.spongycastle.jcajce.provider.symmetric.AES$AlgParamsGCM -> org.spongycastle.jcajce.provider.symmetric.AES$AlgParamsGCM:
    org.spongycastle.asn1.cms.GCMParameters gcmParams -> a
    void engineInit(java.security.spec.AlgorithmParameterSpec) -> engineInit
    void engineInit(byte[]) -> engineInit
    void engineInit(byte[],java.lang.String) -> engineInit
    byte[] engineGetEncoded() -> engineGetEncoded
    byte[] engineGetEncoded(java.lang.String) -> engineGetEncoded
    java.lang.String engineToString() -> engineToString
    java.security.spec.AlgorithmParameterSpec localEngineGetParameterSpec(java.lang.Class) -> a
org.spongycastle.jcajce.provider.symmetric.Blowfish -> org.spongycastle.jcajce.provider.symmetric.Blowfish:
org.spongycastle.jcajce.provider.symmetric.Blowfish$AlgParams -> org.spongycastle.jcajce.provider.symmetric.Blowfish$AlgParams:
    java.lang.String engineToString() -> engineToString
org.spongycastle.jcajce.provider.symmetric.CAST5 -> org.spongycastle.jcajce.provider.symmetric.CAST5:
org.spongycastle.jcajce.provider.symmetric.CAST5$AlgParamGen -> org.spongycastle.jcajce.provider.symmetric.CAST5$AlgParamGen:
    void engineInit(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> engineInit
    java.security.AlgorithmParameters engineGenerateParameters() -> engineGenerateParameters
org.spongycastle.jcajce.provider.symmetric.CAST5$AlgParams -> org.spongycastle.jcajce.provider.symmetric.CAST5$AlgParams:
    byte[] iv -> a
    int keyLength -> b
    byte[] engineGetEncoded() -> engineGetEncoded
    byte[] engineGetEncoded(java.lang.String) -> engineGetEncoded
    java.security.spec.AlgorithmParameterSpec localEngineGetParameterSpec(java.lang.Class) -> a
    void engineInit(java.security.spec.AlgorithmParameterSpec) -> engineInit
    void engineInit(byte[]) -> engineInit
    void engineInit(byte[],java.lang.String) -> engineInit
    java.lang.String engineToString() -> engineToString
org.spongycastle.jcajce.provider.symmetric.Camellia -> org.spongycastle.jcajce.provider.symmetric.Camellia:
org.spongycastle.jcajce.provider.symmetric.Camellia$AlgParamGen -> org.spongycastle.jcajce.provider.symmetric.Camellia$AlgParamGen:
    void engineInit(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> engineInit
    java.security.AlgorithmParameters engineGenerateParameters() -> engineGenerateParameters
org.spongycastle.jcajce.provider.symmetric.Camellia$AlgParams -> org.spongycastle.jcajce.provider.symmetric.Camellia$AlgParams:
    java.lang.String engineToString() -> engineToString
org.spongycastle.jcajce.provider.symmetric.DES -> org.spongycastle.jcajce.provider.symmetric.DES:
org.spongycastle.jcajce.provider.symmetric.DES$AlgParamGen -> org.spongycastle.jcajce.provider.symmetric.DES$AlgParamGen:
    void engineInit(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> engineInit
    java.security.AlgorithmParameters engineGenerateParameters() -> engineGenerateParameters
org.spongycastle.jcajce.provider.symmetric.DESede -> org.spongycastle.jcajce.provider.symmetric.DESede:
org.spongycastle.jcajce.provider.symmetric.DESede$AlgParamGen -> org.spongycastle.jcajce.provider.symmetric.DESede$AlgParamGen:
    void engineInit(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> engineInit
    java.security.AlgorithmParameters engineGenerateParameters() -> engineGenerateParameters
org.spongycastle.jcajce.provider.symmetric.GOST28147 -> org.spongycastle.jcajce.provider.symmetric.GOST28147:
org.spongycastle.jcajce.provider.symmetric.GOST28147$AlgParamGen -> org.spongycastle.jcajce.provider.symmetric.GOST28147$AlgParamGen:
    void engineInit(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> engineInit
    java.security.AlgorithmParameters engineGenerateParameters() -> engineGenerateParameters
org.spongycastle.jcajce.provider.symmetric.GOST28147$AlgParams -> org.spongycastle.jcajce.provider.symmetric.GOST28147$AlgParams:
    java.lang.String engineToString() -> engineToString
org.spongycastle.jcajce.provider.symmetric.GcmSpecUtil -> org.spongycastle.jcajce.provider.symmetric.a:
    java.lang.Class gcmSpecClass -> a
    boolean gcmSpecExists() -> a
    boolean isGcmSpec(java.security.spec.AlgorithmParameterSpec) -> a
    boolean isGcmSpec(java.lang.Class) -> a
    java.security.spec.AlgorithmParameterSpec extractGcmSpec(org.spongycastle.asn1.ASN1Primitive) -> a
    org.spongycastle.asn1.cms.GCMParameters extractGcmParameters(java.security.spec.AlgorithmParameterSpec) -> b
    java.lang.Class lookup(java.lang.String) -> a
org.spongycastle.jcajce.provider.symmetric.IDEA -> org.spongycastle.jcajce.provider.symmetric.IDEA:
org.spongycastle.jcajce.provider.symmetric.IDEA$AlgParamGen -> org.spongycastle.jcajce.provider.symmetric.IDEA$AlgParamGen:
    void engineInit(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> engineInit
    java.security.AlgorithmParameters engineGenerateParameters() -> engineGenerateParameters
org.spongycastle.jcajce.provider.symmetric.IDEA$AlgParams -> org.spongycastle.jcajce.provider.symmetric.IDEA$AlgParams:
    byte[] iv -> a
    byte[] engineGetEncoded() -> engineGetEncoded
    byte[] engineGetEncoded(java.lang.String) -> engineGetEncoded
    java.security.spec.AlgorithmParameterSpec localEngineGetParameterSpec(java.lang.Class) -> a
    void engineInit(java.security.spec.AlgorithmParameterSpec) -> engineInit
    void engineInit(byte[]) -> engineInit
    void engineInit(byte[],java.lang.String) -> engineInit
    java.lang.String engineToString() -> engineToString
org.spongycastle.jcajce.provider.symmetric.Noekeon -> org.spongycastle.jcajce.provider.symmetric.Noekeon:
org.spongycastle.jcajce.provider.symmetric.Noekeon$AlgParamGen -> org.spongycastle.jcajce.provider.symmetric.Noekeon$AlgParamGen:
    void engineInit(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> engineInit
    java.security.AlgorithmParameters engineGenerateParameters() -> engineGenerateParameters
org.spongycastle.jcajce.provider.symmetric.Noekeon$AlgParams -> org.spongycastle.jcajce.provider.symmetric.Noekeon$AlgParams:
    java.lang.String engineToString() -> engineToString
org.spongycastle.jcajce.provider.symmetric.PBEPBKDF2 -> org.spongycastle.jcajce.provider.symmetric.PBEPBKDF2:
org.spongycastle.jcajce.provider.symmetric.PBEPBKDF2$AlgParams -> org.spongycastle.jcajce.provider.symmetric.PBEPBKDF2$AlgParams:
    org.spongycastle.asn1.pkcs.PBKDF2Params params -> a
    byte[] engineGetEncoded() -> engineGetEncoded
    byte[] engineGetEncoded(java.lang.String) -> engineGetEncoded
    java.security.spec.AlgorithmParameterSpec localEngineGetParameterSpec(java.lang.Class) -> a
    void engineInit(java.security.spec.AlgorithmParameterSpec) -> engineInit
    void engineInit(byte[]) -> engineInit
    void engineInit(byte[],java.lang.String) -> engineInit
    java.lang.String engineToString() -> engineToString
org.spongycastle.jcajce.provider.symmetric.PBEPKCS12 -> org.spongycastle.jcajce.provider.symmetric.PBEPKCS12:
org.spongycastle.jcajce.provider.symmetric.PBEPKCS12$AlgParams -> org.spongycastle.jcajce.provider.symmetric.PBEPKCS12$AlgParams:
    org.spongycastle.asn1.pkcs.PKCS12PBEParams params -> a
    byte[] engineGetEncoded() -> engineGetEncoded
    byte[] engineGetEncoded(java.lang.String) -> engineGetEncoded
    java.security.spec.AlgorithmParameterSpec localEngineGetParameterSpec(java.lang.Class) -> a
    void engineInit(java.security.spec.AlgorithmParameterSpec) -> engineInit
    void engineInit(byte[]) -> engineInit
    void engineInit(byte[],java.lang.String) -> engineInit
    java.lang.String engineToString() -> engineToString
org.spongycastle.jcajce.provider.symmetric.RC2 -> org.spongycastle.jcajce.provider.symmetric.RC2:
org.spongycastle.jcajce.provider.symmetric.RC2$AlgParamGen -> org.spongycastle.jcajce.provider.symmetric.RC2$AlgParamGen:
    javax.crypto.spec.RC2ParameterSpec spec -> a
    void engineInit(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> engineInit
    java.security.AlgorithmParameters engineGenerateParameters() -> engineGenerateParameters
org.spongycastle.jcajce.provider.symmetric.RC2$AlgParams -> org.spongycastle.jcajce.provider.symmetric.RC2$AlgParams:
    short[] table -> a
    short[] ekb -> b
    byte[] iv -> c
    int parameterVersion -> d
    byte[] engineGetEncoded() -> engineGetEncoded
    byte[] engineGetEncoded(java.lang.String) -> engineGetEncoded
    java.security.spec.AlgorithmParameterSpec localEngineGetParameterSpec(java.lang.Class) -> a
    void engineInit(java.security.spec.AlgorithmParameterSpec) -> engineInit
    void engineInit(byte[]) -> engineInit
    void engineInit(byte[],java.lang.String) -> engineInit
    java.lang.String engineToString() -> engineToString
org.spongycastle.jcajce.provider.symmetric.RC5 -> org.spongycastle.jcajce.provider.symmetric.RC5:
org.spongycastle.jcajce.provider.symmetric.RC5$AlgParamGen -> org.spongycastle.jcajce.provider.symmetric.RC5$AlgParamGen:
    void engineInit(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> engineInit
    java.security.AlgorithmParameters engineGenerateParameters() -> engineGenerateParameters
org.spongycastle.jcajce.provider.symmetric.RC5$AlgParams -> org.spongycastle.jcajce.provider.symmetric.RC5$AlgParams:
    java.lang.String engineToString() -> engineToString
org.spongycastle.jcajce.provider.symmetric.RC6 -> org.spongycastle.jcajce.provider.symmetric.RC6:
org.spongycastle.jcajce.provider.symmetric.RC6$AlgParamGen -> org.spongycastle.jcajce.provider.symmetric.RC6$AlgParamGen:
    void engineInit(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> engineInit
    java.security.AlgorithmParameters engineGenerateParameters() -> engineGenerateParameters
org.spongycastle.jcajce.provider.symmetric.RC6$AlgParams -> org.spongycastle.jcajce.provider.symmetric.RC6$AlgParams:
    java.lang.String engineToString() -> engineToString
org.spongycastle.jcajce.provider.symmetric.Rijndael -> org.spongycastle.jcajce.provider.symmetric.Rijndael:
org.spongycastle.jcajce.provider.symmetric.Rijndael$AlgParams -> org.spongycastle.jcajce.provider.symmetric.Rijndael$AlgParams:
    java.lang.String engineToString() -> engineToString
org.spongycastle.jcajce.provider.symmetric.SEED -> org.spongycastle.jcajce.provider.symmetric.SEED:
org.spongycastle.jcajce.provider.symmetric.SEED$AlgParamGen -> org.spongycastle.jcajce.provider.symmetric.SEED$AlgParamGen:
    void engineInit(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> engineInit
    java.security.AlgorithmParameters engineGenerateParameters() -> engineGenerateParameters
org.spongycastle.jcajce.provider.symmetric.SEED$AlgParams -> org.spongycastle.jcajce.provider.symmetric.SEED$AlgParams:
    java.lang.String engineToString() -> engineToString
org.spongycastle.jcajce.provider.symmetric.SM4 -> org.spongycastle.jcajce.provider.symmetric.SM4:
org.spongycastle.jcajce.provider.symmetric.SM4$AlgParamGen -> org.spongycastle.jcajce.provider.symmetric.SM4$AlgParamGen:
    void engineInit(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> engineInit
    java.security.AlgorithmParameters engineGenerateParameters() -> engineGenerateParameters
org.spongycastle.jcajce.provider.symmetric.SM4$AlgParams -> org.spongycastle.jcajce.provider.symmetric.SM4$AlgParams:
    java.lang.String engineToString() -> engineToString
org.spongycastle.jcajce.provider.symmetric.Serpent -> org.spongycastle.jcajce.provider.symmetric.Serpent:
org.spongycastle.jcajce.provider.symmetric.Serpent$AlgParams -> org.spongycastle.jcajce.provider.symmetric.Serpent$AlgParams:
    java.lang.String engineToString() -> engineToString
org.spongycastle.jcajce.provider.symmetric.Serpent$TAlgParams -> org.spongycastle.jcajce.provider.symmetric.Serpent$TAlgParams:
    java.lang.String engineToString() -> engineToString
org.spongycastle.jcajce.provider.symmetric.Shacal2 -> org.spongycastle.jcajce.provider.symmetric.Shacal2:
org.spongycastle.jcajce.provider.symmetric.Shacal2$AlgParamGen -> org.spongycastle.jcajce.provider.symmetric.Shacal2$AlgParamGen:
    void engineInit(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> engineInit
    java.security.AlgorithmParameters engineGenerateParameters() -> engineGenerateParameters
org.spongycastle.jcajce.provider.symmetric.Shacal2$AlgParams -> org.spongycastle.jcajce.provider.symmetric.Shacal2$AlgParams:
    java.lang.String engineToString() -> engineToString
org.spongycastle.jcajce.provider.symmetric.Skipjack -> org.spongycastle.jcajce.provider.symmetric.Skipjack:
org.spongycastle.jcajce.provider.symmetric.Skipjack$AlgParams -> org.spongycastle.jcajce.provider.symmetric.Skipjack$AlgParams:
    java.lang.String engineToString() -> engineToString
org.spongycastle.jcajce.provider.symmetric.TEA -> org.spongycastle.jcajce.provider.symmetric.TEA:
org.spongycastle.jcajce.provider.symmetric.TEA$AlgParams -> org.spongycastle.jcajce.provider.symmetric.TEA$AlgParams:
    java.lang.String engineToString() -> engineToString
org.spongycastle.jcajce.provider.symmetric.Threefish -> org.spongycastle.jcajce.provider.symmetric.Threefish:
org.spongycastle.jcajce.provider.symmetric.Threefish$AlgParams_1024 -> org.spongycastle.jcajce.provider.symmetric.Threefish$AlgParams_1024:
    java.lang.String engineToString() -> engineToString
org.spongycastle.jcajce.provider.symmetric.Threefish$AlgParams_256 -> org.spongycastle.jcajce.provider.symmetric.Threefish$AlgParams_256:
    java.lang.String engineToString() -> engineToString
org.spongycastle.jcajce.provider.symmetric.Threefish$AlgParams_512 -> org.spongycastle.jcajce.provider.symmetric.Threefish$AlgParams_512:
    java.lang.String engineToString() -> engineToString
org.spongycastle.jcajce.provider.symmetric.Twofish -> org.spongycastle.jcajce.provider.symmetric.Twofish:
org.spongycastle.jcajce.provider.symmetric.Twofish$AlgParams -> org.spongycastle.jcajce.provider.symmetric.Twofish$AlgParams:
    java.lang.String engineToString() -> engineToString
org.spongycastle.jcajce.provider.symmetric.XTEA -> org.spongycastle.jcajce.provider.symmetric.XTEA:
org.spongycastle.jcajce.provider.symmetric.XTEA$AlgParams -> org.spongycastle.jcajce.provider.symmetric.XTEA$AlgParams:
    java.lang.String engineToString() -> engineToString
org.spongycastle.jcajce.provider.symmetric.util.BaseAlgorithmParameterGenerator -> org.spongycastle.jcajce.provider.symmetric.util.BaseAlgorithmParameterGenerator:
    org.spongycastle.jcajce.util.JcaJceHelper helper -> a
    java.security.SecureRandom random -> b
    int strength -> c
    java.security.AlgorithmParameters createParametersInstance(java.lang.String) -> a
    void engineInit(int,java.security.SecureRandom) -> engineInit
org.spongycastle.jcajce.provider.symmetric.util.BaseAlgorithmParameters -> org.spongycastle.jcajce.provider.symmetric.util.BaseAlgorithmParameters:
    boolean isASN1FormatString(java.lang.String) -> a
    java.security.spec.AlgorithmParameterSpec engineGetParameterSpec(java.lang.Class) -> engineGetParameterSpec
    java.security.spec.AlgorithmParameterSpec localEngineGetParameterSpec(java.lang.Class) -> a
org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher -> org.spongycastle.jcajce.provider.symmetric.util.a:
    java.lang.Class gcmSpecClass -> a
    java.lang.Class lookup(java.lang.String) -> a
org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$1 -> org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher$1:
    java.lang.Exception val$e -> a
    java.lang.Throwable getCause() -> getCause
org.spongycastle.jcajce.provider.symmetric.util.BaseWrapCipher -> org.spongycastle.jcajce.provider.symmetric.util.b:
org.spongycastle.jcajce.provider.symmetric.util.IvAlgorithmParameters -> org.spongycastle.jcajce.provider.symmetric.util.IvAlgorithmParameters:
    byte[] iv -> a
    byte[] engineGetEncoded() -> engineGetEncoded
    byte[] engineGetEncoded(java.lang.String) -> engineGetEncoded
    java.security.spec.AlgorithmParameterSpec localEngineGetParameterSpec(java.lang.Class) -> a
    void engineInit(java.security.spec.AlgorithmParameterSpec) -> engineInit
    void engineInit(byte[]) -> engineInit
    void engineInit(byte[],java.lang.String) -> engineInit
    java.lang.String engineToString() -> engineToString
org.spongycastle.jcajce.provider.util.AlgorithmProvider -> org.spongycastle.jcajce.provider.a.a:
    void configure(org.spongycastle.jcajce.provider.config.ConfigurableProvider) -> a
org.spongycastle.jcajce.provider.util.AsymmetricKeyInfoConverter -> org.spongycastle.jcajce.provider.a.b:
    java.security.PrivateKey generatePrivate(org.spongycastle.asn1.pkcs.PrivateKeyInfo) -> a
    java.security.PublicKey generatePublic(org.spongycastle.asn1.x509.SubjectPublicKeyInfo) -> a
org.spongycastle.jcajce.provider.util.DigestFactory -> org.spongycastle.jcajce.provider.a.c:
    java.util.Set md5 -> a
    java.util.Set sha1 -> b
    java.util.Set sha224 -> c
    java.util.Set sha256 -> d
    java.util.Set sha384 -> e
    java.util.Set sha512 -> f
    java.util.Set sha512_224 -> g
    java.util.Set sha512_256 -> h
    java.util.Map oids -> i
    org.spongycastle.crypto.Digest getDigest(java.lang.String) -> a
    boolean isSameDigest(java.lang.String,java.lang.String) -> a
    org.spongycastle.asn1.ASN1ObjectIdentifier getOID(java.lang.String) -> b
org.spongycastle.jcajce.spec.GOST28147ParameterSpec -> org.spongycastle.jcajce.b.a:
    byte[] iv -> a
    byte[] sBox -> b
    java.util.Map oidMappings -> c
    java.lang.String getName(org.spongycastle.asn1.ASN1ObjectIdentifier) -> a
org.spongycastle.jcajce.spec.PBKDF2KeySpec -> org.spongycastle.jcajce.b.b:
    org.spongycastle.asn1.x509.AlgorithmIdentifier prf -> a
org.spongycastle.jcajce.util.AlgorithmParametersUtils -> org.spongycastle.jcajce.c.a:
    void loadParameters(java.security.AlgorithmParameters,org.spongycastle.asn1.ASN1Encodable) -> a
org.spongycastle.jcajce.util.BCJcaJceHelper -> org.spongycastle.jcajce.c.b:
    java.security.Provider getBouncyCastleProvider() -> a
org.spongycastle.jcajce.util.DefaultJcaJceHelper -> org.spongycastle.jcajce.c.c:
    javax.crypto.Cipher createCipher(java.lang.String) -> a
    javax.crypto.Mac createMac(java.lang.String) -> b
    java.security.AlgorithmParameters createAlgorithmParameters(java.lang.String) -> c
    java.security.KeyFactory createKeyFactory(java.lang.String) -> d
    javax.crypto.SecretKeyFactory createSecretKeyFactory(java.lang.String) -> e
    java.security.Signature createSignature(java.lang.String) -> f
    java.security.cert.CertificateFactory createCertificateFactory(java.lang.String) -> g
org.spongycastle.jcajce.util.JcaJceHelper -> org.spongycastle.jcajce.c.d:
    javax.crypto.Cipher createCipher(java.lang.String) -> a
    javax.crypto.Mac createMac(java.lang.String) -> b
    java.security.AlgorithmParameters createAlgorithmParameters(java.lang.String) -> c
    java.security.KeyFactory createKeyFactory(java.lang.String) -> d
    javax.crypto.SecretKeyFactory createSecretKeyFactory(java.lang.String) -> e
    java.security.Signature createSignature(java.lang.String) -> f
    java.security.cert.CertificateFactory createCertificateFactory(java.lang.String) -> g
org.spongycastle.jcajce.util.ProviderJcaJceHelper -> org.spongycastle.jcajce.c.e:
    java.security.Provider provider -> a
    javax.crypto.Cipher createCipher(java.lang.String) -> a
    javax.crypto.Mac createMac(java.lang.String) -> b
    java.security.AlgorithmParameters createAlgorithmParameters(java.lang.String) -> c
    java.security.KeyFactory createKeyFactory(java.lang.String) -> d
    javax.crypto.SecretKeyFactory createSecretKeyFactory(java.lang.String) -> e
    java.security.Signature createSignature(java.lang.String) -> f
    java.security.cert.CertificateFactory createCertificateFactory(java.lang.String) -> g
org.spongycastle.jce.ECGOST3410NamedCurveTable -> org.spongycastle.jce.a:
    org.spongycastle.jce.spec.ECNamedCurveParameterSpec getParameterSpec(java.lang.String) -> a
org.spongycastle.jce.ECNamedCurveTable -> org.spongycastle.jce.b:
    org.spongycastle.jce.spec.ECNamedCurveParameterSpec getParameterSpec(java.lang.String) -> a
org.spongycastle.jce.ECPointUtil -> org.spongycastle.jce.c:
    java.security.spec.ECPoint decodePoint(java.security.spec.EllipticCurve,byte[]) -> a
org.spongycastle.jce.X509Principal -> org.spongycastle.jce.X509Principal:
    java.lang.String getName() -> getName
    byte[] getEncoded() -> getEncoded
org.spongycastle.jce.exception.ExtCertPathBuilderException -> org.spongycastle.jce.exception.ExtCertPathBuilderException:
    java.lang.Throwable cause -> a
    java.lang.Throwable getCause() -> getCause
org.spongycastle.jce.exception.ExtCertPathValidatorException -> org.spongycastle.jce.exception.ExtCertPathValidatorException:
    java.lang.Throwable cause -> a
    java.lang.Throwable getCause() -> getCause
org.spongycastle.jce.exception.ExtCertificateEncodingException -> org.spongycastle.jce.exception.ExtCertificateEncodingException:
    java.lang.Throwable cause -> a
    java.lang.Throwable getCause() -> getCause
org.spongycastle.jce.interfaces.ECKey -> org.spongycastle.jce.interfaces.a:
    org.spongycastle.jce.spec.ECParameterSpec getParameters() -> a
org.spongycastle.jce.interfaces.ECPrivateKey -> org.spongycastle.jce.interfaces.ECPrivateKey:
    java.math.BigInteger getD() -> d
org.spongycastle.jce.interfaces.ECPublicKey -> org.spongycastle.jce.interfaces.ECPublicKey:
    org.spongycastle.math.ec.ECPoint getQ() -> c
org.spongycastle.jce.interfaces.ElGamalKey -> org.spongycastle.jce.interfaces.b:
    org.spongycastle.jce.spec.ElGamalParameterSpec getParameters() -> a
org.spongycastle.jce.interfaces.ElGamalPrivateKey -> org.spongycastle.jce.interfaces.c:
    java.math.BigInteger getX() -> d
org.spongycastle.jce.interfaces.ElGamalPublicKey -> org.spongycastle.jce.interfaces.d:
    java.math.BigInteger getY() -> c
org.spongycastle.jce.interfaces.GOST3410Key -> org.spongycastle.jce.interfaces.e:
    org.spongycastle.jce.interfaces.GOST3410Params getParameters() -> a
org.spongycastle.jce.interfaces.GOST3410Params -> org.spongycastle.jce.interfaces.f:
    java.lang.String getPublicKeyParamSetOID() -> a
    java.lang.String getDigestParamSetOID() -> b
    java.lang.String getEncryptionParamSetOID() -> c
    org.spongycastle.jce.spec.GOST3410PublicKeyParameterSetSpec getPublicKeyParameters() -> d
org.spongycastle.jce.interfaces.GOST3410PrivateKey -> org.spongycastle.jce.interfaces.GOST3410PrivateKey:
    java.math.BigInteger getX() -> b
org.spongycastle.jce.interfaces.GOST3410PublicKey -> org.spongycastle.jce.interfaces.GOST3410PublicKey:
    java.math.BigInteger getY() -> b
org.spongycastle.jce.interfaces.IESKey -> org.spongycastle.jce.interfaces.IESKey:
org.spongycastle.jce.interfaces.MQVPrivateKey -> org.spongycastle.jce.interfaces.MQVPrivateKey:
org.spongycastle.jce.interfaces.MQVPublicKey -> org.spongycastle.jce.interfaces.MQVPublicKey:
org.spongycastle.jce.interfaces.PKCS12BagAttributeCarrier -> org.spongycastle.jce.interfaces.g:
    void setBagAttribute(org.spongycastle.asn1.ASN1ObjectIdentifier,org.spongycastle.asn1.ASN1Encodable) -> a
    org.spongycastle.asn1.ASN1Encodable getBagAttribute(org.spongycastle.asn1.ASN1ObjectIdentifier) -> a
    java.util.Enumeration getBagAttributeKeys() -> c
org.spongycastle.jce.provider.BouncyCastleProvider -> org.spongycastle.jce.provider.BouncyCastleProvider:
    java.lang.String info -> info
    java.lang.String PROVIDER_NAME -> PROVIDER_NAME
    org.spongycastle.jcajce.provider.config.ProviderConfiguration CONFIGURATION -> CONFIGURATION
    java.util.Map keyInfoConverters -> keyInfoConverters
    java.lang.String SYMMETRIC_PACKAGE -> SYMMETRIC_PACKAGE
    java.lang.String[] SYMMETRIC_GENERIC -> SYMMETRIC_GENERIC
    java.lang.String[] SYMMETRIC_MACS -> SYMMETRIC_MACS
    java.lang.String[] SYMMETRIC_CIPHERS -> SYMMETRIC_CIPHERS
    java.lang.String ASYMMETRIC_PACKAGE -> ASYMMETRIC_PACKAGE
    java.lang.String[] ASYMMETRIC_GENERIC -> ASYMMETRIC_GENERIC
    java.lang.String[] ASYMMETRIC_CIPHERS -> ASYMMETRIC_CIPHERS
    java.lang.String DIGEST_PACKAGE -> DIGEST_PACKAGE
    java.lang.String[] DIGESTS -> DIGESTS
    java.lang.String KEYSTORE_PACKAGE -> KEYSTORE_PACKAGE
    java.lang.String[] KEYSTORES -> KEYSTORES
    void setup() -> a
    void loadAlgorithms(java.lang.String,java.lang.String[]) -> a
    java.security.PublicKey getPublicKey(org.spongycastle.asn1.x509.SubjectPublicKeyInfo) -> a
    java.security.PrivateKey getPrivateKey(org.spongycastle.asn1.pkcs.PrivateKeyInfo) -> a
    void access$000(org.spongycastle.jce.provider.BouncyCastleProvider) -> a
org.spongycastle.jce.provider.BouncyCastleProvider$1 -> org.spongycastle.jce.provider.BouncyCastleProvider$1:
    org.spongycastle.jce.provider.BouncyCastleProvider this$0 -> a
    java.lang.Object run() -> run
org.spongycastle.jce.provider.BouncyCastleProviderConfiguration -> org.spongycastle.jce.provider.a:
    java.security.Permission BC_EC_LOCAL_PERMISSION -> a
    java.security.Permission BC_EC_PERMISSION -> b
    java.security.Permission BC_DH_LOCAL_PERMISSION -> c
    java.security.Permission BC_DH_PERMISSION -> d
    java.lang.ThreadLocal ecThreadSpec -> e
    java.lang.ThreadLocal dhThreadSpec -> f
    org.spongycastle.jce.spec.ECParameterSpec ecImplicitCaParams -> g
    java.lang.Object dhDefaultParams -> h
    org.spongycastle.jce.spec.ECParameterSpec getEcImplicitlyCa() -> a
    javax.crypto.spec.DHParameterSpec getDHDefaultParameters(int) -> a
org.spongycastle.jce.provider.ExtCRLException -> org.spongycastle.jce.provider.ExtCRLException:
    java.lang.Throwable cause -> a
    java.lang.Throwable getCause() -> getCause
org.spongycastle.jce.provider.JCEECPrivateKey -> org.spongycastle.jce.provider.JCEECPrivateKey:
    java.lang.String algorithm -> a
    java.math.BigInteger d -> b
    java.security.spec.ECParameterSpec ecSpec -> c
    boolean withCompression -> d
    org.spongycastle.asn1.DERBitString publicKey -> e
    org.spongycastle.jcajce.provider.asymmetric.util.PKCS12BagAttributeCarrierImpl attrCarrier -> f
    java.lang.String getAlgorithm() -> getAlgorithm
    java.lang.String getFormat() -> getFormat
    byte[] getEncoded() -> getEncoded
    java.security.spec.ECParameterSpec getParams() -> getParams
    org.spongycastle.jce.spec.ECParameterSpec getParameters() -> a
    org.spongycastle.jce.spec.ECParameterSpec engineGetSpec() -> b
    java.math.BigInteger getS() -> getS
    java.math.BigInteger getD() -> d
    void setBagAttribute(org.spongycastle.asn1.ASN1ObjectIdentifier,org.spongycastle.asn1.ASN1Encodable) -> a
    org.spongycastle.asn1.ASN1Encodable getBagAttribute(org.spongycastle.asn1.ASN1ObjectIdentifier) -> a
    java.util.Enumeration getBagAttributeKeys() -> c
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
org.spongycastle.jce.provider.JCEECPublicKey -> org.spongycastle.jce.provider.JCEECPublicKey:
    java.lang.String algorithm -> a
    org.spongycastle.math.ec.ECPoint q -> b
    java.security.spec.ECParameterSpec ecSpec -> c
    boolean withCompression -> d
    org.spongycastle.asn1.cryptopro.GOST3410PublicKeyAlgParameters gostParams -> e
    java.lang.String getAlgorithm() -> getAlgorithm
    java.lang.String getFormat() -> getFormat
    byte[] getEncoded() -> getEncoded
    void extractBytes(byte[],int,java.math.BigInteger) -> a
    java.security.spec.ECParameterSpec getParams() -> getParams
    org.spongycastle.jce.spec.ECParameterSpec getParameters() -> a
    java.security.spec.ECPoint getW() -> getW
    org.spongycastle.math.ec.ECPoint getQ() -> c
    org.spongycastle.math.ec.ECPoint engineGetQ() -> b
    org.spongycastle.jce.spec.ECParameterSpec engineGetSpec() -> d
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.spongycastle.jce.provider.JCERSAPrivateCrtKey -> org.spongycastle.jce.provider.JCERSAPrivateCrtKey:
    java.math.BigInteger publicExponent -> c
    java.math.BigInteger primeP -> d
    java.math.BigInteger primeQ -> e
    java.math.BigInteger primeExponentP -> f
    java.math.BigInteger primeExponentQ -> g
    java.math.BigInteger crtCoefficient -> h
    java.lang.String getFormat() -> getFormat
    byte[] getEncoded() -> getEncoded
    java.math.BigInteger getPublicExponent() -> getPublicExponent
    java.math.BigInteger getPrimeP() -> getPrimeP
    java.math.BigInteger getPrimeQ() -> getPrimeQ
    java.math.BigInteger getPrimeExponentP() -> getPrimeExponentP
    java.math.BigInteger getPrimeExponentQ() -> getPrimeExponentQ
    java.math.BigInteger getCrtCoefficient() -> getCrtCoefficient
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
org.spongycastle.jce.provider.JCERSAPrivateKey -> org.spongycastle.jce.provider.JCERSAPrivateKey:
    java.math.BigInteger ZERO -> c
    java.math.BigInteger modulus -> a
    java.math.BigInteger privateExponent -> b
    org.spongycastle.jcajce.provider.asymmetric.util.PKCS12BagAttributeCarrierImpl attrCarrier -> d
    java.math.BigInteger getModulus() -> getModulus
    java.math.BigInteger getPrivateExponent() -> getPrivateExponent
    java.lang.String getAlgorithm() -> getAlgorithm
    java.lang.String getFormat() -> getFormat
    byte[] getEncoded() -> getEncoded
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void setBagAttribute(org.spongycastle.asn1.ASN1ObjectIdentifier,org.spongycastle.asn1.ASN1Encodable) -> a
    org.spongycastle.asn1.ASN1Encodable getBagAttribute(org.spongycastle.asn1.ASN1ObjectIdentifier) -> a
    java.util.Enumeration getBagAttributeKeys() -> c
org.spongycastle.jce.provider.JCERSAPublicKey -> org.spongycastle.jce.provider.JCERSAPublicKey:
    java.math.BigInteger modulus -> a
    java.math.BigInteger publicExponent -> b
    java.math.BigInteger getModulus() -> getModulus
    java.math.BigInteger getPublicExponent() -> getPublicExponent
    java.lang.String getAlgorithm() -> getAlgorithm
    java.lang.String getFormat() -> getFormat
    byte[] getEncoded() -> getEncoded
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
org.spongycastle.jce.provider.JDKDSAPrivateKey -> org.spongycastle.jce.provider.JDKDSAPrivateKey:
    java.math.BigInteger x -> a
    java.security.interfaces.DSAParams dsaSpec -> b
    org.spongycastle.jcajce.provider.asymmetric.util.PKCS12BagAttributeCarrierImpl attrCarrier -> c
    java.lang.String getAlgorithm() -> getAlgorithm
    java.lang.String getFormat() -> getFormat
    byte[] getEncoded() -> getEncoded
    java.security.interfaces.DSAParams getParams() -> getParams
    java.math.BigInteger getX() -> getX
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void setBagAttribute(org.spongycastle.asn1.ASN1ObjectIdentifier,org.spongycastle.asn1.ASN1Encodable) -> a
    org.spongycastle.asn1.ASN1Encodable getBagAttribute(org.spongycastle.asn1.ASN1ObjectIdentifier) -> a
    java.util.Enumeration getBagAttributeKeys() -> c
org.spongycastle.jce.provider.JDKDSAPublicKey -> org.spongycastle.jce.provider.JDKDSAPublicKey:
    java.math.BigInteger y -> a
    java.security.interfaces.DSAParams dsaSpec -> b
    java.lang.String getAlgorithm() -> getAlgorithm
    java.lang.String getFormat() -> getFormat
    byte[] getEncoded() -> getEncoded
    java.security.interfaces.DSAParams getParams() -> getParams
    java.math.BigInteger getY() -> getY
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
org.spongycastle.jce.provider.JDKPKCS12StoreParameter -> org.spongycastle.jce.provider.JDKPKCS12StoreParameter:
    java.io.OutputStream outputStream -> a
    java.security.KeyStore$ProtectionParameter protectionParameter -> b
    boolean useDEREncoding -> c
    java.io.OutputStream getOutputStream() -> a
    java.security.KeyStore$ProtectionParameter getProtectionParameter() -> getProtectionParameter
    boolean isUseDEREncoding() -> b
org.spongycastle.jce.provider.PEMUtil -> org.spongycastle.jce.provider.b:
    java.lang.String _header1 -> a
    java.lang.String _header2 -> b
    java.lang.String _footer1 -> c
    java.lang.String _footer2 -> d
    java.lang.String readLine(java.io.InputStream) -> b
    org.spongycastle.asn1.ASN1Sequence readPEMObject(java.io.InputStream) -> a
org.spongycastle.jce.provider.PKIXCRLUtil -> org.spongycastle.jce.provider.c:
org.spongycastle.jce.provider.RFC3280CertPathUtilities -> org.spongycastle.jce.provider.d:
    org.spongycastle.jce.provider.PKIXCRLUtil CRL_UTIL -> p
    java.lang.String CERTIFICATE_POLICIES -> a
    java.lang.String POLICY_MAPPINGS -> b
    java.lang.String INHIBIT_ANY_POLICY -> c
    java.lang.String ISSUING_DISTRIBUTION_POINT -> d
    java.lang.String FRESHEST_CRL -> e
    java.lang.String DELTA_CRL_INDICATOR -> f
    java.lang.String POLICY_CONSTRAINTS -> g
    java.lang.String BASIC_CONSTRAINTS -> h
    java.lang.String CRL_DISTRIBUTION_POINTS -> i
    java.lang.String SUBJECT_ALTERNATIVE_NAME -> j
    java.lang.String NAME_CONSTRAINTS -> k
    java.lang.String AUTHORITY_KEY_IDENTIFIER -> l
    java.lang.String KEY_USAGE -> m
    java.lang.String CRL_NUMBER -> n
    java.lang.String[] crlReasons -> o
org.spongycastle.jce.provider.X509CRLEntryObject -> org.spongycastle.jce.provider.e:
    org.spongycastle.asn1.x509.TBSCertList$CRLEntry c -> a
    org.spongycastle.asn1.x500.X500Name certificateIssuer -> b
    int hashValue -> c
    boolean isHashValueSet -> d
    boolean hasUnsupportedCriticalExtension() -> hasUnsupportedCriticalExtension
    org.spongycastle.asn1.x500.X500Name loadCertificateIssuer(boolean,org.spongycastle.asn1.x500.X500Name) -> a
    javax.security.auth.x500.X500Principal getCertificateIssuer() -> getCertificateIssuer
    java.util.Set getExtensionOIDs(boolean) -> a
    java.util.Set getCriticalExtensionOIDs() -> getCriticalExtensionOIDs
    java.util.Set getNonCriticalExtensionOIDs() -> getNonCriticalExtensionOIDs
    org.spongycastle.asn1.x509.Extension getExtension(org.spongycastle.asn1.ASN1ObjectIdentifier) -> a
    byte[] getExtensionValue(java.lang.String) -> getExtensionValue
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    byte[] getEncoded() -> getEncoded
    java.math.BigInteger getSerialNumber() -> getSerialNumber
    java.util.Date getRevocationDate() -> getRevocationDate
    boolean hasExtensions() -> hasExtensions
    java.lang.String toString() -> toString
org.spongycastle.jce.provider.X509CRLObject -> org.spongycastle.jce.provider.f:
    org.spongycastle.asn1.x509.CertificateList c -> a
    java.lang.String sigAlgName -> b
    byte[] sigAlgParams -> c
    boolean isIndirect -> d
    boolean isHashCodeSet -> e
    int hashCodeValue -> f
    boolean isIndirectCRL(java.security.cert.X509CRL) -> a
    boolean hasUnsupportedCriticalExtension() -> hasUnsupportedCriticalExtension
    java.util.Set getExtensionOIDs(boolean) -> a
    java.util.Set getCriticalExtensionOIDs() -> getCriticalExtensionOIDs
    java.util.Set getNonCriticalExtensionOIDs() -> getNonCriticalExtensionOIDs
    byte[] getExtensionValue(java.lang.String) -> getExtensionValue
    byte[] getEncoded() -> getEncoded
    void verify(java.security.PublicKey) -> verify
    void verify(java.security.PublicKey,java.lang.String) -> verify
    void doVerify(java.security.PublicKey,java.security.Signature) -> a
    int getVersion() -> getVersion
    java.security.Principal getIssuerDN() -> getIssuerDN
    javax.security.auth.x500.X500Principal getIssuerX500Principal() -> getIssuerX500Principal
    java.util.Date getThisUpdate() -> getThisUpdate
    java.util.Date getNextUpdate() -> getNextUpdate
    java.util.Set loadCRLEntries() -> a
    java.security.cert.X509CRLEntry getRevokedCertificate(java.math.BigInteger) -> getRevokedCertificate
    java.util.Set getRevokedCertificates() -> getRevokedCertificates
    byte[] getTBSCertList() -> getTBSCertList
    byte[] getSignature() -> getSignature
    java.lang.String getSigAlgName() -> getSigAlgName
    java.lang.String getSigAlgOID() -> getSigAlgOID
    byte[] getSigAlgParams() -> getSigAlgParams
    java.lang.String toString() -> toString
    boolean isRevoked(java.security.cert.Certificate) -> isRevoked
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.spongycastle.jce.provider.X509CRLParser -> org.spongycastle.jce.provider.g:
    org.spongycastle.jce.provider.PEMUtil PEM_PARSER -> a
    org.spongycastle.asn1.ASN1Set sData -> b
    int sDataObjectCount -> c
    java.io.InputStream currentStream -> d
    java.security.cert.CRL readDERCRL(java.io.InputStream) -> b
    java.security.cert.CRL getCRL() -> c
    java.security.cert.CRL readPEMCRL(java.io.InputStream) -> c
    void engineInit(java.io.InputStream) -> a
    java.lang.Object engineRead() -> a
    java.util.Collection engineReadAll() -> b
org.spongycastle.jce.provider.X509CertParser -> org.spongycastle.jce.provider.h:
    org.spongycastle.jce.provider.PEMUtil PEM_PARSER -> a
    org.spongycastle.asn1.ASN1Set sData -> b
    int sDataObjectCount -> c
    java.io.InputStream currentStream -> d
    java.security.cert.Certificate readDERCertificate(java.io.InputStream) -> b
    java.security.cert.Certificate getCertificate() -> c
    java.security.cert.Certificate readPEMCertificate(java.io.InputStream) -> c
    void engineInit(java.io.InputStream) -> a
    java.lang.Object engineRead() -> a
    java.util.Collection engineReadAll() -> b
org.spongycastle.jce.provider.X509CertificateObject -> org.spongycastle.jce.provider.i:
    org.spongycastle.asn1.x509.Certificate c -> a
    org.spongycastle.asn1.x509.BasicConstraints basicConstraints -> b
    boolean[] keyUsage -> c
    boolean hashValueSet -> d
    int hashValue -> e
    org.spongycastle.jce.interfaces.PKCS12BagAttributeCarrier attrCarrier -> f
    void checkValidity() -> checkValidity
    void checkValidity(java.util.Date) -> checkValidity
    int getVersion() -> getVersion
    java.math.BigInteger getSerialNumber() -> getSerialNumber
    java.security.Principal getIssuerDN() -> getIssuerDN
    javax.security.auth.x500.X500Principal getIssuerX500Principal() -> getIssuerX500Principal
    java.security.Principal getSubjectDN() -> getSubjectDN
    javax.security.auth.x500.X500Principal getSubjectX500Principal() -> getSubjectX500Principal
    java.util.Date getNotBefore() -> getNotBefore
    java.util.Date getNotAfter() -> getNotAfter
    byte[] getTBSCertificate() -> getTBSCertificate
    byte[] getSignature() -> getSignature
    java.lang.String getSigAlgName() -> getSigAlgName
    java.lang.String getSigAlgOID() -> getSigAlgOID
    byte[] getSigAlgParams() -> getSigAlgParams
    boolean[] getIssuerUniqueID() -> getIssuerUniqueID
    boolean[] getSubjectUniqueID() -> getSubjectUniqueID
    boolean[] getKeyUsage() -> getKeyUsage
    java.util.List getExtendedKeyUsage() -> getExtendedKeyUsage
    int getBasicConstraints() -> getBasicConstraints
    java.util.Collection getSubjectAlternativeNames() -> getSubjectAlternativeNames
    java.util.Collection getIssuerAlternativeNames() -> getIssuerAlternativeNames
    java.util.Set getCriticalExtensionOIDs() -> getCriticalExtensionOIDs
    byte[] getExtensionBytes(java.lang.String) -> a
    byte[] getExtensionValue(java.lang.String) -> getExtensionValue
    java.util.Set getNonCriticalExtensionOIDs() -> getNonCriticalExtensionOIDs
    boolean hasUnsupportedCriticalExtension() -> hasUnsupportedCriticalExtension
    java.security.PublicKey getPublicKey() -> getPublicKey
    byte[] getEncoded() -> getEncoded
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    int calculateHashCode() -> a
    void setBagAttribute(org.spongycastle.asn1.ASN1ObjectIdentifier,org.spongycastle.asn1.ASN1Encodable) -> a
    org.spongycastle.asn1.ASN1Encodable getBagAttribute(org.spongycastle.asn1.ASN1ObjectIdentifier) -> a
    java.util.Enumeration getBagAttributeKeys() -> c
    java.lang.String toString() -> toString
    void verify(java.security.PublicKey) -> verify
    void verify(java.security.PublicKey,java.lang.String) -> verify
    void checkSignature(java.security.PublicKey,java.security.Signature) -> a
    boolean isAlgIdEqual(org.spongycastle.asn1.x509.AlgorithmIdentifier,org.spongycastle.asn1.x509.AlgorithmIdentifier) -> a
    java.util.Collection getAlternativeNames(byte[]) -> a
org.spongycastle.jce.provider.X509SignatureUtil -> org.spongycastle.jce.provider.j:
    org.spongycastle.asn1.ASN1Null derNull -> a
    void setSignatureParameters(java.security.Signature,org.spongycastle.asn1.ASN1Encodable) -> a
    java.lang.String getSignatureName(org.spongycastle.asn1.x509.AlgorithmIdentifier) -> a
    java.lang.String getDigestAlgName(org.spongycastle.asn1.ASN1ObjectIdentifier) -> a
org.spongycastle.jce.spec.ECKeySpec -> org.spongycastle.jce.spec.a:
    org.spongycastle.jce.spec.ECParameterSpec spec -> a
    org.spongycastle.jce.spec.ECParameterSpec getParams() -> a
org.spongycastle.jce.spec.ECNamedCurveGenParameterSpec -> org.spongycastle.jce.spec.b:
    java.lang.String name -> a
    java.lang.String getName() -> a
org.spongycastle.jce.spec.ECNamedCurveParameterSpec -> org.spongycastle.jce.spec.c:
    java.lang.String name -> a
    java.lang.String getName() -> a
org.spongycastle.jce.spec.ECNamedCurveSpec -> org.spongycastle.jce.spec.d:
    java.lang.String name -> a
    java.security.spec.EllipticCurve convertCurve(org.spongycastle.math.ec.ECCurve,byte[]) -> a
    java.security.spec.ECField convertField(org.spongycastle.math.field.FiniteField) -> a
    java.security.spec.ECPoint convertPoint(org.spongycastle.math.ec.ECPoint) -> a
    java.lang.String getName() -> a
org.spongycastle.jce.spec.ECParameterSpec -> org.spongycastle.jce.spec.e:
    org.spongycastle.math.ec.ECCurve curve -> a
    byte[] seed -> b
    org.spongycastle.math.ec.ECPoint G -> c
    java.math.BigInteger n -> d
    java.math.BigInteger h -> e
    org.spongycastle.math.ec.ECCurve getCurve() -> b
    org.spongycastle.math.ec.ECPoint getG() -> c
    java.math.BigInteger getN() -> d
    java.math.BigInteger getH() -> e
    byte[] getSeed() -> f
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.spongycastle.jce.spec.ECPrivateKeySpec -> org.spongycastle.jce.spec.f:
    java.math.BigInteger d -> a
    java.math.BigInteger getD() -> b
org.spongycastle.jce.spec.ECPublicKeySpec -> org.spongycastle.jce.spec.g:
    org.spongycastle.math.ec.ECPoint q -> a
    org.spongycastle.math.ec.ECPoint getQ() -> b
org.spongycastle.jce.spec.ElGamalKeySpec -> org.spongycastle.jce.spec.h:
    org.spongycastle.jce.spec.ElGamalParameterSpec spec -> a
    org.spongycastle.jce.spec.ElGamalParameterSpec getParams() -> a
org.spongycastle.jce.spec.ElGamalParameterSpec -> org.spongycastle.jce.spec.i:
    java.math.BigInteger p -> a
    java.math.BigInteger g -> b
    java.math.BigInteger getP() -> a
    java.math.BigInteger getG() -> b
org.spongycastle.jce.spec.ElGamalPrivateKeySpec -> org.spongycastle.jce.spec.j:
    java.math.BigInteger x -> a
    java.math.BigInteger getX() -> b
org.spongycastle.jce.spec.ElGamalPublicKeySpec -> org.spongycastle.jce.spec.k:
    java.math.BigInteger y -> a
    java.math.BigInteger getY() -> b
org.spongycastle.jce.spec.GOST3410ParameterSpec -> org.spongycastle.jce.spec.l:
    org.spongycastle.jce.spec.GOST3410PublicKeyParameterSetSpec keyParameters -> a
    java.lang.String keyParamSetOID -> b
    java.lang.String digestParamSetOID -> c
    java.lang.String encryptionParamSetOID -> d
    java.lang.String getPublicKeyParamSetOID() -> a
    org.spongycastle.jce.spec.GOST3410PublicKeyParameterSetSpec getPublicKeyParameters() -> d
    java.lang.String getDigestParamSetOID() -> b
    java.lang.String getEncryptionParamSetOID() -> c
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    org.spongycastle.jce.spec.GOST3410ParameterSpec fromPublicKeyAlg(org.spongycastle.asn1.cryptopro.GOST3410PublicKeyAlgParameters) -> a
org.spongycastle.jce.spec.GOST3410PrivateKeySpec -> org.spongycastle.jce.spec.m:
    java.math.BigInteger x -> a
    java.math.BigInteger p -> b
    java.math.BigInteger q -> c
    java.math.BigInteger a -> d
    java.math.BigInteger getX() -> a
    java.math.BigInteger getP() -> b
    java.math.BigInteger getQ() -> c
    java.math.BigInteger getA() -> d
org.spongycastle.jce.spec.GOST3410PublicKeyParameterSetSpec -> org.spongycastle.jce.spec.n:
    java.math.BigInteger p -> a
    java.math.BigInteger q -> b
    java.math.BigInteger a -> c
    java.math.BigInteger getP() -> a
    java.math.BigInteger getQ() -> b
    java.math.BigInteger getA() -> c
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.spongycastle.jce.spec.GOST3410PublicKeySpec -> org.spongycastle.jce.spec.o:
    java.math.BigInteger y -> a
    java.math.BigInteger p -> b
    java.math.BigInteger q -> c
    java.math.BigInteger a -> d
    java.math.BigInteger getY() -> a
    java.math.BigInteger getP() -> b
    java.math.BigInteger getQ() -> c
    java.math.BigInteger getA() -> d
org.spongycastle.jce.spec.IEKeySpec -> org.spongycastle.jce.spec.IEKeySpec:
    java.lang.String getAlgorithm() -> getAlgorithm
    java.lang.String getFormat() -> getFormat
    byte[] getEncoded() -> getEncoded
org.spongycastle.jce.spec.IESParameterSpec -> org.spongycastle.jce.spec.p:
    byte[] derivation -> a
    byte[] encoding -> b
    int macKeySize -> c
    int cipherKeySize -> d
    byte[] nonce -> e
    boolean usePointCompression -> f
    byte[] getDerivationV() -> a
    byte[] getEncodingV() -> b
    int getMacKeySize() -> c
org.spongycastle.jce.spec.MQVPrivateKeySpec -> org.spongycastle.jce.spec.MQVPrivateKeySpec:
    java.lang.String getAlgorithm() -> getAlgorithm
    java.lang.String getFormat() -> getFormat
    byte[] getEncoded() -> getEncoded
org.spongycastle.jce.spec.MQVPublicKeySpec -> org.spongycastle.jce.spec.MQVPublicKeySpec:
    java.lang.String getAlgorithm() -> getAlgorithm
    java.lang.String getFormat() -> getFormat
    byte[] getEncoded() -> getEncoded
org.spongycastle.math.Primes -> org.spongycastle.a.a:
    java.math.BigInteger ONE -> a
    java.math.BigInteger TWO -> b
    java.math.BigInteger THREE -> c
    boolean hasAnySmallFactors(java.math.BigInteger) -> a
    boolean isMRProbablePrime(java.math.BigInteger,java.security.SecureRandom,int) -> a
    void checkCandidate(java.math.BigInteger,java.lang.String) -> a
    boolean implHasAnySmallFactors(java.math.BigInteger) -> b
    boolean implMRProbablePrimeToBase(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,int,java.math.BigInteger) -> a
org.spongycastle.math.ec.AbstractECMultiplier -> org.spongycastle.a.a.a:
    org.spongycastle.math.ec.ECPoint multiply(org.spongycastle.math.ec.ECPoint,java.math.BigInteger) -> a
    org.spongycastle.math.ec.ECPoint multiplyPositive(org.spongycastle.math.ec.ECPoint,java.math.BigInteger) -> b
org.spongycastle.math.ec.ECAlgorithms -> org.spongycastle.a.a.b:
    boolean isF2mCurve(org.spongycastle.math.ec.ECCurve) -> a
    boolean isF2mField(org.spongycastle.math.field.FiniteField) -> a
    boolean isFpCurve(org.spongycastle.math.ec.ECCurve) -> b
    boolean isFpField(org.spongycastle.math.field.FiniteField) -> b
    org.spongycastle.math.ec.ECPoint sumOfTwoMultiplies(org.spongycastle.math.ec.ECPoint,java.math.BigInteger,org.spongycastle.math.ec.ECPoint,java.math.BigInteger) -> a
    org.spongycastle.math.ec.ECPoint importPoint(org.spongycastle.math.ec.ECCurve,org.spongycastle.math.ec.ECPoint) -> a
    void montgomeryTrick(org.spongycastle.math.ec.ECFieldElement[],int,int,org.spongycastle.math.ec.ECFieldElement) -> a
    org.spongycastle.math.ec.ECPoint referenceMultiply(org.spongycastle.math.ec.ECPoint,java.math.BigInteger) -> a
    org.spongycastle.math.ec.ECPoint validatePoint(org.spongycastle.math.ec.ECPoint) -> a
    org.spongycastle.math.ec.ECPoint implShamirsTrickWNaf(org.spongycastle.math.ec.ECPoint,java.math.BigInteger,org.spongycastle.math.ec.ECPoint,java.math.BigInteger) -> b
    org.spongycastle.math.ec.ECPoint implShamirsTrickWNaf(org.spongycastle.math.ec.ECPoint,java.math.BigInteger,org.spongycastle.math.ec.ECPointMap,java.math.BigInteger) -> a
    org.spongycastle.math.ec.ECPoint implShamirsTrickWNaf(org.spongycastle.math.ec.ECPoint[],org.spongycastle.math.ec.ECPoint[],byte[],org.spongycastle.math.ec.ECPoint[],org.spongycastle.math.ec.ECPoint[],byte[]) -> a
    org.spongycastle.math.ec.ECPoint implSumOfMultiplies(org.spongycastle.math.ec.ECPoint[],java.math.BigInteger[]) -> a
    org.spongycastle.math.ec.ECPoint implSumOfMultipliesGLV(org.spongycastle.math.ec.ECPoint[],java.math.BigInteger[],org.spongycastle.math.ec.endo.GLVEndomorphism) -> a
    org.spongycastle.math.ec.ECPoint implSumOfMultiplies(org.spongycastle.math.ec.ECPoint[],org.spongycastle.math.ec.ECPointMap,java.math.BigInteger[]) -> a
    org.spongycastle.math.ec.ECPoint implSumOfMultiplies(boolean[],org.spongycastle.math.ec.WNafPreCompInfo[],byte[][]) -> a
org.spongycastle.math.ec.ECConstants -> org.spongycastle.a.a.c:
    java.math.BigInteger ZERO -> c
    java.math.BigInteger ONE -> d
    java.math.BigInteger TWO -> e
    java.math.BigInteger THREE -> f
    java.math.BigInteger FOUR -> g
    java.math.BigInteger EIGHT -> h
org.spongycastle.math.ec.ECCurve -> org.spongycastle.a.a.d:
    org.spongycastle.math.field.FiniteField field -> a
    org.spongycastle.math.ec.ECFieldElement a -> b
    org.spongycastle.math.ec.ECFieldElement b -> c
    java.math.BigInteger order -> d
    java.math.BigInteger cofactor -> e
    int coord -> f
    org.spongycastle.math.ec.endo.ECEndomorphism endomorphism -> g
    org.spongycastle.math.ec.ECMultiplier multiplier -> h
    int getFieldSize() -> a
    org.spongycastle.math.ec.ECFieldElement fromBigInteger(java.math.BigInteger) -> a
    boolean isValidFieldElement(java.math.BigInteger) -> b
    org.spongycastle.math.ec.ECCurve$Config configure() -> b
    org.spongycastle.math.ec.ECPoint validatePoint(java.math.BigInteger,java.math.BigInteger) -> a
    org.spongycastle.math.ec.ECPoint validatePoint(java.math.BigInteger,java.math.BigInteger,boolean) -> a
    org.spongycastle.math.ec.ECPoint createPoint(java.math.BigInteger,java.math.BigInteger) -> b
    org.spongycastle.math.ec.ECPoint createPoint(java.math.BigInteger,java.math.BigInteger,boolean) -> b
    org.spongycastle.math.ec.ECCurve cloneCurve() -> c
    org.spongycastle.math.ec.ECPoint createRawPoint(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,boolean) -> a
    org.spongycastle.math.ec.ECPoint createRawPoint(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement[],boolean) -> a
    org.spongycastle.math.ec.ECMultiplier createDefaultMultiplier() -> d
    boolean supportsCoordinateSystem(int) -> a
    org.spongycastle.math.ec.PreCompInfo getPreCompInfo(org.spongycastle.math.ec.ECPoint,java.lang.String) -> a
    void setPreCompInfo(org.spongycastle.math.ec.ECPoint,java.lang.String,org.spongycastle.math.ec.PreCompInfo) -> a
    org.spongycastle.math.ec.ECPoint importPoint(org.spongycastle.math.ec.ECPoint) -> a
    void normalizeAll(org.spongycastle.math.ec.ECPoint[]) -> a
    void normalizeAll(org.spongycastle.math.ec.ECPoint[],int,int,org.spongycastle.math.ec.ECFieldElement) -> a
    org.spongycastle.math.ec.ECPoint getInfinity() -> e
    org.spongycastle.math.field.FiniteField getField() -> f
    org.spongycastle.math.ec.ECFieldElement getA() -> g
    org.spongycastle.math.ec.ECFieldElement getB() -> h
    java.math.BigInteger getOrder() -> i
    java.math.BigInteger getCofactor() -> j
    int getCoordinateSystem() -> k
    org.spongycastle.math.ec.ECPoint decompressPoint(int,java.math.BigInteger) -> a
    org.spongycastle.math.ec.endo.ECEndomorphism getEndomorphism() -> l
    org.spongycastle.math.ec.ECMultiplier getMultiplier() -> m
    org.spongycastle.math.ec.ECPoint decodePoint(byte[]) -> a
    void checkPoint(org.spongycastle.math.ec.ECPoint) -> b
    void checkPoints(org.spongycastle.math.ec.ECPoint[],int,int) -> a
    boolean equals(org.spongycastle.math.ec.ECCurve) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.spongycastle.math.ec.ECCurve$AbstractF2m -> org.spongycastle.a.a.e:
    java.math.BigInteger[] si -> i
    org.spongycastle.math.field.FiniteField buildField(int,int,int,int) -> a
    boolean isValidFieldElement(java.math.BigInteger) -> b
    org.spongycastle.math.ec.ECPoint createPoint(java.math.BigInteger,java.math.BigInteger,boolean) -> b
    org.spongycastle.math.ec.ECPoint decompressPoint(int,java.math.BigInteger) -> a
    org.spongycastle.math.ec.ECFieldElement solveQuadraticEquation(org.spongycastle.math.ec.ECFieldElement) -> a
    java.math.BigInteger[] getSi() -> n
    boolean isKoblitz() -> o
org.spongycastle.math.ec.ECCurve$AbstractFp -> org.spongycastle.a.a.f:
    boolean isValidFieldElement(java.math.BigInteger) -> b
    org.spongycastle.math.ec.ECPoint decompressPoint(int,java.math.BigInteger) -> a
org.spongycastle.math.ec.ECCurve$Config -> org.spongycastle.a.a.g:
    int coord -> a
    org.spongycastle.math.ec.endo.ECEndomorphism endomorphism -> b
    org.spongycastle.math.ec.ECMultiplier multiplier -> c
    org.spongycastle.math.ec.ECCurve this$0 -> d
    org.spongycastle.math.ec.ECCurve$Config setEndomorphism(org.spongycastle.math.ec.endo.ECEndomorphism) -> a
    org.spongycastle.math.ec.ECCurve create() -> a
org.spongycastle.math.ec.ECCurve$F2m -> org.spongycastle.a.a.h:
    int m -> i
    int k1 -> j
    int k2 -> k
    int k3 -> l
    org.spongycastle.math.ec.ECPoint$F2m infinity -> m
    org.spongycastle.math.ec.ECCurve cloneCurve() -> c
    boolean supportsCoordinateSystem(int) -> a
    org.spongycastle.math.ec.ECMultiplier createDefaultMultiplier() -> d
    int getFieldSize() -> a
    org.spongycastle.math.ec.ECFieldElement fromBigInteger(java.math.BigInteger) -> a
    org.spongycastle.math.ec.ECPoint createRawPoint(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,boolean) -> a
    org.spongycastle.math.ec.ECPoint createRawPoint(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement[],boolean) -> a
    org.spongycastle.math.ec.ECPoint getInfinity() -> e
org.spongycastle.math.ec.ECCurve$Fp -> org.spongycastle.a.a.i:
    java.math.BigInteger q -> i
    java.math.BigInteger r -> j
    org.spongycastle.math.ec.ECPoint$Fp infinity -> k
    org.spongycastle.math.ec.ECCurve cloneCurve() -> c
    boolean supportsCoordinateSystem(int) -> a
    int getFieldSize() -> a
    org.spongycastle.math.ec.ECFieldElement fromBigInteger(java.math.BigInteger) -> a
    org.spongycastle.math.ec.ECPoint createRawPoint(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,boolean) -> a
    org.spongycastle.math.ec.ECPoint createRawPoint(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement[],boolean) -> a
    org.spongycastle.math.ec.ECPoint importPoint(org.spongycastle.math.ec.ECPoint) -> a
    org.spongycastle.math.ec.ECPoint getInfinity() -> e
org.spongycastle.math.ec.ECFieldElement -> org.spongycastle.a.a.j:
    java.math.BigInteger toBigInteger() -> a
    int getFieldSize() -> b
    org.spongycastle.math.ec.ECFieldElement add(org.spongycastle.math.ec.ECFieldElement) -> a
    org.spongycastle.math.ec.ECFieldElement addOne() -> c
    org.spongycastle.math.ec.ECFieldElement subtract(org.spongycastle.math.ec.ECFieldElement) -> b
    org.spongycastle.math.ec.ECFieldElement multiply(org.spongycastle.math.ec.ECFieldElement) -> c
    org.spongycastle.math.ec.ECFieldElement divide(org.spongycastle.math.ec.ECFieldElement) -> d
    org.spongycastle.math.ec.ECFieldElement negate() -> d
    org.spongycastle.math.ec.ECFieldElement square() -> e
    org.spongycastle.math.ec.ECFieldElement invert() -> f
    org.spongycastle.math.ec.ECFieldElement sqrt() -> g
    int bitLength() -> h
    boolean isOne() -> i
    boolean isZero() -> j
    org.spongycastle.math.ec.ECFieldElement multiplyMinusProduct(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement) -> a
    org.spongycastle.math.ec.ECFieldElement multiplyPlusProduct(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement) -> b
    org.spongycastle.math.ec.ECFieldElement squarePlusProduct(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement) -> a
    org.spongycastle.math.ec.ECFieldElement squarePow(int) -> a
    boolean testBitZero() -> k
    java.lang.String toString() -> toString
    byte[] getEncoded() -> l
org.spongycastle.math.ec.ECFieldElement$F2m -> org.spongycastle.a.a.k:
    int representation -> a
    int m -> b
    int[] ks -> i
    org.spongycastle.math.ec.LongArray x -> j
    int bitLength() -> h
    boolean isOne() -> i
    boolean isZero() -> j
    boolean testBitZero() -> k
    java.math.BigInteger toBigInteger() -> a
    int getFieldSize() -> b
    void checkFieldElements(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement) -> b
    org.spongycastle.math.ec.ECFieldElement add(org.spongycastle.math.ec.ECFieldElement) -> a
    org.spongycastle.math.ec.ECFieldElement addOne() -> c
    org.spongycastle.math.ec.ECFieldElement subtract(org.spongycastle.math.ec.ECFieldElement) -> b
    org.spongycastle.math.ec.ECFieldElement multiply(org.spongycastle.math.ec.ECFieldElement) -> c
    org.spongycastle.math.ec.ECFieldElement multiplyMinusProduct(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement) -> a
    org.spongycastle.math.ec.ECFieldElement multiplyPlusProduct(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement) -> b
    org.spongycastle.math.ec.ECFieldElement divide(org.spongycastle.math.ec.ECFieldElement) -> d
    org.spongycastle.math.ec.ECFieldElement negate() -> d
    org.spongycastle.math.ec.ECFieldElement square() -> e
    org.spongycastle.math.ec.ECFieldElement squarePlusProduct(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement) -> a
    org.spongycastle.math.ec.ECFieldElement squarePow(int) -> a
    org.spongycastle.math.ec.ECFieldElement invert() -> f
    org.spongycastle.math.ec.ECFieldElement sqrt() -> g
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.spongycastle.math.ec.ECFieldElement$Fp -> org.spongycastle.a.a.l:
    java.math.BigInteger q -> a
    java.math.BigInteger r -> b
    java.math.BigInteger x -> i
    java.math.BigInteger calculateResidue(java.math.BigInteger) -> a
    java.math.BigInteger toBigInteger() -> a
    int getFieldSize() -> b
    org.spongycastle.math.ec.ECFieldElement add(org.spongycastle.math.ec.ECFieldElement) -> a
    org.spongycastle.math.ec.ECFieldElement addOne() -> c
    org.spongycastle.math.ec.ECFieldElement subtract(org.spongycastle.math.ec.ECFieldElement) -> b
    org.spongycastle.math.ec.ECFieldElement multiply(org.spongycastle.math.ec.ECFieldElement) -> c
    org.spongycastle.math.ec.ECFieldElement multiplyMinusProduct(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement) -> a
    org.spongycastle.math.ec.ECFieldElement multiplyPlusProduct(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement) -> b
    org.spongycastle.math.ec.ECFieldElement divide(org.spongycastle.math.ec.ECFieldElement) -> d
    org.spongycastle.math.ec.ECFieldElement negate() -> d
    org.spongycastle.math.ec.ECFieldElement square() -> e
    org.spongycastle.math.ec.ECFieldElement squarePlusProduct(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement) -> a
    org.spongycastle.math.ec.ECFieldElement invert() -> f
    org.spongycastle.math.ec.ECFieldElement sqrt() -> g
    org.spongycastle.math.ec.ECFieldElement checkSqrt(org.spongycastle.math.ec.ECFieldElement) -> e
    java.math.BigInteger[] lucasSequence(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger) -> a
    java.math.BigInteger modAdd(java.math.BigInteger,java.math.BigInteger) -> a
    java.math.BigInteger modDouble(java.math.BigInteger) -> b
    java.math.BigInteger modHalfAbs(java.math.BigInteger) -> c
    java.math.BigInteger modInverse(java.math.BigInteger) -> d
    java.math.BigInteger modMult(java.math.BigInteger,java.math.BigInteger) -> b
    java.math.BigInteger modReduce(java.math.BigInteger) -> e
    java.math.BigInteger modSubtract(java.math.BigInteger,java.math.BigInteger) -> c
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.spongycastle.math.ec.ECMultiplier -> org.spongycastle.a.a.m:
    org.spongycastle.math.ec.ECPoint multiply(org.spongycastle.math.ec.ECPoint,java.math.BigInteger) -> a
org.spongycastle.math.ec.ECPoint -> org.spongycastle.a.a.n:
    org.spongycastle.math.ec.ECFieldElement[] EMPTY_ZS -> a
    org.spongycastle.math.ec.ECCurve curve -> b
    org.spongycastle.math.ec.ECFieldElement x -> c
    org.spongycastle.math.ec.ECFieldElement y -> d
    org.spongycastle.math.ec.ECFieldElement[] zs -> e
    boolean withCompression -> f
    java.util.Hashtable preCompTable -> g
    org.spongycastle.math.ec.ECFieldElement[] getInitialZCoords(org.spongycastle.math.ec.ECCurve) -> a
    boolean satisfiesCofactor() -> a
    boolean satisfiesCurveEquation() -> b
    org.spongycastle.math.ec.ECPoint getDetachedPoint() -> c
    org.spongycastle.math.ec.ECCurve getCurve() -> d
    org.spongycastle.math.ec.ECPoint detach() -> e
    int getCurveCoordinateSystem() -> f
    org.spongycastle.math.ec.ECFieldElement getAffineXCoord() -> g
    org.spongycastle.math.ec.ECFieldElement getAffineYCoord() -> h
    org.spongycastle.math.ec.ECFieldElement getXCoord() -> i
    org.spongycastle.math.ec.ECFieldElement getYCoord() -> j
    org.spongycastle.math.ec.ECFieldElement getZCoord(int) -> a
    org.spongycastle.math.ec.ECFieldElement getRawXCoord() -> k
    org.spongycastle.math.ec.ECFieldElement getRawYCoord() -> l
    org.spongycastle.math.ec.ECFieldElement[] getRawZCoords() -> m
    void checkNormalized() -> n
    boolean isNormalized() -> o
    org.spongycastle.math.ec.ECPoint normalize() -> p
    org.spongycastle.math.ec.ECPoint normalize(org.spongycastle.math.ec.ECFieldElement) -> a
    org.spongycastle.math.ec.ECPoint createScaledPoint(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement) -> a
    boolean isInfinity() -> q
    boolean isValid() -> r
    org.spongycastle.math.ec.ECPoint scaleX(org.spongycastle.math.ec.ECFieldElement) -> b
    org.spongycastle.math.ec.ECPoint scaleY(org.spongycastle.math.ec.ECFieldElement) -> c
    boolean equals(org.spongycastle.math.ec.ECPoint) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    byte[] getEncoded(boolean) -> a
    boolean getCompressionYTilde() -> s
    org.spongycastle.math.ec.ECPoint add(org.spongycastle.math.ec.ECPoint) -> b
    org.spongycastle.math.ec.ECPoint negate() -> t
    org.spongycastle.math.ec.ECPoint timesPow2(int) -> b
    org.spongycastle.math.ec.ECPoint twice() -> u
    org.spongycastle.math.ec.ECPoint twicePlus(org.spongycastle.math.ec.ECPoint) -> c
    org.spongycastle.math.ec.ECPoint threeTimes() -> v
    org.spongycastle.math.ec.ECPoint multiply(java.math.BigInteger) -> a
org.spongycastle.math.ec.ECPoint$AbstractF2m -> org.spongycastle.a.a.o:
    boolean satisfiesCurveEquation() -> b
    org.spongycastle.math.ec.ECPoint scaleX(org.spongycastle.math.ec.ECFieldElement) -> b
    org.spongycastle.math.ec.ECPoint scaleY(org.spongycastle.math.ec.ECFieldElement) -> c
    org.spongycastle.math.ec.ECPoint$AbstractF2m tauPow(int) -> c
org.spongycastle.math.ec.ECPoint$AbstractFp -> org.spongycastle.a.a.p:
    boolean getCompressionYTilde() -> s
    boolean satisfiesCurveEquation() -> b
org.spongycastle.math.ec.ECPoint$F2m -> org.spongycastle.a.a.q:
    org.spongycastle.math.ec.ECPoint detach() -> e
    org.spongycastle.math.ec.ECFieldElement getYCoord() -> j
    boolean getCompressionYTilde() -> s
    org.spongycastle.math.ec.ECPoint add(org.spongycastle.math.ec.ECPoint) -> b
    org.spongycastle.math.ec.ECPoint twice() -> u
    org.spongycastle.math.ec.ECPoint twicePlus(org.spongycastle.math.ec.ECPoint) -> c
    org.spongycastle.math.ec.ECPoint negate() -> t
org.spongycastle.math.ec.ECPoint$Fp -> org.spongycastle.a.a.r:
    org.spongycastle.math.ec.ECPoint detach() -> e
    org.spongycastle.math.ec.ECFieldElement getZCoord(int) -> a
    org.spongycastle.math.ec.ECPoint add(org.spongycastle.math.ec.ECPoint) -> b
    org.spongycastle.math.ec.ECPoint twice() -> u
    org.spongycastle.math.ec.ECPoint twicePlus(org.spongycastle.math.ec.ECPoint) -> c
    org.spongycastle.math.ec.ECPoint threeTimes() -> v
    org.spongycastle.math.ec.ECPoint timesPow2(int) -> b
    org.spongycastle.math.ec.ECFieldElement two(org.spongycastle.math.ec.ECFieldElement) -> d
    org.spongycastle.math.ec.ECFieldElement three(org.spongycastle.math.ec.ECFieldElement) -> e
    org.spongycastle.math.ec.ECFieldElement four(org.spongycastle.math.ec.ECFieldElement) -> f
    org.spongycastle.math.ec.ECFieldElement eight(org.spongycastle.math.ec.ECFieldElement) -> g
    org.spongycastle.math.ec.ECPoint negate() -> t
    org.spongycastle.math.ec.ECFieldElement calculateJacobianModifiedW(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement) -> b
    org.spongycastle.math.ec.ECFieldElement getJacobianModifiedW() -> w
    org.spongycastle.math.ec.ECPoint$Fp twiceJacobianModified(boolean) -> b
org.spongycastle.math.ec.ECPointMap -> org.spongycastle.a.a.s:
    org.spongycastle.math.ec.ECPoint map(org.spongycastle.math.ec.ECPoint) -> a
org.spongycastle.math.ec.FixedPointCombMultiplier -> org.spongycastle.a.a.t:
    org.spongycastle.math.ec.ECPoint multiplyPositive(org.spongycastle.math.ec.ECPoint,java.math.BigInteger) -> b
    int getWidthForCombSize(int) -> a
org.spongycastle.math.ec.FixedPointPreCompInfo -> org.spongycastle.a.a.u:
    org.spongycastle.math.ec.ECPoint[] preComp -> a
    int width -> b
    org.spongycastle.math.ec.ECPoint[] getPreComp() -> a
    void setPreComp(org.spongycastle.math.ec.ECPoint[]) -> a
    int getWidth() -> b
    void setWidth(int) -> a
org.spongycastle.math.ec.FixedPointUtil -> org.spongycastle.a.a.v:
    int getCombSize(org.spongycastle.math.ec.ECCurve) -> a
    org.spongycastle.math.ec.FixedPointPreCompInfo getFixedPointPreCompInfo(org.spongycastle.math.ec.PreCompInfo) -> a
    org.spongycastle.math.ec.FixedPointPreCompInfo precompute(org.spongycastle.math.ec.ECPoint,int) -> a
org.spongycastle.math.ec.GLVMultiplier -> org.spongycastle.a.a.w:
    org.spongycastle.math.ec.ECCurve curve -> a
    org.spongycastle.math.ec.endo.GLVEndomorphism glvEndomorphism -> b
    org.spongycastle.math.ec.ECPoint multiplyPositive(org.spongycastle.math.ec.ECPoint,java.math.BigInteger) -> b
org.spongycastle.math.ec.LongArray -> org.spongycastle.a.a.x:
    short[] INTERLEAVE2_TABLE -> b
    int[] INTERLEAVE3_TABLE -> c
    int[] INTERLEAVE4_TABLE -> d
    int[] INTERLEAVE5_TABLE -> e
    long[] INTERLEAVE7_TABLE -> f
    byte[] bitLengths -> a
    long[] m_ints -> g
    boolean isOne() -> a
    boolean isZero() -> b
    int getUsedLength() -> c
    int getUsedLengthFrom(int) -> a
    int degree() -> d
    int degreeFrom(int) -> b
    int bitLength(long) -> a
    long[] resizedInts(int) -> c
    java.math.BigInteger toBigInteger() -> e
    long shiftUp(long[],int,long[],int,int,int) -> a
    org.spongycastle.math.ec.LongArray addOne() -> f
    void addShiftedByBitsSafe(org.spongycastle.math.ec.LongArray,int,int) -> a
    long addShiftedUp(long[],int,long[],int,int,int) -> b
    long addShiftedDown(long[],int,long[],int,int,int) -> c
    void addShiftedByWords(org.spongycastle.math.ec.LongArray,int) -> a
    void add(long[],int,long[],int,int) -> a
    void add(long[],int,long[],int,long[],int,int) -> a
    void addBoth(long[],int,long[],int,long[],int,int) -> b
    void flipWord(long[],int,int,long) -> a
    boolean testBitZero() -> g
    boolean testBit(long[],int,int) -> a
    void flipBit(long[],int,int) -> b
    void multiplyWord(long,long[],int,long[],int) -> a
    org.spongycastle.math.ec.LongArray modMultiply(org.spongycastle.math.ec.LongArray,int,int[]) -> a
    org.spongycastle.math.ec.LongArray multiply(org.spongycastle.math.ec.LongArray,int,int[]) -> b
    void reduce(int,int[]) -> a
    org.spongycastle.math.ec.LongArray reduceResult(long[],int,int,int,int[]) -> a
    int reduceInPlace(long[],int,int,int,int[]) -> b
    void reduceBitWise(long[],int,int,int,int[]) -> c
    void reduceBit(long[],int,int,int,int[]) -> d
    void reduceWordWise(long[],int,int,int,int,int[]) -> a
    void reduceWord(long[],int,int,long,int,int[]) -> a
    void reduceVectorWise(long[],int,int,int,int,int[]) -> b
    void flipVector(long[],int,long[],int,int,int) -> d
    org.spongycastle.math.ec.LongArray modSquare(int,int[]) -> b
    org.spongycastle.math.ec.LongArray modSquareN(int,int,int[]) -> a
    org.spongycastle.math.ec.LongArray square(int,int[]) -> c
    void squareInPlace(long[],int,int,int[]) -> a
    long interleave2_32to64(int) -> d
    org.spongycastle.math.ec.LongArray modInverse(int,int[]) -> d
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.Object clone() -> clone
    java.lang.String toString() -> toString
org.spongycastle.math.ec.PreCompInfo -> org.spongycastle.a.a.y:
org.spongycastle.math.ec.ScaleXPointMap -> org.spongycastle.a.a.z:
    org.spongycastle.math.ec.ECFieldElement scale -> a
    org.spongycastle.math.ec.ECPoint map(org.spongycastle.math.ec.ECPoint) -> a
org.spongycastle.math.ec.SimpleBigDecimal -> org.spongycastle.a.a.A:
    java.math.BigInteger bigInt -> a
    int scale -> b
    void checkScale(org.spongycastle.math.ec.SimpleBigDecimal) -> c
    org.spongycastle.math.ec.SimpleBigDecimal adjustScale(int) -> a
    org.spongycastle.math.ec.SimpleBigDecimal add(org.spongycastle.math.ec.SimpleBigDecimal) -> a
    org.spongycastle.math.ec.SimpleBigDecimal negate() -> a
    org.spongycastle.math.ec.SimpleBigDecimal subtract(org.spongycastle.math.ec.SimpleBigDecimal) -> b
    org.spongycastle.math.ec.SimpleBigDecimal subtract(java.math.BigInteger) -> a
    int compareTo(java.math.BigInteger) -> b
    java.math.BigInteger floor() -> b
    java.math.BigInteger round() -> c
    int getScale() -> d
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.spongycastle.math.ec.Tnaf -> org.spongycastle.a.a.B:
    java.math.BigInteger MINUS_ONE -> e
    java.math.BigInteger MINUS_TWO -> f
    java.math.BigInteger MINUS_THREE -> g
    org.spongycastle.math.ec.ZTauElement[] alpha0 -> a
    byte[][] alpha0Tnaf -> b
    org.spongycastle.math.ec.ZTauElement[] alpha1 -> c
    byte[][] alpha1Tnaf -> d
    java.math.BigInteger norm(byte,org.spongycastle.math.ec.ZTauElement) -> a
    org.spongycastle.math.ec.ZTauElement round(org.spongycastle.math.ec.SimpleBigDecimal,org.spongycastle.math.ec.SimpleBigDecimal,byte) -> a
    org.spongycastle.math.ec.SimpleBigDecimal approximateDivisionByN(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,byte,int,int) -> a
    byte getMu(int) -> a
    java.math.BigInteger[] getLucas(byte,int,boolean) -> a
    java.math.BigInteger getTw(byte,int) -> a
    java.math.BigInteger[] getSi(org.spongycastle.math.ec.ECCurve$AbstractF2m) -> a
    int getShiftsForCofactor(java.math.BigInteger) -> a
    org.spongycastle.math.ec.ZTauElement partModReduction(java.math.BigInteger,int,byte,java.math.BigInteger[],byte,byte) -> a
    org.spongycastle.math.ec.ECPoint$AbstractF2m multiplyFromTnaf(org.spongycastle.math.ec.ECPoint$AbstractF2m,byte[]) -> a
    byte[] tauAdicWNaf(byte,org.spongycastle.math.ec.ZTauElement,byte,java.math.BigInteger,java.math.BigInteger,org.spongycastle.math.ec.ZTauElement[]) -> a
    org.spongycastle.math.ec.ECPoint$AbstractF2m[] getPreComp(org.spongycastle.math.ec.ECPoint$AbstractF2m,byte) -> a
org.spongycastle.math.ec.WNafL2RMultiplier -> org.spongycastle.a.a.C:
    org.spongycastle.math.ec.ECPoint multiplyPositive(org.spongycastle.math.ec.ECPoint,java.math.BigInteger) -> b
    int getWindowSize(int) -> a
org.spongycastle.math.ec.WNafPreCompInfo -> org.spongycastle.a.a.D:
    org.spongycastle.math.ec.ECPoint[] preComp -> a
    org.spongycastle.math.ec.ECPoint[] preCompNeg -> b
    org.spongycastle.math.ec.ECPoint twice -> c
    org.spongycastle.math.ec.ECPoint[] getPreComp() -> a
    void setPreComp(org.spongycastle.math.ec.ECPoint[]) -> a
    org.spongycastle.math.ec.ECPoint[] getPreCompNeg() -> b
    void setPreCompNeg(org.spongycastle.math.ec.ECPoint[]) -> b
    org.spongycastle.math.ec.ECPoint getTwice() -> c
    void setTwice(org.spongycastle.math.ec.ECPoint) -> a
org.spongycastle.math.ec.WNafUtil -> org.spongycastle.a.a.E:
    int[] DEFAULT_WINDOW_SIZE_CUTOFFS -> a
    byte[] EMPTY_BYTES -> b
    int[] EMPTY_INTS -> c
    org.spongycastle.math.ec.ECPoint[] EMPTY_POINTS -> d
    int[] generateCompactNaf(java.math.BigInteger) -> a
    int[] generateCompactWindowNaf(int,java.math.BigInteger) -> a
    byte[] generateNaf(java.math.BigInteger) -> b
    byte[] generateWindowNaf(int,java.math.BigInteger) -> b
    int getNafWeight(java.math.BigInteger) -> c
    org.spongycastle.math.ec.WNafPreCompInfo getWNafPreCompInfo(org.spongycastle.math.ec.ECPoint) -> a
    org.spongycastle.math.ec.WNafPreCompInfo getWNafPreCompInfo(org.spongycastle.math.ec.PreCompInfo) -> a
    int getWindowSize(int) -> a
    int getWindowSize(int,int[]) -> a
    org.spongycastle.math.ec.ECPoint mapPointWithPrecomp(org.spongycastle.math.ec.ECPoint,int,boolean,org.spongycastle.math.ec.ECPointMap) -> a
    org.spongycastle.math.ec.WNafPreCompInfo precompute(org.spongycastle.math.ec.ECPoint,int,boolean) -> a
    byte[] trim(byte[],int) -> a
    int[] trim(int[],int) -> a
    org.spongycastle.math.ec.ECPoint[] resizeTable(org.spongycastle.math.ec.ECPoint[],int) -> a
org.spongycastle.math.ec.WTauNafMultiplier -> org.spongycastle.a.a.F:
    org.spongycastle.math.ec.ECPoint multiplyPositive(org.spongycastle.math.ec.ECPoint,java.math.BigInteger) -> b
    org.spongycastle.math.ec.ECPoint$AbstractF2m multiplyWTnaf(org.spongycastle.math.ec.ECPoint$AbstractF2m,org.spongycastle.math.ec.ZTauElement,org.spongycastle.math.ec.PreCompInfo,byte,byte) -> a
    org.spongycastle.math.ec.ECPoint$AbstractF2m multiplyFromWTnaf(org.spongycastle.math.ec.ECPoint$AbstractF2m,byte[],org.spongycastle.math.ec.PreCompInfo) -> a
org.spongycastle.math.ec.WTauNafPreCompInfo -> org.spongycastle.a.a.G:
    org.spongycastle.math.ec.ECPoint$AbstractF2m[] preComp -> a
    org.spongycastle.math.ec.ECPoint$AbstractF2m[] getPreComp() -> a
    void setPreComp(org.spongycastle.math.ec.ECPoint$AbstractF2m[]) -> a
org.spongycastle.math.ec.ZTauElement -> org.spongycastle.a.a.H:
    java.math.BigInteger u -> a
    java.math.BigInteger v -> b
org.spongycastle.math.ec.custom.djb.Curve25519 -> org.spongycastle.a.a.a.a.a:
    java.math.BigInteger q -> i
    org.spongycastle.math.ec.custom.djb.Curve25519Point infinity -> j
    org.spongycastle.math.ec.ECCurve cloneCurve() -> c
    boolean supportsCoordinateSystem(int) -> a
    int getFieldSize() -> a
    org.spongycastle.math.ec.ECFieldElement fromBigInteger(java.math.BigInteger) -> a
    org.spongycastle.math.ec.ECPoint createRawPoint(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,boolean) -> a
    org.spongycastle.math.ec.ECPoint createRawPoint(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement[],boolean) -> a
    org.spongycastle.math.ec.ECPoint getInfinity() -> e
org.spongycastle.math.ec.custom.djb.Curve25519Field -> org.spongycastle.a.a.a.a.b:
    int[] P -> a
    int[] PExt -> b
    void add(int[],int[],int[]) -> a
    void addOne(int[],int[]) -> a
    int[] fromBigInteger(java.math.BigInteger) -> a
    void multiply(int[],int[],int[]) -> b
    void multiplyAddToExt(int[],int[],int[]) -> c
    void negate(int[],int[]) -> b
    void reduce(int[],int[]) -> c
    void reduce27(int,int[]) -> a
    void square(int[],int[]) -> d
    void squareN(int[],int,int[]) -> a
    void subtract(int[],int[],int[]) -> d
    void twice(int[],int[]) -> e
    int addPTo(int[]) -> a
    int subPFrom(int[]) -> b
    int subPExtFrom(int[]) -> c
org.spongycastle.math.ec.custom.djb.Curve25519FieldElement -> org.spongycastle.a.a.a.a.c:
    java.math.BigInteger Q -> a
    int[] PRECOMP_POW2 -> i
    int[] x -> b
    boolean isZero() -> j
    boolean isOne() -> i
    boolean testBitZero() -> k
    java.math.BigInteger toBigInteger() -> a
    int getFieldSize() -> b
    org.spongycastle.math.ec.ECFieldElement add(org.spongycastle.math.ec.ECFieldElement) -> a
    org.spongycastle.math.ec.ECFieldElement addOne() -> c
    org.spongycastle.math.ec.ECFieldElement subtract(org.spongycastle.math.ec.ECFieldElement) -> b
    org.spongycastle.math.ec.ECFieldElement multiply(org.spongycastle.math.ec.ECFieldElement) -> c
    org.spongycastle.math.ec.ECFieldElement divide(org.spongycastle.math.ec.ECFieldElement) -> d
    org.spongycastle.math.ec.ECFieldElement negate() -> d
    org.spongycastle.math.ec.ECFieldElement square() -> e
    org.spongycastle.math.ec.ECFieldElement invert() -> f
    org.spongycastle.math.ec.ECFieldElement sqrt() -> g
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.spongycastle.math.ec.custom.djb.Curve25519Point -> org.spongycastle.a.a.a.a.d:
    org.spongycastle.math.ec.ECPoint detach() -> e
    org.spongycastle.math.ec.ECFieldElement getZCoord(int) -> a
    org.spongycastle.math.ec.ECPoint add(org.spongycastle.math.ec.ECPoint) -> b
    org.spongycastle.math.ec.ECPoint twice() -> u
    org.spongycastle.math.ec.ECPoint twicePlus(org.spongycastle.math.ec.ECPoint) -> c
    org.spongycastle.math.ec.ECPoint threeTimes() -> v
    org.spongycastle.math.ec.ECPoint negate() -> t
    org.spongycastle.math.ec.custom.djb.Curve25519FieldElement calculateJacobianModifiedW(org.spongycastle.math.ec.custom.djb.Curve25519FieldElement,int[]) -> a
    org.spongycastle.math.ec.custom.djb.Curve25519FieldElement getJacobianModifiedW() -> w
    org.spongycastle.math.ec.custom.djb.Curve25519Point twiceJacobianModified(boolean) -> b
org.spongycastle.math.ec.custom.sec.SecP128R1Curve -> org.spongycastle.a.a.a.b.a:
    java.math.BigInteger q -> i
    org.spongycastle.math.ec.custom.sec.SecP128R1Point infinity -> j
    org.spongycastle.math.ec.ECCurve cloneCurve() -> c
    boolean supportsCoordinateSystem(int) -> a
    int getFieldSize() -> a
    org.spongycastle.math.ec.ECFieldElement fromBigInteger(java.math.BigInteger) -> a
    org.spongycastle.math.ec.ECPoint createRawPoint(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,boolean) -> a
    org.spongycastle.math.ec.ECPoint createRawPoint(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement[],boolean) -> a
    org.spongycastle.math.ec.ECPoint getInfinity() -> e
org.spongycastle.math.ec.custom.sec.SecP128R1Field -> org.spongycastle.a.a.a.b.b:
    int[] P -> a
    int[] PExt -> b
    int[] PExtInv -> c
    void add(int[],int[],int[]) -> a
    void addOne(int[],int[]) -> a
    int[] fromBigInteger(java.math.BigInteger) -> a
    void multiply(int[],int[],int[]) -> b
    void multiplyAddToExt(int[],int[],int[]) -> c
    void negate(int[],int[]) -> b
    void reduce(int[],int[]) -> c
    void reduce32(int,int[]) -> a
    void square(int[],int[]) -> d
    void squareN(int[],int,int[]) -> a
    void subtract(int[],int[],int[]) -> d
    void twice(int[],int[]) -> e
    void addPInvTo(int[]) -> a
    void subPInvFrom(int[]) -> b
org.spongycastle.math.ec.custom.sec.SecP128R1FieldElement -> org.spongycastle.a.a.a.b.c:
    java.math.BigInteger Q -> a
    int[] x -> b
    boolean isZero() -> j
    boolean isOne() -> i
    boolean testBitZero() -> k
    java.math.BigInteger toBigInteger() -> a
    int getFieldSize() -> b
    org.spongycastle.math.ec.ECFieldElement add(org.spongycastle.math.ec.ECFieldElement) -> a
    org.spongycastle.math.ec.ECFieldElement addOne() -> c
    org.spongycastle.math.ec.ECFieldElement subtract(org.spongycastle.math.ec.ECFieldElement) -> b
    org.spongycastle.math.ec.ECFieldElement multiply(org.spongycastle.math.ec.ECFieldElement) -> c
    org.spongycastle.math.ec.ECFieldElement divide(org.spongycastle.math.ec.ECFieldElement) -> d
    org.spongycastle.math.ec.ECFieldElement negate() -> d
    org.spongycastle.math.ec.ECFieldElement square() -> e
    org.spongycastle.math.ec.ECFieldElement invert() -> f
    org.spongycastle.math.ec.ECFieldElement sqrt() -> g
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.spongycastle.math.ec.custom.sec.SecP128R1Point -> org.spongycastle.a.a.a.b.d:
    org.spongycastle.math.ec.ECPoint detach() -> e
    org.spongycastle.math.ec.ECPoint add(org.spongycastle.math.ec.ECPoint) -> b
    org.spongycastle.math.ec.ECPoint twice() -> u
    org.spongycastle.math.ec.ECPoint twicePlus(org.spongycastle.math.ec.ECPoint) -> c
    org.spongycastle.math.ec.ECPoint threeTimes() -> v
    org.spongycastle.math.ec.ECPoint negate() -> t
org.spongycastle.math.ec.custom.sec.SecP160K1Curve -> org.spongycastle.a.a.a.b.e:
    java.math.BigInteger q -> i
    org.spongycastle.math.ec.custom.sec.SecP160K1Point infinity -> j
    org.spongycastle.math.ec.ECCurve cloneCurve() -> c
    boolean supportsCoordinateSystem(int) -> a
    int getFieldSize() -> a
    org.spongycastle.math.ec.ECFieldElement fromBigInteger(java.math.BigInteger) -> a
    org.spongycastle.math.ec.ECPoint createRawPoint(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,boolean) -> a
    org.spongycastle.math.ec.ECPoint createRawPoint(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement[],boolean) -> a
    org.spongycastle.math.ec.ECPoint getInfinity() -> e
org.spongycastle.math.ec.custom.sec.SecP160K1Point -> org.spongycastle.a.a.a.b.f:
    org.spongycastle.math.ec.ECPoint detach() -> e
    org.spongycastle.math.ec.ECPoint add(org.spongycastle.math.ec.ECPoint) -> b
    org.spongycastle.math.ec.ECPoint twice() -> u
    org.spongycastle.math.ec.ECPoint twicePlus(org.spongycastle.math.ec.ECPoint) -> c
    org.spongycastle.math.ec.ECPoint threeTimes() -> v
    org.spongycastle.math.ec.ECPoint negate() -> t
org.spongycastle.math.ec.custom.sec.SecP160R1Curve -> org.spongycastle.a.a.a.b.g:
    java.math.BigInteger q -> i
    org.spongycastle.math.ec.custom.sec.SecP160R1Point infinity -> j
    org.spongycastle.math.ec.ECCurve cloneCurve() -> c
    boolean supportsCoordinateSystem(int) -> a
    int getFieldSize() -> a
    org.spongycastle.math.ec.ECFieldElement fromBigInteger(java.math.BigInteger) -> a
    org.spongycastle.math.ec.ECPoint createRawPoint(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,boolean) -> a
    org.spongycastle.math.ec.ECPoint createRawPoint(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement[],boolean) -> a
    org.spongycastle.math.ec.ECPoint getInfinity() -> e
org.spongycastle.math.ec.custom.sec.SecP160R1Field -> org.spongycastle.a.a.a.b.h:
    int[] P -> a
    int[] PExt -> b
    int[] PExtInv -> c
    void add(int[],int[],int[]) -> a
    void addOne(int[],int[]) -> a
    int[] fromBigInteger(java.math.BigInteger) -> a
    void multiply(int[],int[],int[]) -> b
    void multiplyAddToExt(int[],int[],int[]) -> c
    void negate(int[],int[]) -> b
    void reduce(int[],int[]) -> c
    void reduce32(int,int[]) -> a
    void square(int[],int[]) -> d
    void squareN(int[],int,int[]) -> a
    void subtract(int[],int[],int[]) -> d
    void twice(int[],int[]) -> e
org.spongycastle.math.ec.custom.sec.SecP160R1FieldElement -> org.spongycastle.a.a.a.b.i:
    java.math.BigInteger Q -> a
    int[] x -> b
    boolean isZero() -> j
    boolean isOne() -> i
    boolean testBitZero() -> k
    java.math.BigInteger toBigInteger() -> a
    int getFieldSize() -> b
    org.spongycastle.math.ec.ECFieldElement add(org.spongycastle.math.ec.ECFieldElement) -> a
    org.spongycastle.math.ec.ECFieldElement addOne() -> c
    org.spongycastle.math.ec.ECFieldElement subtract(org.spongycastle.math.ec.ECFieldElement) -> b
    org.spongycastle.math.ec.ECFieldElement multiply(org.spongycastle.math.ec.ECFieldElement) -> c
    org.spongycastle.math.ec.ECFieldElement divide(org.spongycastle.math.ec.ECFieldElement) -> d
    org.spongycastle.math.ec.ECFieldElement negate() -> d
    org.spongycastle.math.ec.ECFieldElement square() -> e
    org.spongycastle.math.ec.ECFieldElement invert() -> f
    org.spongycastle.math.ec.ECFieldElement sqrt() -> g
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.spongycastle.math.ec.custom.sec.SecP160R1Point -> org.spongycastle.a.a.a.b.j:
    org.spongycastle.math.ec.ECPoint detach() -> e
    org.spongycastle.math.ec.ECPoint add(org.spongycastle.math.ec.ECPoint) -> b
    org.spongycastle.math.ec.ECPoint twice() -> u
    org.spongycastle.math.ec.ECPoint twicePlus(org.spongycastle.math.ec.ECPoint) -> c
    org.spongycastle.math.ec.ECPoint threeTimes() -> v
    org.spongycastle.math.ec.ECPoint negate() -> t
org.spongycastle.math.ec.custom.sec.SecP160R2Curve -> org.spongycastle.a.a.a.b.k:
    java.math.BigInteger q -> i
    org.spongycastle.math.ec.custom.sec.SecP160R2Point infinity -> j
    org.spongycastle.math.ec.ECCurve cloneCurve() -> c
    boolean supportsCoordinateSystem(int) -> a
    int getFieldSize() -> a
    org.spongycastle.math.ec.ECFieldElement fromBigInteger(java.math.BigInteger) -> a
    org.spongycastle.math.ec.ECPoint createRawPoint(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,boolean) -> a
    org.spongycastle.math.ec.ECPoint createRawPoint(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement[],boolean) -> a
    org.spongycastle.math.ec.ECPoint getInfinity() -> e
org.spongycastle.math.ec.custom.sec.SecP160R2Field -> org.spongycastle.a.a.a.b.l:
    int[] P -> a
    int[] PExt -> b
    int[] PExtInv -> c
    void add(int[],int[],int[]) -> a
    void addOne(int[],int[]) -> a
    int[] fromBigInteger(java.math.BigInteger) -> a
    void multiply(int[],int[],int[]) -> b
    void multiplyAddToExt(int[],int[],int[]) -> c
    void negate(int[],int[]) -> b
    void reduce(int[],int[]) -> c
    void reduce32(int,int[]) -> a
    void square(int[],int[]) -> d
    void squareN(int[],int,int[]) -> a
    void subtract(int[],int[],int[]) -> d
    void twice(int[],int[]) -> e
org.spongycastle.math.ec.custom.sec.SecP160R2FieldElement -> org.spongycastle.a.a.a.b.m:
    java.math.BigInteger Q -> a
    int[] x -> b
    boolean isZero() -> j
    boolean isOne() -> i
    boolean testBitZero() -> k
    java.math.BigInteger toBigInteger() -> a
    int getFieldSize() -> b
    org.spongycastle.math.ec.ECFieldElement add(org.spongycastle.math.ec.ECFieldElement) -> a
    org.spongycastle.math.ec.ECFieldElement addOne() -> c
    org.spongycastle.math.ec.ECFieldElement subtract(org.spongycastle.math.ec.ECFieldElement) -> b
    org.spongycastle.math.ec.ECFieldElement multiply(org.spongycastle.math.ec.ECFieldElement) -> c
    org.spongycastle.math.ec.ECFieldElement divide(org.spongycastle.math.ec.ECFieldElement) -> d
    org.spongycastle.math.ec.ECFieldElement negate() -> d
    org.spongycastle.math.ec.ECFieldElement square() -> e
    org.spongycastle.math.ec.ECFieldElement invert() -> f
    org.spongycastle.math.ec.ECFieldElement sqrt() -> g
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.spongycastle.math.ec.custom.sec.SecP160R2Point -> org.spongycastle.a.a.a.b.n:
    org.spongycastle.math.ec.ECPoint detach() -> e
    org.spongycastle.math.ec.ECPoint add(org.spongycastle.math.ec.ECPoint) -> b
    org.spongycastle.math.ec.ECPoint twice() -> u
    org.spongycastle.math.ec.ECPoint twicePlus(org.spongycastle.math.ec.ECPoint) -> c
    org.spongycastle.math.ec.ECPoint threeTimes() -> v
    org.spongycastle.math.ec.ECPoint negate() -> t
org.spongycastle.math.ec.custom.sec.SecP192K1Curve -> org.spongycastle.a.a.a.b.o:
    java.math.BigInteger q -> i
    org.spongycastle.math.ec.custom.sec.SecP192K1Point infinity -> j
    org.spongycastle.math.ec.ECCurve cloneCurve() -> c
    boolean supportsCoordinateSystem(int) -> a
    int getFieldSize() -> a
    org.spongycastle.math.ec.ECFieldElement fromBigInteger(java.math.BigInteger) -> a
    org.spongycastle.math.ec.ECPoint createRawPoint(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,boolean) -> a
    org.spongycastle.math.ec.ECPoint createRawPoint(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement[],boolean) -> a
    org.spongycastle.math.ec.ECPoint getInfinity() -> e
org.spongycastle.math.ec.custom.sec.SecP192K1Field -> org.spongycastle.a.a.a.b.p:
    int[] P -> a
    int[] PExt -> b
    int[] PExtInv -> c
    void add(int[],int[],int[]) -> a
    void addOne(int[],int[]) -> a
    int[] fromBigInteger(java.math.BigInteger) -> a
    void multiply(int[],int[],int[]) -> b
    void multiplyAddToExt(int[],int[],int[]) -> c
    void negate(int[],int[]) -> b
    void reduce(int[],int[]) -> c
    void reduce32(int,int[]) -> a
    void square(int[],int[]) -> d
    void squareN(int[],int,int[]) -> a
    void subtract(int[],int[],int[]) -> d
    void twice(int[],int[]) -> e
org.spongycastle.math.ec.custom.sec.SecP192K1FieldElement -> org.spongycastle.a.a.a.b.q:
    java.math.BigInteger Q -> a
    int[] x -> b
    boolean isZero() -> j
    boolean isOne() -> i
    boolean testBitZero() -> k
    java.math.BigInteger toBigInteger() -> a
    int getFieldSize() -> b
    org.spongycastle.math.ec.ECFieldElement add(org.spongycastle.math.ec.ECFieldElement) -> a
    org.spongycastle.math.ec.ECFieldElement addOne() -> c
    org.spongycastle.math.ec.ECFieldElement subtract(org.spongycastle.math.ec.ECFieldElement) -> b
    org.spongycastle.math.ec.ECFieldElement multiply(org.spongycastle.math.ec.ECFieldElement) -> c
    org.spongycastle.math.ec.ECFieldElement divide(org.spongycastle.math.ec.ECFieldElement) -> d
    org.spongycastle.math.ec.ECFieldElement negate() -> d
    org.spongycastle.math.ec.ECFieldElement square() -> e
    org.spongycastle.math.ec.ECFieldElement invert() -> f
    org.spongycastle.math.ec.ECFieldElement sqrt() -> g
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.spongycastle.math.ec.custom.sec.SecP192K1Point -> org.spongycastle.a.a.a.b.r:
    org.spongycastle.math.ec.ECPoint detach() -> e
    org.spongycastle.math.ec.ECPoint add(org.spongycastle.math.ec.ECPoint) -> b
    org.spongycastle.math.ec.ECPoint twice() -> u
    org.spongycastle.math.ec.ECPoint twicePlus(org.spongycastle.math.ec.ECPoint) -> c
    org.spongycastle.math.ec.ECPoint threeTimes() -> v
    org.spongycastle.math.ec.ECPoint negate() -> t
org.spongycastle.math.ec.custom.sec.SecP192R1Curve -> org.spongycastle.a.a.a.b.s:
    java.math.BigInteger q -> i
    org.spongycastle.math.ec.custom.sec.SecP192R1Point infinity -> j
    org.spongycastle.math.ec.ECCurve cloneCurve() -> c
    boolean supportsCoordinateSystem(int) -> a
    int getFieldSize() -> a
    org.spongycastle.math.ec.ECFieldElement fromBigInteger(java.math.BigInteger) -> a
    org.spongycastle.math.ec.ECPoint createRawPoint(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,boolean) -> a
    org.spongycastle.math.ec.ECPoint createRawPoint(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement[],boolean) -> a
    org.spongycastle.math.ec.ECPoint getInfinity() -> e
org.spongycastle.math.ec.custom.sec.SecP192R1Field -> org.spongycastle.a.a.a.b.t:
    int[] P -> a
    int[] PExt -> b
    int[] PExtInv -> c
    void add(int[],int[],int[]) -> a
    void addOne(int[],int[]) -> a
    int[] fromBigInteger(java.math.BigInteger) -> a
    void multiply(int[],int[],int[]) -> b
    void multiplyAddToExt(int[],int[],int[]) -> c
    void negate(int[],int[]) -> b
    void reduce(int[],int[]) -> c
    void reduce32(int,int[]) -> a
    void square(int[],int[]) -> d
    void squareN(int[],int,int[]) -> a
    void subtract(int[],int[],int[]) -> d
    void twice(int[],int[]) -> e
    void addPInvTo(int[]) -> a
    void subPInvFrom(int[]) -> b
org.spongycastle.math.ec.custom.sec.SecP192R1FieldElement -> org.spongycastle.a.a.a.b.u:
    java.math.BigInteger Q -> a
    int[] x -> b
    boolean isZero() -> j
    boolean isOne() -> i
    boolean testBitZero() -> k
    java.math.BigInteger toBigInteger() -> a
    int getFieldSize() -> b
    org.spongycastle.math.ec.ECFieldElement add(org.spongycastle.math.ec.ECFieldElement) -> a
    org.spongycastle.math.ec.ECFieldElement addOne() -> c
    org.spongycastle.math.ec.ECFieldElement subtract(org.spongycastle.math.ec.ECFieldElement) -> b
    org.spongycastle.math.ec.ECFieldElement multiply(org.spongycastle.math.ec.ECFieldElement) -> c
    org.spongycastle.math.ec.ECFieldElement divide(org.spongycastle.math.ec.ECFieldElement) -> d
    org.spongycastle.math.ec.ECFieldElement negate() -> d
    org.spongycastle.math.ec.ECFieldElement square() -> e
    org.spongycastle.math.ec.ECFieldElement invert() -> f
    org.spongycastle.math.ec.ECFieldElement sqrt() -> g
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.spongycastle.math.ec.custom.sec.SecP192R1Point -> org.spongycastle.a.a.a.b.v:
    org.spongycastle.math.ec.ECPoint detach() -> e
    org.spongycastle.math.ec.ECPoint add(org.spongycastle.math.ec.ECPoint) -> b
    org.spongycastle.math.ec.ECPoint twice() -> u
    org.spongycastle.math.ec.ECPoint twicePlus(org.spongycastle.math.ec.ECPoint) -> c
    org.spongycastle.math.ec.ECPoint threeTimes() -> v
    org.spongycastle.math.ec.ECPoint negate() -> t
org.spongycastle.math.ec.custom.sec.SecP224K1Curve -> org.spongycastle.a.a.a.b.w:
    java.math.BigInteger q -> i
    org.spongycastle.math.ec.custom.sec.SecP224K1Point infinity -> j
    org.spongycastle.math.ec.ECCurve cloneCurve() -> c
    boolean supportsCoordinateSystem(int) -> a
    int getFieldSize() -> a
    org.spongycastle.math.ec.ECFieldElement fromBigInteger(java.math.BigInteger) -> a
    org.spongycastle.math.ec.ECPoint createRawPoint(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,boolean) -> a
    org.spongycastle.math.ec.ECPoint createRawPoint(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement[],boolean) -> a
    org.spongycastle.math.ec.ECPoint getInfinity() -> e
org.spongycastle.math.ec.custom.sec.SecP224K1Field -> org.spongycastle.a.a.a.b.x:
    int[] P -> a
    int[] PExt -> b
    int[] PExtInv -> c
    void add(int[],int[],int[]) -> a
    void addOne(int[],int[]) -> a
    int[] fromBigInteger(java.math.BigInteger) -> a
    void multiply(int[],int[],int[]) -> b
    void multiplyAddToExt(int[],int[],int[]) -> c
    void negate(int[],int[]) -> b
    void reduce(int[],int[]) -> c
    void reduce32(int,int[]) -> a
    void square(int[],int[]) -> d
    void squareN(int[],int,int[]) -> a
    void subtract(int[],int[],int[]) -> d
    void twice(int[],int[]) -> e
org.spongycastle.math.ec.custom.sec.SecP224K1FieldElement -> org.spongycastle.a.a.a.b.y:
    java.math.BigInteger Q -> a
    int[] PRECOMP_POW2 -> i
    int[] x -> b
    boolean isZero() -> j
    boolean isOne() -> i
    boolean testBitZero() -> k
    java.math.BigInteger toBigInteger() -> a
    int getFieldSize() -> b
    org.spongycastle.math.ec.ECFieldElement add(org.spongycastle.math.ec.ECFieldElement) -> a
    org.spongycastle.math.ec.ECFieldElement addOne() -> c
    org.spongycastle.math.ec.ECFieldElement subtract(org.spongycastle.math.ec.ECFieldElement) -> b
    org.spongycastle.math.ec.ECFieldElement multiply(org.spongycastle.math.ec.ECFieldElement) -> c
    org.spongycastle.math.ec.ECFieldElement divide(org.spongycastle.math.ec.ECFieldElement) -> d
    org.spongycastle.math.ec.ECFieldElement negate() -> d
    org.spongycastle.math.ec.ECFieldElement square() -> e
    org.spongycastle.math.ec.ECFieldElement invert() -> f
    org.spongycastle.math.ec.ECFieldElement sqrt() -> g
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.spongycastle.math.ec.custom.sec.SecP224K1Point -> org.spongycastle.a.a.a.b.z:
    org.spongycastle.math.ec.ECPoint detach() -> e
    org.spongycastle.math.ec.ECPoint add(org.spongycastle.math.ec.ECPoint) -> b
    org.spongycastle.math.ec.ECPoint twice() -> u
    org.spongycastle.math.ec.ECPoint twicePlus(org.spongycastle.math.ec.ECPoint) -> c
    org.spongycastle.math.ec.ECPoint threeTimes() -> v
    org.spongycastle.math.ec.ECPoint negate() -> t
org.spongycastle.math.ec.custom.sec.SecP224R1Curve -> org.spongycastle.a.a.a.b.A:
    java.math.BigInteger q -> i
    org.spongycastle.math.ec.custom.sec.SecP224R1Point infinity -> j
    org.spongycastle.math.ec.ECCurve cloneCurve() -> c
    boolean supportsCoordinateSystem(int) -> a
    int getFieldSize() -> a
    org.spongycastle.math.ec.ECFieldElement fromBigInteger(java.math.BigInteger) -> a
    org.spongycastle.math.ec.ECPoint createRawPoint(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,boolean) -> a
    org.spongycastle.math.ec.ECPoint createRawPoint(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement[],boolean) -> a
    org.spongycastle.math.ec.ECPoint getInfinity() -> e
org.spongycastle.math.ec.custom.sec.SecP224R1Field -> org.spongycastle.a.a.a.b.B:
    int[] P -> a
    int[] PExt -> b
    int[] PExtInv -> c
    void add(int[],int[],int[]) -> a
    void addOne(int[],int[]) -> a
    int[] fromBigInteger(java.math.BigInteger) -> a
    void multiply(int[],int[],int[]) -> b
    void multiplyAddToExt(int[],int[],int[]) -> c
    void negate(int[],int[]) -> b
    void reduce(int[],int[]) -> c
    void reduce32(int,int[]) -> a
    void square(int[],int[]) -> d
    void squareN(int[],int,int[]) -> a
    void subtract(int[],int[],int[]) -> d
    void twice(int[],int[]) -> e
    void addPInvTo(int[]) -> a
    void subPInvFrom(int[]) -> b
org.spongycastle.math.ec.custom.sec.SecP224R1FieldElement -> org.spongycastle.a.a.a.b.C:
    java.math.BigInteger Q -> a
    int[] x -> b
    boolean isZero() -> j
    boolean isOne() -> i
    boolean testBitZero() -> k
    java.math.BigInteger toBigInteger() -> a
    int getFieldSize() -> b
    org.spongycastle.math.ec.ECFieldElement add(org.spongycastle.math.ec.ECFieldElement) -> a
    org.spongycastle.math.ec.ECFieldElement addOne() -> c
    org.spongycastle.math.ec.ECFieldElement subtract(org.spongycastle.math.ec.ECFieldElement) -> b
    org.spongycastle.math.ec.ECFieldElement multiply(org.spongycastle.math.ec.ECFieldElement) -> c
    org.spongycastle.math.ec.ECFieldElement divide(org.spongycastle.math.ec.ECFieldElement) -> d
    org.spongycastle.math.ec.ECFieldElement negate() -> d
    org.spongycastle.math.ec.ECFieldElement square() -> e
    org.spongycastle.math.ec.ECFieldElement invert() -> f
    org.spongycastle.math.ec.ECFieldElement sqrt() -> g
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    boolean isSquare(int[]) -> a
    void RM(int[],int[],int[],int[],int[],int[],int[]) -> a
    void RP(int[],int[],int[],int[],int[]) -> a
    void RS(int[],int[],int[],int[]) -> a
    boolean trySqrt(int[],int[],int[]) -> a
org.spongycastle.math.ec.custom.sec.SecP224R1Point -> org.spongycastle.a.a.a.b.D:
    org.spongycastle.math.ec.ECPoint detach() -> e
    org.spongycastle.math.ec.ECPoint add(org.spongycastle.math.ec.ECPoint) -> b
    org.spongycastle.math.ec.ECPoint twice() -> u
    org.spongycastle.math.ec.ECPoint twicePlus(org.spongycastle.math.ec.ECPoint) -> c
    org.spongycastle.math.ec.ECPoint threeTimes() -> v
    org.spongycastle.math.ec.ECPoint negate() -> t
org.spongycastle.math.ec.custom.sec.SecP256K1Curve -> org.spongycastle.a.a.a.b.E:
    java.math.BigInteger q -> i
    org.spongycastle.math.ec.custom.sec.SecP256K1Point infinity -> j
    org.spongycastle.math.ec.ECCurve cloneCurve() -> c
    boolean supportsCoordinateSystem(int) -> a
    int getFieldSize() -> a
    org.spongycastle.math.ec.ECFieldElement fromBigInteger(java.math.BigInteger) -> a
    org.spongycastle.math.ec.ECPoint createRawPoint(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,boolean) -> a
    org.spongycastle.math.ec.ECPoint createRawPoint(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement[],boolean) -> a
    org.spongycastle.math.ec.ECPoint getInfinity() -> e
org.spongycastle.math.ec.custom.sec.SecP256K1Field -> org.spongycastle.a.a.a.b.F:
    int[] P -> a
    int[] PExt -> b
    int[] PExtInv -> c
    void add(int[],int[],int[]) -> a
    void addOne(int[],int[]) -> a
    int[] fromBigInteger(java.math.BigInteger) -> a
    void multiply(int[],int[],int[]) -> b
    void multiplyAddToExt(int[],int[],int[]) -> c
    void negate(int[],int[]) -> b
    void reduce(int[],int[]) -> c
    void reduce32(int,int[]) -> a
    void square(int[],int[]) -> d
    void squareN(int[],int,int[]) -> a
    void subtract(int[],int[],int[]) -> d
    void twice(int[],int[]) -> e
org.spongycastle.math.ec.custom.sec.SecP256K1FieldElement -> org.spongycastle.a.a.a.b.G:
    java.math.BigInteger Q -> a
    int[] x -> b
    boolean isZero() -> j
    boolean isOne() -> i
    boolean testBitZero() -> k
    java.math.BigInteger toBigInteger() -> a
    int getFieldSize() -> b
    org.spongycastle.math.ec.ECFieldElement add(org.spongycastle.math.ec.ECFieldElement) -> a
    org.spongycastle.math.ec.ECFieldElement addOne() -> c
    org.spongycastle.math.ec.ECFieldElement subtract(org.spongycastle.math.ec.ECFieldElement) -> b
    org.spongycastle.math.ec.ECFieldElement multiply(org.spongycastle.math.ec.ECFieldElement) -> c
    org.spongycastle.math.ec.ECFieldElement divide(org.spongycastle.math.ec.ECFieldElement) -> d
    org.spongycastle.math.ec.ECFieldElement negate() -> d
    org.spongycastle.math.ec.ECFieldElement square() -> e
    org.spongycastle.math.ec.ECFieldElement invert() -> f
    org.spongycastle.math.ec.ECFieldElement sqrt() -> g
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.spongycastle.math.ec.custom.sec.SecP256K1Point -> org.spongycastle.a.a.a.b.H:
    org.spongycastle.math.ec.ECPoint detach() -> e
    org.spongycastle.math.ec.ECPoint add(org.spongycastle.math.ec.ECPoint) -> b
    org.spongycastle.math.ec.ECPoint twice() -> u
    org.spongycastle.math.ec.ECPoint twicePlus(org.spongycastle.math.ec.ECPoint) -> c
    org.spongycastle.math.ec.ECPoint threeTimes() -> v
    org.spongycastle.math.ec.ECPoint negate() -> t
org.spongycastle.math.ec.custom.sec.SecP256R1Curve -> org.spongycastle.a.a.a.b.I:
    java.math.BigInteger q -> i
    org.spongycastle.math.ec.custom.sec.SecP256R1Point infinity -> j
    org.spongycastle.math.ec.ECCurve cloneCurve() -> c
    boolean supportsCoordinateSystem(int) -> a
    int getFieldSize() -> a
    org.spongycastle.math.ec.ECFieldElement fromBigInteger(java.math.BigInteger) -> a
    org.spongycastle.math.ec.ECPoint createRawPoint(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,boolean) -> a
    org.spongycastle.math.ec.ECPoint createRawPoint(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement[],boolean) -> a
    org.spongycastle.math.ec.ECPoint getInfinity() -> e
org.spongycastle.math.ec.custom.sec.SecP256R1Field -> org.spongycastle.a.a.a.b.J:
    int[] P -> a
    int[] PExt -> b
    void add(int[],int[],int[]) -> a
    void addOne(int[],int[]) -> a
    int[] fromBigInteger(java.math.BigInteger) -> a
    void multiply(int[],int[],int[]) -> b
    void multiplyAddToExt(int[],int[],int[]) -> c
    void negate(int[],int[]) -> b
    void reduce(int[],int[]) -> c
    void reduce32(int,int[]) -> a
    void square(int[],int[]) -> d
    void squareN(int[],int,int[]) -> a
    void subtract(int[],int[],int[]) -> d
    void twice(int[],int[]) -> e
    void addPInvTo(int[]) -> a
    void subPInvFrom(int[]) -> b
org.spongycastle.math.ec.custom.sec.SecP256R1FieldElement -> org.spongycastle.a.a.a.b.K:
    java.math.BigInteger Q -> a
    int[] x -> b
    boolean isZero() -> j
    boolean isOne() -> i
    boolean testBitZero() -> k
    java.math.BigInteger toBigInteger() -> a
    int getFieldSize() -> b
    org.spongycastle.math.ec.ECFieldElement add(org.spongycastle.math.ec.ECFieldElement) -> a
    org.spongycastle.math.ec.ECFieldElement addOne() -> c
    org.spongycastle.math.ec.ECFieldElement subtract(org.spongycastle.math.ec.ECFieldElement) -> b
    org.spongycastle.math.ec.ECFieldElement multiply(org.spongycastle.math.ec.ECFieldElement) -> c
    org.spongycastle.math.ec.ECFieldElement divide(org.spongycastle.math.ec.ECFieldElement) -> d
    org.spongycastle.math.ec.ECFieldElement negate() -> d
    org.spongycastle.math.ec.ECFieldElement square() -> e
    org.spongycastle.math.ec.ECFieldElement invert() -> f
    org.spongycastle.math.ec.ECFieldElement sqrt() -> g
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.spongycastle.math.ec.custom.sec.SecP256R1Point -> org.spongycastle.a.a.a.b.L:
    org.spongycastle.math.ec.ECPoint detach() -> e
    org.spongycastle.math.ec.ECPoint add(org.spongycastle.math.ec.ECPoint) -> b
    org.spongycastle.math.ec.ECPoint twice() -> u
    org.spongycastle.math.ec.ECPoint twicePlus(org.spongycastle.math.ec.ECPoint) -> c
    org.spongycastle.math.ec.ECPoint threeTimes() -> v
    org.spongycastle.math.ec.ECPoint negate() -> t
org.spongycastle.math.ec.custom.sec.SecP384R1Curve -> org.spongycastle.a.a.a.b.M:
    java.math.BigInteger q -> i
    org.spongycastle.math.ec.custom.sec.SecP384R1Point infinity -> j
    org.spongycastle.math.ec.ECCurve cloneCurve() -> c
    boolean supportsCoordinateSystem(int) -> a
    int getFieldSize() -> a
    org.spongycastle.math.ec.ECFieldElement fromBigInteger(java.math.BigInteger) -> a
    org.spongycastle.math.ec.ECPoint createRawPoint(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,boolean) -> a
    org.spongycastle.math.ec.ECPoint createRawPoint(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement[],boolean) -> a
    org.spongycastle.math.ec.ECPoint getInfinity() -> e
org.spongycastle.math.ec.custom.sec.SecP384R1Field -> org.spongycastle.a.a.a.b.N:
    int[] P -> a
    int[] PExt -> b
    int[] PExtInv -> c
    void add(int[],int[],int[]) -> a
    void addExt(int[],int[],int[]) -> b
    void addOne(int[],int[]) -> a
    int[] fromBigInteger(java.math.BigInteger) -> a
    void multiply(int[],int[],int[]) -> c
    void negate(int[],int[]) -> b
    void reduce(int[],int[]) -> c
    void reduce32(int,int[]) -> a
    void square(int[],int[]) -> d
    void squareN(int[],int,int[]) -> a
    void subtract(int[],int[],int[]) -> d
    void twice(int[],int[]) -> e
    void addPInvTo(int[]) -> a
    void subPInvFrom(int[]) -> b
org.spongycastle.math.ec.custom.sec.SecP384R1FieldElement -> org.spongycastle.a.a.a.b.O:
    java.math.BigInteger Q -> a
    int[] x -> b
    boolean isZero() -> j
    boolean isOne() -> i
    boolean testBitZero() -> k
    java.math.BigInteger toBigInteger() -> a
    int getFieldSize() -> b
    org.spongycastle.math.ec.ECFieldElement add(org.spongycastle.math.ec.ECFieldElement) -> a
    org.spongycastle.math.ec.ECFieldElement addOne() -> c
    org.spongycastle.math.ec.ECFieldElement subtract(org.spongycastle.math.ec.ECFieldElement) -> b
    org.spongycastle.math.ec.ECFieldElement multiply(org.spongycastle.math.ec.ECFieldElement) -> c
    org.spongycastle.math.ec.ECFieldElement divide(org.spongycastle.math.ec.ECFieldElement) -> d
    org.spongycastle.math.ec.ECFieldElement negate() -> d
    org.spongycastle.math.ec.ECFieldElement square() -> e
    org.spongycastle.math.ec.ECFieldElement invert() -> f
    org.spongycastle.math.ec.ECFieldElement sqrt() -> g
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.spongycastle.math.ec.custom.sec.SecP384R1Point -> org.spongycastle.a.a.a.b.P:
    org.spongycastle.math.ec.ECPoint detach() -> e
    org.spongycastle.math.ec.ECPoint add(org.spongycastle.math.ec.ECPoint) -> b
    org.spongycastle.math.ec.ECPoint twice() -> u
    org.spongycastle.math.ec.ECPoint twicePlus(org.spongycastle.math.ec.ECPoint) -> c
    org.spongycastle.math.ec.ECPoint threeTimes() -> v
    org.spongycastle.math.ec.ECPoint negate() -> t
org.spongycastle.math.ec.custom.sec.SecP521R1Curve -> org.spongycastle.a.a.a.b.Q:
    java.math.BigInteger q -> i
    org.spongycastle.math.ec.custom.sec.SecP521R1Point infinity -> j
    org.spongycastle.math.ec.ECCurve cloneCurve() -> c
    boolean supportsCoordinateSystem(int) -> a
    int getFieldSize() -> a
    org.spongycastle.math.ec.ECFieldElement fromBigInteger(java.math.BigInteger) -> a
    org.spongycastle.math.ec.ECPoint createRawPoint(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,boolean) -> a
    org.spongycastle.math.ec.ECPoint createRawPoint(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement[],boolean) -> a
    org.spongycastle.math.ec.ECPoint getInfinity() -> e
org.spongycastle.math.ec.custom.sec.SecP521R1Field -> org.spongycastle.a.a.a.b.R:
    int[] P -> a
    void add(int[],int[],int[]) -> a
    void addOne(int[],int[]) -> a
    int[] fromBigInteger(java.math.BigInteger) -> a
    void multiply(int[],int[],int[]) -> b
    void negate(int[],int[]) -> b
    void reduce(int[],int[]) -> c
    void reduce23(int[]) -> a
    void square(int[],int[]) -> d
    void squareN(int[],int,int[]) -> a
    void subtract(int[],int[],int[]) -> c
    void twice(int[],int[]) -> e
    void implMultiply(int[],int[],int[]) -> d
    void implSquare(int[],int[]) -> f
org.spongycastle.math.ec.custom.sec.SecP521R1FieldElement -> org.spongycastle.a.a.a.b.S:
    java.math.BigInteger Q -> a
    int[] x -> b
    boolean isZero() -> j
    boolean isOne() -> i
    boolean testBitZero() -> k
    java.math.BigInteger toBigInteger() -> a
    int getFieldSize() -> b
    org.spongycastle.math.ec.ECFieldElement add(org.spongycastle.math.ec.ECFieldElement) -> a
    org.spongycastle.math.ec.ECFieldElement addOne() -> c
    org.spongycastle.math.ec.ECFieldElement subtract(org.spongycastle.math.ec.ECFieldElement) -> b
    org.spongycastle.math.ec.ECFieldElement multiply(org.spongycastle.math.ec.ECFieldElement) -> c
    org.spongycastle.math.ec.ECFieldElement divide(org.spongycastle.math.ec.ECFieldElement) -> d
    org.spongycastle.math.ec.ECFieldElement negate() -> d
    org.spongycastle.math.ec.ECFieldElement square() -> e
    org.spongycastle.math.ec.ECFieldElement invert() -> f
    org.spongycastle.math.ec.ECFieldElement sqrt() -> g
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.spongycastle.math.ec.custom.sec.SecP521R1Point -> org.spongycastle.a.a.a.b.T:
    org.spongycastle.math.ec.ECPoint detach() -> e
    org.spongycastle.math.ec.ECPoint add(org.spongycastle.math.ec.ECPoint) -> b
    org.spongycastle.math.ec.ECPoint twice() -> u
    org.spongycastle.math.ec.ECPoint twicePlus(org.spongycastle.math.ec.ECPoint) -> c
    org.spongycastle.math.ec.ECPoint threeTimes() -> v
    org.spongycastle.math.ec.ECPoint negate() -> t
org.spongycastle.math.ec.custom.sec.SecT113Field -> org.spongycastle.a.a.a.b.U:
    void add(long[],long[],long[]) -> a
    void addExt(long[],long[],long[]) -> b
    void addOne(long[],long[]) -> a
    long[] fromBigInteger(java.math.BigInteger) -> a
    void invert(long[],long[]) -> b
    void multiply(long[],long[],long[]) -> c
    void multiplyAddToExt(long[],long[],long[]) -> d
    void reduce(long[],long[]) -> c
    void reduce15(long[],int) -> a
    void sqrt(long[],long[]) -> d
    void square(long[],long[]) -> e
    void squareAddToExt(long[],long[]) -> f
    void squareN(long[],int,long[]) -> a
    void implMultiply(long[],long[],long[]) -> e
    void implMulw(long,long,long[],int) -> a
    void implSquare(long[],long[]) -> g
org.spongycastle.math.ec.custom.sec.SecT113FieldElement -> org.spongycastle.a.a.a.b.V:
    long[] x -> a
    boolean isOne() -> i
    boolean isZero() -> j
    boolean testBitZero() -> k
    java.math.BigInteger toBigInteger() -> a
    int getFieldSize() -> b
    org.spongycastle.math.ec.ECFieldElement add(org.spongycastle.math.ec.ECFieldElement) -> a
    org.spongycastle.math.ec.ECFieldElement addOne() -> c
    org.spongycastle.math.ec.ECFieldElement subtract(org.spongycastle.math.ec.ECFieldElement) -> b
    org.spongycastle.math.ec.ECFieldElement multiply(org.spongycastle.math.ec.ECFieldElement) -> c
    org.spongycastle.math.ec.ECFieldElement multiplyMinusProduct(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement) -> a
    org.spongycastle.math.ec.ECFieldElement multiplyPlusProduct(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement) -> b
    org.spongycastle.math.ec.ECFieldElement divide(org.spongycastle.math.ec.ECFieldElement) -> d
    org.spongycastle.math.ec.ECFieldElement negate() -> d
    org.spongycastle.math.ec.ECFieldElement square() -> e
    org.spongycastle.math.ec.ECFieldElement squarePlusProduct(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement) -> a
    org.spongycastle.math.ec.ECFieldElement squarePow(int) -> a
    org.spongycastle.math.ec.ECFieldElement invert() -> f
    org.spongycastle.math.ec.ECFieldElement sqrt() -> g
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.spongycastle.math.ec.custom.sec.SecT113R1Curve -> org.spongycastle.a.a.a.b.W:
    org.spongycastle.math.ec.custom.sec.SecT113R1Point infinity -> i
    org.spongycastle.math.ec.ECCurve cloneCurve() -> c
    boolean supportsCoordinateSystem(int) -> a
    int getFieldSize() -> a
    org.spongycastle.math.ec.ECFieldElement fromBigInteger(java.math.BigInteger) -> a
    org.spongycastle.math.ec.ECPoint createRawPoint(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,boolean) -> a
    org.spongycastle.math.ec.ECPoint createRawPoint(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement[],boolean) -> a
    org.spongycastle.math.ec.ECPoint getInfinity() -> e
    boolean isKoblitz() -> o
org.spongycastle.math.ec.custom.sec.SecT113R1Point -> org.spongycastle.a.a.a.b.X:
    org.spongycastle.math.ec.ECPoint detach() -> e
    org.spongycastle.math.ec.ECFieldElement getYCoord() -> j
    boolean getCompressionYTilde() -> s
    org.spongycastle.math.ec.ECPoint add(org.spongycastle.math.ec.ECPoint) -> b
    org.spongycastle.math.ec.ECPoint twice() -> u
    org.spongycastle.math.ec.ECPoint twicePlus(org.spongycastle.math.ec.ECPoint) -> c
    org.spongycastle.math.ec.ECPoint negate() -> t
org.spongycastle.math.ec.custom.sec.SecT113R2Curve -> org.spongycastle.a.a.a.b.Y:
    org.spongycastle.math.ec.custom.sec.SecT113R2Point infinity -> i
    org.spongycastle.math.ec.ECCurve cloneCurve() -> c
    boolean supportsCoordinateSystem(int) -> a
    int getFieldSize() -> a
    org.spongycastle.math.ec.ECFieldElement fromBigInteger(java.math.BigInteger) -> a
    org.spongycastle.math.ec.ECPoint createRawPoint(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,boolean) -> a
    org.spongycastle.math.ec.ECPoint createRawPoint(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement[],boolean) -> a
    org.spongycastle.math.ec.ECPoint getInfinity() -> e
    boolean isKoblitz() -> o
org.spongycastle.math.ec.custom.sec.SecT113R2Point -> org.spongycastle.a.a.a.b.Z:
    org.spongycastle.math.ec.ECPoint detach() -> e
    org.spongycastle.math.ec.ECFieldElement getYCoord() -> j
    boolean getCompressionYTilde() -> s
    org.spongycastle.math.ec.ECPoint add(org.spongycastle.math.ec.ECPoint) -> b
    org.spongycastle.math.ec.ECPoint twice() -> u
    org.spongycastle.math.ec.ECPoint twicePlus(org.spongycastle.math.ec.ECPoint) -> c
    org.spongycastle.math.ec.ECPoint negate() -> t
org.spongycastle.math.ec.custom.sec.SecT131Field -> org.spongycastle.a.a.a.b.aa:
    long[] ROOT_Z -> a
    void add(long[],long[],long[]) -> a
    void addExt(long[],long[],long[]) -> b
    void addOne(long[],long[]) -> a
    long[] fromBigInteger(java.math.BigInteger) -> a
    void invert(long[],long[]) -> b
    void multiply(long[],long[],long[]) -> c
    void multiplyAddToExt(long[],long[],long[]) -> d
    void reduce(long[],long[]) -> c
    void reduce61(long[],int) -> a
    void sqrt(long[],long[]) -> d
    void square(long[],long[]) -> e
    void squareAddToExt(long[],long[]) -> f
    void squareN(long[],int,long[]) -> a
    void implCompactExt(long[]) -> a
    void implMultiply(long[],long[],long[]) -> e
    void implMulw(long,long,long[],int) -> a
    void implSquare(long[],long[]) -> g
org.spongycastle.math.ec.custom.sec.SecT131FieldElement -> org.spongycastle.a.a.a.b.ab:
    long[] x -> a
    boolean isOne() -> i
    boolean isZero() -> j
    boolean testBitZero() -> k
    java.math.BigInteger toBigInteger() -> a
    int getFieldSize() -> b
    org.spongycastle.math.ec.ECFieldElement add(org.spongycastle.math.ec.ECFieldElement) -> a
    org.spongycastle.math.ec.ECFieldElement addOne() -> c
    org.spongycastle.math.ec.ECFieldElement subtract(org.spongycastle.math.ec.ECFieldElement) -> b
    org.spongycastle.math.ec.ECFieldElement multiply(org.spongycastle.math.ec.ECFieldElement) -> c
    org.spongycastle.math.ec.ECFieldElement multiplyMinusProduct(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement) -> a
    org.spongycastle.math.ec.ECFieldElement multiplyPlusProduct(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement) -> b
    org.spongycastle.math.ec.ECFieldElement divide(org.spongycastle.math.ec.ECFieldElement) -> d
    org.spongycastle.math.ec.ECFieldElement negate() -> d
    org.spongycastle.math.ec.ECFieldElement square() -> e
    org.spongycastle.math.ec.ECFieldElement squarePlusProduct(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement) -> a
    org.spongycastle.math.ec.ECFieldElement squarePow(int) -> a
    org.spongycastle.math.ec.ECFieldElement invert() -> f
    org.spongycastle.math.ec.ECFieldElement sqrt() -> g
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.spongycastle.math.ec.custom.sec.SecT131R1Curve -> org.spongycastle.a.a.a.b.ac:
    org.spongycastle.math.ec.custom.sec.SecT131R1Point infinity -> i
    org.spongycastle.math.ec.ECCurve cloneCurve() -> c
    boolean supportsCoordinateSystem(int) -> a
    int getFieldSize() -> a
    org.spongycastle.math.ec.ECFieldElement fromBigInteger(java.math.BigInteger) -> a
    org.spongycastle.math.ec.ECPoint createRawPoint(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,boolean) -> a
    org.spongycastle.math.ec.ECPoint createRawPoint(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement[],boolean) -> a
    org.spongycastle.math.ec.ECPoint getInfinity() -> e
    boolean isKoblitz() -> o
org.spongycastle.math.ec.custom.sec.SecT131R1Point -> org.spongycastle.a.a.a.b.ad:
    org.spongycastle.math.ec.ECPoint detach() -> e
    org.spongycastle.math.ec.ECFieldElement getYCoord() -> j
    boolean getCompressionYTilde() -> s
    org.spongycastle.math.ec.ECPoint add(org.spongycastle.math.ec.ECPoint) -> b
    org.spongycastle.math.ec.ECPoint twice() -> u
    org.spongycastle.math.ec.ECPoint twicePlus(org.spongycastle.math.ec.ECPoint) -> c
    org.spongycastle.math.ec.ECPoint negate() -> t
org.spongycastle.math.ec.custom.sec.SecT131R2Curve -> org.spongycastle.a.a.a.b.ae:
    org.spongycastle.math.ec.custom.sec.SecT131R2Point infinity -> i
    org.spongycastle.math.ec.ECCurve cloneCurve() -> c
    boolean supportsCoordinateSystem(int) -> a
    int getFieldSize() -> a
    org.spongycastle.math.ec.ECFieldElement fromBigInteger(java.math.BigInteger) -> a
    org.spongycastle.math.ec.ECPoint createRawPoint(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,boolean) -> a
    org.spongycastle.math.ec.ECPoint createRawPoint(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement[],boolean) -> a
    org.spongycastle.math.ec.ECPoint getInfinity() -> e
    boolean isKoblitz() -> o
org.spongycastle.math.ec.custom.sec.SecT131R2Point -> org.spongycastle.a.a.a.b.af:
    org.spongycastle.math.ec.ECPoint detach() -> e
    org.spongycastle.math.ec.ECFieldElement getYCoord() -> j
    boolean getCompressionYTilde() -> s
    org.spongycastle.math.ec.ECPoint add(org.spongycastle.math.ec.ECPoint) -> b
    org.spongycastle.math.ec.ECPoint twice() -> u
    org.spongycastle.math.ec.ECPoint twicePlus(org.spongycastle.math.ec.ECPoint) -> c
    org.spongycastle.math.ec.ECPoint negate() -> t
org.spongycastle.math.ec.custom.sec.SecT163Field -> org.spongycastle.a.a.a.b.ag:
    long[] ROOT_Z -> a
    void add(long[],long[],long[]) -> a
    void addExt(long[],long[],long[]) -> b
    void addOne(long[],long[]) -> a
    long[] fromBigInteger(java.math.BigInteger) -> a
    void invert(long[],long[]) -> b
    void multiply(long[],long[],long[]) -> c
    void multiplyAddToExt(long[],long[],long[]) -> d
    void reduce(long[],long[]) -> c
    void reduce29(long[],int) -> a
    void sqrt(long[],long[]) -> d
    void square(long[],long[]) -> e
    void squareAddToExt(long[],long[]) -> f
    void squareN(long[],int,long[]) -> a
    void implCompactExt(long[]) -> a
    void implMultiply(long[],long[],long[]) -> e
    void implMulw(long,long,long[],int) -> a
    void implSquare(long[],long[]) -> g
org.spongycastle.math.ec.custom.sec.SecT163FieldElement -> org.spongycastle.a.a.a.b.ah:
    long[] x -> a
    boolean isOne() -> i
    boolean isZero() -> j
    boolean testBitZero() -> k
    java.math.BigInteger toBigInteger() -> a
    int getFieldSize() -> b
    org.spongycastle.math.ec.ECFieldElement add(org.spongycastle.math.ec.ECFieldElement) -> a
    org.spongycastle.math.ec.ECFieldElement addOne() -> c
    org.spongycastle.math.ec.ECFieldElement subtract(org.spongycastle.math.ec.ECFieldElement) -> b
    org.spongycastle.math.ec.ECFieldElement multiply(org.spongycastle.math.ec.ECFieldElement) -> c
    org.spongycastle.math.ec.ECFieldElement multiplyMinusProduct(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement) -> a
    org.spongycastle.math.ec.ECFieldElement multiplyPlusProduct(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement) -> b
    org.spongycastle.math.ec.ECFieldElement divide(org.spongycastle.math.ec.ECFieldElement) -> d
    org.spongycastle.math.ec.ECFieldElement negate() -> d
    org.spongycastle.math.ec.ECFieldElement square() -> e
    org.spongycastle.math.ec.ECFieldElement squarePlusProduct(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement) -> a
    org.spongycastle.math.ec.ECFieldElement squarePow(int) -> a
    org.spongycastle.math.ec.ECFieldElement invert() -> f
    org.spongycastle.math.ec.ECFieldElement sqrt() -> g
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.spongycastle.math.ec.custom.sec.SecT163K1Curve -> org.spongycastle.a.a.a.b.ai:
    org.spongycastle.math.ec.custom.sec.SecT163K1Point infinity -> i
    org.spongycastle.math.ec.ECCurve cloneCurve() -> c
    boolean supportsCoordinateSystem(int) -> a
    org.spongycastle.math.ec.ECMultiplier createDefaultMultiplier() -> d
    int getFieldSize() -> a
    org.spongycastle.math.ec.ECFieldElement fromBigInteger(java.math.BigInteger) -> a
    org.spongycastle.math.ec.ECPoint createRawPoint(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,boolean) -> a
    org.spongycastle.math.ec.ECPoint createRawPoint(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement[],boolean) -> a
    org.spongycastle.math.ec.ECPoint getInfinity() -> e
    boolean isKoblitz() -> o
org.spongycastle.math.ec.custom.sec.SecT163K1Point -> org.spongycastle.a.a.a.b.aj:
    org.spongycastle.math.ec.ECPoint detach() -> e
    org.spongycastle.math.ec.ECFieldElement getYCoord() -> j
    boolean getCompressionYTilde() -> s
    org.spongycastle.math.ec.ECPoint add(org.spongycastle.math.ec.ECPoint) -> b
    org.spongycastle.math.ec.ECPoint twice() -> u
    org.spongycastle.math.ec.ECPoint twicePlus(org.spongycastle.math.ec.ECPoint) -> c
    org.spongycastle.math.ec.ECPoint negate() -> t
org.spongycastle.math.ec.custom.sec.SecT163R1Curve -> org.spongycastle.a.a.a.b.ak:
    org.spongycastle.math.ec.custom.sec.SecT163R1Point infinity -> i
    org.spongycastle.math.ec.ECCurve cloneCurve() -> c
    boolean supportsCoordinateSystem(int) -> a
    int getFieldSize() -> a
    org.spongycastle.math.ec.ECFieldElement fromBigInteger(java.math.BigInteger) -> a
    org.spongycastle.math.ec.ECPoint createRawPoint(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,boolean) -> a
    org.spongycastle.math.ec.ECPoint createRawPoint(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement[],boolean) -> a
    org.spongycastle.math.ec.ECPoint getInfinity() -> e
    boolean isKoblitz() -> o
org.spongycastle.math.ec.custom.sec.SecT163R1Point -> org.spongycastle.a.a.a.b.al:
    org.spongycastle.math.ec.ECPoint detach() -> e
    org.spongycastle.math.ec.ECFieldElement getYCoord() -> j
    boolean getCompressionYTilde() -> s
    org.spongycastle.math.ec.ECPoint add(org.spongycastle.math.ec.ECPoint) -> b
    org.spongycastle.math.ec.ECPoint twice() -> u
    org.spongycastle.math.ec.ECPoint twicePlus(org.spongycastle.math.ec.ECPoint) -> c
    org.spongycastle.math.ec.ECPoint negate() -> t
org.spongycastle.math.ec.custom.sec.SecT163R2Curve -> org.spongycastle.a.a.a.b.am:
    org.spongycastle.math.ec.custom.sec.SecT163R2Point infinity -> i
    org.spongycastle.math.ec.ECCurve cloneCurve() -> c
    boolean supportsCoordinateSystem(int) -> a
    int getFieldSize() -> a
    org.spongycastle.math.ec.ECFieldElement fromBigInteger(java.math.BigInteger) -> a
    org.spongycastle.math.ec.ECPoint createRawPoint(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,boolean) -> a
    org.spongycastle.math.ec.ECPoint createRawPoint(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement[],boolean) -> a
    org.spongycastle.math.ec.ECPoint getInfinity() -> e
    boolean isKoblitz() -> o
org.spongycastle.math.ec.custom.sec.SecT163R2Point -> org.spongycastle.a.a.a.b.an:
    org.spongycastle.math.ec.ECPoint detach() -> e
    org.spongycastle.math.ec.ECFieldElement getYCoord() -> j
    boolean getCompressionYTilde() -> s
    org.spongycastle.math.ec.ECPoint add(org.spongycastle.math.ec.ECPoint) -> b
    org.spongycastle.math.ec.ECPoint twice() -> u
    org.spongycastle.math.ec.ECPoint twicePlus(org.spongycastle.math.ec.ECPoint) -> c
    org.spongycastle.math.ec.ECPoint negate() -> t
org.spongycastle.math.ec.custom.sec.SecT193Field -> org.spongycastle.a.a.a.b.ao:
    void add(long[],long[],long[]) -> a
    void addExt(long[],long[],long[]) -> b
    void addOne(long[],long[]) -> a
    long[] fromBigInteger(java.math.BigInteger) -> a
    void invert(long[],long[]) -> b
    void multiply(long[],long[],long[]) -> c
    void multiplyAddToExt(long[],long[],long[]) -> d
    void reduce(long[],long[]) -> c
    void reduce63(long[],int) -> a
    void sqrt(long[],long[]) -> d
    void square(long[],long[]) -> e
    void squareAddToExt(long[],long[]) -> f
    void squareN(long[],int,long[]) -> a
    void implCompactExt(long[]) -> a
    void implExpand(long[],long[]) -> g
    void implMultiply(long[],long[],long[]) -> e
    void implMulwAcc(long,long,long[],int) -> a
    void implSquare(long[],long[]) -> h
org.spongycastle.math.ec.custom.sec.SecT193FieldElement -> org.spongycastle.a.a.a.b.ap:
    long[] x -> a
    boolean isOne() -> i
    boolean isZero() -> j
    boolean testBitZero() -> k
    java.math.BigInteger toBigInteger() -> a
    int getFieldSize() -> b
    org.spongycastle.math.ec.ECFieldElement add(org.spongycastle.math.ec.ECFieldElement) -> a
    org.spongycastle.math.ec.ECFieldElement addOne() -> c
    org.spongycastle.math.ec.ECFieldElement subtract(org.spongycastle.math.ec.ECFieldElement) -> b
    org.spongycastle.math.ec.ECFieldElement multiply(org.spongycastle.math.ec.ECFieldElement) -> c
    org.spongycastle.math.ec.ECFieldElement multiplyMinusProduct(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement) -> a
    org.spongycastle.math.ec.ECFieldElement multiplyPlusProduct(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement) -> b
    org.spongycastle.math.ec.ECFieldElement divide(org.spongycastle.math.ec.ECFieldElement) -> d
    org.spongycastle.math.ec.ECFieldElement negate() -> d
    org.spongycastle.math.ec.ECFieldElement square() -> e
    org.spongycastle.math.ec.ECFieldElement squarePlusProduct(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement) -> a
    org.spongycastle.math.ec.ECFieldElement squarePow(int) -> a
    org.spongycastle.math.ec.ECFieldElement invert() -> f
    org.spongycastle.math.ec.ECFieldElement sqrt() -> g
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.spongycastle.math.ec.custom.sec.SecT193R1Curve -> org.spongycastle.a.a.a.b.aq:
    org.spongycastle.math.ec.custom.sec.SecT193R1Point infinity -> i
    org.spongycastle.math.ec.ECCurve cloneCurve() -> c
    boolean supportsCoordinateSystem(int) -> a
    int getFieldSize() -> a
    org.spongycastle.math.ec.ECFieldElement fromBigInteger(java.math.BigInteger) -> a
    org.spongycastle.math.ec.ECPoint createRawPoint(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,boolean) -> a
    org.spongycastle.math.ec.ECPoint createRawPoint(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement[],boolean) -> a
    org.spongycastle.math.ec.ECPoint getInfinity() -> e
    boolean isKoblitz() -> o
org.spongycastle.math.ec.custom.sec.SecT193R1Point -> org.spongycastle.a.a.a.b.ar:
    org.spongycastle.math.ec.ECPoint detach() -> e
    org.spongycastle.math.ec.ECFieldElement getYCoord() -> j
    boolean getCompressionYTilde() -> s
    org.spongycastle.math.ec.ECPoint add(org.spongycastle.math.ec.ECPoint) -> b
    org.spongycastle.math.ec.ECPoint twice() -> u
    org.spongycastle.math.ec.ECPoint twicePlus(org.spongycastle.math.ec.ECPoint) -> c
    org.spongycastle.math.ec.ECPoint negate() -> t
org.spongycastle.math.ec.custom.sec.SecT193R2Curve -> org.spongycastle.a.a.a.b.as:
    org.spongycastle.math.ec.custom.sec.SecT193R2Point infinity -> i
    org.spongycastle.math.ec.ECCurve cloneCurve() -> c
    boolean supportsCoordinateSystem(int) -> a
    int getFieldSize() -> a
    org.spongycastle.math.ec.ECFieldElement fromBigInteger(java.math.BigInteger) -> a
    org.spongycastle.math.ec.ECPoint createRawPoint(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,boolean) -> a
    org.spongycastle.math.ec.ECPoint createRawPoint(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement[],boolean) -> a
    org.spongycastle.math.ec.ECPoint getInfinity() -> e
    boolean isKoblitz() -> o
org.spongycastle.math.ec.custom.sec.SecT193R2Point -> org.spongycastle.a.a.a.b.at:
    org.spongycastle.math.ec.ECPoint detach() -> e
    org.spongycastle.math.ec.ECFieldElement getYCoord() -> j
    boolean getCompressionYTilde() -> s
    org.spongycastle.math.ec.ECPoint add(org.spongycastle.math.ec.ECPoint) -> b
    org.spongycastle.math.ec.ECPoint twice() -> u
    org.spongycastle.math.ec.ECPoint twicePlus(org.spongycastle.math.ec.ECPoint) -> c
    org.spongycastle.math.ec.ECPoint negate() -> t
org.spongycastle.math.ec.custom.sec.SecT233Field -> org.spongycastle.a.a.a.b.au:
    void add(long[],long[],long[]) -> a
    void addExt(long[],long[],long[]) -> b
    void addOne(long[],long[]) -> a
    long[] fromBigInteger(java.math.BigInteger) -> a
    void invert(long[],long[]) -> b
    void multiply(long[],long[],long[]) -> c
    void multiplyAddToExt(long[],long[],long[]) -> d
    void reduce(long[],long[]) -> c
    void reduce23(long[],int) -> a
    void square(long[],long[]) -> d
    void squareAddToExt(long[],long[]) -> e
    void squareN(long[],int,long[]) -> a
    void sqrt(long[],long[]) -> f
    void implCompactExt(long[]) -> a
    void implExpand(long[],long[]) -> g
    void implMultiply(long[],long[],long[]) -> e
    void implMulwAcc(long,long,long[],int) -> a
    void implSquare(long[],long[]) -> h
org.spongycastle.math.ec.custom.sec.SecT233FieldElement -> org.spongycastle.a.a.a.b.av:
    long[] x -> a
    boolean isOne() -> i
    boolean isZero() -> j
    boolean testBitZero() -> k
    java.math.BigInteger toBigInteger() -> a
    int getFieldSize() -> b
    org.spongycastle.math.ec.ECFieldElement add(org.spongycastle.math.ec.ECFieldElement) -> a
    org.spongycastle.math.ec.ECFieldElement addOne() -> c
    org.spongycastle.math.ec.ECFieldElement subtract(org.spongycastle.math.ec.ECFieldElement) -> b
    org.spongycastle.math.ec.ECFieldElement multiply(org.spongycastle.math.ec.ECFieldElement) -> c
    org.spongycastle.math.ec.ECFieldElement multiplyMinusProduct(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement) -> a
    org.spongycastle.math.ec.ECFieldElement multiplyPlusProduct(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement) -> b
    org.spongycastle.math.ec.ECFieldElement divide(org.spongycastle.math.ec.ECFieldElement) -> d
    org.spongycastle.math.ec.ECFieldElement negate() -> d
    org.spongycastle.math.ec.ECFieldElement square() -> e
    org.spongycastle.math.ec.ECFieldElement squarePlusProduct(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement) -> a
    org.spongycastle.math.ec.ECFieldElement squarePow(int) -> a
    org.spongycastle.math.ec.ECFieldElement invert() -> f
    org.spongycastle.math.ec.ECFieldElement sqrt() -> g
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.spongycastle.math.ec.custom.sec.SecT233K1Curve -> org.spongycastle.a.a.a.b.aw:
    org.spongycastle.math.ec.custom.sec.SecT233K1Point infinity -> i
    org.spongycastle.math.ec.ECCurve cloneCurve() -> c
    boolean supportsCoordinateSystem(int) -> a
    org.spongycastle.math.ec.ECMultiplier createDefaultMultiplier() -> d
    int getFieldSize() -> a
    org.spongycastle.math.ec.ECFieldElement fromBigInteger(java.math.BigInteger) -> a
    org.spongycastle.math.ec.ECPoint createRawPoint(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,boolean) -> a
    org.spongycastle.math.ec.ECPoint createRawPoint(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement[],boolean) -> a
    org.spongycastle.math.ec.ECPoint getInfinity() -> e
    boolean isKoblitz() -> o
org.spongycastle.math.ec.custom.sec.SecT233K1Point -> org.spongycastle.a.a.a.b.ax:
    org.spongycastle.math.ec.ECPoint detach() -> e
    org.spongycastle.math.ec.ECFieldElement getYCoord() -> j
    boolean getCompressionYTilde() -> s
    org.spongycastle.math.ec.ECPoint add(org.spongycastle.math.ec.ECPoint) -> b
    org.spongycastle.math.ec.ECPoint twice() -> u
    org.spongycastle.math.ec.ECPoint twicePlus(org.spongycastle.math.ec.ECPoint) -> c
    org.spongycastle.math.ec.ECPoint negate() -> t
org.spongycastle.math.ec.custom.sec.SecT233R1Curve -> org.spongycastle.a.a.a.b.ay:
    org.spongycastle.math.ec.custom.sec.SecT233R1Point infinity -> i
    org.spongycastle.math.ec.ECCurve cloneCurve() -> c
    boolean supportsCoordinateSystem(int) -> a
    int getFieldSize() -> a
    org.spongycastle.math.ec.ECFieldElement fromBigInteger(java.math.BigInteger) -> a
    org.spongycastle.math.ec.ECPoint createRawPoint(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,boolean) -> a
    org.spongycastle.math.ec.ECPoint createRawPoint(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement[],boolean) -> a
    org.spongycastle.math.ec.ECPoint getInfinity() -> e
    boolean isKoblitz() -> o
org.spongycastle.math.ec.custom.sec.SecT233R1Point -> org.spongycastle.a.a.a.b.az:
    org.spongycastle.math.ec.ECPoint detach() -> e
    org.spongycastle.math.ec.ECFieldElement getYCoord() -> j
    boolean getCompressionYTilde() -> s
    org.spongycastle.math.ec.ECPoint add(org.spongycastle.math.ec.ECPoint) -> b
    org.spongycastle.math.ec.ECPoint twice() -> u
    org.spongycastle.math.ec.ECPoint twicePlus(org.spongycastle.math.ec.ECPoint) -> c
    org.spongycastle.math.ec.ECPoint negate() -> t
org.spongycastle.math.ec.custom.sec.SecT239Field -> org.spongycastle.a.a.a.b.aA:
    void add(long[],long[],long[]) -> a
    void addExt(long[],long[],long[]) -> b
    void addOne(long[],long[]) -> a
    long[] fromBigInteger(java.math.BigInteger) -> a
    void invert(long[],long[]) -> b
    void multiply(long[],long[],long[]) -> c
    void multiplyAddToExt(long[],long[],long[]) -> d
    void reduce(long[],long[]) -> c
    void reduce17(long[],int) -> a
    void sqrt(long[],long[]) -> d
    void square(long[],long[]) -> e
    void squareAddToExt(long[],long[]) -> f
    void squareN(long[],int,long[]) -> a
    void implCompactExt(long[]) -> a
    void implExpand(long[],long[]) -> g
    void implMultiply(long[],long[],long[]) -> e
    void implMulwAcc(long,long,long[],int) -> a
    void implSquare(long[],long[]) -> h
org.spongycastle.math.ec.custom.sec.SecT239FieldElement -> org.spongycastle.a.a.a.b.aB:
    long[] x -> a
    boolean isOne() -> i
    boolean isZero() -> j
    boolean testBitZero() -> k
    java.math.BigInteger toBigInteger() -> a
    int getFieldSize() -> b
    org.spongycastle.math.ec.ECFieldElement add(org.spongycastle.math.ec.ECFieldElement) -> a
    org.spongycastle.math.ec.ECFieldElement addOne() -> c
    org.spongycastle.math.ec.ECFieldElement subtract(org.spongycastle.math.ec.ECFieldElement) -> b
    org.spongycastle.math.ec.ECFieldElement multiply(org.spongycastle.math.ec.ECFieldElement) -> c
    org.spongycastle.math.ec.ECFieldElement multiplyMinusProduct(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement) -> a
    org.spongycastle.math.ec.ECFieldElement multiplyPlusProduct(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement) -> b
    org.spongycastle.math.ec.ECFieldElement divide(org.spongycastle.math.ec.ECFieldElement) -> d
    org.spongycastle.math.ec.ECFieldElement negate() -> d
    org.spongycastle.math.ec.ECFieldElement square() -> e
    org.spongycastle.math.ec.ECFieldElement squarePlusProduct(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement) -> a
    org.spongycastle.math.ec.ECFieldElement squarePow(int) -> a
    org.spongycastle.math.ec.ECFieldElement invert() -> f
    org.spongycastle.math.ec.ECFieldElement sqrt() -> g
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.spongycastle.math.ec.custom.sec.SecT239K1Curve -> org.spongycastle.a.a.a.b.aC:
    org.spongycastle.math.ec.custom.sec.SecT239K1Point infinity -> i
    org.spongycastle.math.ec.ECCurve cloneCurve() -> c
    boolean supportsCoordinateSystem(int) -> a
    org.spongycastle.math.ec.ECMultiplier createDefaultMultiplier() -> d
    int getFieldSize() -> a
    org.spongycastle.math.ec.ECFieldElement fromBigInteger(java.math.BigInteger) -> a
    org.spongycastle.math.ec.ECPoint createRawPoint(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,boolean) -> a
    org.spongycastle.math.ec.ECPoint createRawPoint(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement[],boolean) -> a
    org.spongycastle.math.ec.ECPoint getInfinity() -> e
    boolean isKoblitz() -> o
org.spongycastle.math.ec.custom.sec.SecT239K1Point -> org.spongycastle.a.a.a.b.aD:
    org.spongycastle.math.ec.ECPoint detach() -> e
    org.spongycastle.math.ec.ECFieldElement getYCoord() -> j
    boolean getCompressionYTilde() -> s
    org.spongycastle.math.ec.ECPoint add(org.spongycastle.math.ec.ECPoint) -> b
    org.spongycastle.math.ec.ECPoint twice() -> u
    org.spongycastle.math.ec.ECPoint twicePlus(org.spongycastle.math.ec.ECPoint) -> c
    org.spongycastle.math.ec.ECPoint negate() -> t
org.spongycastle.math.ec.custom.sec.SecT283Field -> org.spongycastle.a.a.a.b.aE:
    long[] ROOT_Z -> a
    void add(long[],long[],long[]) -> a
    void addExt(long[],long[],long[]) -> b
    void addOne(long[],long[]) -> a
    long[] fromBigInteger(java.math.BigInteger) -> a
    void invert(long[],long[]) -> b
    void multiply(long[],long[],long[]) -> c
    void multiplyAddToExt(long[],long[],long[]) -> d
    void reduce(long[],long[]) -> c
    void reduce37(long[],int) -> a
    void sqrt(long[],long[]) -> d
    void square(long[],long[]) -> e
    void squareAddToExt(long[],long[]) -> f
    void squareN(long[],int,long[]) -> a
    void implCompactExt(long[]) -> a
    void implExpand(long[],long[]) -> g
    void implMultiply(long[],long[],long[]) -> e
    void implMulw(long,long,long[],int) -> a
    void implSquare(long[],long[]) -> h
org.spongycastle.math.ec.custom.sec.SecT283FieldElement -> org.spongycastle.a.a.a.b.aF:
    long[] x -> a
    boolean isOne() -> i
    boolean isZero() -> j
    boolean testBitZero() -> k
    java.math.BigInteger toBigInteger() -> a
    int getFieldSize() -> b
    org.spongycastle.math.ec.ECFieldElement add(org.spongycastle.math.ec.ECFieldElement) -> a
    org.spongycastle.math.ec.ECFieldElement addOne() -> c
    org.spongycastle.math.ec.ECFieldElement subtract(org.spongycastle.math.ec.ECFieldElement) -> b
    org.spongycastle.math.ec.ECFieldElement multiply(org.spongycastle.math.ec.ECFieldElement) -> c
    org.spongycastle.math.ec.ECFieldElement multiplyMinusProduct(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement) -> a
    org.spongycastle.math.ec.ECFieldElement multiplyPlusProduct(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement) -> b
    org.spongycastle.math.ec.ECFieldElement divide(org.spongycastle.math.ec.ECFieldElement) -> d
    org.spongycastle.math.ec.ECFieldElement negate() -> d
    org.spongycastle.math.ec.ECFieldElement square() -> e
    org.spongycastle.math.ec.ECFieldElement squarePlusProduct(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement) -> a
    org.spongycastle.math.ec.ECFieldElement squarePow(int) -> a
    org.spongycastle.math.ec.ECFieldElement invert() -> f
    org.spongycastle.math.ec.ECFieldElement sqrt() -> g
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.spongycastle.math.ec.custom.sec.SecT283K1Curve -> org.spongycastle.a.a.a.b.aG:
    org.spongycastle.math.ec.custom.sec.SecT283K1Point infinity -> i
    org.spongycastle.math.ec.ECCurve cloneCurve() -> c
    boolean supportsCoordinateSystem(int) -> a
    org.spongycastle.math.ec.ECMultiplier createDefaultMultiplier() -> d
    int getFieldSize() -> a
    org.spongycastle.math.ec.ECFieldElement fromBigInteger(java.math.BigInteger) -> a
    org.spongycastle.math.ec.ECPoint createRawPoint(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,boolean) -> a
    org.spongycastle.math.ec.ECPoint createRawPoint(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement[],boolean) -> a
    org.spongycastle.math.ec.ECPoint getInfinity() -> e
    boolean isKoblitz() -> o
org.spongycastle.math.ec.custom.sec.SecT283K1Point -> org.spongycastle.a.a.a.b.aH:
    org.spongycastle.math.ec.ECPoint detach() -> e
    org.spongycastle.math.ec.ECFieldElement getYCoord() -> j
    boolean getCompressionYTilde() -> s
    org.spongycastle.math.ec.ECPoint add(org.spongycastle.math.ec.ECPoint) -> b
    org.spongycastle.math.ec.ECPoint twice() -> u
    org.spongycastle.math.ec.ECPoint twicePlus(org.spongycastle.math.ec.ECPoint) -> c
    org.spongycastle.math.ec.ECPoint negate() -> t
org.spongycastle.math.ec.custom.sec.SecT283R1Curve -> org.spongycastle.a.a.a.b.aI:
    org.spongycastle.math.ec.custom.sec.SecT283R1Point infinity -> i
    org.spongycastle.math.ec.ECCurve cloneCurve() -> c
    boolean supportsCoordinateSystem(int) -> a
    int getFieldSize() -> a
    org.spongycastle.math.ec.ECFieldElement fromBigInteger(java.math.BigInteger) -> a
    org.spongycastle.math.ec.ECPoint createRawPoint(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,boolean) -> a
    org.spongycastle.math.ec.ECPoint createRawPoint(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement[],boolean) -> a
    org.spongycastle.math.ec.ECPoint getInfinity() -> e
    boolean isKoblitz() -> o
org.spongycastle.math.ec.custom.sec.SecT283R1Point -> org.spongycastle.a.a.a.b.aJ:
    org.spongycastle.math.ec.ECPoint detach() -> e
    org.spongycastle.math.ec.ECFieldElement getYCoord() -> j
    boolean getCompressionYTilde() -> s
    org.spongycastle.math.ec.ECPoint add(org.spongycastle.math.ec.ECPoint) -> b
    org.spongycastle.math.ec.ECPoint twice() -> u
    org.spongycastle.math.ec.ECPoint twicePlus(org.spongycastle.math.ec.ECPoint) -> c
    org.spongycastle.math.ec.ECPoint negate() -> t
org.spongycastle.math.ec.custom.sec.SecT409Field -> org.spongycastle.a.a.a.b.aK:
    void add(long[],long[],long[]) -> a
    void addExt(long[],long[],long[]) -> b
    void addOne(long[],long[]) -> a
    long[] fromBigInteger(java.math.BigInteger) -> a
    void invert(long[],long[]) -> b
    void multiply(long[],long[],long[]) -> c
    void multiplyAddToExt(long[],long[],long[]) -> d
    void reduce(long[],long[]) -> c
    void reduce39(long[],int) -> a
    void sqrt(long[],long[]) -> d
    void square(long[],long[]) -> e
    void squareAddToExt(long[],long[]) -> f
    void squareN(long[],int,long[]) -> a
    void implCompactExt(long[]) -> a
    void implExpand(long[],long[]) -> g
    void implMultiply(long[],long[],long[]) -> e
    void implMulwAcc(long[],long,long[],int) -> a
    void implSquare(long[],long[]) -> h
org.spongycastle.math.ec.custom.sec.SecT409FieldElement -> org.spongycastle.a.a.a.b.aL:
    long[] x -> a
    boolean isOne() -> i
    boolean isZero() -> j
    boolean testBitZero() -> k
    java.math.BigInteger toBigInteger() -> a
    int getFieldSize() -> b
    org.spongycastle.math.ec.ECFieldElement add(org.spongycastle.math.ec.ECFieldElement) -> a
    org.spongycastle.math.ec.ECFieldElement addOne() -> c
    org.spongycastle.math.ec.ECFieldElement subtract(org.spongycastle.math.ec.ECFieldElement) -> b
    org.spongycastle.math.ec.ECFieldElement multiply(org.spongycastle.math.ec.ECFieldElement) -> c
    org.spongycastle.math.ec.ECFieldElement multiplyMinusProduct(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement) -> a
    org.spongycastle.math.ec.ECFieldElement multiplyPlusProduct(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement) -> b
    org.spongycastle.math.ec.ECFieldElement divide(org.spongycastle.math.ec.ECFieldElement) -> d
    org.spongycastle.math.ec.ECFieldElement negate() -> d
    org.spongycastle.math.ec.ECFieldElement square() -> e
    org.spongycastle.math.ec.ECFieldElement squarePlusProduct(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement) -> a
    org.spongycastle.math.ec.ECFieldElement squarePow(int) -> a
    org.spongycastle.math.ec.ECFieldElement invert() -> f
    org.spongycastle.math.ec.ECFieldElement sqrt() -> g
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.spongycastle.math.ec.custom.sec.SecT409K1Curve -> org.spongycastle.a.a.a.b.aM:
    org.spongycastle.math.ec.custom.sec.SecT409K1Point infinity -> i
    org.spongycastle.math.ec.ECCurve cloneCurve() -> c
    boolean supportsCoordinateSystem(int) -> a
    org.spongycastle.math.ec.ECMultiplier createDefaultMultiplier() -> d
    int getFieldSize() -> a
    org.spongycastle.math.ec.ECFieldElement fromBigInteger(java.math.BigInteger) -> a
    org.spongycastle.math.ec.ECPoint createRawPoint(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,boolean) -> a
    org.spongycastle.math.ec.ECPoint createRawPoint(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement[],boolean) -> a
    org.spongycastle.math.ec.ECPoint getInfinity() -> e
    boolean isKoblitz() -> o
org.spongycastle.math.ec.custom.sec.SecT409K1Point -> org.spongycastle.a.a.a.b.aN:
    org.spongycastle.math.ec.ECPoint detach() -> e
    org.spongycastle.math.ec.ECFieldElement getYCoord() -> j
    boolean getCompressionYTilde() -> s
    org.spongycastle.math.ec.ECPoint add(org.spongycastle.math.ec.ECPoint) -> b
    org.spongycastle.math.ec.ECPoint twice() -> u
    org.spongycastle.math.ec.ECPoint twicePlus(org.spongycastle.math.ec.ECPoint) -> c
    org.spongycastle.math.ec.ECPoint negate() -> t
org.spongycastle.math.ec.custom.sec.SecT409R1Curve -> org.spongycastle.a.a.a.b.aO:
    org.spongycastle.math.ec.custom.sec.SecT409R1Point infinity -> i
    org.spongycastle.math.ec.ECCurve cloneCurve() -> c
    boolean supportsCoordinateSystem(int) -> a
    int getFieldSize() -> a
    org.spongycastle.math.ec.ECFieldElement fromBigInteger(java.math.BigInteger) -> a
    org.spongycastle.math.ec.ECPoint createRawPoint(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,boolean) -> a
    org.spongycastle.math.ec.ECPoint createRawPoint(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement[],boolean) -> a
    org.spongycastle.math.ec.ECPoint getInfinity() -> e
    boolean isKoblitz() -> o
org.spongycastle.math.ec.custom.sec.SecT409R1Point -> org.spongycastle.a.a.a.b.aP:
    org.spongycastle.math.ec.ECPoint detach() -> e
    org.spongycastle.math.ec.ECFieldElement getYCoord() -> j
    boolean getCompressionYTilde() -> s
    org.spongycastle.math.ec.ECPoint add(org.spongycastle.math.ec.ECPoint) -> b
    org.spongycastle.math.ec.ECPoint twice() -> u
    org.spongycastle.math.ec.ECPoint twicePlus(org.spongycastle.math.ec.ECPoint) -> c
    org.spongycastle.math.ec.ECPoint negate() -> t
org.spongycastle.math.ec.custom.sec.SecT571Field -> org.spongycastle.a.a.a.b.aQ:
    long[] ROOT_Z -> a
    void add(long[],long[],long[]) -> a
    void add(long[],int,long[],int,long[],int) -> a
    void addBothTo(long[],int,long[],int,long[],int) -> b
    void addExt(long[],long[],long[]) -> b
    void addOne(long[],long[]) -> a
    long[] fromBigInteger(java.math.BigInteger) -> a
    void invert(long[],long[]) -> b
    void multiply(long[],long[],long[]) -> c
    void multiplyAddToExt(long[],long[],long[]) -> d
    void reduce(long[],long[]) -> c
    void reduce5(long[],int) -> a
    void sqrt(long[],long[]) -> d
    void square(long[],long[]) -> e
    void squareAddToExt(long[],long[]) -> f
    void squareN(long[],int,long[]) -> a
    void implMultiply(long[],long[],long[]) -> e
    void implSquare(long[],long[]) -> g
org.spongycastle.math.ec.custom.sec.SecT571FieldElement -> org.spongycastle.a.a.a.b.aR:
    long[] x -> a
    boolean isOne() -> i
    boolean isZero() -> j
    boolean testBitZero() -> k
    java.math.BigInteger toBigInteger() -> a
    int getFieldSize() -> b
    org.spongycastle.math.ec.ECFieldElement add(org.spongycastle.math.ec.ECFieldElement) -> a
    org.spongycastle.math.ec.ECFieldElement addOne() -> c
    org.spongycastle.math.ec.ECFieldElement subtract(org.spongycastle.math.ec.ECFieldElement) -> b
    org.spongycastle.math.ec.ECFieldElement multiply(org.spongycastle.math.ec.ECFieldElement) -> c
    org.spongycastle.math.ec.ECFieldElement multiplyMinusProduct(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement) -> a
    org.spongycastle.math.ec.ECFieldElement multiplyPlusProduct(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement) -> b
    org.spongycastle.math.ec.ECFieldElement divide(org.spongycastle.math.ec.ECFieldElement) -> d
    org.spongycastle.math.ec.ECFieldElement negate() -> d
    org.spongycastle.math.ec.ECFieldElement square() -> e
    org.spongycastle.math.ec.ECFieldElement squarePlusProduct(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement) -> a
    org.spongycastle.math.ec.ECFieldElement squarePow(int) -> a
    org.spongycastle.math.ec.ECFieldElement invert() -> f
    org.spongycastle.math.ec.ECFieldElement sqrt() -> g
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.spongycastle.math.ec.custom.sec.SecT571K1Curve -> org.spongycastle.a.a.a.b.aS:
    org.spongycastle.math.ec.custom.sec.SecT571K1Point infinity -> i
    org.spongycastle.math.ec.ECCurve cloneCurve() -> c
    boolean supportsCoordinateSystem(int) -> a
    org.spongycastle.math.ec.ECMultiplier createDefaultMultiplier() -> d
    int getFieldSize() -> a
    org.spongycastle.math.ec.ECFieldElement fromBigInteger(java.math.BigInteger) -> a
    org.spongycastle.math.ec.ECPoint createRawPoint(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,boolean) -> a
    org.spongycastle.math.ec.ECPoint createRawPoint(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement[],boolean) -> a
    org.spongycastle.math.ec.ECPoint getInfinity() -> e
    boolean isKoblitz() -> o
org.spongycastle.math.ec.custom.sec.SecT571K1Point -> org.spongycastle.a.a.a.b.aT:
    org.spongycastle.math.ec.ECPoint detach() -> e
    org.spongycastle.math.ec.ECFieldElement getYCoord() -> j
    boolean getCompressionYTilde() -> s
    org.spongycastle.math.ec.ECPoint add(org.spongycastle.math.ec.ECPoint) -> b
    org.spongycastle.math.ec.ECPoint twice() -> u
    org.spongycastle.math.ec.ECPoint twicePlus(org.spongycastle.math.ec.ECPoint) -> c
    org.spongycastle.math.ec.ECPoint negate() -> t
org.spongycastle.math.ec.custom.sec.SecT571R1Curve -> org.spongycastle.a.a.a.b.aU:
    org.spongycastle.math.ec.custom.sec.SecT571R1Point infinity -> i
    org.spongycastle.math.ec.custom.sec.SecT571FieldElement SecT571R1_B -> j
    org.spongycastle.math.ec.custom.sec.SecT571FieldElement SecT571R1_B_SQRT -> k
    org.spongycastle.math.ec.ECCurve cloneCurve() -> c
    boolean supportsCoordinateSystem(int) -> a
    int getFieldSize() -> a
    org.spongycastle.math.ec.ECFieldElement fromBigInteger(java.math.BigInteger) -> a
    org.spongycastle.math.ec.ECPoint createRawPoint(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,boolean) -> a
    org.spongycastle.math.ec.ECPoint createRawPoint(org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement,org.spongycastle.math.ec.ECFieldElement[],boolean) -> a
    org.spongycastle.math.ec.ECPoint getInfinity() -> e
    boolean isKoblitz() -> o
org.spongycastle.math.ec.custom.sec.SecT571R1Point -> org.spongycastle.a.a.a.b.aV:
    org.spongycastle.math.ec.ECPoint detach() -> e
    org.spongycastle.math.ec.ECFieldElement getYCoord() -> j
    boolean getCompressionYTilde() -> s
    org.spongycastle.math.ec.ECPoint add(org.spongycastle.math.ec.ECPoint) -> b
    org.spongycastle.math.ec.ECPoint twice() -> u
    org.spongycastle.math.ec.ECPoint twicePlus(org.spongycastle.math.ec.ECPoint) -> c
    org.spongycastle.math.ec.ECPoint negate() -> t
org.spongycastle.math.ec.endo.ECEndomorphism -> org.spongycastle.a.a.b.a:
    org.spongycastle.math.ec.ECPointMap getPointMap() -> a
    boolean hasEfficientPointMap() -> b
org.spongycastle.math.ec.endo.GLVEndomorphism -> org.spongycastle.a.a.b.b:
    java.math.BigInteger[] decomposeScalar(java.math.BigInteger) -> a
org.spongycastle.math.ec.endo.GLVTypeBEndomorphism -> org.spongycastle.a.a.b.c:
    org.spongycastle.math.ec.ECCurve curve -> a
    org.spongycastle.math.ec.endo.GLVTypeBParameters parameters -> b
    org.spongycastle.math.ec.ECPointMap pointMap -> c
    java.math.BigInteger[] decomposeScalar(java.math.BigInteger) -> a
    org.spongycastle.math.ec.ECPointMap getPointMap() -> a
    boolean hasEfficientPointMap() -> b
    java.math.BigInteger calculateB(java.math.BigInteger,java.math.BigInteger,int) -> a
org.spongycastle.math.ec.endo.GLVTypeBParameters -> org.spongycastle.a.a.b.d:
    java.math.BigInteger beta -> a
    java.math.BigInteger lambda -> b
    java.math.BigInteger v1A -> c
    java.math.BigInteger v1B -> d
    java.math.BigInteger v2A -> e
    java.math.BigInteger v2B -> f
    java.math.BigInteger g1 -> g
    java.math.BigInteger g2 -> h
    int bits -> i
    void checkVector(java.math.BigInteger[],java.lang.String) -> a
    java.math.BigInteger getBeta() -> a
    java.math.BigInteger getV1A() -> b
    java.math.BigInteger getV1B() -> c
    java.math.BigInteger getV2A() -> d
    java.math.BigInteger getV2B() -> e
    java.math.BigInteger getG1() -> f
    java.math.BigInteger getG2() -> g
    int getBits() -> h
org.spongycastle.math.field.ExtensionField -> org.spongycastle.a.b.a:
org.spongycastle.math.field.FiniteField -> org.spongycastle.a.b.b:
    java.math.BigInteger getCharacteristic() -> a
    int getDimension() -> b
org.spongycastle.math.field.FiniteFields -> org.spongycastle.a.b.c:
    org.spongycastle.math.field.FiniteField GF_2 -> a
    org.spongycastle.math.field.FiniteField GF_3 -> b
    org.spongycastle.math.field.PolynomialExtensionField getBinaryExtensionField(int[]) -> a
    org.spongycastle.math.field.FiniteField getPrimeField(java.math.BigInteger) -> a
org.spongycastle.math.field.GF2Polynomial -> org.spongycastle.a.b.d:
    int[] exponents -> a
    int getDegree() -> a
    int[] getExponentsPresent() -> b
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.spongycastle.math.field.GenericPolynomialExtensionField -> org.spongycastle.a.b.e:
    org.spongycastle.math.field.FiniteField subfield -> a
    org.spongycastle.math.field.Polynomial minimalPolynomial -> b
    java.math.BigInteger getCharacteristic() -> a
    int getDimension() -> b
    org.spongycastle.math.field.Polynomial getMinimalPolynomial() -> c
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.spongycastle.math.field.Polynomial -> org.spongycastle.a.b.f:
    int getDegree() -> a
    int[] getExponentsPresent() -> b
org.spongycastle.math.field.PolynomialExtensionField -> org.spongycastle.a.b.g:
    org.spongycastle.math.field.Polynomial getMinimalPolynomial() -> c
org.spongycastle.math.field.PrimeField -> org.spongycastle.a.b.h:
    java.math.BigInteger characteristic -> a
    java.math.BigInteger getCharacteristic() -> a
    int getDimension() -> b
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.spongycastle.math.raw.Interleave -> org.spongycastle.a.c.a:
    int expand8to16(int) -> a
    int expand16to32(int) -> b
    long expand32to64(int) -> c
    void expand64To128(long,long[],int) -> a
    long unshuffle(long) -> a
org.spongycastle.math.raw.Mod -> org.spongycastle.a.c.b:
    void invert(int[],int[],int[]) -> a
    int[] random(int[]) -> a
    void inversionResult(int[],int,int[],int[]) -> a
    int inversionStep(int[],int[],int,int[],int) -> a
    int getTrailingZeroes(int) -> a
org.spongycastle.math.raw.Nat -> org.spongycastle.a.c.c:
    int add(int,int[],int[],int[]) -> a
    int add33To(int,int,int[]) -> a
    int addBothTo(int,int[],int[],int[]) -> b
    int addTo(int,int[],int[]) -> a
    int addTo(int,int[],int,int[],int) -> a
    int addWordAt(int,int,int[],int) -> a
    int addWordTo(int,int,int[]) -> b
    int[] copy(int,int[]) -> a
    int[] create(int) -> a
    long[] create64(int) -> b
    int dec(int,int[]) -> b
    int decAt(int,int[],int) -> a
    boolean eq(int,int[],int[]) -> b
    int[] fromBigInteger(int,java.math.BigInteger) -> a
    int getBit(int[],int) -> a
    boolean gte(int,int[],int[]) -> c
    int inc(int,int[]) -> c
    int inc(int,int[],int[]) -> d
    int incAt(int,int[],int) -> b
    int incAt(int,int[],int,int) -> a
    boolean isOne(int,int[]) -> d
    boolean isZero(int,int[]) -> e
    int mul31BothAdd(int,int,int[],int,int[],int[],int) -> a
    int mulWordAddTo(int,int,int[],int,int[],int) -> a
    int shiftDownBit(int,int[],int) -> c
    int shiftDownBits(int,int[],int,int) -> b
    int shiftDownBits(int,int[],int,int,int,int[],int) -> a
    int shiftDownWord(int,int[],int) -> d
    int shiftUpBit(int,int[],int,int[]) -> a
    int shiftUpBit(int,int[],int,int,int[],int) -> a
    long shiftUpBit64(int,long[],int,long,long[],int) -> a
    int shiftUpBits(int,int[],int,int) -> c
    long shiftUpBits64(int,long[],int,int,long) -> a
    int shiftUpBits(int,int[],int,int,int[]) -> a
    long shiftUpBits64(int,long[],int,int,long,long[],int) -> a
    int sub(int,int[],int[],int[]) -> c
    int sub33From(int,int,int[]) -> c
    int subFrom(int,int[],int[]) -> e
    int subFrom(int,int[],int,int[],int) -> b
    int subWordFrom(int,int,int[]) -> d
    java.math.BigInteger toBigInteger(int,int[]) -> f
    void zero(int,int[]) -> g
org.spongycastle.math.raw.Nat128 -> org.spongycastle.a.c.d:
    int add(int[],int[],int[]) -> a
    int addBothTo(int[],int[],int[]) -> b
    int[] create() -> a
    long[] create64() -> b
    int[] createExt() -> c
    long[] createExt64() -> d
    boolean eq(int[],int[]) -> a
    boolean eq64(long[],long[]) -> a
    int[] fromBigInteger(java.math.BigInteger) -> a
    long[] fromBigInteger64(java.math.BigInteger) -> b
    int getBit(int[],int) -> a
    boolean gte(int[],int[]) -> b
    boolean isOne(int[]) -> a
    boolean isOne64(long[]) -> a
    boolean isZero(int[]) -> b
    boolean isZero64(long[]) -> b
    void mul(int[],int[],int[]) -> c
    int mulAddTo(int[],int[],int[]) -> d
    void square(int[],int[]) -> c
    int sub(int[],int[],int[]) -> e
    int subFrom(int[],int[]) -> d
    java.math.BigInteger toBigInteger(int[]) -> c
    java.math.BigInteger toBigInteger64(long[]) -> c
    void zero(int[]) -> d
org.spongycastle.math.raw.Nat160 -> org.spongycastle.a.c.e:
    int add(int[],int[],int[]) -> a
    int addBothTo(int[],int[],int[]) -> b
    int[] create() -> a
    int[] createExt() -> b
    boolean eq(int[],int[]) -> a
    int[] fromBigInteger(java.math.BigInteger) -> a
    int getBit(int[],int) -> a
    boolean gte(int[],int[]) -> b
    boolean isOne(int[]) -> a
    boolean isZero(int[]) -> b
    void mul(int[],int[],int[]) -> c
    int mulAddTo(int[],int[],int[]) -> d
    long mul33Add(int,int[],int,int[],int,int[],int) -> a
    int mul33DWordAdd(int,long,int[],int) -> a
    int mul33WordAdd(int,int,int[],int) -> a
    int mulWordsAdd(int,int,int[],int) -> b
    void square(int[],int[]) -> c
    int sub(int[],int[],int[]) -> e
    int subFrom(int[],int[]) -> d
    java.math.BigInteger toBigInteger(int[]) -> c
    void zero(int[]) -> d
org.spongycastle.math.raw.Nat192 -> org.spongycastle.a.c.f:
    int add(int[],int[],int[]) -> a
    int addBothTo(int[],int[],int[]) -> b
    int addTo(int[],int,int[],int,int) -> a
    int addToEachOther(int[],int,int[],int) -> a
    int[] create() -> a
    long[] create64() -> b
    int[] createExt() -> c
    long[] createExt64() -> d
    boolean diff(int[],int,int[],int,int[],int) -> a
    boolean eq(int[],int[]) -> a
    boolean eq64(long[],long[]) -> a
    int[] fromBigInteger(java.math.BigInteger) -> a
    long[] fromBigInteger64(java.math.BigInteger) -> b
    int getBit(int[],int) -> a
    boolean gte(int[],int[]) -> b
    boolean gte(int[],int,int[],int) -> b
    boolean isOne(int[]) -> a
    boolean isOne64(long[]) -> a
    boolean isZero(int[]) -> b
    boolean isZero64(long[]) -> b
    void mul(int[],int[],int[]) -> c
    void mul(int[],int,int[],int,int[],int) -> b
    int mulAddTo(int[],int[],int[]) -> d
    long mul33Add(int,int[],int,int[],int,int[],int) -> a
    int mul33DWordAdd(int,long,int[],int) -> a
    int mul33WordAdd(int,int,int[],int) -> a
    void square(int[],int[]) -> c
    void square(int[],int,int[],int) -> c
    int sub(int[],int[],int[]) -> e
    int sub(int[],int,int[],int,int[],int) -> c
    int subFrom(int[],int[]) -> d
    java.math.BigInteger toBigInteger(int[]) -> c
    java.math.BigInteger toBigInteger64(long[]) -> c
    void zero(int[]) -> d
org.spongycastle.math.raw.Nat224 -> org.spongycastle.a.c.g:
    int add(int[],int[],int[]) -> a
    int addBothTo(int[],int[],int[]) -> b
    void copy(int[],int[]) -> a
    int[] create() -> a
    int[] createExt() -> b
    boolean eq(int[],int[]) -> b
    int[] fromBigInteger(java.math.BigInteger) -> a
    int getBit(int[],int) -> a
    boolean gte(int[],int[]) -> c
    boolean isOne(int[]) -> a
    boolean isZero(int[]) -> b
    void mul(int[],int[],int[]) -> c
    int mulAddTo(int[],int[],int[]) -> d
    long mul33Add(int,int[],int,int[],int,int[],int) -> a
    int mul33DWordAdd(int,long,int[],int) -> a
    int mul33WordAdd(int,int,int[],int) -> a
    void square(int[],int[]) -> d
    int sub(int[],int[],int[]) -> e
    int subFrom(int[],int[]) -> e
    java.math.BigInteger toBigInteger(int[]) -> c
    void zero(int[]) -> d
org.spongycastle.math.raw.Nat256 -> org.spongycastle.a.c.h:
    int add(int[],int[],int[]) -> a
    int addBothTo(int[],int[],int[]) -> b
    int addTo(int[],int[]) -> a
    int addTo(int[],int,int[],int,int) -> a
    int addToEachOther(int[],int,int[],int) -> a
    int[] create() -> a
    long[] create64() -> b
    int[] createExt() -> c
    long[] createExt64() -> d
    boolean diff(int[],int,int[],int,int[],int) -> a
    boolean eq(int[],int[]) -> b
    boolean eq64(long[],long[]) -> a
    int[] fromBigInteger(java.math.BigInteger) -> a
    long[] fromBigInteger64(java.math.BigInteger) -> b
    int getBit(int[],int) -> a
    boolean gte(int[],int[]) -> c
    boolean gte(int[],int,int[],int) -> b
    boolean isOne(int[]) -> a
    boolean isOne64(long[]) -> a
    boolean isZero(int[]) -> b
    boolean isZero64(long[]) -> b
    void mul(int[],int[],int[]) -> c
    void mul(int[],int,int[],int,int[],int) -> b
    int mulAddTo(int[],int[],int[]) -> d
    long mul33Add(int,int[],int,int[],int,int[],int) -> a
    int mulByWordAddTo(int,int[],int[]) -> a
    int mul33DWordAdd(int,long,int[],int) -> a
    int mul33WordAdd(int,int,int[],int) -> a
    void square(int[],int[]) -> d
    void square(int[],int,int[],int) -> c
    int sub(int[],int[],int[]) -> e
    int sub(int[],int,int[],int,int[],int) -> c
    int subFrom(int[],int[]) -> e
    java.math.BigInteger toBigInteger(int[]) -> c
    java.math.BigInteger toBigInteger64(long[]) -> c
    void zero(int[]) -> d
org.spongycastle.math.raw.Nat320 -> org.spongycastle.a.c.i:
    long[] create64() -> a
    long[] createExt64() -> b
    boolean eq64(long[],long[]) -> a
    long[] fromBigInteger64(java.math.BigInteger) -> a
    boolean isOne64(long[]) -> a
    boolean isZero64(long[]) -> b
    java.math.BigInteger toBigInteger64(long[]) -> c
org.spongycastle.math.raw.Nat384 -> org.spongycastle.a.c.j:
    void mul(int[],int[],int[]) -> a
    void square(int[],int[]) -> a
org.spongycastle.math.raw.Nat448 -> org.spongycastle.a.c.k:
    long[] create64() -> a
    long[] createExt64() -> b
    boolean eq64(long[],long[]) -> a
    long[] fromBigInteger64(java.math.BigInteger) -> a
    boolean isOne64(long[]) -> a
    boolean isZero64(long[]) -> b
    java.math.BigInteger toBigInteger64(long[]) -> c
org.spongycastle.math.raw.Nat512 -> org.spongycastle.a.c.l:
    void mul(int[],int[],int[]) -> a
    void square(int[],int[]) -> a
org.spongycastle.math.raw.Nat576 -> org.spongycastle.a.c.m:
    long[] create64() -> a
    long[] createExt64() -> b
    boolean eq64(long[],long[]) -> a
    long[] fromBigInteger64(java.math.BigInteger) -> a
    boolean isOne64(long[]) -> a
    boolean isZero64(long[]) -> b
    java.math.BigInteger toBigInteger64(long[]) -> c
org.spongycastle.operator.AsymmetricKeyUnwrapper -> org.spongycastle.operator.a:
    org.spongycastle.asn1.x509.AlgorithmIdentifier algorithmId -> a
    org.spongycastle.asn1.x509.AlgorithmIdentifier getAlgorithmIdentifier() -> a
org.spongycastle.operator.DefaultSecretKeySizeProvider -> org.spongycastle.operator.b:
    org.spongycastle.operator.SecretKeySizeProvider INSTANCE -> a
    java.util.Map KEY_SIZES -> b
    int getKeySize(org.spongycastle.asn1.x509.AlgorithmIdentifier) -> a
    int getKeySize(org.spongycastle.asn1.ASN1ObjectIdentifier) -> a
org.spongycastle.operator.GenericKey -> org.spongycastle.operator.c:
    org.spongycastle.asn1.x509.AlgorithmIdentifier algorithmIdentifier -> a
    java.lang.Object representation -> b
    java.lang.Object getRepresentation() -> a
org.spongycastle.operator.InputDecryptor -> org.spongycastle.operator.d:
    org.spongycastle.asn1.x509.AlgorithmIdentifier getAlgorithmIdentifier() -> a
    java.io.InputStream getInputStream(java.io.InputStream) -> a
org.spongycastle.operator.MacCalculator -> org.spongycastle.operator.e:
    java.io.OutputStream getOutputStream() -> a
org.spongycastle.operator.OperatorCreationException -> org.spongycastle.operator.f:
org.spongycastle.operator.OperatorException -> org.spongycastle.operator.g:
    java.lang.Throwable cause -> a
    java.lang.Throwable getCause() -> getCause
org.spongycastle.operator.SecretKeySizeProvider -> org.spongycastle.operator.h:
    int getKeySize(org.spongycastle.asn1.x509.AlgorithmIdentifier) -> a
org.spongycastle.operator.jcajce.JceAsymmetricKeyUnwrapper -> org.spongycastle.operator.jcajce.a:
    org.spongycastle.operator.jcajce.OperatorHelper helper -> a
    java.util.Map extraMappings -> b
    java.security.PrivateKey privKey -> c
    boolean unwrappedKeyMustBeEncodable -> d
    org.spongycastle.operator.jcajce.JceAsymmetricKeyUnwrapper setMustProduceEncodableUnwrappedKey(boolean) -> a
    org.spongycastle.operator.jcajce.JceAsymmetricKeyUnwrapper setAlgorithmMapping(org.spongycastle.asn1.ASN1ObjectIdentifier,java.lang.String) -> a
    org.spongycastle.operator.GenericKey generateUnwrappedKey(org.spongycastle.asn1.x509.AlgorithmIdentifier,byte[]) -> a
org.spongycastle.operator.jcajce.JceGenericKey -> org.spongycastle.operator.jcajce.b:
    java.lang.Object getRepresentation(java.security.Key) -> a
org.spongycastle.operator.jcajce.OperatorHelper -> org.spongycastle.operator.jcajce.OperatorHelper:
    java.util.Map oids -> a
    java.util.Map asymmetricWrapperAlgNames -> b
    java.util.Map symmetricWrapperAlgNames -> c
    java.util.Map symmetricKeyAlgNames -> d
    java.util.Map symmetricWrapperKeySizes -> e
    org.spongycastle.jcajce.util.JcaJceHelper helper -> f
    javax.crypto.Cipher createAsymmetricWrapper(org.spongycastle.asn1.ASN1ObjectIdentifier,java.util.Map) -> a
    java.security.AlgorithmParameters createAlgorithmParameters(org.spongycastle.asn1.x509.AlgorithmIdentifier) -> a
    java.lang.String getKeyAlgorithmName(org.spongycastle.asn1.ASN1ObjectIdentifier) -> a
org.spongycastle.operator.jcajce.OperatorHelper$OpCertificateException -> org.spongycastle.operator.jcajce.OperatorHelper$OpCertificateException:
    java.lang.Throwable cause -> a
    java.lang.Throwable getCause() -> getCause
org.spongycastle.pqc.asn1.GMSSPublicKey -> org.spongycastle.pqc.a.a:
    org.spongycastle.asn1.ASN1Integer version -> a
    byte[] publicKey -> b
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.pqc.asn1.McElieceCCA2PrivateKey -> org.spongycastle.pqc.a.b:
    org.spongycastle.asn1.ASN1ObjectIdentifier oid -> a
    int n -> b
    int k -> c
    byte[] encField -> d
    byte[] encGp -> e
    byte[] encP -> f
    byte[] encH -> g
    byte[][] encqInv -> h
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.pqc.asn1.McElieceCCA2PublicKey -> org.spongycastle.pqc.a.c:
    org.spongycastle.asn1.ASN1ObjectIdentifier oid -> a
    int n -> b
    int t -> c
    byte[] matrixG -> d
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.pqc.asn1.McEliecePrivateKey -> org.spongycastle.pqc.a.d:
    org.spongycastle.asn1.ASN1ObjectIdentifier oid -> a
    int n -> b
    int k -> c
    byte[] encField -> d
    byte[] encGp -> e
    byte[] encSInv -> f
    byte[] encP1 -> g
    byte[] encP2 -> h
    byte[] encH -> i
    byte[][] encqInv -> j
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.pqc.asn1.McEliecePublicKey -> org.spongycastle.pqc.a.e:
    org.spongycastle.asn1.ASN1ObjectIdentifier oid -> a
    int n -> b
    int t -> c
    byte[] matrixG -> d
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.pqc.asn1.PQCObjectIdentifiers -> org.spongycastle.pqc.a.f:
    org.spongycastle.asn1.ASN1ObjectIdentifier rainbow -> a
    org.spongycastle.asn1.ASN1ObjectIdentifier rainbowWithSha1 -> b
    org.spongycastle.asn1.ASN1ObjectIdentifier rainbowWithSha224 -> c
    org.spongycastle.asn1.ASN1ObjectIdentifier rainbowWithSha256 -> d
    org.spongycastle.asn1.ASN1ObjectIdentifier rainbowWithSha384 -> e
    org.spongycastle.asn1.ASN1ObjectIdentifier rainbowWithSha512 -> f
    org.spongycastle.asn1.ASN1ObjectIdentifier gmss -> g
    org.spongycastle.asn1.ASN1ObjectIdentifier gmssWithSha1 -> h
    org.spongycastle.asn1.ASN1ObjectIdentifier gmssWithSha224 -> i
    org.spongycastle.asn1.ASN1ObjectIdentifier gmssWithSha256 -> j
    org.spongycastle.asn1.ASN1ObjectIdentifier gmssWithSha384 -> k
    org.spongycastle.asn1.ASN1ObjectIdentifier gmssWithSha512 -> l
    org.spongycastle.asn1.ASN1ObjectIdentifier mcEliece -> m
    org.spongycastle.asn1.ASN1ObjectIdentifier mcElieceCca2 -> n
org.spongycastle.pqc.asn1.ParSet -> org.spongycastle.pqc.a.g:
    java.math.BigInteger ZERO -> a
    int t -> b
    int[] h -> c
    int[] w -> d
    int[] k -> e
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.pqc.asn1.RainbowPrivateKey -> org.spongycastle.pqc.a.h:
    org.spongycastle.asn1.ASN1Integer version -> a
    org.spongycastle.asn1.ASN1ObjectIdentifier oid -> b
    byte[][] invA1 -> c
    byte[] b1 -> d
    byte[][] invA2 -> e
    byte[] b2 -> f
    byte[] vi -> g
    org.spongycastle.pqc.crypto.rainbow.Layer[] layers -> h
    org.spongycastle.pqc.asn1.RainbowPrivateKey getInstance(java.lang.Object) -> a
    short[][] getInvA1() -> a
    short[] getB1() -> b
    short[] getB2() -> c
    short[][] getInvA2() -> d
    org.spongycastle.pqc.crypto.rainbow.Layer[] getLayers() -> e
    int[] getVi() -> f
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.pqc.asn1.RainbowPublicKey -> org.spongycastle.pqc.a.i:
    org.spongycastle.asn1.ASN1Integer version -> a
    org.spongycastle.asn1.ASN1ObjectIdentifier oid -> b
    org.spongycastle.asn1.ASN1Integer docLength -> c
    byte[][] coeffQuadratic -> d
    byte[][] coeffSingular -> e
    byte[] coeffScalar -> f
    org.spongycastle.pqc.asn1.RainbowPublicKey getInstance(java.lang.Object) -> a
    int getDocLength() -> a
    short[][] getCoeffQuadratic() -> b
    short[][] getCoeffSingular() -> c
    short[] getCoeffScalar() -> d
    org.spongycastle.asn1.ASN1Primitive toASN1Primitive() -> toASN1Primitive
org.spongycastle.pqc.crypto.gmss.GMSSParameters -> org.spongycastle.pqc.b.a.a:
    int numOfLayers -> a
    int[] heightOfTrees -> b
    int[] winternitzParameter -> c
    int[] K -> d
    int getNumOfLayers() -> a
    int[] getHeightOfTrees() -> b
    int[] getWinternitzParameter() -> c
    int[] getK() -> d
org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyGenerationParameters -> org.spongycastle.pqc.b.b.a:
    org.spongycastle.pqc.crypto.mceliece.McElieceCCA2Parameters params -> a
    org.spongycastle.pqc.crypto.mceliece.McElieceCCA2Parameters getParameters() -> c
org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyPairGenerator -> org.spongycastle.pqc.b.b.b:
    org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyGenerationParameters mcElieceCCA2Params -> a
    int m -> b
    int n -> c
    int t -> d
    int fieldPoly -> e
    java.security.SecureRandom random -> f
    boolean initialized -> g
    void initializeDefault() -> b
    void init(org.spongycastle.crypto.KeyGenerationParameters) -> a
    org.spongycastle.crypto.AsymmetricCipherKeyPair generateKeyPair() -> a
org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyParameters -> org.spongycastle.pqc.b.b.c:
    org.spongycastle.pqc.crypto.mceliece.McElieceCCA2Parameters params -> b
    org.spongycastle.pqc.crypto.mceliece.McElieceCCA2Parameters getParameters() -> b
org.spongycastle.pqc.crypto.mceliece.McElieceCCA2Parameters -> org.spongycastle.pqc.b.b.d:
    org.spongycastle.crypto.Digest digest -> a
org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PrivateKeyParameters -> org.spongycastle.pqc.b.b.e:
    java.lang.String oid -> b
    int n -> c
    int k -> d
    org.spongycastle.pqc.math.linearalgebra.GF2mField field -> e
    org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM goppaPoly -> f
    org.spongycastle.pqc.math.linearalgebra.Permutation p -> g
    org.spongycastle.pqc.math.linearalgebra.GF2Matrix h -> h
    org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM[] qInv -> i
    int getN() -> c
    int getK() -> d
    org.spongycastle.pqc.math.linearalgebra.GF2mField getField() -> e
    org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM getGoppaPoly() -> f
    org.spongycastle.pqc.math.linearalgebra.Permutation getP() -> g
    org.spongycastle.pqc.math.linearalgebra.GF2Matrix getH() -> h
    org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM[] getQInv() -> i
    java.lang.String getOIDString() -> j
org.spongycastle.pqc.crypto.mceliece.McElieceCCA2PublicKeyParameters -> org.spongycastle.pqc.b.b.f:
    java.lang.String oid -> b
    int n -> c
    int t -> d
    org.spongycastle.pqc.math.linearalgebra.GF2Matrix matrixG -> e
    int getN() -> c
    int getT() -> d
    org.spongycastle.pqc.math.linearalgebra.GF2Matrix getMatrixG() -> e
    java.lang.String getOIDString() -> f
org.spongycastle.pqc.crypto.mceliece.McElieceKeyGenerationParameters -> org.spongycastle.pqc.b.b.g:
    org.spongycastle.pqc.crypto.mceliece.McElieceParameters params -> a
    org.spongycastle.pqc.crypto.mceliece.McElieceParameters getParameters() -> c
org.spongycastle.pqc.crypto.mceliece.McElieceKeyPairGenerator -> org.spongycastle.pqc.b.b.h:
    org.spongycastle.pqc.crypto.mceliece.McElieceKeyGenerationParameters mcElieceParams -> a
    int m -> b
    int n -> c
    int t -> d
    int fieldPoly -> e
    java.security.SecureRandom random -> f
    boolean initialized -> g
    void initializeDefault() -> b
    void initialize(org.spongycastle.crypto.KeyGenerationParameters) -> b
    org.spongycastle.crypto.AsymmetricCipherKeyPair genKeyPair() -> c
    void init(org.spongycastle.crypto.KeyGenerationParameters) -> a
    org.spongycastle.crypto.AsymmetricCipherKeyPair generateKeyPair() -> a
org.spongycastle.pqc.crypto.mceliece.McElieceKeyParameters -> org.spongycastle.pqc.b.b.i:
    org.spongycastle.pqc.crypto.mceliece.McElieceParameters params -> b
    org.spongycastle.pqc.crypto.mceliece.McElieceParameters getParameters() -> b
org.spongycastle.pqc.crypto.mceliece.McElieceParameters -> org.spongycastle.pqc.b.b.j:
    int m -> a
    int t -> b
    int n -> c
    int fieldPoly -> d
    int getM() -> a
    int getN() -> b
    int getT() -> c
    int getFieldPoly() -> d
org.spongycastle.pqc.crypto.mceliece.McEliecePrivateKeyParameters -> org.spongycastle.pqc.b.b.k:
    java.lang.String oid -> b
    int n -> c
    int k -> d
    org.spongycastle.pqc.math.linearalgebra.GF2mField field -> e
    org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM goppaPoly -> f
    org.spongycastle.pqc.math.linearalgebra.GF2Matrix sInv -> g
    org.spongycastle.pqc.math.linearalgebra.Permutation p1 -> h
    org.spongycastle.pqc.math.linearalgebra.Permutation p2 -> i
    org.spongycastle.pqc.math.linearalgebra.GF2Matrix h -> j
    org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM[] qInv -> k
    int getN() -> c
    int getK() -> d
    org.spongycastle.pqc.math.linearalgebra.GF2mField getField() -> e
    org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM getGoppaPoly() -> f
    org.spongycastle.pqc.math.linearalgebra.GF2Matrix getSInv() -> g
    org.spongycastle.pqc.math.linearalgebra.Permutation getP1() -> h
    org.spongycastle.pqc.math.linearalgebra.Permutation getP2() -> i
    org.spongycastle.pqc.math.linearalgebra.GF2Matrix getH() -> j
    org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM[] getQInv() -> k
    java.lang.String getOIDString() -> l
org.spongycastle.pqc.crypto.mceliece.McEliecePublicKeyParameters -> org.spongycastle.pqc.b.b.l:
    java.lang.String oid -> b
    int n -> c
    int t -> d
    org.spongycastle.pqc.math.linearalgebra.GF2Matrix g -> e
    int getN() -> c
    int getT() -> d
    org.spongycastle.pqc.math.linearalgebra.GF2Matrix getG() -> e
    java.lang.String getOIDString() -> f
org.spongycastle.pqc.crypto.rainbow.Layer -> org.spongycastle.pqc.b.c.a:
    int vi -> a
    int viNext -> b
    int oi -> c
    short[][][] coeff_alpha -> d
    short[][][] coeff_beta -> e
    short[][] coeff_gamma -> f
    short[] coeff_eta -> g
    short[][] plugInVinegars(short[]) -> a
    int getVi() -> a
    int getViNext() -> b
    int getOi() -> c
    short[][][] getCoeffAlpha() -> d
    short[][][] getCoeffBeta() -> e
    short[][] getCoeffGamma() -> f
    short[] getCoeffEta() -> g
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.spongycastle.pqc.crypto.rainbow.RainbowKeyGenerationParameters -> org.spongycastle.pqc.b.c.b:
    org.spongycastle.pqc.crypto.rainbow.RainbowParameters params -> a
    org.spongycastle.pqc.crypto.rainbow.RainbowParameters getParameters() -> c
org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator -> org.spongycastle.pqc.b.c.c:
    boolean initialized -> a
    java.security.SecureRandom sr -> b
    org.spongycastle.pqc.crypto.rainbow.RainbowKeyGenerationParameters rainbowParams -> c
    short[][] A1 -> d
    short[][] A1inv -> e
    short[] b1 -> f
    short[][] A2 -> g
    short[][] A2inv -> h
    short[] b2 -> i
    int numOfLayers -> j
    org.spongycastle.pqc.crypto.rainbow.Layer[] layers -> k
    int[] vi -> l
    short[][] pub_quadratic -> m
    short[][] pub_singular -> n
    short[] pub_scalar -> o
    org.spongycastle.crypto.AsymmetricCipherKeyPair genKeyPair() -> a
    void initialize(org.spongycastle.crypto.KeyGenerationParameters) -> a
    void initializeDefault() -> c
    void keygen() -> d
    void generateL1() -> e
    void generateL2() -> f
    void generateF() -> g
    void computePublicKey() -> h
    void compactPublicKey(short[][][]) -> a
    void init(org.spongycastle.crypto.KeyGenerationParameters) -> b
    org.spongycastle.crypto.AsymmetricCipherKeyPair generateKeyPair() -> b
org.spongycastle.pqc.crypto.rainbow.RainbowKeyParameters -> org.spongycastle.pqc.b.c.d:
    int docLength -> b
    int getDocLength() -> b
org.spongycastle.pqc.crypto.rainbow.RainbowParameters -> org.spongycastle.pqc.b.c.e:
    int[] DEFAULT_VI -> a
    int[] vi -> b
    void checkParams() -> c
    int getNumOfLayers() -> a
    int[] getVi() -> b
org.spongycastle.pqc.crypto.rainbow.RainbowPrivateKeyParameters -> org.spongycastle.pqc.b.c.f:
    short[][] A1inv -> b
    short[] b1 -> c
    short[][] A2inv -> d
    short[] b2 -> e
    int[] vi -> f
    org.spongycastle.pqc.crypto.rainbow.Layer[] layers -> g
    short[] getB1() -> c
    short[][] getInvA1() -> d
    short[] getB2() -> e
    short[][] getInvA2() -> f
    org.spongycastle.pqc.crypto.rainbow.Layer[] getLayers() -> g
    int[] getVi() -> h
org.spongycastle.pqc.crypto.rainbow.RainbowPublicKeyParameters -> org.spongycastle.pqc.b.c.g:
    short[][] coeffquadratic -> b
    short[][] coeffsingular -> c
    short[] coeffscalar -> d
    short[][] getCoeffQuadratic() -> c
    short[][] getCoeffSingular() -> d
    short[] getCoeffScalar() -> e
org.spongycastle.pqc.crypto.rainbow.RainbowSigner -> org.spongycastle.pqc.b.c.h:
    java.security.SecureRandom random -> c
    int signableDocumentLength -> a
    short[] x -> d
    org.spongycastle.pqc.crypto.rainbow.util.ComputeInField cf -> e
    org.spongycastle.pqc.crypto.rainbow.RainbowKeyParameters key -> b
    void init(boolean,org.spongycastle.crypto.CipherParameters) -> a
    short[] initSign(org.spongycastle.pqc.crypto.rainbow.Layer[],short[]) -> a
    byte[] generateSignature(byte[]) -> a
    boolean verifySignature(byte[],byte[]) -> a
    short[] verifySignatureIntern(short[]) -> a
    short[] makeMessageRepresentative(byte[]) -> b
org.spongycastle.pqc.crypto.rainbow.util.ComputeInField -> org.spongycastle.pqc.b.c.a.a:
    short[][] A -> b
    short[] x -> a
    short[] solveEquation(short[][],short[]) -> a
    short[][] inverse(short[][]) -> a
    void computeZerosUnder(boolean) -> a
    void computeZerosAbove() -> a
    void substitute() -> b
    short[] multiplyMatrix(short[][],short[]) -> b
    short[] addVect(short[],short[]) -> a
    short[][] multVects(short[],short[]) -> b
    short[] multVect(short,short[]) -> a
    short[][] multMatrix(short,short[][]) -> a
    short[][] addSquareMatrix(short[][],short[][]) -> a
org.spongycastle.pqc.crypto.rainbow.util.GF2Field -> org.spongycastle.pqc.b.c.a.b:
    short[] exps -> a
    short[] logs -> b
    short addElem(short,short) -> a
    short invElem(short) -> a
    short multElem(short,short) -> b
org.spongycastle.pqc.crypto.rainbow.util.RainbowUtil -> org.spongycastle.pqc.b.c.a.c:
    int[] convertArraytoInt(byte[]) -> a
    short[] convertArray(byte[]) -> b
    short[][] convertArray(byte[][]) -> a
    short[][][] convertArray(byte[][][]) -> a
    byte[] convertIntArray(int[]) -> a
    byte[] convertArray(short[]) -> a
    byte[][] convertArray(short[][]) -> a
    byte[][][] convertArray(short[][][]) -> a
    boolean equals(short[],short[]) -> a
    boolean equals(short[][],short[][]) -> a
    boolean equals(short[][][],short[][][]) -> a
org.spongycastle.pqc.jcajce.provider.BouncyCastlePQCProvider -> org.spongycastle.pqc.jcajce.provider.BouncyCastlePQCProvider:
    java.lang.String info -> c
    java.lang.String PROVIDER_NAME -> a
    org.spongycastle.jcajce.provider.config.ProviderConfiguration CONFIGURATION -> b
    java.util.Map keyInfoConverters -> d
    java.lang.String[] ALGORITHMS -> e
    void setup() -> a
    void loadAlgorithms(java.lang.String,java.lang.String[]) -> a
    void access$000(org.spongycastle.pqc.jcajce.provider.BouncyCastlePQCProvider) -> a
org.spongycastle.pqc.jcajce.provider.BouncyCastlePQCProvider$1 -> org.spongycastle.pqc.jcajce.provider.BouncyCastlePQCProvider$1:
    org.spongycastle.pqc.jcajce.provider.BouncyCastlePQCProvider this$0 -> a
    java.lang.Object run() -> run
org.spongycastle.pqc.jcajce.provider.gmss.BCGMSSPublicKey -> org.spongycastle.pqc.jcajce.provider.gmss.BCGMSSPublicKey:
    byte[] publicKeyBytes -> a
    org.spongycastle.pqc.crypto.gmss.GMSSParameters gmssParameterSet -> b
    java.lang.String getAlgorithm() -> getAlgorithm
    java.lang.String toString() -> toString
    byte[] getEncoded() -> getEncoded
    java.lang.String getFormat() -> getFormat
org.spongycastle.pqc.jcajce.provider.mceliece.BCMcElieceCCA2PrivateKey -> org.spongycastle.pqc.jcajce.provider.mceliece.BCMcElieceCCA2PrivateKey:
    java.lang.String oid -> a
    int n -> b
    int k -> c
    org.spongycastle.pqc.math.linearalgebra.GF2mField field -> d
    org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM goppaPoly -> e
    org.spongycastle.pqc.math.linearalgebra.Permutation p -> f
    org.spongycastle.pqc.math.linearalgebra.GF2Matrix h -> g
    org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM[] qInv -> h
    org.spongycastle.pqc.crypto.mceliece.McElieceCCA2Parameters mcElieceCCA2Params -> i
    java.lang.String getAlgorithm() -> getAlgorithm
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    org.spongycastle.asn1.ASN1ObjectIdentifier getOID() -> a
    byte[] getEncoded() -> getEncoded
    java.lang.String getFormat() -> getFormat
org.spongycastle.pqc.jcajce.provider.mceliece.BCMcElieceCCA2PublicKey -> org.spongycastle.pqc.jcajce.provider.mceliece.BCMcElieceCCA2PublicKey:
    java.lang.String oid -> a
    int n -> b
    int t -> c
    org.spongycastle.pqc.math.linearalgebra.GF2Matrix g -> d
    org.spongycastle.pqc.crypto.mceliece.McElieceCCA2Parameters McElieceCCA2Params -> e
    java.lang.String getAlgorithm() -> getAlgorithm
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    org.spongycastle.asn1.ASN1ObjectIdentifier getOID() -> a
    byte[] getEncoded() -> getEncoded
    java.lang.String getFormat() -> getFormat
org.spongycastle.pqc.jcajce.provider.mceliece.BCMcEliecePrivateKey -> org.spongycastle.pqc.jcajce.provider.mceliece.BCMcEliecePrivateKey:
    java.lang.String oid -> a
    int n -> b
    int k -> c
    org.spongycastle.pqc.math.linearalgebra.GF2mField field -> d
    org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM goppaPoly -> e
    org.spongycastle.pqc.math.linearalgebra.GF2Matrix sInv -> f
    org.spongycastle.pqc.math.linearalgebra.Permutation p1 -> g
    org.spongycastle.pqc.math.linearalgebra.Permutation p2 -> h
    org.spongycastle.pqc.math.linearalgebra.GF2Matrix h -> i
    org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM[] qInv -> j
    org.spongycastle.pqc.crypto.mceliece.McElieceParameters mcElieceParams -> k
    java.lang.String getAlgorithm() -> getAlgorithm
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    org.spongycastle.asn1.ASN1ObjectIdentifier getOID() -> a
    byte[] getEncoded() -> getEncoded
    java.lang.String getFormat() -> getFormat
org.spongycastle.pqc.jcajce.provider.mceliece.BCMcEliecePublicKey -> org.spongycastle.pqc.jcajce.provider.mceliece.BCMcEliecePublicKey:
    java.lang.String oid -> a
    int n -> b
    int t -> c
    org.spongycastle.pqc.math.linearalgebra.GF2Matrix g -> d
    org.spongycastle.pqc.crypto.mceliece.McElieceParameters McElieceParams -> e
    java.lang.String getAlgorithm() -> getAlgorithm
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    org.spongycastle.asn1.ASN1ObjectIdentifier getOID() -> a
    byte[] getEncoded() -> getEncoded
    java.lang.String getFormat() -> getFormat
org.spongycastle.pqc.jcajce.provider.mceliece.McElieceCCA2KeyFactorySpi -> org.spongycastle.pqc.jcajce.provider.mceliece.McElieceCCA2KeyFactorySpi:
    java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec) -> engineGeneratePublic
    java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec) -> engineGeneratePrivate
    java.security.spec.KeySpec engineGetKeySpec(java.security.Key,java.lang.Class) -> engineGetKeySpec
    java.security.Key engineTranslateKey(java.security.Key) -> engineTranslateKey
org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKeyFactorySpi -> org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKeyFactorySpi:
    java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec) -> engineGeneratePublic
    java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec) -> engineGeneratePrivate
    java.security.spec.KeySpec engineGetKeySpec(java.security.Key,java.lang.Class) -> engineGetKeySpec
    java.security.Key engineTranslateKey(java.security.Key) -> engineTranslateKey
org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKeyPairGeneratorSpi -> org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKeyPairGeneratorSpi:
org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKeyPairGeneratorSpi$McEliece -> org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKeyPairGeneratorSpi$McEliece:
    org.spongycastle.pqc.crypto.mceliece.McElieceKeyPairGenerator kpg -> a
    void initialize(java.security.spec.AlgorithmParameterSpec) -> initialize
    void initialize(int,java.security.SecureRandom) -> initialize
    java.security.KeyPair generateKeyPair() -> generateKeyPair
org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKeyPairGeneratorSpi$McElieceCCA2 -> org.spongycastle.pqc.jcajce.provider.mceliece.McElieceKeyPairGeneratorSpi$McElieceCCA2:
    org.spongycastle.pqc.crypto.mceliece.McElieceCCA2KeyPairGenerator kpg -> a
    void initialize(java.security.spec.AlgorithmParameterSpec) -> initialize
    void initialize(int,java.security.SecureRandom) -> initialize
    java.security.KeyPair generateKeyPair() -> generateKeyPair
org.spongycastle.pqc.jcajce.provider.rainbow.BCRainbowPrivateKey -> org.spongycastle.pqc.jcajce.provider.rainbow.BCRainbowPrivateKey:
    short[][] A1inv -> a
    short[] b1 -> b
    short[][] A2inv -> c
    short[] b2 -> d
    org.spongycastle.pqc.crypto.rainbow.Layer[] layers -> e
    int[] vi -> f
    short[][] getInvA1() -> a
    short[] getB1() -> b
    short[] getB2() -> c
    short[][] getInvA2() -> d
    org.spongycastle.pqc.crypto.rainbow.Layer[] getLayers() -> e
    int[] getVi() -> f
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String getAlgorithm() -> getAlgorithm
    byte[] getEncoded() -> getEncoded
    java.lang.String getFormat() -> getFormat
org.spongycastle.pqc.jcajce.provider.rainbow.BCRainbowPublicKey -> org.spongycastle.pqc.jcajce.provider.rainbow.BCRainbowPublicKey:
    short[][] coeffquadratic -> a
    short[][] coeffsingular -> b
    short[] coeffscalar -> c
    int docLength -> d
    int getDocLength() -> a
    short[][] getCoeffQuadratic() -> b
    short[][] getCoeffSingular() -> c
    short[] getCoeffScalar() -> d
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String getAlgorithm() -> getAlgorithm
    java.lang.String getFormat() -> getFormat
    byte[] getEncoded() -> getEncoded
org.spongycastle.pqc.jcajce.provider.rainbow.RainbowKeyFactorySpi -> org.spongycastle.pqc.jcajce.provider.rainbow.RainbowKeyFactorySpi:
    java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec) -> engineGeneratePrivate
    java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec) -> engineGeneratePublic
    java.security.spec.KeySpec engineGetKeySpec(java.security.Key,java.lang.Class) -> engineGetKeySpec
    java.security.Key engineTranslateKey(java.security.Key) -> engineTranslateKey
    java.security.PrivateKey generatePrivate(org.spongycastle.asn1.pkcs.PrivateKeyInfo) -> a
    java.security.PublicKey generatePublic(org.spongycastle.asn1.x509.SubjectPublicKeyInfo) -> a
org.spongycastle.pqc.jcajce.provider.rainbow.RainbowKeyPairGeneratorSpi -> org.spongycastle.pqc.jcajce.provider.rainbow.RainbowKeyPairGeneratorSpi:
    org.spongycastle.pqc.crypto.rainbow.RainbowKeyGenerationParameters param -> a
    org.spongycastle.pqc.crypto.rainbow.RainbowKeyPairGenerator engine -> b
    int strength -> c
    java.security.SecureRandom random -> d
    boolean initialised -> e
    void initialize(int,java.security.SecureRandom) -> initialize
    void initialize(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> initialize
    java.security.KeyPair generateKeyPair() -> generateKeyPair
org.spongycastle.pqc.jcajce.provider.rainbow.RainbowKeysToParams -> org.spongycastle.pqc.jcajce.provider.rainbow.a:
    org.spongycastle.crypto.params.AsymmetricKeyParameter generatePublicKeyParameter(java.security.PublicKey) -> a
    org.spongycastle.crypto.params.AsymmetricKeyParameter generatePrivateKeyParameter(java.security.PrivateKey) -> a
org.spongycastle.pqc.jcajce.provider.rainbow.SignatureSpi -> org.spongycastle.pqc.jcajce.provider.rainbow.SignatureSpi:
    org.spongycastle.crypto.Digest digest -> a
    org.spongycastle.pqc.crypto.rainbow.RainbowSigner signer -> b
    java.security.SecureRandom random -> c
    void engineInitVerify(java.security.PublicKey) -> engineInitVerify
    void engineInitSign(java.security.PrivateKey,java.security.SecureRandom) -> engineInitSign
    void engineInitSign(java.security.PrivateKey) -> engineInitSign
    void engineUpdate(byte) -> engineUpdate
    void engineUpdate(byte[],int,int) -> engineUpdate
    byte[] engineSign() -> engineSign
    boolean engineVerify(byte[]) -> engineVerify
    void engineSetParameter(java.security.spec.AlgorithmParameterSpec) -> engineSetParameter
    void engineSetParameter(java.lang.String,java.lang.Object) -> engineSetParameter
    java.lang.Object engineGetParameter(java.lang.String) -> engineGetParameter
org.spongycastle.pqc.jcajce.provider.rainbow.SignatureSpi$withSha224 -> org.spongycastle.pqc.jcajce.provider.rainbow.SignatureSpi$withSha224:
org.spongycastle.pqc.jcajce.provider.rainbow.SignatureSpi$withSha256 -> org.spongycastle.pqc.jcajce.provider.rainbow.SignatureSpi$withSha256:
org.spongycastle.pqc.jcajce.provider.rainbow.SignatureSpi$withSha384 -> org.spongycastle.pqc.jcajce.provider.rainbow.SignatureSpi$withSha384:
org.spongycastle.pqc.jcajce.provider.rainbow.SignatureSpi$withSha512 -> org.spongycastle.pqc.jcajce.provider.rainbow.SignatureSpi$withSha512:
org.spongycastle.pqc.jcajce.provider.util.KeyUtil -> org.spongycastle.pqc.jcajce.provider.a.a:
    byte[] getEncodedSubjectPublicKeyInfo(org.spongycastle.asn1.x509.AlgorithmIdentifier,org.spongycastle.asn1.ASN1Encodable) -> a
    byte[] getEncodedSubjectPublicKeyInfo(org.spongycastle.asn1.x509.SubjectPublicKeyInfo) -> a
org.spongycastle.pqc.jcajce.spec.ECCKeyGenParameterSpec -> org.spongycastle.pqc.jcajce.a.a:
    int m -> a
    int t -> b
    int n -> c
    int fieldPoly -> d
    int getM() -> a
    int getT() -> b
org.spongycastle.pqc.jcajce.spec.McElieceCCA2ParameterSpec -> org.spongycastle.pqc.jcajce.a.b:
    java.lang.String mdName -> a
org.spongycastle.pqc.jcajce.spec.RainbowParameterSpec -> org.spongycastle.pqc.jcajce.a.c:
    int[] DEFAULT_VI -> a
    int[] vi -> b
    int[] getVi() -> a
org.spongycastle.pqc.jcajce.spec.RainbowPrivateKeySpec -> org.spongycastle.pqc.jcajce.a.d:
    short[][] A1inv -> a
    short[] b1 -> b
    short[][] A2inv -> c
    short[] b2 -> d
    int[] vi -> e
    org.spongycastle.pqc.crypto.rainbow.Layer[] layers -> f
    short[] getB1() -> a
    short[][] getInvA1() -> b
    short[] getB2() -> c
    short[][] getInvA2() -> d
    org.spongycastle.pqc.crypto.rainbow.Layer[] getLayers() -> e
    int[] getVi() -> f
org.spongycastle.pqc.jcajce.spec.RainbowPublicKeySpec -> org.spongycastle.pqc.jcajce.a.e:
    short[][] coeffquadratic -> a
    short[][] coeffsingular -> b
    short[] coeffscalar -> c
    int docLength -> d
    int getDocLength() -> a
    short[][] getCoeffQuadratic() -> b
    short[][] getCoeffSingular() -> c
    short[] getCoeffScalar() -> d
org.spongycastle.pqc.math.linearalgebra.GF2Matrix -> org.spongycastle.pqc.c.a.a:
    int[][] matrix -> c
    int length -> d
    void assignZeroMatrix(int,int) -> a
    void assignUnitMatrix(int) -> a
    void assignRandomLowerTriangularMatrix(int,java.security.SecureRandom) -> b
    void assignRandomUpperTriangularMatrix(int,java.security.SecureRandom) -> c
    void assignRandomRegularMatrix(int,java.security.SecureRandom) -> d
    org.spongycastle.pqc.math.linearalgebra.GF2Matrix[] createRandomRegularMatrixAndItsInverse(int,java.security.SecureRandom) -> a
    byte[] getEncoded() -> a
    org.spongycastle.pqc.math.linearalgebra.GF2Matrix getLeftSubMatrix() -> b
    org.spongycastle.pqc.math.linearalgebra.GF2Matrix extendLeftCompactForm() -> c
    org.spongycastle.pqc.math.linearalgebra.GF2Matrix getRightSubMatrix() -> d
    org.spongycastle.pqc.math.linearalgebra.Matrix computeTranspose() -> e
    org.spongycastle.pqc.math.linearalgebra.Matrix computeInverse() -> f
    org.spongycastle.pqc.math.linearalgebra.Matrix rightMultiply(org.spongycastle.pqc.math.linearalgebra.Matrix) -> a
    org.spongycastle.pqc.math.linearalgebra.Matrix rightMultiply(org.spongycastle.pqc.math.linearalgebra.Permutation) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void swapRows(int[][],int,int) -> a
    void addToRow(int[],int[],int) -> a
org.spongycastle.pqc.math.linearalgebra.GF2mField -> org.spongycastle.pqc.c.a.b:
    int degree -> a
    int polynomial -> b
    int getDegree() -> a
    byte[] getEncoded() -> b
    int add(int,int) -> a
    int mult(int,int) -> b
    int exp(int,int) -> c
    int inverse(int) -> a
    int getRandomElement(java.security.SecureRandom) -> a
    int getRandomNonZeroElement(java.security.SecureRandom) -> b
    boolean isElementOfThisField(int) -> b
    java.lang.String elementToStr(int) -> c
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.String polyToString(int) -> d
org.spongycastle.pqc.math.linearalgebra.GoppaCode -> org.spongycastle.pqc.c.a.c:
    org.spongycastle.pqc.math.linearalgebra.GF2Matrix createCanonicalCheckMatrix(org.spongycastle.pqc.math.linearalgebra.GF2mField,org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM) -> a
    org.spongycastle.pqc.math.linearalgebra.GoppaCode$MaMaPe computeSystematicForm(org.spongycastle.pqc.math.linearalgebra.GF2Matrix,java.security.SecureRandom) -> a
org.spongycastle.pqc.math.linearalgebra.GoppaCode$MaMaPe -> org.spongycastle.pqc.c.a.d:
    org.spongycastle.pqc.math.linearalgebra.GF2Matrix s -> a
    org.spongycastle.pqc.math.linearalgebra.GF2Matrix h -> b
    org.spongycastle.pqc.math.linearalgebra.Permutation p -> c
    org.spongycastle.pqc.math.linearalgebra.GF2Matrix getSecondMatrix() -> a
    org.spongycastle.pqc.math.linearalgebra.Permutation getPermutation() -> b
org.spongycastle.pqc.math.linearalgebra.IntUtils -> org.spongycastle.pqc.c.a.e:
    boolean equals(int[],int[]) -> a
    int[] clone(int[]) -> a
org.spongycastle.pqc.math.linearalgebra.IntegerFunctions -> org.spongycastle.pqc.c.a.f:
    java.math.BigInteger ZERO -> a
    java.math.BigInteger ONE -> b
    java.math.BigInteger TWO -> c
    java.math.BigInteger FOUR -> d
    int[] SMALL_PRIMES -> e
    java.security.SecureRandom sr -> f
    int[] jacobiTable -> g
    int ceilLog256(int) -> a
org.spongycastle.pqc.math.linearalgebra.LittleEndianConversions -> org.spongycastle.pqc.c.a.g:
    byte[] I2OSP(int) -> a
    void I2OSP(int,byte[],int) -> a
    void I2OSP(int,byte[],int,int) -> a
org.spongycastle.pqc.math.linearalgebra.Matrix -> org.spongycastle.pqc.c.a.h:
    int numRows -> a
    int numColumns -> b
    int getNumRows() -> g
    int getNumColumns() -> h
org.spongycastle.pqc.math.linearalgebra.Permutation -> org.spongycastle.pqc.c.a.i:
    int[] perm -> a
    byte[] getEncoded() -> a
    int[] getVector() -> b
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM -> org.spongycastle.pqc.c.a.j:
    org.spongycastle.pqc.math.linearalgebra.GF2mField field -> a
    int degree -> b
    int[] coefficients -> c
    int[] createRandomIrreduciblePolynomial(int,java.security.SecureRandom) -> a
    int getDegree() -> a
    int headCoefficient(int[]) -> a
    int getCoefficient(int) -> a
    byte[] getEncoded() -> b
    int evaluateAt(int) -> b
    void addToThis(org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM) -> a
    int[] add(int[],int[]) -> a
    org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM multWithElement(int) -> c
    void multThisWithElement(int) -> d
    int[] multWithElement(int[],int) -> a
    int[] multWithMonomial(int[],int) -> b
    int[] gcd(int[],int[]) -> b
    int[] multiply(int[],int[]) -> c
    boolean isIrreducible(int[]) -> b
    org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM mod(org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM) -> b
    int[] mod(int[],int[]) -> d
    int[] modMultiply(int[],int[],int[]) -> a
    boolean equals(java.lang.Object) -> equals
    boolean isEqual(int[],int[]) -> e
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void computeDegree() -> c
    int computeDegree(int[]) -> c
    int[] normalForm(int[]) -> d
org.spongycastle.pqc.math.linearalgebra.PolynomialRingGF2 -> org.spongycastle.pqc.c.a.k:
    int modMultiply(int,int,int) -> a
    int degree(int) -> a
    int remainder(int,int) -> a
    int gcd(int,int) -> b
    boolean isIrreducible(int) -> b
    int getIrreduciblePolynomial(int) -> c
org.spongycastle.pqc.math.linearalgebra.PolynomialRingGF2m -> org.spongycastle.pqc.c.a.l:
    org.spongycastle.pqc.math.linearalgebra.GF2mField field -> c
    org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM p -> d
    org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM[] sqMatrix -> a
    org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM[] sqRootMatrix -> b
    org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM[] getSquareRootMatrix() -> a
    void computeSquaringMatrix() -> b
    void computeSquareRootMatrix() -> c
    void swapColumns(org.spongycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM[],int,int) -> a
org.spongycastle.pqc.math.linearalgebra.RandUtils -> org.spongycastle.pqc.c.a.m:
    int nextInt(java.security.SecureRandom,int) -> a
org.spongycastle.tsp.TSPException -> org.spongycastle.b.a:
    java.lang.Throwable underlyingException -> a
    java.lang.Throwable getCause() -> getCause
org.spongycastle.tsp.TSPValidationException -> org.spongycastle.b.b:
    int failureCode -> b
org.spongycastle.tsp.TimeStampRequest -> org.spongycastle.b.c:
    java.util.Set EMPTY_SET -> a
    org.spongycastle.asn1.tsp.TimeStampReq req -> b
    org.spongycastle.asn1.x509.Extensions extensions -> c
    org.spongycastle.asn1.ASN1ObjectIdentifier getMessageImprintAlgOID() -> a
    byte[] getMessageImprintDigest() -> b
    org.spongycastle.asn1.ASN1ObjectIdentifier getReqPolicy() -> c
    java.math.BigInteger getNonce() -> d
    byte[] getEncoded() -> e
org.spongycastle.tsp.TimeStampRequestGenerator -> org.spongycastle.b.d:
    org.spongycastle.asn1.ASN1ObjectIdentifier reqPolicy -> a
    org.spongycastle.asn1.ASN1Boolean certReq -> b
    org.spongycastle.asn1.x509.ExtensionsGenerator extGenerator -> c
    void setReqPolicy(org.spongycastle.asn1.ASN1ObjectIdentifier) -> a
    void setCertReq(boolean) -> a
    void addExtension(org.spongycastle.asn1.ASN1ObjectIdentifier,boolean,byte[]) -> a
    org.spongycastle.tsp.TimeStampRequest generate(java.lang.String,byte[],java.math.BigInteger) -> a
    org.spongycastle.tsp.TimeStampRequest generate(org.spongycastle.asn1.ASN1ObjectIdentifier,byte[],java.math.BigInteger) -> a
org.spongycastle.tsp.TimeStampResponse -> org.spongycastle.b.e:
    org.spongycastle.asn1.tsp.TimeStampResp resp -> a
    org.spongycastle.tsp.TimeStampToken timeStampToken -> b
    org.spongycastle.asn1.tsp.TimeStampResp readTimeStampResp(java.io.InputStream) -> a
    int getStatus() -> a
    org.spongycastle.asn1.cmp.PKIFailureInfo getFailInfo() -> b
    org.spongycastle.tsp.TimeStampToken getTimeStampToken() -> c
    void validate(org.spongycastle.tsp.TimeStampRequest) -> a
org.spongycastle.tsp.TimeStampToken -> org.spongycastle.b.f:
    org.spongycastle.cms.CMSSignedData tsToken -> a
    org.spongycastle.cms.SignerInformation tsaSignerInfo -> b
    org.spongycastle.tsp.TimeStampTokenInfo tstInfo -> c
    org.spongycastle.tsp.TimeStampToken$CertID certID -> d
    org.spongycastle.cms.CMSSignedData getSignedData(org.spongycastle.asn1.cms.ContentInfo) -> a
    org.spongycastle.tsp.TimeStampTokenInfo getTimeStampInfo() -> a
    org.spongycastle.asn1.cms.AttributeTable getSignedAttributes() -> b
    byte[] getEncoded() -> c
org.spongycastle.tsp.TimeStampToken$CertID -> org.spongycastle.b.g:
    org.spongycastle.asn1.ess.ESSCertID certID -> b
    org.spongycastle.asn1.ess.ESSCertIDv2 certIDv2 -> c
    org.spongycastle.tsp.TimeStampToken this$0 -> a
org.spongycastle.tsp.TimeStampTokenInfo -> org.spongycastle.b.h:
    org.spongycastle.asn1.tsp.TSTInfo tstInfo -> a
    java.util.Date genTime -> b
    org.spongycastle.asn1.ASN1ObjectIdentifier getPolicy() -> a
    java.math.BigInteger getNonce() -> b
    org.spongycastle.asn1.ASN1ObjectIdentifier getMessageImprintAlgOID() -> c
    byte[] getMessageImprintDigest() -> d
org.spongycastle.util.Arrays -> org.spongycastle.util.a:
    boolean areEqual(char[],char[]) -> a
    boolean areEqual(byte[],byte[]) -> a
    boolean constantTimeAreEqual(byte[],byte[]) -> b
    boolean areEqual(int[],int[]) -> a
    void fill(byte[],byte) -> a
    void fill(long[],long) -> a
    void fill(short[],short) -> a
    int hashCode(byte[]) -> a
    int hashCode(char[]) -> a
    int hashCode(int[]) -> a
    int hashCode(int[],int,int) -> a
    int hashCode(long[],int,int) -> a
    int hashCode(short[][][]) -> a
    int hashCode(short[][]) -> a
    int hashCode(short[]) -> a
    byte[] clone(byte[]) -> b
    byte[] clone(byte[],byte[]) -> c
    int[] clone(int[]) -> b
    long[] clone(long[]) -> a
    long[] clone(long[],long[]) -> a
    short[] clone(short[]) -> b
    int[] copyOfRange(int[],int,int) -> b
    int getLength(int,int) -> a
    byte[] reverse(byte[]) -> c
    int[] reverse(int[]) -> c
org.spongycastle.util.Arrays$Iterator -> org.spongycastle.util.b:
    java.lang.Object[] dataArray -> a
    int position -> b
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
org.spongycastle.util.BigIntegers -> org.spongycastle.util.c:
    java.math.BigInteger ZERO -> a
    byte[] asUnsignedByteArray(java.math.BigInteger) -> a
    byte[] asUnsignedByteArray(int,java.math.BigInteger) -> a
    java.math.BigInteger createRandomInRange(java.math.BigInteger,java.math.BigInteger,java.security.SecureRandom) -> a
    java.math.BigInteger fromUnsignedByteArray(byte[],int,int) -> a
org.spongycastle.util.CollectionStore -> org.spongycastle.util.d:
    java.util.Collection _local -> a
    java.util.Collection getMatches(org.spongycastle.util.Selector) -> a
    java.util.Iterator iterator() -> iterator
org.spongycastle.util.Integers -> org.spongycastle.util.e:
    int rotateLeft(int,int) -> a
    java.lang.Integer valueOf(int) -> a
org.spongycastle.util.Iterable -> org.spongycastle.util.f:
org.spongycastle.util.Memoable -> org.spongycastle.util.g:
    org.spongycastle.util.Memoable copy() -> e
    void reset(org.spongycastle.util.Memoable) -> a
org.spongycastle.util.MemoableResetException -> org.spongycastle.util.h:
org.spongycastle.util.Pack -> org.spongycastle.util.i:
    int bigEndianToInt(byte[],int) -> a
    byte[] intToBigEndian(int) -> a
    void intToBigEndian(int,byte[],int) -> a
    long bigEndianToLong(byte[],int) -> b
    void longToBigEndian(long,byte[],int) -> a
    int littleEndianToInt(byte[],int) -> c
    void intToLittleEndian(int,byte[],int) -> b
    void longToLittleEndian(long,byte[],int) -> b
org.spongycastle.util.Properties -> org.spongycastle.util.j:
org.spongycastle.util.Properties$1 -> org.spongycastle.util.Properties$1:
    java.lang.String val$propertyName -> a
    java.lang.Object run() -> run
org.spongycastle.util.Selector -> org.spongycastle.util.k:
    boolean match(java.lang.Object) -> a
    java.lang.Object clone() -> clone
org.spongycastle.util.Store -> org.spongycastle.util.l:
    java.util.Collection getMatches(org.spongycastle.util.Selector) -> a
org.spongycastle.util.StoreException -> org.spongycastle.util.m:
    java.lang.Throwable _e -> a
    java.lang.Throwable getCause() -> getCause
org.spongycastle.util.Strings -> org.spongycastle.util.n:
    java.lang.String LINE_SEPARATOR -> a
    java.lang.String fromUTF8ByteArray(byte[]) -> a
    byte[] toUTF8ByteArray(java.lang.String) -> a
    byte[] toUTF8ByteArray(char[]) -> a
    void toUTF8ByteArray(char[],java.io.OutputStream) -> a
    java.lang.String toUpperCase(java.lang.String) -> b
    java.lang.String toLowerCase(java.lang.String) -> c
    byte[] toByteArray(java.lang.String) -> d
    java.lang.String fromByteArray(byte[]) -> b
    char[] asCharArray(byte[]) -> c
    java.lang.String lineSeparator() -> a
org.spongycastle.util.Strings$1 -> org.spongycastle.util.Strings$1:
    java.lang.String run() -> a
    java.lang.Object run() -> run
org.spongycastle.util.encoders.Base64 -> org.spongycastle.util.a.a:
    org.spongycastle.util.encoders.Encoder encoder -> a
    byte[] encode(byte[]) -> a
    byte[] encode(byte[],int,int) -> a
    byte[] decode(java.lang.String) -> a
org.spongycastle.util.encoders.Base64Encoder -> org.spongycastle.util.a.b:
    byte[] encodingTable -> a
    byte padding -> b
    byte[] decodingTable -> c
    void initialiseDecodingTable() -> a
    int encode(byte[],int,int,java.io.OutputStream) -> a
    boolean ignore(char) -> a
    int decode(java.lang.String,java.io.OutputStream) -> a
    int decodeLastBlock(java.io.OutputStream,char,char,char,char) -> a
    int nextI(java.lang.String,int,int) -> a
org.spongycastle.util.encoders.DecoderException -> org.spongycastle.util.a.c:
    java.lang.Throwable cause -> a
    java.lang.Throwable getCause() -> getCause
org.spongycastle.util.encoders.Encoder -> org.spongycastle.util.a.d:
    int encode(byte[],int,int,java.io.OutputStream) -> a
    int decode(java.lang.String,java.io.OutputStream) -> a
org.spongycastle.util.encoders.EncoderException -> org.spongycastle.util.a.e:
    java.lang.Throwable cause -> a
    java.lang.Throwable getCause() -> getCause
org.spongycastle.util.encoders.Hex -> org.spongycastle.util.a.f:
    org.spongycastle.util.encoders.Encoder encoder -> a
    byte[] encode(byte[]) -> a
    byte[] encode(byte[],int,int) -> a
    byte[] decode(java.lang.String) -> a
org.spongycastle.util.encoders.HexEncoder -> org.spongycastle.util.a.g:
    byte[] encodingTable -> a
    byte[] decodingTable -> b
    void initialiseDecodingTable() -> a
    int encode(byte[],int,int,java.io.OutputStream) -> a
    boolean ignore(char) -> a
    int decode(java.lang.String,java.io.OutputStream) -> a
org.spongycastle.util.io.Streams -> org.spongycastle.util.b.a:
    int BUFFER_SIZE -> a
    byte[] readAll(java.io.InputStream) -> a
    int readFully(java.io.InputStream,byte[]) -> a
    int readFully(java.io.InputStream,byte[],int,int) -> a
    void pipeAll(java.io.InputStream,java.io.OutputStream) -> a
org.spongycastle.util.io.TeeInputStream -> org.spongycastle.util.b.b:
    java.io.InputStream input -> a
    java.io.OutputStream output -> b
    int read(byte[]) -> read
    int read(byte[],int,int) -> read
    int read() -> read
    void close() -> close
org.spongycastle.util.io.TeeOutputStream -> org.spongycastle.util.b.c:
    java.io.OutputStream output1 -> a
    java.io.OutputStream output2 -> b
    void write(byte[]) -> write
    void write(byte[],int,int) -> write
    void write(int) -> write
    void flush() -> flush
    void close() -> close
org.spongycastle.util.io.pem.PemGenerationException -> org.spongycastle.util.b.a.a:
    java.lang.Throwable cause -> a
    java.lang.Throwable getCause() -> getCause
org.spongycastle.util.io.pem.PemHeader -> org.spongycastle.util.b.a.b:
    java.lang.String name -> a
    java.lang.String value -> b
    java.lang.String getName() -> a
    java.lang.String getValue() -> b
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    int getHashCode(java.lang.String) -> a
    boolean isEqual(java.lang.String,java.lang.String) -> a
org.spongycastle.util.io.pem.PemObject -> org.spongycastle.util.b.a.c:
    java.util.List EMPTY_LIST -> a
    java.lang.String type -> b
    java.util.List headers -> c
    byte[] content -> d
    java.lang.String getType() -> a
    java.util.List getHeaders() -> b
    byte[] getContent() -> c
    org.spongycastle.util.io.pem.PemObject generate() -> d
org.spongycastle.util.io.pem.PemObjectGenerator -> org.spongycastle.util.b.a.d:
    org.spongycastle.util.io.pem.PemObject generate() -> d
org.spongycastle.util.io.pem.PemWriter -> org.spongycastle.util.b.a.e:
    int nlLength -> a
    char[] buf -> b
    void writeObject(org.spongycastle.util.io.pem.PemObjectGenerator) -> a
    void writeEncoded(byte[]) -> a
    void writePreEncapsulationBoundary(java.lang.String) -> a
    void writePostEncapsulationBoundary(java.lang.String) -> b
org.spongycastle.util.test.FixedSecureRandom -> org.spongycastle.util.test.FixedSecureRandom:
    byte[] _data -> a
    int _index -> b
    int _intPad -> c
    void nextBytes(byte[]) -> nextBytes
    int nextInt() -> nextInt
    long nextLong() -> nextLong
    int nextValue() -> a
org.spongycastle.x509.ExtCertificateEncodingException -> org.spongycastle.x509.ExtCertificateEncodingException:
    java.lang.Throwable cause -> a
    java.lang.Throwable getCause() -> getCause
org.spongycastle.x509.X509StreamParserSpi -> org.spongycastle.x509.a:
org.spongycastle.x509.X509V2CRLGenerator -> org.spongycastle.x509.X509V2CRLGenerator:
org.spongycastle.x509.X509V2CRLGenerator$ExtCRLException -> org.spongycastle.x509.X509V2CRLGenerator$ExtCRLException:
    java.lang.Throwable cause -> a
    java.lang.Throwable getCause() -> getCause
org.spongycastle.x509.util.StreamParsingException -> org.spongycastle.x509.a.a:
    java.lang.Throwable _e -> a
    java.lang.Throwable getCause() -> getCause
sun.security.mscapi.Key -> sun.security.mscapi.Key:
    long hCryptProv -> a
    long hCryptKey -> b
    int keyLength -> c
    void finalize() -> finalize
    void cleanUp(long,long) -> cleanUp
    int bitLength() -> a
    long getHCryptKey() -> b
    long getHCryptProvider() -> c
    java.lang.String getFormat() -> getFormat
    byte[] getEncoded() -> getEncoded
    java.lang.String getContainerName(long) -> getContainerName
    java.lang.String getKeyType(long) -> getKeyType
sun.security.mscapi.KeyStore -> sun.security.mscapi.KeyStore:
    java.security.cert.CertificateFactory certificateFactory -> a
    boolean keyStoreCompatibilityMode -> b
    java.util.Collection entries -> c
    java.lang.String storeName -> d
    java.security.Key engineGetKey(java.lang.String,char[]) -> engineGetKey
    java.security.cert.Certificate[] engineGetCertificateChain(java.lang.String) -> engineGetCertificateChain
    java.security.cert.Certificate engineGetCertificate(java.lang.String) -> engineGetCertificate
    java.util.Date engineGetCreationDate(java.lang.String) -> engineGetCreationDate
    void engineSetKeyEntry(java.lang.String,java.security.Key,char[],java.security.cert.Certificate[]) -> engineSetKeyEntry
    void engineSetKeyEntry(java.lang.String,byte[],java.security.cert.Certificate[]) -> engineSetKeyEntry
    void engineSetCertificateEntry(java.lang.String,java.security.cert.Certificate) -> engineSetCertificateEntry
    void engineDeleteEntry(java.lang.String) -> engineDeleteEntry
    java.util.Enumeration engineAliases() -> engineAliases
    boolean engineContainsAlias(java.lang.String) -> engineContainsAlias
    int engineSize() -> engineSize
    boolean engineIsKeyEntry(java.lang.String) -> engineIsKeyEntry
    boolean engineIsCertificateEntry(java.lang.String) -> engineIsCertificateEntry
    java.lang.String engineGetCertificateAlias(java.security.cert.Certificate) -> engineGetCertificateAlias
    void engineStore(java.io.OutputStream,char[]) -> engineStore
    void engineLoad(java.io.InputStream,char[]) -> engineLoad
    java.lang.String getName() -> a
    void loadKeysOrCertificateChains(java.lang.String,java.util.Collection) -> loadKeysOrCertificateChains
    void storeCertificate(java.lang.String,java.lang.String,byte[],int,long,long) -> storeCertificate
    void removeCertificate(java.lang.String,java.lang.String,byte[],int) -> removeCertificate
    void destroyKeyContainer(java.lang.String) -> destroyKeyContainer
    byte[] generatePrivateKeyBlob(int,byte[],byte[],byte[],byte[],byte[],byte[],byte[],byte[]) -> generatePrivateKeyBlob
    sun.security.mscapi.RSAPrivateKey storePrivateKey(byte[],java.lang.String,int) -> storePrivateKey
    byte[] access$0(sun.security.mscapi.KeyStore,int,byte[],byte[],byte[],byte[],byte[],byte[],byte[],byte[]) -> a
    sun.security.mscapi.RSAPrivateKey access$1(sun.security.mscapi.KeyStore,byte[],java.lang.String,int) -> a
    java.lang.String access$2(sun.security.mscapi.KeyStore) -> a
    void access$3(sun.security.mscapi.KeyStore,java.lang.String,java.lang.String,byte[],int,long,long) -> a
sun.security.mscapi.KeyStore$1 -> sun.security.mscapi.a:
    sun.security.mscapi.KeyStore this$0 -> a
    java.util.Iterator val$iter -> b
    boolean hasMoreElements() -> hasMoreElements
    java.lang.String nextElement() -> a
    java.lang.Object nextElement() -> nextElement
sun.security.mscapi.KeyStore$KeyEntry -> sun.security.mscapi.b:
    sun.security.mscapi.Key privateKey -> b
    java.security.cert.X509Certificate[] certChain -> c
    java.lang.String alias -> d
    sun.security.mscapi.KeyStore this$0 -> a
    java.lang.String getAlias() -> a
    void setAlias(java.lang.String) -> a
    sun.security.mscapi.Key getPrivateKey() -> b
    void setPrivateKey(java.security.interfaces.RSAPrivateCrtKey) -> a
    java.security.cert.X509Certificate[] getCertificateChain() -> c
    void setCertificateChain(java.security.cert.X509Certificate[]) -> a
    java.security.cert.X509Certificate[] access$0(sun.security.mscapi.KeyStore$KeyEntry) -> a
sun.security.mscapi.KeyStore$MY -> sun.security.mscapi.KeyStore$MY:
sun.security.mscapi.KeyStore$ROOT -> sun.security.mscapi.KeyStore$ROOT:
sun.security.mscapi.KeyStoreAddressBook -> sun.security.mscapi.KeyStoreAddressBook:
    java.util.Collection entries -> a
    java.lang.String storeName -> b
    java.lang.reflect.Method loadKeysOrCertificateChains -> c
    sun.security.mscapi.KeyStore$MY nativeWrapper -> d
    java.security.Key engineGetKey(java.lang.String,char[]) -> engineGetKey
    java.security.cert.Certificate[] engineGetCertificateChain(java.lang.String) -> engineGetCertificateChain
    java.security.cert.Certificate engineGetCertificate(java.lang.String) -> engineGetCertificate
    java.util.Date engineGetCreationDate(java.lang.String) -> engineGetCreationDate
    void engineSetKeyEntry(java.lang.String,java.security.Key,char[],java.security.cert.Certificate[]) -> engineSetKeyEntry
    void engineSetKeyEntry(java.lang.String,byte[],java.security.cert.Certificate[]) -> engineSetKeyEntry
    void engineSetCertificateEntry(java.lang.String,java.security.cert.Certificate) -> engineSetCertificateEntry
    void engineDeleteEntry(java.lang.String) -> engineDeleteEntry
    java.util.Enumeration engineAliases() -> engineAliases
    boolean engineContainsAlias(java.lang.String) -> engineContainsAlias
    int engineSize() -> engineSize
    boolean engineIsKeyEntry(java.lang.String) -> engineIsKeyEntry
    boolean engineIsCertificateEntry(java.lang.String) -> engineIsCertificateEntry
    java.lang.String engineGetCertificateAlias(java.security.cert.Certificate) -> engineGetCertificateAlias
    void engineStore(java.io.OutputStream,char[]) -> engineStore
    void engineLoad(java.io.InputStream,char[]) -> engineLoad
    java.lang.String getName() -> a
    void loadKeysOrCertificateChains(java.lang.String,java.util.Collection) -> a
sun.security.mscapi.KeyStoreAddressBook$1 -> sun.security.mscapi.c:
    java.util.Iterator val$iter -> a
    sun.security.mscapi.KeyStoreAddressBook this$0 -> b
    boolean hasMoreElements() -> hasMoreElements
    java.lang.String nextElement() -> a
    java.lang.Object nextElement() -> nextElement
sun.security.mscapi.KeyStoreAddressBook$ADDRESSBOOK -> sun.security.mscapi.KeyStoreAddressBook$ADDRESSBOOK:
sun.security.mscapi.KeyStoreAddressBook$CA -> sun.security.mscapi.KeyStoreAddressBook$CA:
sun.security.mscapi.KeyStoreAddressBook$KeyEntry -> sun.security.mscapi.d:
    java.security.cert.X509Certificate[] certChain -> a
    java.lang.String alias -> b
    java.security.cert.X509Certificate[] getCertChain() -> a
    java.lang.String getAlias() -> b
sun.security.mscapi.PRNG -> sun.security.mscapi.PRNG:
    byte[] generateSeed(int,byte[]) -> generateSeed
    void engineSetSeed(byte[]) -> engineSetSeed
    void engineNextBytes(byte[]) -> engineNextBytes
    byte[] engineGenerateSeed(int) -> engineGenerateSeed
sun.security.mscapi.RSAKeyPair -> sun.security.mscapi.e:
    sun.security.mscapi.RSAPrivateKey privateKey -> a
    sun.security.mscapi.RSAPublicKey publicKey -> b
    sun.security.mscapi.RSAPrivateKey getPrivate() -> a
    sun.security.mscapi.RSAPublicKey getPublic() -> b
sun.security.mscapi.RSAKeyPairGenerator -> sun.security.mscapi.RSAKeyPairGenerator:
    int keySize -> a
    void initialize(int,java.security.SecureRandom) -> initialize
    void initialize(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom) -> initialize
    java.security.KeyPair generateKeyPair() -> generateKeyPair
    sun.security.mscapi.RSAKeyPair generateRSAKeyPair(int,java.lang.String) -> generateRSAKeyPair
sun.security.mscapi.RSAPrivateKey -> sun.security.mscapi.RSAPrivateKey:
    java.lang.String getAlgorithm() -> getAlgorithm
    java.lang.String toString() -> toString
sun.security.mscapi.RSAPublicKey -> sun.security.mscapi.RSAPublicKey:
    byte[] publicKeyBlob -> d
    byte[] encoding -> e
    java.math.BigInteger modulus -> f
    java.math.BigInteger exponent -> g
    java.lang.String getAlgorithm() -> getAlgorithm
    java.lang.String toString() -> toString
    java.math.BigInteger getPublicExponent() -> getPublicExponent
    java.math.BigInteger getModulus() -> getModulus
    java.lang.String getFormat() -> getFormat
    byte[] getEncoded() -> getEncoded
    byte[] getPublicKeyBlob(long) -> getPublicKeyBlob
    byte[] getExponent(byte[]) -> getExponent
    byte[] getModulus(byte[]) -> getModulus
sun.security.mscapi.RSASignature -> sun.security.mscapi.RSASignature:
    java.security.MessageDigest messageDigest -> a
    java.lang.String messageDigestAlgorithm -> b
    boolean needsReset -> c
    sun.security.mscapi.Key privateKey -> d
    sun.security.mscapi.Key publicKey -> e
    void engineInitVerify(java.security.PublicKey) -> engineInitVerify
    void engineInitSign(java.security.PrivateKey) -> engineInitSign
    void resetDigest() -> a
    byte[] getDigestValue() -> b
    void setDigestName(java.lang.String) -> a
    void engineUpdate(byte) -> engineUpdate
    void engineUpdate(byte[],int,int) -> engineUpdate
    void engineUpdate(java.nio.ByteBuffer) -> engineUpdate
    byte[] engineSign() -> engineSign
    byte[] convertEndianArray(byte[]) -> a
    byte[] signHash(boolean,byte[],int,java.lang.String,long,long) -> signHash
    boolean verifySignedHash(byte[],int,java.lang.String,byte[],int,long,long) -> verifySignedHash
    boolean engineVerify(byte[]) -> engineVerify
    void engineSetParameter(java.lang.String,java.lang.Object) -> engineSetParameter
    java.lang.Object engineGetParameter(java.lang.String) -> engineGetParameter
    byte[] generatePublicKeyBlob(int,byte[],byte[]) -> generatePublicKeyBlob
    sun.security.mscapi.RSAPublicKey importPublicKey(byte[],int) -> importPublicKey
sun.security.mscapi.RSASignature$MD2 -> sun.security.mscapi.RSASignature$MD2:
sun.security.mscapi.RSASignature$MD5 -> sun.security.mscapi.RSASignature$MD5:
sun.security.mscapi.RSASignature$Raw -> sun.security.mscapi.RSASignature$Raw:
    byte[] precomputedDigest -> a
    int offset -> b
    void engineUpdate(byte) -> engineUpdate
    void engineUpdate(byte[],int,int) -> engineUpdate
    void engineUpdate(java.nio.ByteBuffer) -> engineUpdate
    void resetDigest() -> a
    byte[] getDigestValue() -> b
sun.security.mscapi.RSASignature$SHA1 -> sun.security.mscapi.RSASignature$SHA1:
sun.security.mscapi.RSASignature$SHA256 -> sun.security.mscapi.RSASignature$SHA256:
sun.security.mscapi.RSASignature$SHA384 -> sun.security.mscapi.RSASignature$SHA384:
sun.security.mscapi.RSASignature$SHA512 -> sun.security.mscapi.RSASignature$SHA512:
sun.security.mscapi.SunMSCAPI -> sun.security.mscapi.SunMSCAPI:
sun.security.mscapi.SunMSCAPI$1 -> sun.security.mscapi.SunMSCAPI$1:
    java.lang.Void run() -> a
    java.lang.Object run() -> run
